
aleph.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80010000  80010000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80012008  80012008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000f6dc  80012008  80012008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80021800  80021800  00011c00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000019a8  80021a00  80021a00  00011e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         0000064c  00000008  800233a8  00013808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  00000654  800239f4  00013e54  2**0
                  ALLOC
  8 .bss          0000ca80  00000658  00000658  00000000  2**2
                  ALLOC
  9 .heap         00001f28  0000d0d8  0000d0d8  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  00013e54  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00001820  00000000  00000000  00013e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 000034ee  00000000  00000000  000156a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   000370e4  00000000  00000000  00018b92  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00007b8b  00000000  00000000  0004fc76  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002cedb  00000000  00000000  00057801  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000434c  00000000  00000000  000846dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000a878  00000000  00000000  00088a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000f43a  00000000  00000000  000932a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 02f04088  00000000  00000000  000a26da  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .flash_nvram  00022648  80040000  800239f4  00014000  2**2
                  ALLOC
 22 .debug_ranges 00007b50  00000000  00000000  02fa6762  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80010000 <_trampoline>:
80010000:	e0 8f 10 00 	bral	80012000 <program_start>
	...

80012000 <program_start>:
80012000:	fe ff 00 04 	ld.w	pc,pc[4]
80012004:	80 02       	ld.sh	r2,r0[0x0]
80012006:	0a 1c       	sub	r12,r5

Disassembly of section .text:

80012008 <smc_get_cs_size>:

  gpio_enable_module(SMC_EBI_GPIO_MAP, sizeof(SMC_EBI_GPIO_MAP) / sizeof(SMC_EBI_GPIO_MAP[0]));
}

unsigned char smc_get_cs_size(unsigned char cs)
{
80012008:	e0 68 06 58 	mov	r8,1624
  return smc_tab_cs_size[cs];
}
8001200c:	f0 0c 07 0c 	ld.ub	r12,r8[r12]
80012010:	5e fc       	retal	r12
80012012:	d7 03       	nop

80012014 <smc_init>:

static void smc_enable_muxed_pins(void);


void smc_init(unsigned long hsb_hz)
{
80012014:	eb cd 40 c0 	pushm	r6-r7,lr
  // Enable SM mode for CS1 if necessary.
#if UC3C
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR] &= ~(1 << AVR32_EBI_SDRAM_CS);
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR];
#else
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR] &= ~(1 << AVR32_EBI_SDRAM_CS);
80012018:	fe 68 10 00 	mov	r8,-126976
8001201c:	f0 f9 01 24 	ld.w	r9,r8[292]
80012020:	a1 d9       	cbr	r9,0x1
80012022:	f1 49 01 24 	st.w	r8[292],r9
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR];
#endif
  // Setup SMC for NCS1
  SMC_CS_SETUP(1)
80012026:	30 09       	mov	r9,0
#if UC3C
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR] &= ~(1 << AVR32_EBI_SDRAM_CS);
  AVR32_HMATRIXB.sfr[AVR32_EBI_HMATRIX_NR];
#else
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR] &= ~(1 << AVR32_EBI_SDRAM_CS);
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR];
80012028:	f0 f8 01 24 	ld.w	r8,r8[292]
#endif
  // Setup SMC for NCS1
  SMC_CS_SETUP(1)
8001202c:	fe 68 1c 00 	mov	r8,-123904
80012030:	91 49       	st.w	r8[0x10],r9
static void smc_enable_muxed_pins(void);


void smc_init(unsigned long hsb_hz)
{
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
80012032:	ee 79 42 3f 	mov	r9,999999
#else
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR] &= ~(1 << AVR32_EBI_SDRAM_CS);
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR];
#endif
  // Setup SMC for NCS1
  SMC_CS_SETUP(1)
80012036:	e0 6e 4d d3 	mov	lr,19923
8001203a:	ea 1e 10 62 	orh	lr,0x1062
static void smc_enable_muxed_pins(void);


void smc_init(unsigned long hsb_hz)
{
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
8001203e:	f8 09 00 0b 	add	r11,r12,r9
80012042:	e0 69 de 83 	mov	r9,56963
80012046:	ea 19 43 1b 	orh	r9,0x431b
8001204a:	f6 09 06 4a 	mulu.d	r10,r11,r9
8001204e:	b3 8b       	lsr	r11,0x12
#else
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR] &= ~(1 << AVR32_EBI_SDRAM_CS);
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR];
#endif
  // Setup SMC for NCS1
  SMC_CS_SETUP(1)
80012050:	f6 07 10 52 	mul	r7,r11,82
80012054:	ee c7 fc 19 	sub	r7,r7,-999
80012058:	ee 0e 06 46 	mulu.d	r6,r7,lr
8001205c:	0e 99       	mov	r9,r7
8001205e:	e0 67 00 a4 	mov	r7,164
80012062:	a7 89       	lsr	r9,0x6
80012064:	f6 07 02 47 	mul	r7,r11,r7
80012068:	f2 0a 15 10 	lsl	r10,r9,0x10
8001206c:	ee c7 fc 19 	sub	r7,r7,-999
80012070:	f5 e9 10 8c 	or	r12,r10,r9<<0x8
80012074:	ee 0e 06 46 	mulu.d	r6,r7,lr
80012078:	12 4c       	or	r12,r9
8001207a:	0e 9b       	mov	r11,r7
8001207c:	f9 e9 11 8c 	or	r12,r12,r9<<0x18
80012080:	a7 8b       	lsr	r11,0x6
80012082:	91 5c       	st.w	r8[0x14],r12
80012084:	12 3b       	cp.w	r11,r9
80012086:	f6 09 17 20 	movhs	r9,r11
8001208a:	12 4a       	or	r10,r9
8001208c:	e0 69 10 03 	mov	r9,4099
80012090:	91 6a       	st.w	r8[0x18],r10
80012092:	91 79       	st.w	r8[0x1c],r9
80012094:	31 29       	mov	r9,18
80012096:	e0 68 06 58 	mov	r8,1624
8001209a:	32 9b       	mov	r11,41
        {ATPASTE2(EBI_NCS_5,_PIN),ATPASTE2(EBI_NCS_5,_FUNCTION)},
    #endif
#endif
 };

  gpio_enable_module(SMC_EBI_GPIO_MAP, sizeof(SMC_EBI_GPIO_MAP) / sizeof(SMC_EBI_GPIO_MAP[0]));
8001209c:	b0 99       	st.b	r8[0x1],r9
8001209e:	48 3c       	lddpc	r12,800120a8 <smc_init+0x94>
800120a0:	e0 a0 03 8e 	rcall	800127bc <gpio_enable_module>
  #undef NCS_CONTROLLED_WRITE
  #undef NWAIT_MODE
#endif
  // Put the multiplexed MCU pins used for the SM under control of the SMC.
  smc_enable_muxed_pins();
}
800120a4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800120a8:	80 02       	ld.sh	r2,r0[0x0]
800120aa:	1a 00       	add	r0,sp

800120ac <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
800120ac:	fe 68 14 00 	mov	r8,-125952
800120b0:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
800120b2:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
800120b6:	91 09       	st.w	r8[0x0],r9
}
800120b8:	5e fc       	retal	r12

800120ba <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
800120ba:	e0 68 8a 3f 	mov	r8,35391
800120be:	ea 18 01 f7 	orh	r8,0x1f7
800120c2:	10 3c       	cp.w	r12,r8
800120c4:	e0 8b 00 0a 	brhi	800120d8 <flashc_set_bus_freq+0x1e>
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
800120c8:	fe 68 14 00 	mov	r8,-125952
	u_avr32_flashc_fcr.FCR.fws = wait_state;
800120cc:	30 0a       	mov	r10,0
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
800120ce:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
800120d0:	f3 da d0 c1 	bfins	r9,r10,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
800120d4:	91 09       	st.w	r8[0x0],r9
800120d6:	5e fc       	retal	r12
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
800120d8:	fe 68 14 00 	mov	r8,-125952
	u_avr32_flashc_fcr.FCR.fws = wait_state;
800120dc:	30 1a       	mov	r10,1
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
800120de:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
800120e0:	f3 da d0 c1 	bfins	r9,r10,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
800120e4:	91 09       	st.w	r8[0x0],r9
800120e6:	5e fc       	retal	r12

800120e8 <flashc_default_wait_until_ready>:
//! @{


bool flashc_is_ready(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
800120e8:	fe 6a 14 00 	mov	r10,-125952
}


void flashc_default_wait_until_ready(void)
{
	while (!flashc_is_ready());
800120ec:	30 09       	mov	r9,0
//! @{


bool flashc_is_ready(void)
{
	return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
800120ee:	74 28       	ld.w	r8,r10[0x8]
}


void flashc_default_wait_until_ready(void)
{
	while (!flashc_is_ready());
800120f0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800120f4:	f2 08 18 00 	cp.b	r8,r9
800120f8:	cf b0       	breq	800120ee <flashc_default_wait_until_ready+0x6>
}
800120fa:	5e fc       	retal	r12

800120fc <flashc_memcpy>:
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
800120fc:	d4 31       	pushm	r0-r7,lr
800120fe:	20 cd       	sub	sp,48
	Assert( (((uint8_t *)dst >= AVR32_FLASH)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASH + flashc_get_flash_size())))
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;
80012100:	e0 68 ff ff 	mov	r8,65535
80012104:	ea 18 80 7f 	orh	r8,0x807f
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
80012108:	50 1c       	stdsp	sp[0x4],r12
	Assert( (((uint8_t *)dst >= AVR32_FLASH)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASH + flashc_get_flash_size())))
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;
8001210a:	10 3c       	cp.w	r12,r8
8001210c:	5f b1       	srhi	r1
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
8001210e:	50 49       	stdsp	sp[0x10],r9
	Assert( (((uint8_t *)dst >= AVR32_FLASH)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASH + flashc_get_flash_size())))
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;
80012110:	50 31       	stdsp	sp[0xc],r1
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
80012112:	14 97       	mov	r7,r10

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
80012114:	58 0a       	cp.w	r10,0
80012116:	e0 80 01 34 	breq	8001237e <flashc_memcpy+0x282>
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));
8001211a:	30 08       	mov	r8,0
	Union64 flash_dword;
	uint8_t i;
	bool b_user_page;
	unsigned int error_status = 0;
	uint8_t* flash_add;
	uint8_t* dest_add=(uint8_t*)dst;
8001211c:	40 16       	lddsp	r6,sp[0x4]
	const uint8_t* src_buf=(const uint8_t*)src;
8001211e:	16 94       	mov	r4,r11
			|| (((uint8_t *)dst >= AVR32_FLASHC_USER_PAGE)
			&& (((uint8_t *)dst + nbytes) <= (AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE))) );

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));
80012120:	0c 93       	mov	r3,r6
80012122:	e0 61 06 60 	mov	r1,1632
80012126:	e0 13 fe 00 	andl	r3,0xfe00
void flashc_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
8001212a:	fe 62 14 00 	mov	r2,-125952
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
8001212e:	10 95       	mov	r5,r8

void flashc_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80012130:	30 80       	mov	r0,8
80012132:	60 09       	ld.w	r9,r0[0x0]
80012134:	50 08       	stdsp	sp[0x0],r8
80012136:	5d 19       	icall	r9
80012138:	64 19       	ld.w	r9,r2[0x4]
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
8001213a:	30 3c       	mov	r12,3
	u_avr32_flashc_fcmd.FCMD.cmd = command;
8001213c:	f3 dc d0 06 	bfins	r9,r12,0x0,0x6
80012140:	50 b9       	stdsp	sp[0x2c],r9
80012142:	3a 5a       	mov	r10,-91
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80012144:	fb 6a 00 2c 	st.b	sp[44],r10
80012148:	40 b9       	lddsp	r9,sp[0x2c]
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
8001214a:	85 19       	st.w	r2[0x4],r9
8001214c:	64 29       	ld.w	r9,r2[0x8]
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
8001214e:	e2 19 00 0c 	andl	r9,0xc,COH
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
80012152:	83 09       	st.w	r1[0x0],r9
80012154:	60 09       	ld.w	r9,r0[0x0]
	flashc_wait_until_ready();
80012156:	5d 19       	icall	r9
80012158:	62 0a       	ld.w	r10,r1[0x0]
	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;
8001215a:	40 08       	lddsp	r8,sp[0x0]
8001215c:	14 48       	or	r8,r10
8001215e:	06 99       	mov	r9,r3
80012160:	50 28       	stdsp	sp[0x8],r8
80012162:	e6 cb fd ff 	sub	r11,r3,-513
	// Return the initial destination pointer as the standard memset function does.
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
80012166:	e6 c8 ff ff 	sub	r8,r3,-1
	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;
8001216a:	02 9e       	mov	lr,r1
	// Return the initial destination pointer as the standard memset function does.
	return dst;
}


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
8001216c:	c3 e8       	rjmp	800121e8 <flashc_memcpy+0xec>
8001216e:	0c 38       	cp.w	r8,r6
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
80012170:	5f 0c       	sreq	r12
80012172:	14 6c       	and	r12,r10
80012174:	ea 0c 18 00 	cp.b	r12,r5
80012178:	c5 01       	brne	80012218 <flashc_memcpy+0x11c>
8001217a:	f0 c3 ff ff 	sub	r3,r8,-1
8001217e:	06 36       	cp.w	r6,r3
80012180:	5f 0c       	sreq	r12
80012182:	14 6c       	and	r12,r10
80012184:	ea 0c 18 00 	cp.b	r12,r5
80012188:	c5 61       	brne	80012234 <flashc_memcpy+0x138>
8001218a:	2f f3       	sub	r3,-1
8001218c:	06 36       	cp.w	r6,r3
8001218e:	5f 0c       	sreq	r12
80012190:	14 6c       	and	r12,r10
80012192:	ea 0c 18 00 	cp.b	r12,r5
80012196:	c5 c1       	brne	8001224e <flashc_memcpy+0x152>
80012198:	2f f3       	sub	r3,-1
8001219a:	06 36       	cp.w	r6,r3
8001219c:	5f 0c       	sreq	r12
8001219e:	14 6c       	and	r12,r10
800121a0:	ea 0c 18 00 	cp.b	r12,r5
800121a4:	c6 21       	brne	80012268 <flashc_memcpy+0x16c>
800121a6:	2f f3       	sub	r3,-1
800121a8:	06 36       	cp.w	r6,r3
800121aa:	5f 0c       	sreq	r12
800121ac:	14 6c       	and	r12,r10
800121ae:	ea 0c 18 00 	cp.b	r12,r5
800121b2:	c6 81       	brne	80012282 <flashc_memcpy+0x186>
800121b4:	2f f3       	sub	r3,-1
800121b6:	06 36       	cp.w	r6,r3
800121b8:	5f 0c       	sreq	r12
800121ba:	14 6c       	and	r12,r10
800121bc:	ea 0c 18 00 	cp.b	r12,r5
800121c0:	c6 e1       	brne	8001229c <flashc_memcpy+0x1a0>
800121c2:	2f f3       	sub	r3,-1
800121c4:	06 36       	cp.w	r6,r3
800121c6:	5f 0c       	sreq	r12
800121c8:	f9 ea 00 0a 	and	r10,r12,r10
800121cc:	ea 0a 18 00 	cp.b	r10,r5
800121d0:	c7 41       	brne	800122b8 <flashc_memcpy+0x1bc>
800121d2:	2f f3       	sub	r3,-1
800121d4:	e6 ca 00 08 	sub	r10,r3,8
				}
				flash_add++;
			}

			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
800121d8:	fa e0 00 14 	ld.d	r0,sp[20]
800121dc:	f4 e1 00 00 	st.d	r10[0],r0
800121e0:	2f 89       	sub	r9,-8
800121e2:	2f 88       	sub	r8,-8
800121e4:	16 38       	cp.w	r8,r11
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Loop in the page
		for (page_pos=0; page_pos<AVR32_FLASHC_PAGE_SIZE; page_pos+=sizeof(uint64_t) ) {
800121e6:	c7 10       	breq	800122c8 <flashc_memcpy+0x1cc>
800121e8:	f2 e0 00 00 	ld.d	r0,r9[0]
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;
800121ec:	fa e1 00 14 	st.d	sp[20],r0
800121f0:	58 07       	cp.w	r7,0

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
800121f2:	5f 1a       	srne	r10
800121f4:	12 36       	cp.w	r6,r9
800121f6:	5f 0c       	sreq	r12
800121f8:	f5 ec 00 0c 	and	r12,r10,r12
800121fc:	ea 0c 18 00 	cp.b	r12,r5
80012200:	cb 70       	breq	8001216e <flashc_memcpy+0x72>
80012202:	09 3c       	ld.ub	r12,r4++
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
80012204:	fb 6c 00 14 	st.b	sp[20],r12
80012208:	20 17       	sub	r7,1
					dest_add++;
					nbytes--;
8001220a:	30 1c       	mov	r12,1
8001220c:	5f 1a       	srne	r10
8001220e:	10 96       	mov	r6,r8

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
80012210:	14 6c       	and	r12,r10
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
80012212:	ea 0c 18 00 	cp.b	r12,r5
80012216:	cb 20       	breq	8001217a <flashc_memcpy+0x7e>
80012218:	09 3c       	ld.ub	r12,r4++
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
8001221a:	fb 6c 00 15 	st.b	sp[21],r12
8001221e:	20 17       	sub	r7,1
					dest_add++;
					nbytes--;
80012220:	f0 c6 ff ff 	sub	r6,r8,-1
			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
					dest_add++;
80012224:	58 07       	cp.w	r7,0
					nbytes--;
80012226:	5f 1a       	srne	r10
80012228:	30 1c       	mov	r12,1
8001222a:	0c 93       	mov	r3,r6
8001222c:	14 6c       	and	r12,r10
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
8001222e:	ea 0c 18 00 	cp.b	r12,r5
80012232:	ca c0       	breq	8001218a <flashc_memcpy+0x8e>
80012234:	09 3c       	ld.ub	r12,r4++
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
80012236:	fb 6c 00 16 	st.b	sp[22],r12
8001223a:	e6 c6 ff ff 	sub	r6,r3,-1
					dest_add++;
8001223e:	20 17       	sub	r7,1
					nbytes--;
80012240:	30 1c       	mov	r12,1
80012242:	5f 1a       	srne	r10
80012244:	0c 93       	mov	r3,r6
80012246:	14 6c       	and	r12,r10
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
80012248:	ea 0c 18 00 	cp.b	r12,r5
8001224c:	ca 60       	breq	80012198 <flashc_memcpy+0x9c>
8001224e:	09 3c       	ld.ub	r12,r4++
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
80012250:	fb 6c 00 17 	st.b	sp[23],r12
80012254:	e6 c6 ff ff 	sub	r6,r3,-1
					dest_add++;
80012258:	20 17       	sub	r7,1
					nbytes--;
8001225a:	30 1c       	mov	r12,1
8001225c:	5f 1a       	srne	r10
8001225e:	0c 93       	mov	r3,r6
80012260:	14 6c       	and	r12,r10
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
80012262:	ea 0c 18 00 	cp.b	r12,r5
80012266:	ca 00       	breq	800121a6 <flashc_memcpy+0xaa>
80012268:	09 3c       	ld.ub	r12,r4++
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
8001226a:	fb 6c 00 18 	st.b	sp[24],r12
8001226e:	e6 c6 ff ff 	sub	r6,r3,-1
					dest_add++;
80012272:	20 17       	sub	r7,1
					nbytes--;
80012274:	30 1c       	mov	r12,1
80012276:	5f 1a       	srne	r10
80012278:	0c 93       	mov	r3,r6
8001227a:	14 6c       	and	r12,r10
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
8001227c:	ea 0c 18 00 	cp.b	r12,r5
80012280:	c9 a0       	breq	800121b4 <flashc_memcpy+0xb8>
80012282:	09 3c       	ld.ub	r12,r4++
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
80012284:	fb 6c 00 19 	st.b	sp[25],r12
80012288:	e6 c6 ff ff 	sub	r6,r3,-1
					dest_add++;
8001228c:	20 17       	sub	r7,1
					nbytes--;
8001228e:	30 1c       	mov	r12,1
80012290:	5f 1a       	srne	r10
80012292:	0c 93       	mov	r3,r6
80012294:	14 6c       	and	r12,r10
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
80012296:	ea 0c 18 00 	cp.b	r12,r5
8001229a:	c9 40       	breq	800121c2 <flashc_memcpy+0xc6>
8001229c:	09 3c       	ld.ub	r12,r4++
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
8001229e:	fb 6c 00 1a 	st.b	sp[26],r12
800122a2:	e6 c6 ff ff 	sub	r6,r3,-1
					dest_add++;
800122a6:	20 17       	sub	r7,1
					nbytes--;
800122a8:	30 1c       	mov	r12,1
800122aa:	5f 1a       	srne	r10
800122ac:	0c 93       	mov	r3,r6
800122ae:	f9 ea 00 0a 	and	r10,r12,r10
			// Read the flash double-word buffer
			flash_dword.u64 = *(volatile uint64_t*)flash_add;

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
800122b2:	ea 0a 18 00 	cp.b	r10,r5
800122b6:	c8 e0       	breq	800121d2 <flashc_memcpy+0xd6>
800122b8:	e6 c6 ff ff 	sub	r6,r3,-1
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
					dest_add++;
800122bc:	09 3a       	ld.ub	r10,r4++

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
800122be:	20 17       	sub	r7,1
					dest_add++;
					nbytes--;
800122c0:	fb 6a 00 1b 	st.b	sp[27],r10

			// Update double-word if necessary
			for (i = 0; i < sizeof(uint64_t); i++) {
				if (nbytes && (flash_add == dest_add)) {
					// Update page with data source
					flash_dword.u8[i] = *src_buf++;
800122c4:	0c 93       	mov	r3,r6
					dest_add++;
					nbytes--;
800122c6:	c8 7b       	rjmp	800121d4 <flashc_memcpy+0xd8>
800122c8:	1c 91       	mov	r1,lr
800122ca:	40 40       	lddsp	r0,sp[0x10]
			// Write the flash double-word buffer to the page buffer.
			*(volatile uint64_t*)((uint32_t)flash_add - sizeof(uint64_t))= flash_dword.u64;
		}

		// Erase the current page if requested and write it from the page buffer.
		if (erase) {
800122cc:	58 00       	cp.w	r0,0
800122ce:	c1 c0       	breq	80012306 <flashc_memcpy+0x20a>
800122d0:	40 3c       	lddsp	r12,sp[0xc]
			(b_user_page)? flashc_erase_user_page(false) : flashc_erase_page(-1, false);
800122d2:	58 0c       	cp.w	r12,0
800122d4:	c4 80       	breq	80012364 <flashc_memcpy+0x268>
800122d6:	30 8a       	mov	r10,8

void flashc_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
800122d8:	74 08       	ld.w	r8,r10[0x0]
800122da:	5d 18       	icall	r8
800122dc:	64 18       	ld.w	r8,r2[0x4]
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
800122de:	30 e9       	mov	r9,14
	u_avr32_flashc_fcmd.FCMD.cmd = command;
800122e0:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
800122e4:	50 a8       	stdsp	sp[0x28],r8
800122e6:	3a 58       	mov	r8,-91
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
800122e8:	fb 68 00 28 	st.b	sp[40],r8
800122ec:	40 a8       	lddsp	r8,sp[0x28]
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
800122ee:	85 18       	st.w	r2[0x4],r8
800122f0:	64 28       	ld.w	r8,r2[0x8]
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
800122f2:	e2 18 00 0c 	andl	r8,0xc,COH
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
800122f6:	30 80       	mov	r0,8
	flashc_wait_until_ready();
800122f8:	83 08       	st.w	r1[0x0],r8
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
800122fa:	60 08       	ld.w	r8,r0[0x0]
	flashc_wait_until_ready();
800122fc:	5d 18       	icall	r8
800122fe:	40 2c       	lddsp	r12,sp[0x8]
		}

		// Erase the current page if requested and write it from the page buffer.
		if (erase) {
			(b_user_page)? flashc_erase_user_page(false) : flashc_erase_page(-1, false);
			error_status |= flashc_error_status;
80012300:	62 08       	ld.w	r8,r1[0x0]
80012302:	10 4c       	or	r12,r8
80012304:	50 2c       	stdsp	sp[0x8],r12
80012306:	40 3a       	lddsp	r10,sp[0xc]
		}

		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
80012308:	58 0a       	cp.w	r10,0
8001230a:	c2 00       	breq	8001234a <flashc_memcpy+0x24e>
8001230c:	30 89       	mov	r9,8

void flashc_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
8001230e:	72 08       	ld.w	r8,r9[0x0]
80012310:	5d 18       	icall	r8
80012312:	64 18       	ld.w	r8,r2[0x4]
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80012314:	30 d9       	mov	r9,13
	u_avr32_flashc_fcmd.FCMD.cmd = command;
80012316:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
8001231a:	50 88       	stdsp	sp[0x20],r8
8001231c:	3a 58       	mov	r8,-91
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
8001231e:	fb 68 00 20 	st.b	sp[32],r8
80012322:	40 88       	lddsp	r8,sp[0x20]
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80012324:	85 18       	st.w	r2[0x4],r8
80012326:	64 28       	ld.w	r8,r2[0x8]
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
80012328:	e2 18 00 0c 	andl	r8,0xc,COH
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
8001232c:	30 80       	mov	r0,8
	flashc_wait_until_ready();
8001232e:	83 08       	st.w	r1[0x0],r8
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
80012330:	60 08       	ld.w	r8,r0[0x0]
	flashc_wait_until_ready();
80012332:	5d 18       	icall	r8
80012334:	62 08       	ld.w	r8,r1[0x0]
			error_status |= flashc_error_status;
		}

		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
		error_status |= flashc_error_status;
80012336:	40 2c       	lddsp	r12,sp[0x8]
80012338:	f9 e8 10 08 	or	r8,r12,r8
8001233c:	58 07       	cp.w	r7,0

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
8001233e:	fe 91 fe f9 	brne	80012130 <flashc_memcpy+0x34>
80012342:	83 08       	st.w	r1[0x0],r8
		// Write the page
		(b_user_page)? flashc_write_user_page() : flashc_write_page(-1);
		error_status |= flashc_error_status;
	}
	// Update the FLASHC error status.
	flashc_error_status = error_status;
80012344:	40 1c       	lddsp	r12,sp[0x4]

	// Return the initial destination pointer as the standard memcpy function does.
	return dst;
}
80012346:	2f 4d       	sub	sp,-48
80012348:	d8 32       	popm	r0-r7,pc
8001234a:	30 8c       	mov	r12,8

void flashc_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
8001234c:	78 08       	ld.w	r8,r12[0x0]
8001234e:	5d 18       	icall	r8
80012350:	64 18       	ld.w	r8,r2[0x4]
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80012352:	30 1a       	mov	r10,1
	u_avr32_flashc_fcmd.FCMD.cmd = command;
80012354:	f1 da d0 06 	bfins	r8,r10,0x0,0x6
80012358:	50 78       	stdsp	sp[0x1c],r8
8001235a:	3a 59       	mov	r9,-91
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
8001235c:	fb 69 00 1c 	st.b	sp[28],r9
80012360:	40 78       	lddsp	r8,sp[0x1c]
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80012362:	ce 1b       	rjmp	80012324 <flashc_memcpy+0x228>
80012364:	30 8c       	mov	r12,8

void flashc_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80012366:	78 08       	ld.w	r8,r12[0x0]
80012368:	5d 18       	icall	r8
8001236a:	64 18       	ld.w	r8,r2[0x4]
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
8001236c:	30 2a       	mov	r10,2
	u_avr32_flashc_fcmd.FCMD.cmd = command;
8001236e:	f1 da d0 06 	bfins	r8,r10,0x0,0x6
80012372:	50 98       	stdsp	sp[0x24],r8
80012374:	3a 59       	mov	r9,-91
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80012376:	fb 69 00 24 	st.b	sp[36],r9
8001237a:	40 98       	lddsp	r8,sp[0x24]
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
8001237c:	cb 9b       	rjmp	800122ee <flashc_memcpy+0x1f2>
8001237e:	14 98       	mov	r8,r10

	b_user_page = (volatile uint8_t *)dst >= AVR32_FLASHC_USER_PAGE;

	flash_add = (uint8_t*)((uint32_t)dest_add - ((uint32_t)dest_add % AVR32_FLASHC_PAGE_SIZE));

	while (nbytes) {
80012380:	e0 61 06 60 	mov	r1,1632
80012384:	cd fb       	rjmp	80012342 <flashc_memcpy+0x246>
80012386:	d7 03       	nop

80012388 <flashc_memset64>:
80012388:	d4 31       	pushm	r0-r7,lr
8001238a:	21 9d       	sub	sp,100
8001238c:	50 7c       	stdsp	sp[0x1c],r12
8001238e:	fe fe 03 26 	ld.w	lr,pc[806]
		256,
		384,
		512,
		768,
		1024,
	};
80012392:	fa cc ff d4 	sub	r12,sp,-44
80012396:	fc e6 00 08 	ld.d	r6,lr[8]
8001239a:	f8 e7 00 08 	st.d	r12[8],r6
volatile void *flashc_memset64(volatile void *dst, uint64_t src, size_t nbytes, bool erase)
{
	// Use aggregated pointers to have several alignments available for a same address.
	UnionCVPtr flash_array_end;
	UnionVPtr dest;
	Union64 source = {0};
8001239e:	30 06       	mov	r6,0
800123a0:	30 07       	mov	r7,0
800123a2:	fa e7 00 44 	st.d	sp[68],r6
		256,
		384,
		512,
		768,
		1024,
	};
800123a6:	fc e6 00 00 	ld.d	r6,lr[0]
800123aa:	f8 e7 00 00 	st.d	r12[0],r6
	unsigned int error_status = 0;
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
800123ae:	40 7e       	lddsp	lr,sp[0x1c]
		384,
		512,
		768,
		1024,
	};
	return ((unsigned int)FLASH_SIZE[(AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FSZ_MASK)
800123b0:	fe 6c 14 00 	mov	r12,-125952
800123b4:	78 2c       	ld.w	r12,r12[0x8]
	unsigned int error_status = 0;
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
800123b6:	51 8e       	stdsp	sp[0x60],lr
	UnionVPtr tmp;
	unsigned int error_status = 0;
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
800123b8:	f9 dc c1 a3 	bfextu	r12,r12,0xd,0x3
800123bc:	fa ce ff 9c 	sub	lr,sp,-100
	return flashc_memset64(dst, src | (uint64_t)src << 32, nbytes, erase);
}


volatile void *flashc_memset64(volatile void *dst, uint64_t src, size_t nbytes, bool erase)
{
800123c0:	50 58       	stdsp	sp[0x14],r8
	UnionVPtr tmp;
	unsigned int error_status = 0;
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
800123c2:	fc 0c 00 1c 	add	r12,lr,r12<<0x1
800123c6:	fc 18 80 00 	movh	r8,0x8000
800123ca:	f9 1c ff c8 	ld.uh	r12,r12[-56]
800123ce:	ab 6c       	lsl	r12,0xa
800123d0:	f8 08 00 08 	add	r8,r12,r8
800123d4:	50 88       	stdsp	sp[0x20],r8
	dest.u8ptr = dst;
800123d6:	40 74       	lddsp	r4,sp[0x1c]
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
800123d8:	58 0a       	cp.w	r10,0
800123da:	5c 2b       	cpc	r11
800123dc:	c1 80       	breq	8001240c <flashc_memset64+0x84>
800123de:	08 98       	mov	r8,r4
800123e0:	2f 98       	sub	r8,-7
800123e2:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
		source.u8[i] = src;
800123e6:	fa cc ff 9c 	sub	r12,sp,-100
800123ea:	10 0c       	add	r12,r8
800123ec:	f9 6a ff e0 	st.b	r12[-32],r10

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
800123f0:	20 18       	sub	r8,1
		source.u8[i] = src;
		src >>= 8;
800123f2:	f4 0c 16 08 	lsr	r12,r10,0x8
800123f6:	f6 0e 16 08 	lsr	lr,r11,0x8
800123fa:	f9 eb 11 8c 	or	r12,r12,r11<<0x18

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
800123fe:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
		source.u8[i] = src;
		src >>= 8;
80012402:	1c 9b       	mov	r11,lr
80012404:	18 9a       	mov	r10,r12
	unsigned int i;

	// Reformat arguments.
	flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
	dest.u8ptr = dst;
	for (i = (Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)) - 1) & (sizeof(uint64_t) - 1);
80012406:	58 0a       	cp.w	r10,0
80012408:	5c 2b       	cpc	r11
8001240a:	ce e1       	brne	800123e6 <flashc_memset64+0x5e>
			src; i = (i - 1) & (sizeof(uint64_t) - 1)) {
		source.u8[i] = src;
		src >>= 8;
	}
	dest_end.u8ptr = dest.u8ptr + nbytes;
8001240c:	40 7b       	lddsp	r11,sp[0x1c]
8001240e:	12 0b       	add	r11,r9
80012410:	50 1b       	stdsp	sp[0x4],r11

	// If destination is outside flash, go to next flash page if any.
	if (dest.u8ptr < AVR32_FLASH) {
80012412:	40 7a       	lddsp	r10,sp[0x1c]
80012414:	e0 69 ff ff 	mov	r9,65535
80012418:	ea 19 7f ff 	orh	r9,0x7fff
8001241c:	12 3a       	cp.w	r10,r9
8001241e:	e0 8b 01 33 	brhi	80012684 <flashc_memset64+0x2fc>
		dest.u8ptr = AVR32_FLASH;
80012422:	fc 14 80 00 	movh	r4,0x8000
80012426:	51 84       	stdsp	sp[0x60],r4
	} else if (flash_array_end.u8ptr <= dest.u8ptr && dest.u8ptr < AVR32_FLASHC_USER_PAGE) {
		dest.u8ptr = AVR32_FLASHC_USER_PAGE;
	}

	// If end of destination is outside flash, move it to the end of the previous flash page if any.
	if (dest_end.u8ptr > AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE) {
80012428:	40 1a       	lddsp	r10,sp[0x4]
8001242a:	e0 69 02 00 	mov	r9,512
8001242e:	ea 19 80 80 	orh	r9,0x8080
80012432:	12 3a       	cp.w	r10,r9
80012434:	e0 88 01 16 	brls	80012660 <flashc_memset64+0x2d8>
80012438:	50 39       	stdsp	sp[0xc],r9
8001243a:	50 49       	stdsp	sp[0x10],r9
8001243c:	50 19       	stdsp	sp[0x4],r9
8001243e:	12 9e       	mov	lr,r9
80012440:	12 98       	mov	r8,r9
			// pages that have already been written to.
			{
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
80012442:	fd de c0 03 	bfextu	lr,lr,0x0,0x3
80012446:	fa cb ff c4 	sub	r11,sp,-60
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
8001244a:	1c 18       	sub	r8,lr
			// pages that have already been written to.
			{
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
8001244c:	1c 0b       	add	r11,lr
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
8001244e:	2f 88       	sub	r8,-8
			// pages that have already been written to.
			{
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
80012450:	50 6e       	stdsp	sp[0x18],lr
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
80012452:	50 a8       	stdsp	sp[0x28],r8
			// pages that have already been written to.
			{
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
80012454:	50 9b       	stdsp	sp[0x24],r11
		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;
80012456:	fa e6 00 44 	ld.d	r6,sp[68]
			// pages that have already been written to.
			{
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
8001245a:	30 01       	mov	r1,0
8001245c:	e0 63 06 60 	mov	r3,1632

void flashc_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80012460:	30 82       	mov	r2,8
80012462:	fe 65 14 00 	mov	r5,-125952
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80012466:	3a 50       	mov	r0,-91
	u_avr32_flashc_fcmd.FCMD.cmd = command;
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80012468:	40 19       	lddsp	r9,sp[0x4]
	dest_end.u16ptr = (uint16_t *)Align_down((uint32_t)dest_end.u8ptr, sizeof(uint16_t));
	dest_end.u32ptr = (uint32_t *)Align_down((uint32_t)dest_end.u16ptr, sizeof(uint32_t));
	dest_end.u64ptr = (uint64_t *)Align_down((uint32_t)dest_end.u32ptr, sizeof(uint64_t));

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
8001246a:	08 39       	cp.w	r9,r4
8001246c:	e0 88 00 b5 	brls	800125d6 <flashc_memset64+0x24e>
80012470:	64 08       	ld.w	r8,r2[0x0]

void flashc_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80012472:	5d 18       	icall	r8
80012474:	6a 18       	ld.w	r8,r5[0x4]
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80012476:	30 3a       	mov	r10,3
	u_avr32_flashc_fcmd.FCMD.cmd = command;
80012478:	f1 da d0 06 	bfins	r8,r10,0x0,0x6
8001247c:	51 68       	stdsp	sp[0x58],r8
8001247e:	fb 60 00 58 	st.b	sp[88],r0
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80012482:	41 68       	lddsp	r8,sp[0x58]
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80012484:	8b 18       	st.w	r5[0x4],r8
80012486:	6a 28       	ld.w	r8,r5[0x8]
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
80012488:	e2 18 00 0c 	andl	r8,0xc,COH
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
8001248c:	87 08       	st.w	r3[0x0],r8
8001248e:	64 08       	ld.w	r8,r2[0x0]
	flashc_wait_until_ready();
80012490:	5d 18       	icall	r8
80012492:	66 08       	ld.w	r8,r3[0x0]

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;
80012494:	08 9b       	mov	r11,r4

		// Determine where the source data will end in the current flash page.
		flash_page_source_end.u64ptr =
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
80012496:	40 3e       	lddsp	lr,sp[0xc]
80012498:	e0 1b fe 00 	andl	r11,0xfe00
8001249c:	fa e7 00 3c 	st.d	sp[60],r6
		// Determine if the current destination page has an incomplete end.
		incomplete_flash_page_end = (Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
				Align_down((uint32_t)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;
800124a0:	f6 c9 fe 00 	sub	r9,r11,-512
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;

		// Determine where the source data will end in the current flash page.
		flash_page_source_end.u64ptr =
				(uint64_t *)min((uint32_t)dest_end.u64ptr,
800124a4:	fc 09 0d 4e 	min	lr,lr,r9
800124a8:	50 2e       	stdsp	sp[0x8],lr
800124aa:	10 41       	or	r1,r8

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
		// Clear the page buffer in order to prepare data for a flash page write.
		flashc_clear_page_buffer();
		error_status |= flashc_error_status;
800124ac:	f1 d4 c0 09 	bfextu	r8,r4,0x0,0x9

		// Use a flash double-word buffer to manage unaligned accesses.
		flash_dword.u64 = source.u64;

		// If destination does not point to the beginning of the current flash page...
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
800124b0:	e0 80 00 97 	breq	800125de <flashc_memset64+0x256>
800124b4:	51 7b       	stdsp	sp[0x5c],r11
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
800124b6:	08 99       	mov	r9,r4
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
800124b8:	e0 19 ff f8 	andl	r9,0xfff8
800124bc:	12 9a       	mov	r10,r9
800124be:	12 3b       	cp.w	r11,r9
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
800124c0:	c1 52       	brcc	800124ea <flashc_memset64+0x162>
800124c2:	16 98       	mov	r8,r11
800124c4:	12 9c       	mov	r12,r9
800124c6:	16 9e       	mov	lr,r11
800124c8:	f0 ea 00 00 	ld.d	r10,r8[0]
					tmp.u64ptr < (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
					tmp.u64ptr++) {
				*tmp.u64ptr = *tmp.u64ptr;
800124cc:	b1 2a       	st.d	r8++,r10
800124ce:	10 39       	cp.w	r9,r8
		if (!Test_align((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE)) {
			// Fill the beginning of the page buffer with the current flash page data.
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			for (tmp.u8ptr = (uint8_t *)Align_down((uint32_t)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
800124d0:	fe 9b ff fc 	brhi	800124c8 <flashc_memset64+0x140>
800124d4:	fc 08 11 ff 	rsub	r8,lr,-1
800124d8:	18 9a       	mov	r10,r12
800124da:	12 08       	add	r8,r9
800124dc:	1c 9b       	mov	r11,lr
800124de:	e0 18 ff f8 	andl	r8,0xfff8
800124e2:	2f 88       	sub	r8,-8
800124e4:	fc 08 00 08 	add	r8,lr,r8
800124e8:	51 78       	stdsp	sp[0x5c],r8
800124ea:	e9 d4 c0 03 	bfextu	r4,r4,0x0,0x3
					tmp.u64ptr++) {
				*tmp.u64ptr = *tmp.u64ptr;
			}

			// If destination is not 64-bit aligned...
			if (!Test_align((uint32_t)dest.u8ptr, sizeof(uint64_t))) {
800124ee:	c7 80       	breq	800125de <flashc_memset64+0x256>
800124f0:	41 7e       	lddsp	lr,sp[0x5c]
800124f2:	30 08       	mov	r8,0
800124f4:	50 09       	stdsp	sp[0x0],r9
800124f6:	fc 08 00 0c 	add	r12,lr,r8
800124fa:	fa c9 ff c4 	sub	r9,sp,-60
				// flash page data.
				// This is required by the hardware, even if page erase is not
				// requested, in order to be able to write successfully to erased parts
				// of flash pages that have already been written to.
				for (i = 0; i < Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)); i++) {
					flash_dword.u8[i] = *tmp.u8ptr++;
800124fe:	19 8c       	ld.ub	r12,r12[0x0]
80012500:	f2 08 0b 0c 	st.b	r9[r8],r12
80012504:	2f f8       	sub	r8,-1
				// Fill the beginning of the flash double-word buffer with the current
				// flash page data.
				// This is required by the hardware, even if page erase is not
				// requested, in order to be able to write successfully to erased parts
				// of flash pages that have already been written to.
				for (i = 0; i < Get_align((uint32_t)dest.u8ptr, sizeof(uint64_t)); i++) {
80012506:	08 38       	cp.w	r8,r4
80012508:	cf 71       	brne	800124f6 <flashc_memset64+0x16e>
8001250a:	fc 08 00 08 	add	r8,lr,r8
8001250e:	40 09       	lddsp	r9,sp[0x0]
80012510:	51 78       	stdsp	sp[0x5c],r8
80012512:	51 89       	stdsp	sp[0x60],r9
					flash_dword.u8[i] = *tmp.u8ptr++;
				}

				// Align the destination pointer with its 64-bit boundary.
				dest.u64ptr = (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));
80012514:	40 38       	lddsp	r8,sp[0xc]

				// If the current destination double-word is not the last one...
				if (dest.u64ptr < dest_end.u64ptr) {
80012516:	10 39       	cp.w	r9,r8
80012518:	c0 82       	brcc	80012528 <flashc_memset64+0x1a0>
8001251a:	12 9a       	mov	r10,r9
					// Write the flash double-word buffer to the page buffer and reinitialize it.
					*dest.u64ptr++ = flash_dword.u64;
8001251c:	fa e8 00 3c 	ld.d	r8,sp[60]
80012520:	b5 28       	st.d	r10++,r8
80012522:	fa e7 00 3c 	st.d	sp[60],r6
					flash_dword.u64 = source.u64;
80012526:	51 8a       	stdsp	sp[0x60],r10
				dest.u64ptr = (uint64_t *)Align_down((uint32_t)dest.u8ptr, sizeof(uint64_t));

				// If the current destination double-word is not the last one...
				if (dest.u64ptr < dest_end.u64ptr) {
					// Write the flash double-word buffer to the page buffer and reinitialize it.
					*dest.u64ptr++ = flash_dword.u64;
80012528:	40 2c       	lddsp	r12,sp[0x8]
				}
			}
		}

		// Write the source data to the page buffer with 64-bit alignment.
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
8001252a:	14 1c       	sub	r12,r10
8001252c:	a3 5c       	asr	r12,0x3
8001252e:	c0 90       	breq	80012540 <flashc_memset64+0x1b8>
80012530:	14 99       	mov	r9,r10
80012532:	18 98       	mov	r8,r12
80012534:	b3 26       	st.d	r9++,r6
			*dest.u64ptr++ = source.u64;
80012536:	20 18       	sub	r8,1
				}
			}
		}

		// Write the source data to the page buffer with 64-bit alignment.
		for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--) {
80012538:	cf e1       	brne	80012534 <flashc_memset64+0x1ac>
8001253a:	f4 0c 00 3a 	add	r10,r10,r12<<0x3
8001253e:	51 8a       	stdsp	sp[0x60],r10
80012540:	40 48       	lddsp	r8,sp[0x10]
			*dest.u64ptr++ = source.u64;
		}

		// If the current destination page has an incomplete end...
		if (incomplete_flash_page_end) {
80012542:	e0 18 fe 00 	andl	r8,0xfe00
80012546:	10 3b       	cp.w	r11,r8
80012548:	c1 f3       	brcs	80012586 <flashc_memset64+0x1fe>
8001254a:	40 1e       	lddsp	lr,sp[0x4]
			// This is required by the hardware, even if page erase is not requested,
			// in order to be able to write successfully to erased parts of flash
			// pages that have already been written to.
			{
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;
8001254c:	51 7e       	stdsp	sp[0x5c],lr
8001254e:	40 6b       	lddsp	r11,sp[0x18]

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
80012550:	58 0b       	cp.w	r11,0
80012552:	c0 f0       	breq	80012570 <flashc_memset64+0x1e8>
80012554:	1c 99       	mov	r9,lr
80012556:	40 98       	lddsp	r8,sp[0x24]
80012558:	fa cc ff bc 	sub	r12,sp,-68
{
	return flashc_memset64(dst, src | (uint64_t)src << 32, nbytes, erase);
}


volatile void *flashc_memset64(volatile void *dst, uint64_t src, size_t nbytes, bool erase)
8001255c:	13 3b       	ld.ub	r11,r9++

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
						flash_dword.u8[i] = *tmp.u8ptr++;
8001255e:	10 cb       	st.b	r8++,r11
80012560:	18 38       	cp.w	r8,r12
				tmp.u8ptr = (volatile uint8_t *)dest_end.u8ptr;

				// If end of destination is not 64-bit aligned...
				if (!Test_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t))) {
					// Fill the end of the flash double-word buffer with the current flash page data.
					for (i = Get_align((uint32_t)dest_end.u8ptr, sizeof(uint64_t)); i < sizeof(uint64_t); i++)
80012562:	cf d1       	brne	8001255c <flashc_memset64+0x1d4>
80012564:	40 a9       	lddsp	r9,sp[0x28]
80012566:	51 79       	stdsp	sp[0x5c],r9
80012568:	fa e8 00 3c 	ld.d	r8,sp[60]
						flash_dword.u8[i] = *tmp.u8ptr++;

					// Write the flash double-word buffer to the page buffer.
					*dest.u64ptr++ = flash_dword.u64;
8001256c:	b5 28       	st.d	r10++,r8
8001256e:	51 8a       	stdsp	sp[0x60],r10
80012570:	41 78       	lddsp	r8,sp[0x5c]
				}

				// Fill the end of the page buffer with the current flash page data.
				for (; !Test_align((uint32_t)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++) {
80012572:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
80012576:	c0 80       	breq	80012586 <flashc_memset64+0x1fe>
80012578:	f0 ea 00 00 	ld.d	r10,r8[0]
					*tmp.u64ptr = *tmp.u64ptr;
8001257c:	b1 2a       	st.d	r8++,r10
8001257e:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
					// Write the flash double-word buffer to the page buffer.
					*dest.u64ptr++ = flash_dword.u64;
				}

				// Fill the end of the page buffer with the current flash page data.
				for (; !Test_align((uint32_t)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++) {
80012582:	cf b1       	brne	80012578 <flashc_memset64+0x1f0>
80012584:	51 78       	stdsp	sp[0x5c],r8
80012586:	41 84       	lddsp	r4,sp[0x60]
				}
			}
		}

		// If the current flash page is in the flash array...
		if (dest.u8ptr <= AVR32_FLASHC_USER_PAGE) {
80012588:	fc 18 80 80 	movh	r8,0x8080
8001258c:	10 34       	cp.w	r4,r8
8001258e:	e0 8b 00 2a 	brhi	800125e2 <flashc_memset64+0x25a>
80012592:	40 5e       	lddsp	lr,sp[0x14]
			// Erase the current page if requested and write it from the page buffer.
			if (erase) {
80012594:	58 0e       	cp.w	lr,0
80012596:	c3 d1       	brne	80012610 <flashc_memset64+0x288>
80012598:	64 08       	ld.w	r8,r2[0x0]

void flashc_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
8001259a:	5d 18       	icall	r8
8001259c:	6a 18       	ld.w	r8,r5[0x4]
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
8001259e:	30 19       	mov	r9,1
	u_avr32_flashc_fcmd.FCMD.cmd = command;
800125a0:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
800125a4:	51 48       	stdsp	sp[0x50],r8
800125a6:	fb 60 00 50 	st.b	sp[80],r0
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
800125aa:	41 48       	lddsp	r8,sp[0x50]
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
800125ac:	8b 18       	st.w	r5[0x4],r8
800125ae:	6a 28       	ld.w	r8,r5[0x8]
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
800125b0:	e2 18 00 0c 	andl	r8,0xc,COH
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
800125b4:	87 08       	st.w	r3[0x0],r8
800125b6:	64 08       	ld.w	r8,r2[0x0]
	flashc_wait_until_ready();
800125b8:	5d 18       	icall	r8
800125ba:	66 08       	ld.w	r8,r3[0x0]
			if (erase) {
				flashc_erase_page(-1, false);
				error_status |= flashc_error_status;
			}
			flashc_write_page(-1);
			error_status |= flashc_error_status;
800125bc:	40 8b       	lddsp	r11,sp[0x20]

			// If the end of the flash array is reached, go to the User page.
			if (dest.u8ptr >= flash_array_end.u8ptr) {
800125be:	10 41       	or	r1,r8
			if (erase) {
				flashc_erase_page(-1, false);
				error_status |= flashc_error_status;
			}
			flashc_write_page(-1);
			error_status |= flashc_error_status;
800125c0:	08 3b       	cp.w	r11,r4

			// If the end of the flash array is reached, go to the User page.
			if (dest.u8ptr >= flash_array_end.u8ptr) {
800125c2:	e0 8b 00 05 	brhi	800125cc <flashc_memset64+0x244>
800125c6:	fc 18 80 80 	movh	r8,0x8080
				dest.u8ptr = AVR32_FLASHC_USER_PAGE;
800125ca:	51 88       	stdsp	sp[0x60],r8
800125cc:	41 84       	lddsp	r4,sp[0x60]
			if (erase) {
				flashc_erase_user_page(false);
				error_status |= flashc_error_status;
			}
			flashc_write_user_page();
			error_status |= flashc_error_status;
800125ce:	40 19       	lddsp	r9,sp[0x4]
	dest_end.u16ptr = (uint16_t *)Align_down((uint32_t)dest_end.u8ptr, sizeof(uint16_t));
	dest_end.u32ptr = (uint32_t *)Align_down((uint32_t)dest_end.u16ptr, sizeof(uint32_t));
	dest_end.u64ptr = (uint64_t *)Align_down((uint32_t)dest_end.u32ptr, sizeof(uint64_t));

	// While end of destination is not reached...
	while (dest.u8ptr < dest_end.u8ptr) {
800125d0:	08 39       	cp.w	r9,r4
800125d2:	fe 9b ff 4f 	brhi	80012470 <flashc_memset64+0xe8>
800125d6:	87 01       	st.w	r3[0x0],r1
			error_status |= flashc_error_status;
		}
	}

	// Update the FLASHC error status.
	flashc_error_status = error_status;
800125d8:	40 7c       	lddsp	r12,sp[0x1c]

	// Return the initial destination pointer as the standard memset function does.
	return dst;
}
800125da:	2e 7d       	sub	sp,-100
800125dc:	d8 32       	popm	r0-r7,pc
800125de:	41 8a       	lddsp	r10,sp[0x60]
					tmp.u64ptr++) {
				*tmp.u64ptr = *tmp.u64ptr;
			}

			// If destination is not 64-bit aligned...
			if (!Test_align((uint32_t)dest.u8ptr, sizeof(uint64_t))) {
800125e0:	ca 4b       	rjmp	80012528 <flashc_memset64+0x1a0>
800125e2:	40 5a       	lddsp	r10,sp[0x14]
			if (dest.u8ptr >= flash_array_end.u8ptr) {
				dest.u8ptr = AVR32_FLASHC_USER_PAGE;
			}
		} else {
			// Erase the User page if requested and write it from the page buffer.
			if (erase) {
800125e4:	58 0a       	cp.w	r10,0
800125e6:	c2 91       	brne	80012638 <flashc_memset64+0x2b0>
800125e8:	64 08       	ld.w	r8,r2[0x0]

void flashc_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
800125ea:	5d 18       	icall	r8
800125ec:	6a 18       	ld.w	r8,r5[0x4]
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
800125ee:	30 d9       	mov	r9,13
	u_avr32_flashc_fcmd.FCMD.cmd = command;
800125f0:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
800125f4:	50 b8       	stdsp	sp[0x2c],r8
800125f6:	fb 60 00 2c 	st.b	sp[44],r0
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
800125fa:	40 b8       	lddsp	r8,sp[0x2c]
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
800125fc:	8b 18       	st.w	r5[0x4],r8
800125fe:	6a 28       	ld.w	r8,r5[0x8]
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
80012600:	e2 18 00 0c 	andl	r8,0xc,COH
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
80012604:	87 08       	st.w	r3[0x0],r8
80012606:	64 08       	ld.w	r8,r2[0x0]
	flashc_wait_until_ready();
80012608:	5d 18       	icall	r8
8001260a:	66 08       	ld.w	r8,r3[0x0]
			if (erase) {
				flashc_erase_user_page(false);
				error_status |= flashc_error_status;
			}
			flashc_write_user_page();
			error_status |= flashc_error_status;
8001260c:	10 41       	or	r1,r8
8001260e:	cd fb       	rjmp	800125cc <flashc_memset64+0x244>
80012610:	64 08       	ld.w	r8,r2[0x0]

void flashc_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
80012612:	5d 18       	icall	r8
80012614:	6a 18       	ld.w	r8,r5[0x4]
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80012616:	30 29       	mov	r9,2
	u_avr32_flashc_fcmd.FCMD.cmd = command;
80012618:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
8001261c:	51 58       	stdsp	sp[0x54],r8
8001261e:	fb 60 00 54 	st.b	sp[84],r0
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80012622:	41 58       	lddsp	r8,sp[0x54]
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80012624:	8b 18       	st.w	r5[0x4],r8
80012626:	6a 28       	ld.w	r8,r5[0x8]
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
80012628:	e2 18 00 0c 	andl	r8,0xc,COH
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
8001262c:	87 08       	st.w	r3[0x0],r8
8001262e:	64 08       	ld.w	r8,r2[0x0]
	flashc_wait_until_ready();
80012630:	5d 18       	icall	r8
80012632:	66 08       	ld.w	r8,r3[0x0]
		// If the current flash page is in the flash array...
		if (dest.u8ptr <= AVR32_FLASHC_USER_PAGE) {
			// Erase the current page if requested and write it from the page buffer.
			if (erase) {
				flashc_erase_page(-1, false);
				error_status |= flashc_error_status;
80012634:	10 41       	or	r1,r8
80012636:	cb 1b       	rjmp	80012598 <flashc_memset64+0x210>
80012638:	64 08       	ld.w	r8,r2[0x0]

void flashc_issue_command(unsigned int command, int page_number)
{
	u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;

	flashc_wait_until_ready();
8001263a:	5d 18       	icall	r8
8001263c:	6a 18       	ld.w	r8,r5[0x4]
	u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
8001263e:	30 e9       	mov	r9,14
	u_avr32_flashc_fcmd.FCMD.cmd = command;
80012640:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
80012644:	51 38       	stdsp	sp[0x4c],r8
80012646:	fb 60 00 4c 	st.b	sp[76],r0
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
8001264a:	41 38       	lddsp	r8,sp[0x4c]
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
8001264c:	8b 18       	st.w	r5[0x4],r8
8001264e:	6a 28       	ld.w	r8,r5[0x8]
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
	return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
80012650:	e2 18 00 0c 	andl	r8,0xc,COH
	if (page_number >= 0) {
		u_avr32_flashc_fcmd.FCMD.pagen = page_number;
	}
	u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
	AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
	flashc_error_status = flashc_get_error_status();
80012654:	87 08       	st.w	r3[0x0],r8
80012656:	64 08       	ld.w	r8,r2[0x0]
	flashc_wait_until_ready();
80012658:	5d 18       	icall	r8
8001265a:	66 08       	ld.w	r8,r3[0x0]
			}
		} else {
			// Erase the User page if requested and write it from the page buffer.
			if (erase) {
				flashc_erase_user_page(false);
				error_status |= flashc_error_status;
8001265c:	10 41       	or	r1,r8
8001265e:	cc 5b       	rjmp	800125e8 <flashc_memset64+0x260>
80012660:	fc 1e 80 80 	movh	lr,0x8080
	}

	// If end of destination is outside flash, move it to the end of the previous flash page if any.
	if (dest_end.u8ptr > AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE) {
		dest_end.u8ptr = AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE;
	} else if (AVR32_FLASHC_USER_PAGE >= dest_end.u8ptr && dest_end.u8ptr > flash_array_end.u8ptr) {
80012664:	1c 3a       	cp.w	r10,lr
80012666:	e0 8b 00 1e 	brhi	800126a2 <flashc_memset64+0x31a>
8001266a:	40 89       	lddsp	r9,sp[0x20]
8001266c:	12 3a       	cp.w	r10,r9
8001266e:	f2 0a 17 b0 	movhi	r10,r9
80012672:	14 98       	mov	r8,r10
80012674:	e0 18 ff f8 	andl	r8,0xfff8
80012678:	50 1a       	stdsp	sp[0x4],r10
8001267a:	50 38       	stdsp	sp[0xc],r8
8001267c:	50 4a       	stdsp	sp[0x10],r10
8001267e:	14 9e       	mov	lr,r10
80012680:	14 98       	mov	r8,r10
80012682:	ce 0a       	rjmp	80012442 <flashc_memset64+0xba>
80012684:	40 88       	lddsp	r8,sp[0x20]
	dest_end.u8ptr = dest.u8ptr + nbytes;

	// If destination is outside flash, go to next flash page if any.
	if (dest.u8ptr < AVR32_FLASH) {
		dest.u8ptr = AVR32_FLASH;
	} else if (flash_array_end.u8ptr <= dest.u8ptr && dest.u8ptr < AVR32_FLASHC_USER_PAGE) {
80012686:	14 38       	cp.w	r8,r10
80012688:	fe 9b fe d0 	brhi	80012428 <flashc_memset64+0xa0>
8001268c:	e0 6b ff ff 	mov	r11,65535
80012690:	ea 1b 80 7f 	orh	r11,0x807f
80012694:	16 3a       	cp.w	r10,r11
80012696:	fe 9b fe c9 	brhi	80012428 <flashc_memset64+0xa0>
8001269a:	fc 14 80 80 	movh	r4,0x8080
		dest.u8ptr = AVR32_FLASHC_USER_PAGE;
8001269e:	51 84       	stdsp	sp[0x60],r4
800126a0:	cc 4a       	rjmp	80012428 <flashc_memset64+0xa0>
800126a2:	14 9b       	mov	r11,r10
	}

	// If end of destination is outside flash, move it to the end of the previous flash page if any.
	if (dest_end.u8ptr > AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE) {
		dest_end.u8ptr = AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE;
	} else if (AVR32_FLASHC_USER_PAGE >= dest_end.u8ptr && dest_end.u8ptr > flash_array_end.u8ptr) {
800126a4:	50 4a       	stdsp	sp[0x10],r10
800126a6:	e0 1b ff f8 	andl	r11,0xfff8
800126aa:	14 9e       	mov	lr,r10
800126ac:	50 3b       	stdsp	sp[0xc],r11
800126ae:	40 18       	lddsp	r8,sp[0x4]
800126b0:	cc 9a       	rjmp	80012442 <flashc_memset64+0xba>
800126b2:	d7 03       	nop
800126b4:	80 02       	ld.sh	r2,r0[0x0]
800126b6:	1b 48       	ld.w	r8,--sp

800126b8 <flashc_memset32>:
800126b8:	eb cd 40 c0 	pushm	r6-r7,lr
800126bc:	30 0e       	mov	lr,0
800126be:	16 96       	mov	r6,r11
}


volatile void *flashc_memset32(volatile void *dst, uint32_t src, size_t nbytes, bool erase)
{
	return flashc_memset64(dst, src | (uint64_t)src << 32, nbytes, erase);
800126c0:	1c 97       	mov	r7,lr
800126c2:	12 98       	mov	r8,r9
800126c4:	0c 9b       	mov	r11,r6
800126c6:	14 99       	mov	r9,r10
800126c8:	0e 4b       	or	r11,r7
800126ca:	0e 9a       	mov	r10,r7
800126cc:	0c 4a       	or	r10,r6
800126ce:	c5 de       	rcall	80012388 <flashc_memset64>
800126d0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

800126d4 <gpio_enable_pin_pull_up>:
 */
void gpio_enable_pin_pull_up(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
	
	gpio_port->puers = 1 << (pin & 0x1F);
800126d4:	30 18       	mov	r8,1
800126d6:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_pull_up(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800126da:	a5 9c       	lsr	r12,0x5
800126dc:	a9 6c       	lsl	r12,0x8
800126de:	e0 2c f0 00 	sub	r12,61440
	
	gpio_port->puers = 1 << (pin & 0x1F);
800126e2:	f9 48 00 74 	st.w	r12[116],r8
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	gpio_port->pderc = 1 << (pin & 0x1F);
#endif
}
800126e6:	5e fc       	retal	r12

800126e8 <gpio_get_pin_value>:
 *
 * \return The pin value.
 */
bool gpio_get_pin_value(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800126e8:	f8 08 16 05 	lsr	r8,r12,0x5
800126ec:	a9 68       	lsl	r8,0x8
800126ee:	e0 28 f0 00 	sub	r8,61440
	
	return (gpio_port->pvr >> (pin & 0x1F)) & 1;
800126f2:	71 88       	ld.w	r8,r8[0x60]
800126f4:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
800126f8:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800126fc:	5e fc       	retal	r12

800126fe <gpio_set_gpio_pin>:
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
800126fe:	30 18       	mov	r8,1
80012700:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80012704:	a5 9c       	lsr	r12,0x5
80012706:	a9 6c       	lsl	r12,0x8
80012708:	e0 2c f0 00 	sub	r12,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
8001270c:	f9 48 00 54 	st.w	r12[84],r8
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
80012710:	f9 48 00 44 	st.w	r12[68],r8
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80012714:	99 18       	st.w	r12[0x4],r8
}
80012716:	5e fc       	retal	r12

80012718 <gpio_clr_gpio_pin>:
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80012718:	30 18       	mov	r8,1
8001271a:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8001271e:	a5 9c       	lsr	r12,0x5
80012720:	a9 6c       	lsl	r12,0x8
80012722:	e0 2c f0 00 	sub	r12,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80012726:	f9 48 00 58 	st.w	r12[88],r8
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
8001272a:	f9 48 00 44 	st.w	r12[68],r8
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
8001272e:	99 18       	st.w	r12[0x4],r8
}
80012730:	5e fc       	retal	r12

80012732 <gpio_enable_pin_glitch_filter>:
 */
void gpio_enable_pin_glitch_filter(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
	
	gpio_port->gfers = 1 << (pin & 0x1F);
80012732:	30 18       	mov	r8,1
80012734:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_glitch_filter(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80012738:	a5 9c       	lsr	r12,0x5
8001273a:	a9 6c       	lsl	r12,0x8
8001273c:	e0 2c f0 00 	sub	r12,61440
	
	gpio_port->gfers = 1 << (pin & 0x1F);
80012740:	f9 48 00 c4 	st.w	r12[196],r8
}
80012744:	5e fc       	retal	r12

80012746 <gpio_enable_pin_interrupt>:
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
80012746:	30 1a       	mov	r10,1
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80012748:	f8 08 16 05 	lsr	r8,r12,0x5

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
8001274c:	f4 0c 09 49 	lsl	r9,r10,r12
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80012750:	a9 68       	lsl	r8,0x8
80012752:	e0 28 f0 00 	sub	r8,61440

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
80012756:	f1 49 00 c4 	st.w	r8[196],r9
static uint32_t gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Configure the edge detector. */
	switch (mode) {
8001275a:	14 3b       	cp.w	r11,r10
8001275c:	c0 c0       	breq	80012774 <gpio_enable_pin_interrupt+0x2e>
8001275e:	c0 82       	brcc	8001276e <gpio_enable_pin_interrupt+0x28>
	case GPIO_PIN_CHANGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
80012760:	f1 49 00 a8 	st.w	r8[168],r9
		gpio_port->imr1c = 1 << (pin & 0x1F);
80012764:	f1 49 00 b8 	st.w	r8[184],r9
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
		return(GPIO_INVALID_ARGUMENT);
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
80012768:	f1 49 00 94 	st.w	r8[148],r9
8001276c:	5e fd       	retal	0
static uint32_t gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Configure the edge detector. */
	switch (mode) {
8001276e:	58 2b       	cp.w	r11,2
80012770:	c0 90       	breq	80012782 <gpio_enable_pin_interrupt+0x3c>
		gpio_port->imr1c = 1 << (pin & 0x1F);
		break;

	case GPIO_FALLING_EDGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
		gpio_port->imr1s = 1 << (pin & 0x1F);
80012772:	5e fa       	retal	r10
		gpio_port->imr0c = 1 << (pin & 0x1F);
		gpio_port->imr1c = 1 << (pin & 0x1F);
		break;

	case GPIO_RISING_EDGE:
		gpio_port->imr0s = 1 << (pin & 0x1F);
80012774:	f1 49 00 a4 	st.w	r8[164],r9
		gpio_port->imr1c = 1 << (pin & 0x1F);
80012778:	f1 49 00 b8 	st.w	r8[184],r9
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
		return(GPIO_INVALID_ARGUMENT);
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
8001277c:	f1 49 00 94 	st.w	r8[148],r9
80012780:	5e fd       	retal	0
		gpio_port->imr0s = 1 << (pin & 0x1F);
		gpio_port->imr1c = 1 << (pin & 0x1F);
		break;

	case GPIO_FALLING_EDGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
80012782:	f1 49 00 a8 	st.w	r8[168],r9
		gpio_port->imr1s = 1 << (pin & 0x1F);
80012786:	f1 49 00 b4 	st.w	r8[180],r9
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
		return(GPIO_INVALID_ARGUMENT);
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
8001278a:	f1 49 00 94 	st.w	r8[148],r9
8001278e:	5e fd       	retal	0

80012790 <gpio_get_pin_interrupt_flag>:
 *
 * \return The pin interrupt flag.
 */
bool gpio_get_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80012790:	f8 08 16 05 	lsr	r8,r12,0x5
80012794:	a9 68       	lsl	r8,0x8
80012796:	e0 28 f0 00 	sub	r8,61440
	
	return (gpio_port->ifr >> (pin & 0x1F)) & 1;
8001279a:	f0 f8 00 d0 	ld.w	r8,r8[208]
8001279e:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
800127a2:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800127a6:	5e fc       	retal	r12

800127a8 <gpio_clear_pin_interrupt_flag>:
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
800127a8:	30 18       	mov	r8,1
800127aa:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800127ae:	a5 9c       	lsr	r12,0x5
800127b0:	a9 6c       	lsl	r12,0x8
800127b2:	e0 2c f0 00 	sub	r12,61440
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
800127b6:	f9 48 00 d8 	st.w	r12[216],r8
#endif
}
800127ba:	5e fc       	retal	r12

800127bc <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800127bc:	eb cd 40 c0 	pushm	r6-r7,lr
800127c0:	18 98       	mov	r8,r12
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800127c2:	58 0b       	cp.w	r11,0
800127c4:	c3 60       	breq	80012830 <gpio_enable_module+0x74>
800127c6:	30 0e       	mov	lr,0
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Enable the correct function. */
	switch (function) {
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800127c8:	30 16       	mov	r6,1
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800127ca:	1c 9c       	mov	r12,lr
800127cc:	c0 d8       	rjmp	800127e6 <gpio_enable_module+0x2a>
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Enable the correct function. */
	switch (function) {
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800127ce:	ec 07 09 4a 	lsl	r10,r6,r7
800127d2:	93 6a       	st.w	r9[0x18],r10
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800127d4:	93 aa       	st.w	r9[0x28],r10
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800127d6:	93 2a       	st.w	r9[0x8],r10
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800127d8:	2f fe       	sub	lr,-1
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800127da:	30 09       	mov	r9,0
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800127dc:	12 4c       	or	r12,r9
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800127de:	1c 3b       	cp.w	r11,lr
800127e0:	e0 88 00 17 	brls	8001280e <gpio_enable_module+0x52>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
800127e4:	2f 88       	sub	r8,-8
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800127e6:	70 07       	ld.w	r7,r8[0x0]
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Enable the correct function. */
	switch (function) {
800127e8:	70 1a       	ld.w	r10,r8[0x4]
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800127ea:	ee 09 16 05 	lsr	r9,r7,0x5
800127ee:	a9 69       	lsl	r9,0x8
800127f0:	e0 29 f0 00 	sub	r9,61440

	/* Enable the correct function. */
	switch (function) {
800127f4:	58 1a       	cp.w	r10,1
800127f6:	c0 e0       	breq	80012812 <gpio_enable_module+0x56>
800127f8:	ce b3       	brcs	800127ce <gpio_enable_module+0x12>
800127fa:	58 2a       	cp.w	r10,2
800127fc:	c1 50       	breq	80012826 <gpio_enable_module+0x6a>
800127fe:	58 3a       	cp.w	r10,3
80012800:	c0 e0       	breq	8001281c <gpio_enable_module+0x60>
80012802:	30 19       	mov	r9,1
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80012804:	2f fe       	sub	lr,-1
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80012806:	12 4c       	or	r12,r9
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80012808:	1c 3b       	cp.w	r11,lr
8001280a:	fe 9b ff ed 	brhi	800127e4 <gpio_enable_module+0x28>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
8001280e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80012812:	f4 07 09 4a 	lsl	r10,r10,r7
80012816:	93 5a       	st.w	r9[0x14],r10
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80012818:	93 aa       	st.w	r9[0x28],r10
8001281a:	cd eb       	rjmp	800127d6 <gpio_enable_module+0x1a>
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8001281c:	ec 07 09 4a 	lsl	r10,r6,r7
80012820:	93 5a       	st.w	r9[0x14],r10
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80012822:	93 9a       	st.w	r9[0x24],r10
80012824:	cd 9b       	rjmp	800127d6 <gpio_enable_module+0x1a>
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80012826:	ec 07 09 4a 	lsl	r10,r6,r7
8001282a:	93 6a       	st.w	r9[0x18],r10
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8001282c:	93 9a       	st.w	r9[0x24],r10
8001282e:	cd 4b       	rjmp	800127d6 <gpio_enable_module+0x1a>
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
80012830:	16 9c       	mov	r12,r11
80012832:	ce eb       	rjmp	8001280e <gpio_enable_module+0x52>

80012834 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80012834:	c0 08       	rjmp	80012834 <_unhandled_interrupt>
80012836:	d7 03       	nop

80012838 <INTC_register_interrupt>:

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80012838:	f3 db c0 05 	bfextu	r9,r11,0x0,0x5
8001283c:	49 b8       	lddpc	r8,800128a8 <INTC_register_interrupt+0x70>
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
8001283e:	a5 9b       	lsr	r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80012840:	f0 0b 00 38 	add	r8,r8,r11<<0x3
80012844:	70 18       	ld.w	r8,r8[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80012846:	f0 09 09 2c 	st.w	r8[r9<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
8001284a:	58 0a       	cp.w	r10,0
8001284c:	c1 00       	breq	8001286c <INTC_register_interrupt+0x34>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	} else if (int_level == AVR32_INTC_INT1) {
8001284e:	58 1a       	cp.w	r10,1
80012850:	c1 70       	breq	8001287e <INTC_register_interrupt+0x46>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
	} else if (int_level == AVR32_INTC_INT2) {
80012852:	58 2a       	cp.w	r10,2
80012854:	c1 f0       	breq	80012892 <INTC_register_interrupt+0x5a>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80012856:	49 69       	lddpc	r9,800128ac <INTC_register_interrupt+0x74>
80012858:	49 68       	lddpc	r8,800128b0 <INTC_register_interrupt+0x78>
8001285a:	f2 08 01 08 	sub	r8,r9,r8
8001285e:	fe 79 08 00 	mov	r9,-63488
80012862:	ea 18 c0 00 	orh	r8,0xc000
80012866:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
8001286a:	5e fc       	retal	r12
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8001286c:	fe 78 08 00 	mov	r8,-63488
80012870:	49 09       	lddpc	r9,800128b0 <INTC_register_interrupt+0x78>
80012872:	49 1a       	lddpc	r10,800128b4 <INTC_register_interrupt+0x7c>
80012874:	f4 09 01 09 	sub	r9,r10,r9
80012878:	f0 0b 09 29 	st.w	r8[r11<<0x2],r9
8001287c:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
8001287e:	48 f9       	lddpc	r9,800128b8 <INTC_register_interrupt+0x80>
80012880:	48 c8       	lddpc	r8,800128b0 <INTC_register_interrupt+0x78>
80012882:	f2 08 01 08 	sub	r8,r9,r8
80012886:	fe 79 08 00 	mov	r9,-63488
8001288a:	bf a8       	sbr	r8,0x1e
8001288c:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
80012890:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80012892:	48 b9       	lddpc	r9,800128bc <INTC_register_interrupt+0x84>
80012894:	48 78       	lddpc	r8,800128b0 <INTC_register_interrupt+0x78>
80012896:	f2 08 01 08 	sub	r8,r9,r8
8001289a:	fe 79 08 00 	mov	r9,-63488
8001289e:	bf b8       	sbr	r8,0x1f
800128a0:	f2 0b 09 28 	st.w	r9[r11<<0x2],r8
800128a4:	5e fc       	retal	r12
800128a6:	d7 03       	nop
800128a8:	80 02       	ld.sh	r2,r0[0x0]
800128aa:	1b 58       	ld.sh	r8,--sp
800128ac:	80 02       	ld.sh	r2,r0[0x0]
800128ae:	19 2e       	ld.uh	lr,r12++
800128b0:	80 02       	ld.sh	r2,r0[0x0]
800128b2:	18 00       	add	r0,r12
800128b4:	80 02       	ld.sh	r2,r0[0x0]
800128b6:	19 04       	ld.w	r4,r12++
800128b8:	80 02       	ld.sh	r2,r0[0x0]
800128ba:	19 12       	ld.sh	r2,r12++
800128bc:	80 02       	ld.sh	r2,r0[0x0]
800128be:	19 20       	ld.uh	r0,r12++

800128c0 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
800128c0:	eb cd 40 e0 	pushm	r5-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800128c4:	48 f8       	lddpc	r8,80012900 <INTC_init_interrupts+0x40>
800128c6:	e3 b8 00 01 	mtsr	0x4,r8
800128ca:	48 f5       	lddpc	r5,80012904 <INTC_init_interrupts+0x44>
800128cc:	48 f7       	lddpc	r7,80012908 <INTC_init_interrupts+0x48>
800128ce:	10 15       	sub	r5,r8
800128d0:	30 0e       	mov	lr,0
800128d2:	fe cc 00 9e 	sub	r12,pc,158

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800128d6:	fe 76 08 00 	mov	r6,-63488

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800128da:	6e 0a       	ld.w	r10,r7[0x0]
800128dc:	58 0a       	cp.w	r10,0
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800128de:	c0 90       	breq	800128f0 <INTC_init_interrupts+0x30>
800128e0:	30 08       	mov	r8,0
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800128e2:	6e 1b       	ld.w	r11,r7[0x4]
800128e4:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800128e8:	2f f8       	sub	r8,-1
800128ea:	10 3a       	cp.w	r10,r8
800128ec:	fe 9b ff fc 	brhi	800128e4 <INTC_init_interrupts+0x24>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800128f0:	ec 0e 09 25 	st.w	r6[lr<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800128f4:	2f 87       	sub	r7,-8
800128f6:	2f fe       	sub	lr,-1
800128f8:	59 4e       	cp.w	lr,20
800128fa:	cf 01       	brne	800128da <INTC_init_interrupts+0x1a>
800128fc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80012900:	80 02       	ld.sh	r2,r0[0x0]
80012902:	18 00       	add	r0,r12
80012904:	80 02       	ld.sh	r2,r0[0x0]
80012906:	19 04       	ld.w	r4,r12++
80012908:	80 02       	ld.sh	r2,r0[0x0]
8001290a:	1b 58       	ld.sh	r8,--sp

8001290c <_get_interrupt_handler>:
8001290c:	e0 68 00 83 	mov	r8,131
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80012910:	f0 0c 01 0c 	sub	r12,r8,r12
80012914:	fe 78 08 00 	mov	r8,-63488
80012918:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
8001291c:	f2 ca ff c0 	sub	r10,r9,-64
80012920:	f0 0a 03 2c 	ld.w	r12,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80012924:	58 0c       	cp.w	r12,0
80012926:	5e 0c       	reteq	r12
		? _int_handler_table[int_grp]._int_line_handler_table[32
80012928:	48 68       	lddpc	r8,80012940 <_get_interrupt_handler+0x34>
8001292a:	f8 0c 12 00 	clz	r12,r12
8001292e:	f0 09 00 39 	add	r9,r8,r9<<0x3
80012932:	f8 0c 11 1f 	rsub	r12,r12,31
80012936:	72 18       	ld.w	r8,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80012938:	f0 0c 03 2c 	ld.w	r12,r8[r12<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8001293c:	5e fc       	retal	r12
8001293e:	d7 03       	nop
80012940:	80 02       	ld.sh	r2,r0[0x0]
80012942:	1b 58       	ld.sh	r8,--sp

80012944 <pdca_get_handler>:
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
80012944:	30 e8       	mov	r8,14
80012946:	f0 0c 18 00 	cp.b	r12,r8
8001294a:	e0 8b 00 06 	brhi	80012956 <pdca_get_handler+0x12>

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
8001294e:	a7 6c       	lsl	r12,0x6
80012950:	e0 3c 00 00 	sub	r12,65536
	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
		return (volatile avr32_pdca_channel_t *)PDCA_INVALID_ARGUMENT;
	}

	return pdca_channel;
}
80012954:	5e fc       	retal	r12
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
80012956:	5e fe       	retal	-1

80012958 <pdca_disable>:
80012958:	30 e8       	mov	r8,14
8001295a:	f0 0c 18 00 	cp.b	r12,r8
8001295e:	e0 8b 00 08 	brhi	8001296e <pdca_disable+0x16>

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
80012962:	a7 6c       	lsl	r12,0x6
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	/* Disable transfer */
	pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
80012964:	30 28       	mov	r8,2

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
80012966:	e0 3c 00 00 	sub	r12,65536
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	/* Disable transfer */
	pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
8001296a:	99 58       	st.w	r12[0x14],r8
}
8001296c:	5e fc       	retal	r12
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
8001296e:	3f fc       	mov	r12,-1
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	/* Disable transfer */
	pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
80012970:	30 28       	mov	r8,2
80012972:	99 58       	st.w	r12[0x14],r8
}
80012974:	5e fc       	retal	r12

80012976 <pdca_enable_interrupt_transfer_complete>:
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
80012976:	30 e8       	mov	r8,14
80012978:	f0 0c 18 00 	cp.b	r12,r8
8001297c:	e0 8b 00 08 	brhi	8001298c <pdca_enable_interrupt_transfer_complete+0x16>

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
80012980:	a7 6c       	lsl	r12,0x6
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	pdca_channel->ier = AVR32_PDCA_TRC_MASK;
80012982:	30 28       	mov	r8,2

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
80012984:	e0 3c 00 00 	sub	r12,65536
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	pdca_channel->ier = AVR32_PDCA_TRC_MASK;
80012988:	99 88       	st.w	r12[0x20],r8
}
8001298a:	5e fc       	retal	r12
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
8001298c:	3f fc       	mov	r12,-1
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	pdca_channel->ier = AVR32_PDCA_TRC_MASK;
8001298e:	30 28       	mov	r8,2
80012990:	99 88       	st.w	r12[0x20],r8
}
80012992:	5e fc       	retal	r12

80012994 <pdca_disable_interrupt_transfer_complete>:
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
80012994:	30 e8       	mov	r8,14
80012996:	f0 0c 18 00 	cp.b	r12,r8
8001299a:	e0 88 00 0e 	brls	800129b6 <pdca_disable_interrupt_transfer_complete+0x22>
8001299e:	3f fc       	mov	r12,-1

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800129a0:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800129a4:	d3 03       	ssrf	0x10
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	irqflags_t flags = cpu_irq_save();

	pdca_channel->idr = AVR32_PDCA_TRC_MASK;
800129a6:	30 29       	mov	r9,2
800129a8:	99 99       	st.w	r12[0x24],r9
	pdca_channel->isr;
800129aa:	78 b9       	ld.w	r9,r12[0x2c]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800129ac:	ed b8 00 10 	bld	r8,0x10
800129b0:	c0 20       	breq	800129b4 <pdca_disable_interrupt_transfer_complete+0x20>
      cpu_irq_enable();
800129b2:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
800129b4:	5e fc       	retal	r12

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
800129b6:	a7 6c       	lsl	r12,0x6
800129b8:	e0 3c 00 00 	sub	r12,65536
800129bc:	cf 2b       	rjmp	800129a0 <pdca_disable_interrupt_transfer_complete+0xc>

800129be <pdca_load_channel>:

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
800129be:	30 e8       	mov	r8,14
800129c0:	f0 0c 18 00 	cp.b	r12,r8
800129c4:	e0 88 00 11 	brls	800129e6 <pdca_load_channel+0x28>
800129c8:	3f fc       	mov	r12,-1

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800129ca:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800129ce:	d3 03       	ssrf	0x10
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	irqflags_t flags = cpu_irq_save();

	pdca_channel->mar = (uint32_t)addr;
800129d0:	99 0b       	st.w	r12[0x0],r11
	pdca_channel->tcr = size;
800129d2:	99 2a       	st.w	r12[0x8],r10
	pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
800129d4:	e0 69 01 00 	mov	r9,256
800129d8:	99 59       	st.w	r12[0x14],r9
	pdca_channel->isr;
800129da:	78 b9       	ld.w	r9,r12[0x2c]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800129dc:	ed b8 00 10 	bld	r8,0x10
800129e0:	c0 20       	breq	800129e4 <pdca_load_channel+0x26>
      cpu_irq_enable();
800129e2:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
800129e4:	5e fc       	retal	r12

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
800129e6:	a7 6c       	lsl	r12,0x6
800129e8:	e0 3c 00 00 	sub	r12,65536
800129ec:	ce fb       	rjmp	800129ca <pdca_load_channel+0xc>

800129ee <pdca_init_channel>:
	return pdca_channel;
}

uint32_t pdca_init_channel(uint8_t pdca_ch_number,
		const pdca_channel_options_t *opt)
{
800129ee:	eb cd 40 80 	pushm	r7,lr
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
800129f2:	30 e8       	mov	r8,14

volatile avr32_pdca_channel_t *pdca_get_handler(uint8_t pdca_ch_number)
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];
800129f4:	f8 09 15 06 	lsl	r9,r12,0x6
800129f8:	e0 39 00 00 	sub	r9,65536

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
800129fc:	f0 0c 18 00 	cp.b	r12,r8
80012a00:	f9 b8 0b ff 	movhi	r8,-1
80012a04:	f0 0e 17 b0 	movhi	lr,r8
80012a08:	f2 08 17 80 	movls	r8,r9
80012a0c:	f2 0e 17 80 	movls	lr,r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80012a10:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80012a14:	d3 03       	ssrf	0x10
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	irqflags_t flags = cpu_irq_save();

	pdca_channel->idr = AVR32_PDCA_TRC_MASK;
80012a16:	30 27       	mov	r7,2
80012a18:	9d 97       	st.w	lr[0x24],r7
	pdca_channel->isr;
80012a1a:	7c be       	ld.w	lr,lr[0x2c]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80012a1c:	ed ba 00 10 	bld	r10,0x10
80012a20:	c0 20       	breq	80012a24 <pdca_init_channel+0x36>
      cpu_irq_enable();
80012a22:	d5 03       	csrf	0x10
{
	/* get the correct channel pointer */
	volatile avr32_pdca_channel_t *pdca_channel
		= &AVR32_PDCA.channel[pdca_ch_number];

	if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH) {
80012a24:	30 ea       	mov	r10,14
80012a26:	f8 0a 18 00 	cp.b	r10,r12
80012a2a:	f9 b9 03 ff 	movlo	r9,-1

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80012a2e:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80012a32:	d3 03       	ssrf	0x10
	volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(
			pdca_ch_number);

	irqflags_t flags = cpu_irq_save();

	pdca_channel->idr = AVR32_PDCA_RCZ_MASK;
80012a34:	30 1c       	mov	r12,1
80012a36:	93 9c       	st.w	r9[0x24],r12
	pdca_channel->isr;
80012a38:	72 b9       	ld.w	r9,r9[0x2c]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80012a3a:	ed ba 00 10 	bld	r10,0x10
80012a3e:	c0 20       	breq	80012a42 <pdca_init_channel+0x54>
      cpu_irq_enable();
80012a40:	d5 03       	csrf	0x10

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80012a42:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80012a46:	d3 03       	ssrf	0x10
	pdca_disable_interrupt_transfer_complete(pdca_ch_number); 
	pdca_disable_interrupt_reload_counter_zero(pdca_ch_number);
	
	irqflags_t flags = cpu_irq_save();

	pdca_channel->mar = (uint32_t)opt->addr;
80012a48:	76 0a       	ld.w	r10,r11[0x0]
80012a4a:	91 0a       	st.w	r8[0x0],r10
	pdca_channel->tcr = opt->size;
80012a4c:	76 1a       	ld.w	r10,r11[0x4]
80012a4e:	91 2a       	st.w	r8[0x8],r10
	pdca_channel->psr = opt->pid;
80012a50:	76 4a       	ld.w	r10,r11[0x10]
80012a52:	91 1a       	st.w	r8[0x4],r10
	pdca_channel->marr = (uint32_t)opt->r_addr;
80012a54:	76 2a       	ld.w	r10,r11[0x8]
80012a56:	91 3a       	st.w	r8[0xc],r10
	pdca_channel->tcrr = opt->r_size;
80012a58:	76 3a       	ld.w	r10,r11[0xc]
80012a5a:	91 4a       	st.w	r8[0x10],r10
	pdca_channel->mr =
80012a5c:	76 5a       	ld.w	r10,r11[0x14]
80012a5e:	91 6a       	st.w	r8[0x18],r10
#if (AVR32_PDCA_H_VERSION >= 120)
			opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
#endif
			opt->transfer_size << AVR32_PDCA_SIZE_OFFSET;
	pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
80012a60:	e0 6a 01 00 	mov	r10,256
80012a64:	91 5a       	st.w	r8[0x14],r10
	pdca_channel->isr;
80012a66:	70 b8       	ld.w	r8,r8[0x2c]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80012a68:	ed b9 00 10 	bld	r9,0x10
80012a6c:	c0 20       	breq	80012a70 <pdca_init_channel+0x82>
      cpu_irq_enable();
80012a6e:	d5 03       	csrf	0x10
	
	cpu_irq_restore(flags);

	return PDCA_SUCCESS;
}
80012a70:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0

80012a74 <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
80012a74:	f8 c8 00 01 	sub	r8,r12,1
80012a78:	f0 0b 00 0b 	add	r11,r8,r11
80012a7c:	f6 0c 0d 0a 	divu	r10,r11,r12
80012a80:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
80012a82:	f4 c8 00 01 	sub	r8,r10,1
80012a86:	e0 48 00 fe 	cp.w	r8,254
80012a8a:	e0 8b 00 04 	brhi	80012a92 <getBaudDiv+0x1e>
		return -1;
	}

	return baudDiv;
80012a8e:	5c 8c       	casts.h	r12
}
80012a90:	5e fc       	retal	r12

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);

	if (baudDiv <= 0 || baudDiv > 255) {
80012a92:	5e fe       	retal	-1

80012a94 <spi_initMaster>:
	return SPI_OK;
}

spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
80012a94:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
80012a96:	30 18       	mov	r8,1
	return SPI_OK;
}

spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
80012a98:	18 99       	mov	r9,r12
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
80012a9a:	f7 3a 00 0d 	ld.ub	r10,r11[13]
80012a9e:	f0 0a 18 00 	cp.b	r10,r8
80012aa2:	e0 88 00 04 	brls	80012aaa <spi_initMaster+0x16>
80012aa6:	30 2c       	mov	r12,2
80012aa8:	d8 02       	popm	pc

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
	u_avr32_spi_mr.MR.mstr = 1;
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
	u_avr32_spi_mr.MR.llb = 0;
80012aaa:	30 0a       	mov	r10,0
	if (options->modfdis > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
80012aac:	e0 68 00 80 	mov	r8,128
80012ab0:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
	u_avr32_spi_mr.MR.mstr = 1;
80012ab2:	30 1e       	mov	lr,1

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
80012ab4:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
80012ab6:	f7 3b 00 0d 	ld.ub	r11,r11[13]
	u_avr32_spi_mr.MR.llb = 0;
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
	spi->mr = u_avr32_spi_mr.mr;
80012aba:	14 9c       	mov	r12,r10
	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
	u_avr32_spi_mr.MR.mstr = 1;
80012abc:	f1 de d0 01 	bfins	r8,lr,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
80012ac0:	f1 db d0 81 	bfins	r8,r11,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
80012ac4:	f1 da d0 e1 	bfins	r8,r10,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
80012ac8:	30 fa       	mov	r10,15
80012aca:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
80012ace:	93 18       	st.w	r9[0x4],r8

	return SPI_OK;
}
80012ad0:	d8 02       	popm	pc

80012ad2 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80012ad2:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
80012ad4:	30 18       	mov	r8,1
80012ad6:	f0 0b 18 00 	cp.b	r11,r8
80012ada:	5f be       	srhi	lr
80012adc:	f0 0a 18 00 	cp.b	r10,r8
80012ae0:	5f b8       	srhi	r8
80012ae2:	1c 48       	or	r8,lr
80012ae4:	c0 a1       	brne	80012af8 <spi_selectionMode+0x26>
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
80012ae6:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
80012ae8:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80012aec:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
80012af0:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
80012af4:	99 18       	st.w	r12[0x4],r8
80012af6:	d8 0a       	popm	pc,r12=0
		uint8_t pcs_decode,
		uint8_t delay)
{
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
80012af8:	30 2c       	mov	r12,2
80012afa:	d8 02       	popm	pc

80012afc <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80012afc:	78 19       	ld.w	r9,r12[0x4]

	return SPI_OK;
}

spi_status_t spi_selectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80012afe:	18 98       	mov	r8,r12
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80012b00:	ea 19 00 0f 	orh	r9,0xf
80012b04:	99 19       	st.w	r12[0x4],r9

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
80012b06:	78 1c       	ld.w	r12,r12[0x4]
80012b08:	e2 1c 00 04 	andl	r12,0x4,COH
80012b0c:	c0 80       	breq	80012b1c <spi_selectChip+0x20>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
80012b0e:	30 e9       	mov	r9,14
80012b10:	f2 0b 18 00 	cp.b	r11,r9
80012b14:	e0 88 00 12 	brls	80012b38 <spi_selectChip+0x3c>
	} else {
		if (chip > 3) {
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80012b18:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
80012b1a:	5e fc       	retal	r12
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
80012b1c:	30 39       	mov	r9,3
80012b1e:	f2 0b 18 00 	cp.b	r11,r9
80012b22:	fe 9b ff fb 	brhi	80012b18 <spi_selectChip+0x1c>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80012b26:	70 19       	ld.w	r9,r8[0x4]
80012b28:	2f 0b       	sub	r11,-16
80012b2a:	30 1a       	mov	r10,1
80012b2c:	f4 0b 09 4b 	lsl	r11,r10,r11
80012b30:	5c db       	com	r11
80012b32:	12 6b       	and	r11,r9
80012b34:	91 1b       	st.w	r8[0x4],r11
80012b36:	5e fc       	retal	r12
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80012b38:	70 19       	ld.w	r9,r8[0x4]
80012b3a:	b1 6b       	lsl	r11,0x10
80012b3c:	30 0c       	mov	r12,0
80012b3e:	ea 1b ff f0 	orh	r11,0xfff0
80012b42:	e8 1b ff ff 	orl	r11,0xffff
80012b46:	12 6b       	and	r11,r9
80012b48:	91 1b       	st.w	r8[0x4],r11
80012b4a:	5e fc       	retal	r12

80012b4c <spi_unselectChip>:

	return SPI_OK;
}

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80012b4c:	30 09       	mov	r9,0
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80012b4e:	c0 58       	rjmp	80012b58 <spi_unselectChip+0xc>
80012b50:	2f f9       	sub	r9,-1
		if (!timeout--) {
80012b52:	e0 49 3a 99 	cp.w	r9,15001
80012b56:	c0 d0       	breq	80012b70 <spi_unselectChip+0x24>

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80012b58:	78 48       	ld.w	r8,r12[0x10]
80012b5a:	ed b8 00 09 	bld	r8,0x9
80012b5e:	cf 91       	brne	80012b50 <spi_unselectChip+0x4>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80012b60:	78 18       	ld.w	r8,r12[0x4]
80012b62:	ea 18 00 0f 	orh	r8,0xf
80012b66:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80012b68:	fc 18 01 00 	movh	r8,0x100
80012b6c:	99 08       	st.w	r12[0x0],r8
80012b6e:	5e fd       	retal	0
spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80012b70:	5e ff       	retal	1
80012b72:	d7 03       	nop

80012b74 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80012b74:	eb cd 40 fe 	pushm	r1-r7,lr
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80012b78:	30 34       	mov	r4,3
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80012b7a:	16 97       	mov	r7,r11
80012b7c:	18 96       	mov	r6,r12
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80012b7e:	f7 35 00 0c 	ld.ub	r5,r11[12]
80012b82:	e8 05 18 00 	cp.b	r5,r4
80012b86:	e0 8b 00 09 	brhi	80012b98 <spi_setupChipReg+0x24>
			options->stay_act > 1 ||
80012b8a:	f7 32 00 0b 	ld.ub	r2,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80012b8e:	30 13       	mov	r3,1
80012b90:	e6 02 18 00 	cp.b	r2,r3
80012b94:	e0 88 00 05 	brls	80012b9e <spi_setupChipReg+0x2a>
		spi->csr2 = u_avr32_spi_csr.csr;
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
		break;
80012b98:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
80012b9a:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80012b9e:	f7 31 00 08 	ld.ub	r1,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80012ba2:	30 78       	mov	r8,7
80012ba4:	f0 01 18 00 	cp.b	r1,r8
80012ba8:	fe 98 ff f8 	brls	80012b98 <spi_setupChipReg+0x24>
80012bac:	31 08       	mov	r8,16
80012bae:	f0 01 18 00 	cp.b	r1,r8
80012bb2:	fe 9b ff f3 	brhi	80012b98 <spi_setupChipReg+0x24>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
80012bb6:	14 9b       	mov	r11,r10
80012bb8:	6e 1c       	ld.w	r12,r7[0x4]
80012bba:	c5 df       	rcall	80012a74 <getBaudDiv>
80012bbc:	ce e5       	brlt	80012b98 <spi_setupChipReg+0x24>

	if (baudDiv < 0) {
80012bbe:	0a 9a       	mov	r10,r5
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80012bc0:	ec 1a 00 01 	eorl	r10,0x1
80012bc4:	30 08       	mov	r8,0
	if (baudDiv < 0) {
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
80012bc6:	a1 95       	lsr	r5,0x1
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80012bc8:	f1 d5 d0 01 	bfins	r8,r5,0x0,0x1
80012bcc:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80012bd0:	ef 3a 00 09 	ld.ub	r10,r7[9]
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80012bd4:	20 81       	sub	r1,8
	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80012bd6:	f1 d2 d0 61 	bfins	r8,r2,0x3,0x1

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80012bda:	0f 89       	ld.ub	r9,r7[0x0]
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;

	switch (options->reg) {
80012bdc:	f1 d1 d0 84 	bfins	r8,r1,0x4,0x4
	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80012be0:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80012be4:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80012be8:	ef 3a 00 0a 	ld.ub	r10,r7[10]
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80012bec:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
80012bf0:	e6 09 18 00 	cp.b	r9,r3

	switch (options->reg) {
80012bf4:	c0 f0       	breq	80012c12 <spi_setupChipReg+0x9e>
80012bf6:	c0 b3       	brcs	80012c0c <spi_setupChipReg+0x98>
80012bf8:	30 2a       	mov	r10,2
80012bfa:	f4 09 18 00 	cp.b	r9,r10
80012bfe:	c0 d0       	breq	80012c18 <spi_setupChipReg+0xa4>
80012c00:	e8 09 18 00 	cp.b	r9,r4
80012c04:	cc a1       	brne	80012b98 <spi_setupChipReg+0x24>
80012c06:	8d f8       	st.w	r6[0x3c],r8
	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80012c08:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80012c0c:	8d c8       	st.w	r6[0x30],r8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;

	switch (options->reg) {
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80012c0e:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80012c12:	8d d8       	st.w	r6[0x34],r8
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80012c14:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80012c18:	8d e8       	st.w	r6[0x38],r8
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80012c1a:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80012c1e:	d7 03       	nop

80012c20 <spi_enable>:
80012c20:	30 18       	mov	r8,1
80012c22:	99 08       	st.w	r12[0x0],r8
}

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
}
80012c24:	5e fc       	retal	r12

80012c26 <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80012c26:	30 09       	mov	r9,0
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80012c28:	c0 58       	rjmp	80012c32 <spi_write+0xc>
80012c2a:	2f f9       	sub	r9,-1
		if (!timeout--) {
80012c2c:	e0 49 3a 99 	cp.w	r9,15001
80012c30:	c0 80       	breq	80012c40 <spi_write+0x1a>

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80012c32:	78 48       	ld.w	r8,r12[0x10]
80012c34:	ed b8 00 01 	bld	r8,0x1
80012c38:	cf 91       	brne	80012c2a <spi_write+0x4>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80012c3a:	5c 7b       	castu.h	r11
80012c3c:	99 3b       	st.w	r12[0xc],r11
80012c3e:	5e fd       	retal	0
spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
		if (!timeout--) {
80012c40:	5e ff       	retal	1

80012c42 <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
80012c42:	30 09       	mov	r9,0
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80012c44:	c0 58       	rjmp	80012c4e <spi_read+0xc>
80012c46:	2f f9       	sub	r9,-1
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80012c48:	e0 49 3a 99 	cp.w	r9,15001
80012c4c:	c0 b0       	breq	80012c62 <spi_read+0x20>

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80012c4e:	78 48       	ld.w	r8,r12[0x10]
80012c50:	e2 18 02 01 	andl	r8,0x201,COH
80012c54:	e0 48 02 01 	cp.w	r8,513
80012c58:	cf 71       	brne	80012c46 <spi_read+0x4>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80012c5a:	78 28       	ld.w	r8,r12[0x8]
80012c5c:	30 0c       	mov	r12,0
80012c5e:	b6 08       	st.h	r11[0x0],r8

	return SPI_OK;
}
80012c60:	5e fc       	retal	r12
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80012c62:	5e ff       	retal	1

80012c64 <tc_init_waveform>:
  return 0;
}


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
80012c64:	d4 01       	pushm	lr
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
80012c66:	76 09       	ld.w	r9,r11[0x0]
80012c68:	58 29       	cp.w	r9,2
80012c6a:	e0 8b 00 4b 	brhi	80012d00 <tc_init_waveform+0x9c>
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80012c6e:	76 18       	ld.w	r8,r11[0x4]
80012c70:	10 9e       	mov	lr,r8
80012c72:	e6 1e c0 00 	andh	lr,0xc000,COH
80012c76:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80012c7a:	af ba       	sbr	r10,0xf
80012c7c:	1c 4a       	or	r10,lr
80012c7e:	10 9e       	mov	lr,r8
80012c80:	e6 1e 30 00 	andh	lr,0x3000,COH
80012c84:	1c 4a       	or	r10,lr
80012c86:	10 9e       	mov	lr,r8
80012c88:	e6 1e 0c 00 	andh	lr,0xc00,COH
80012c8c:	1c 4a       	or	r10,lr
80012c8e:	10 9e       	mov	lr,r8
80012c90:	e6 1e 03 00 	andh	lr,0x300,COH
80012c94:	1c 4a       	or	r10,lr
80012c96:	10 9e       	mov	lr,r8
80012c98:	e6 1e 00 c0 	andh	lr,0xc0,COH
80012c9c:	1c 4a       	or	r10,lr
80012c9e:	10 9e       	mov	lr,r8
80012ca0:	e6 1e 00 30 	andh	lr,0x30,COH
80012ca4:	1c 4a       	or	r10,lr
80012ca6:	10 9e       	mov	lr,r8
80012ca8:	e6 1e 00 0c 	andh	lr,0xc,COH
80012cac:	1c 4a       	or	r10,lr
80012cae:	10 9e       	mov	lr,r8
80012cb0:	e6 1e 00 03 	andh	lr,0x3,COH
80012cb4:	1c 4a       	or	r10,lr
80012cb6:	10 9e       	mov	lr,r8
80012cb8:	e2 1e 60 00 	andl	lr,0x6000,COH
80012cbc:	1c 4a       	or	r10,lr
80012cbe:	10 9e       	mov	lr,r8
80012cc0:	e2 1e 10 00 	andl	lr,0x1000,COH
80012cc4:	1c 4a       	or	r10,lr
80012cc6:	10 9e       	mov	lr,r8
80012cc8:	e2 1e 0c 00 	andl	lr,0xc00,COH
80012ccc:	1c 4a       	or	r10,lr
80012cce:	10 9e       	mov	lr,r8
80012cd0:	e2 1e 03 00 	andl	lr,0x300,COH
80012cd4:	1c 4a       	or	r10,lr
80012cd6:	10 9e       	mov	lr,r8
80012cd8:	e2 1e 00 80 	andl	lr,0x80,COH
80012cdc:	10 9b       	mov	r11,r8
80012cde:	1c 4a       	or	r10,lr
80012ce0:	e2 1b 00 08 	andl	r11,0x8,COH
80012ce4:	10 9e       	mov	lr,r8
80012ce6:	a5 69       	lsl	r9,0x4
80012ce8:	e2 1e 00 40 	andl	lr,0x40,COH
80012cec:	2f f9       	sub	r9,-1
80012cee:	1c 4a       	or	r10,lr
80012cf0:	e2 18 00 30 	andl	r8,0x30,COH
80012cf4:	f5 e8 10 08 	or	r8,r10,r8
80012cf8:	16 48       	or	r8,r11
80012cfa:	f8 09 09 28 	st.w	r12[r9<<0x2],r8
80012cfe:	d8 0a       	popm	pc,r12=0


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
80012d00:	dc 0a       	popm	pc,r12=-1

80012d02 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80012d02:	58 2b       	cp.w	r11,2
80012d04:	e0 8b 00 07 	brhi	80012d12 <tc_start+0x10>
    return TC_INVALID_ARGUMENT;

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
80012d08:	a7 6b       	lsl	r11,0x6
80012d0a:	16 0c       	add	r12,r11
80012d0c:	30 58       	mov	r8,5
80012d0e:	99 08       	st.w	r12[0x0],r8
80012d10:	5e fd       	retal	0


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80012d12:	5e fe       	retal	-1

80012d14 <tc_read_sr>:


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80012d14:	58 2b       	cp.w	r11,2
80012d16:	e0 8b 00 07 	brhi	80012d24 <tc_read_sr+0x10>
    return TC_INVALID_ARGUMENT;

  return tc->channel[channel].sr;
80012d1a:	a7 6b       	lsl	r11,0x6
80012d1c:	2e 0b       	sub	r11,-32
80012d1e:	16 0c       	add	r12,r11
80012d20:	78 0c       	ld.w	r12,r12[0x0]
}
80012d22:	5e fc       	retal	r12


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80012d24:	5e fe       	retal	-1

80012d26 <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80012d26:	58 2b       	cp.w	r11,2
80012d28:	e0 8b 00 1a 	brhi	80012d5c <tc_write_rc+0x36>
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80012d2c:	f6 08 15 04 	lsl	r8,r11,0x4
80012d30:	2f f8       	sub	r8,-1
80012d32:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
80012d36:	ed b8 00 0f 	bld	r8,0xf
80012d3a:	c0 e1       	brne	80012d56 <tc_write_rc+0x30>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
80012d3c:	a7 6b       	lsl	r11,0x6
80012d3e:	f8 0b 00 0b 	add	r11,r12,r11
80012d42:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
80012d46:	2e 4b       	sub	r11,-28
80012d48:	76 08       	ld.w	r8,r11[0x0]
80012d4a:	e0 18 00 00 	andl	r8,0x0
80012d4e:	f9 e8 10 08 	or	r8,r12,r8
80012d52:	97 08       	st.w	r11[0x0],r8

  return value;
}
80012d54:	5e fc       	retal	r12
80012d56:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
80012d5a:	5e fc       	retal	r12


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80012d5c:	5e fe       	retal	-1

80012d5e <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80012d5e:	eb cd 40 80 	pushm	r7,lr
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80012d62:	e1 be 00 00 	mfsr	lr,0x0

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80012d66:	58 2b       	cp.w	r11,2
80012d68:	e0 8b 00 5f 	brhi	80012e26 <tc_configure_interrupts+0xc8>
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80012d6c:	74 08       	ld.w	r8,r10[0x0]
80012d6e:	10 99       	mov	r9,r8
80012d70:	e2 19 00 02 	andl	r9,0x2,COH
80012d74:	e2 18 00 fd 	andl	r8,0xfd,COH
80012d78:	12 48       	or	r8,r9
80012d7a:	f6 09 15 06 	lsl	r9,r11,0x6
80012d7e:	f8 09 00 07 	add	r7,r12,r9
80012d82:	2d c7       	sub	r7,-36
80012d84:	8f 08       	st.w	r7[0x0],r8
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
80012d86:	ee 1e 00 01 	eorh	lr,0x1
80012d8a:	fd de c2 01 	bfextu	lr,lr,0x10,0x1
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
80012d8e:	c4 e1       	brne	80012e2a <tc_configure_interrupts+0xcc>
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80012d90:	a7 6b       	lsl	r11,0x6
80012d92:	2e 0b       	sub	r11,-32
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80012d94:	74 08       	ld.w	r8,r10[0x0]
80012d96:	f8 09 00 0a 	add	r10,r12,r9
80012d9a:	ef d8 c0 e1 	bfextu	r7,r8,0x7,0x1
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80012d9e:	16 0c       	add	r12,r11
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80012da0:	e0 6b 00 80 	mov	r11,128
80012da4:	58 07       	cp.w	r7,0
80012da6:	f9 bb 01 00 	movne	r11,0
80012daa:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
80012dae:	ec 19 00 01 	eorl	r9,0x1
80012db2:	f7 e9 10 09 	or	r9,r11,r9
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
80012db6:	f7 d8 c0 c1 	bfextu	r11,r8,0x6,0x1
80012dba:	f9 bb 00 40 	moveq	r11,64
80012dbe:	f9 bb 01 00 	movne	r11,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80012dc2:	16 49       	or	r9,r11
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
80012dc4:	f7 d8 c0 a1 	bfextu	r11,r8,0x5,0x1
80012dc8:	f9 bb 00 20 	moveq	r11,32
80012dcc:	f9 bb 01 00 	movne	r11,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80012dd0:	16 49       	or	r9,r11
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
80012dd2:	f7 d8 c0 81 	bfextu	r11,r8,0x4,0x1
80012dd6:	f9 bb 00 10 	moveq	r11,16
80012dda:	f9 bb 01 00 	movne	r11,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80012dde:	16 49       	or	r9,r11
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
80012de0:	f7 d8 c0 61 	bfextu	r11,r8,0x3,0x1
80012de4:	f9 bb 00 08 	moveq	r11,8
80012de8:	f9 bb 01 00 	movne	r11,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80012dec:	16 49       	or	r9,r11
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80012dee:	f7 d8 c0 41 	bfextu	r11,r8,0x2,0x1
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
80012df2:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80012df6:	58 0b       	cp.w	r11,0
80012df8:	f9 bb 00 04 	moveq	r11,4
80012dfc:	f9 bb 01 00 	movne	r11,0
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
80012e00:	58 08       	cp.w	r8,0
80012e02:	f9 b8 00 02 	moveq	r8,2
80012e06:	f9 b8 01 00 	movne	r8,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80012e0a:	16 49       	or	r9,r11
80012e0c:	f3 e8 10 08 	or	r8,r9,r8
80012e10:	2d 8a       	sub	r10,-40
80012e12:	95 08       	st.w	r10[0x0],r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80012e14:	78 08       	ld.w	r8,r12[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
80012e16:	58 0e       	cp.w	lr,0
80012e18:	c0 41       	brne	80012e20 <tc_configure_interrupts+0xc2>
80012e1a:	1c 9c       	mov	r12,lr
80012e1c:	e3 cd 80 80 	ldm	sp++,r7,pc
80012e20:	d5 03       	csrf	0x10
80012e22:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
  bool global_interrupt_enabled = Is_global_interrupt_enabled();

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80012e26:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
80012e2a:	d3 03       	ssrf	0x10
80012e2c:	cb 2b       	rjmp	80012d90 <tc_configure_interrupts+0x32>

80012e2e <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80012e2e:	d4 01       	pushm	lr
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80012e30:	f6 08 15 04 	lsl	r8,r11,0x4
80012e34:	14 38       	cp.w	r8,r10
80012e36:	e0 8b 00 26 	brhi	80012e82 <usart_set_async_baudrate+0x54>
80012e3a:	31 0e       	mov	lr,16
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80012e3c:	f0 09 16 01 	lsr	r9,r8,0x1
80012e40:	f2 0a 00 39 	add	r9,r9,r10<<0x3
80012e44:	f2 08 0d 08 	divu	r8,r9,r8
80012e48:	10 99       	mov	r9,r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80012e4a:	a3 98       	lsr	r8,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80012e4c:	f0 cb 00 01 	sub	r11,r8,1
80012e50:	e0 4b ff fe 	cp.w	r11,65534
80012e54:	e0 8b 00 1b 	brhi	80012e8a <usart_set_async_baudrate+0x5c>
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80012e58:	78 1a       	ld.w	r10,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80012e5a:	e8 6b 00 00 	mov	r11,524288
80012e5e:	e4 1a ff f7 	andh	r10,0xfff7
80012e62:	e0 1a fe cf 	andl	r10,0xfecf
80012e66:	59 0e       	cp.w	lr,16
80012e68:	f6 0e 17 10 	movne	lr,r11
80012e6c:	f9 be 00 00 	moveq	lr,0
80012e70:	fd ea 10 0a 	or	r10,lr,r10
80012e74:	99 1a       	st.w	r12[0x4],r10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80012e76:	f3 d9 c0 03 	bfextu	r9,r9,0x0,0x3
80012e7a:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80012e7e:	99 88       	st.w	r12[0x20],r8
80012e80:	d8 0a       	popm	pc,r12=0
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80012e82:	f6 08 15 03 	lsl	r8,r11,0x3
80012e86:	30 8e       	mov	lr,8
80012e88:	cd ab       	rjmp	80012e3c <usart_set_async_baudrate+0xe>
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80012e8a:	da 0a       	popm	pc,r12=1

80012e8c <usart_write_line>:
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80012e8c:	17 8a       	ld.ub	r10,r11[0x0]
80012e8e:	58 0a       	cp.w	r10,0
80012e90:	5e 0c       	reteq	r12
80012e92:	30 09       	mov	r9,0
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80012e94:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80012e96:	ed b8 00 01 	bld	r8,0x1
80012e9a:	c0 91       	brne	80012eac <usart_write_line+0x20>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80012e9c:	f1 da c0 09 	bfextu	r8,r10,0x0,0x9


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
    usart_putchar(usart, *string++);
80012ea0:	2f fb       	sub	r11,-1

int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80012ea2:	99 78       	st.w	r12[0x1c],r8
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80012ea4:	17 8a       	ld.ub	r10,r11[0x0]
80012ea6:	58 0a       	cp.w	r10,0
80012ea8:	cf 51       	brne	80012e92 <usart_write_line+0x6>
80012eaa:	5e fc       	retal	r12
80012eac:	2f f9       	sub	r9,-1
{
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80012eae:	e0 49 27 10 	cp.w	r9,10000
80012eb2:	cf 11       	brne	80012e94 <usart_write_line+0x8>


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
    usart_putchar(usart, *string++);
80012eb4:	2f fb       	sub	r11,-1
80012eb6:	cf 7b       	rjmp	80012ea4 <usart_write_line+0x18>

80012eb8 <usart_init_rs232>:
              AVR32_USART_CR_RTSDIS_MASK;
}


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80012eb8:	eb cd 40 e0 	pushm	r5-r7,lr
80012ebc:	18 97       	mov	r7,r12
80012ebe:	16 96       	mov	r6,r11
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80012ec0:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80012ec4:	ed b8 00 10 	bld	r8,0x10
80012ec8:	c2 e1       	brne	80012f24 <usart_init_rs232+0x6c>
  usart->idr = 0xFFFFFFFF;
80012eca:	3f f8       	mov	r8,-1
80012ecc:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80012ece:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80012ed0:	30 08       	mov	r8,0
80012ed2:	8f 18       	st.w	r7[0x4],r8
  usart->rtor = 0;
80012ed4:	8f 98       	st.w	r7[0x24],r8
  usart->ttgr = 0;
80012ed6:	8f a8       	st.w	r7[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80012ed8:	ea 68 61 0c 	mov	r8,680204
80012edc:	8f 08       	st.w	r7[0x0],r8
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80012ede:	58 06       	cp.w	r6,0
80012ee0:	c2 00       	breq	80012f20 <usart_init_rs232+0x68>
      opt->charlength < 5 || opt->charlength > 9 ||
80012ee2:	0d c8       	ld.ub	r8,r6[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80012ee4:	30 49       	mov	r9,4
80012ee6:	f2 08 18 00 	cp.b	r8,r9
80012eea:	e0 88 00 1b 	brls	80012f20 <usart_init_rs232+0x68>
80012eee:	30 95       	mov	r5,9
80012ef0:	ea 08 18 00 	cp.b	r8,r5
80012ef4:	e0 8b 00 16 	brhi	80012f20 <usart_init_rs232+0x68>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80012ef8:	0d d9       	ld.ub	r9,r6[0x5]
80012efa:	30 78       	mov	r8,7
80012efc:	f0 09 18 00 	cp.b	r9,r8
80012f00:	e0 8b 00 10 	brhi	80012f20 <usart_init_rs232+0x68>
      opt->stopbits > 2 + 255 ||
80012f04:	8c 39       	ld.sh	r9,r6[0x6]
80012f06:	e0 68 01 01 	mov	r8,257
80012f0a:	f0 09 19 00 	cp.h	r9,r8
80012f0e:	e0 8b 00 09 	brhi	80012f20 <usart_init_rs232+0x68>
      opt->channelmode > 3 ||
80012f12:	ed 39 00 08 	ld.ub	r9,r6[8]
80012f16:	30 38       	mov	r8,3
80012f18:	f0 09 18 00 	cp.b	r9,r8
80012f1c:	e0 88 00 0a 	brls	80012f30 <usart_init_rs232+0x78>
  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80012f20:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80012f24:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80012f26:	3f f8       	mov	r8,-1
80012f28:	99 38       	st.w	r12[0xc],r8
  usart->csr;
80012f2a:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80012f2c:	d5 03       	csrf	0x10
80012f2e:	cd 1b       	rjmp	80012ed0 <usart_init_rs232+0x18>
  if (!opt || // Null pointer.
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80012f30:	6c 0b       	ld.w	r11,r6[0x0]
80012f32:	0e 9c       	mov	r12,r7
80012f34:	c7 df       	rcall	80012e2e <usart_set_async_baudrate>
80012f36:	58 1c       	cp.w	r12,1
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80012f38:	cf 40       	breq	80012f20 <usart_init_rs232+0x68>
80012f3a:	0d c8       	ld.ub	r8,r6[0x4]
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80012f3c:	ea 08 18 00 	cp.b	r8,r5
80012f40:	c2 a0       	breq	80012f94 <usart_init_rs232+0xdc>
80012f42:	6e 19       	ld.w	r9,r7[0x4]
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80012f44:	20 58       	sub	r8,5
80012f46:	f3 e8 10 68 	or	r8,r9,r8<<0x6
80012f4a:	8f 18       	st.w	r7[0x4],r8
80012f4c:	6e 19       	ld.w	r9,r7[0x4]
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80012f4e:	ed 3a 00 08 	ld.ub	r10,r6[8]
80012f52:	0d d8       	ld.ub	r8,r6[0x5]
80012f54:	a9 78       	lsl	r8,0x9
80012f56:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
80012f5a:	12 48       	or	r8,r9
80012f5c:	8f 18       	st.w	r7[0x4],r8
80012f5e:	30 29       	mov	r9,2
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80012f60:	8c 38       	ld.sh	r8,r6[0x6]
80012f62:	f2 08 19 00 	cp.h	r8,r9
80012f66:	e0 88 00 11 	brls	80012f88 <usart_init_rs232+0xd0>
80012f6a:	6e 18       	ld.w	r8,r7[0x4]
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80012f6c:	ad b8       	sbr	r8,0xd
80012f6e:	8f 18       	st.w	r7[0x4],r8
80012f70:	8c b8       	ld.uh	r8,r6[0x6]
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80012f72:	20 28       	sub	r8,2
80012f74:	8f a8       	st.w	r7[0x28],r8
80012f76:	6e 18       	ld.w	r8,r7[0x4]
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80012f78:	e0 18 ff f0 	andl	r8,0xfff0
80012f7c:	8f 18       	st.w	r7[0x4],r8
80012f7e:	30 0c       	mov	r12,0
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80012f80:	35 08       	mov	r8,80
80012f82:	8f 08       	st.w	r7[0x0],r8
80012f84:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80012f88:	6e 19       	ld.w	r9,r7[0x4]
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80012f8a:	5c 78       	castu.h	r8
80012f8c:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
80012f90:	8f 18       	st.w	r7[0x4],r8
80012f92:	cf 2b       	rjmp	80012f76 <usart_init_rs232+0xbe>
80012f94:	6e 18       	ld.w	r8,r7[0x4]
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80012f96:	b1 b8       	sbr	r8,0x11
80012f98:	8f 18       	st.w	r7[0x4],r8
80012f9a:	cd 9b       	rjmp	80012f4c <usart_init_rs232+0x94>

80012f9c <print_dbg_hex>:
  print_short_hex(DBG_USART, n);
}


void print_dbg_hex(unsigned long n)
{
80012f9c:	d4 01       	pushm	lr
80012f9e:	20 3d       	sub	sp,12

  // Convert the given number to an ASCII hexadecimal representation.
  tmp[8] = '\0';
  for (i = 7; i >= 0; i--)
  {
    tmp[i] = HEX_DIGITS[n & 0xF];
80012fa0:	49 98       	lddpc	r8,80013004 <print_dbg_hex+0x68>
80012fa2:	f8 09 16 1c 	lsr	r9,r12,0x1c
80012fa6:	f0 09 07 09 	ld.ub	r9,r8[r9]
80012faa:	ba 89       	st.b	sp[0x0],r9
{
  char tmp[9];
  int i;

  // Convert the given number to an ASCII hexadecimal representation.
  tmp[8] = '\0';
80012fac:	30 09       	mov	r9,0
80012fae:	fb 69 00 08 	st.b	sp[8],r9
  for (i = 7; i >= 0; i--)
  {
    tmp[i] = HEX_DIGITS[n & 0xF];
80012fb2:	f3 dc c0 04 	bfextu	r9,r12,0x0,0x4
80012fb6:	f0 09 07 09 	ld.ub	r9,r8[r9]
80012fba:	ba f9       	st.b	sp[0x7],r9
80012fbc:	f3 dc c0 84 	bfextu	r9,r12,0x4,0x4
80012fc0:	f0 09 07 09 	ld.ub	r9,r8[r9]
80012fc4:	ba e9       	st.b	sp[0x6],r9
80012fc6:	f3 dc c1 04 	bfextu	r9,r12,0x8,0x4
80012fca:	f0 09 07 09 	ld.ub	r9,r8[r9]
80012fce:	ba d9       	st.b	sp[0x5],r9
80012fd0:	f3 dc c1 84 	bfextu	r9,r12,0xc,0x4
80012fd4:	f0 09 07 09 	ld.ub	r9,r8[r9]
80012fd8:	ba c9       	st.b	sp[0x4],r9
80012fda:	f3 dc c2 04 	bfextu	r9,r12,0x10,0x4
80012fde:	f0 09 07 09 	ld.ub	r9,r8[r9]
80012fe2:	ba b9       	st.b	sp[0x3],r9
80012fe4:	f3 dc c2 84 	bfextu	r9,r12,0x14,0x4
80012fe8:	f9 dc c3 04 	bfextu	r12,r12,0x18,0x4
80012fec:	f0 09 07 09 	ld.ub	r9,r8[r9]
80012ff0:	f0 0c 07 08 	ld.ub	r8,r8[r12]
80012ff4:	ba a9       	st.b	sp[0x2],r9
80012ff6:	ba 98       	st.b	sp[0x1],r8


void print(volatile avr32_usart_t *usart, const char *str)
{
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80012ff8:	1a 9b       	mov	r11,sp
80012ffa:	fe 7c 14 00 	mov	r12,-60416
80012ffe:	c4 7f       	rcall	80012e8c <usart_write_line>
80013000:	2f dd       	sub	sp,-12

void print_dbg_hex(unsigned long n)
{
  // Redirection to the debug USART.
  print_hex(DBG_USART, n);
}
80013002:	d8 02       	popm	pc
80013004:	80 02       	ld.sh	r2,r0[0x0]
80013006:	1b f8       	ld.ub	r8,sp[0x7]

80013008 <print_dbg_ulong>:
80013008:	eb cd 40 c0 	pushm	r6-r7,lr
8001300c:	20 3d       	sub	sp,12
8001300e:	30 08       	mov	r8,0
{
  char tmp[11];
  int i = sizeof(tmp) - 1;

  // Convert the given number to an ASCII decimal representation.
  tmp[i] = '\0';
80013010:	30 a9       	mov	r9,10
80013012:	fb 68 00 0a 	st.b	sp[10],r8
80013016:	1a 9b       	mov	r11,sp
  do
  {
    tmp[--i] = '0' + n % 10;
80013018:	e0 6e cc cd 	mov	lr,52429
8001301c:	ea 1e cc cc 	orh	lr,0xcccc
80013020:	f8 0e 06 46 	mulu.d	r6,r12,lr
80013024:	20 19       	sub	r9,1
80013026:	0e 98       	mov	r8,r7
80013028:	a3 98       	lsr	r8,0x3
8001302a:	f0 08 00 2a 	add	r10,r8,r8<<0x2
8001302e:	f8 0a 01 1c 	sub	r12,r12,r10<<0x1
80013032:	2d 0c       	sub	r12,-48
80013034:	f6 09 0b 0c 	st.b	r11[r9],r12
    n /= 10;
80013038:	10 9c       	mov	r12,r8
  } while (n);
8001303a:	58 08       	cp.w	r8,0
8001303c:	cf 21       	brne	80013020 <print_dbg_ulong+0x18>


void print(volatile avr32_usart_t *usart, const char *str)
{
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
8001303e:	12 0b       	add	r11,r9
80013040:	fe 7c 14 00 	mov	r12,-60416
80013044:	c2 4f       	rcall	80012e8c <usart_write_line>
80013046:	2f dd       	sub	sp,-12

void print_dbg_ulong(unsigned long n)
{
  // Redirection to the debug USART.
  print_ulong(DBG_USART, n);
}
80013048:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

8001304c <print_dbg>:
8001304c:	d4 01       	pushm	lr
8001304e:	18 9b       	mov	r11,r12
80013050:	fe 7c 14 00 	mov	r12,-60416


void print(volatile avr32_usart_t *usart, const char *str)
{
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80013054:	c1 cf       	rcall	80012e8c <usart_write_line>
80013056:	d8 02       	popm	pc

80013058 <sd_mmc_spi_get_capacity>:
//!         [39]    == data[11] && 0x80
//!
//! @return bit
//!         true
void sd_mmc_spi_get_capacity(void)
{
80013058:	eb cd 40 c0 	pushm	r6-r7,lr
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
  if (card_type == SD_CARD_2_SDHC) {
8001305c:	e0 69 3b 4e 	mov	r9,15182
80013060:	e0 68 3b 50 	mov	r8,15184
80013064:	13 8b       	ld.ub	r11,r9[0x0]
80013066:	11 dc       	ld.ub	r12,r8[0x5]
80013068:	30 39       	mov	r9,3
8001306a:	f2 0b 18 00 	cp.b	r11,r9
    capacity_mult = (c_size >> 13) & 0x01FF;
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
8001306e:	c4 60       	breq	800130fa <sd_mmc_spi_get_capacity+0xa2>
80013070:	11 fe       	ld.ub	lr,r8[0x7]
80013072:	f1 37 00 08 	ld.ub	r7,r8[8]
80013076:	a7 87       	lsr	r7,0x6
80013078:	ee 0e 00 27 	add	r7,r7,lr<<0x2
8001307c:	11 ee       	ld.ub	lr,r8[0x6]
8001307e:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
    capacity = (uint64_t)c_size << 19;
    capacity_mult = (c_size >> 13) & 0x01FF;
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
80013082:	ab 6e       	lsl	lr,0xa
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
80013084:	f1 39 00 0a 	ld.ub	r9,r8[10]
80013088:	1c 07       	add	r7,lr
8001308a:	f2 06 16 07 	lsr	r6,r9,0x7
8001308e:	2f f7       	sub	r7,-1
80013090:	f1 3e 00 09 	ld.ub	lr,r8[9]
80013094:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
80013098:	ec 0e 00 1e 	add	lr,r6,lr<<0x1
8001309c:	2f ee       	sub	lr,-2
8001309e:	ee 0e 09 4e 	lsl	lr,r7,lr
  uint8_t  read_bl_len;
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
800130a2:	20 1e       	sub	lr,1
800130a4:	e0 6a 3b 48 	mov	r10,15176
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
    capacity = (1 << read_bl_len) * (sd_mmc_spi_last_block_address + 1);
800130a8:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
800130ac:	95 0e       	st.w	r10[0x0],lr
800130ae:	74 0e       	ld.w	lr,r10[0x0]
800130b0:	2f fe       	sub	lr,-1
800130b2:	fc 0c 09 4e 	lsl	lr,lr,r12
800130b6:	1c 96       	mov	r6,lr
800130b8:	30 0e       	mov	lr,0
800130ba:	1c 97       	mov	r7,lr
    capacity_mult = 0;
800130bc:	e0 6e 3b 3c 	mov	lr,15164
800130c0:	fc e7 00 00 	st.d	lr[0],r6
    if (read_bl_len > 9) {  // 9 means 2^9 = 512b
800130c4:	e0 67 3b 44 	mov	r7,15172
800130c8:	30 0e       	mov	lr,0
800130ca:	ae 0e       	st.h	r7[0x0],lr
      sd_mmc_spi_last_block_address <<= (read_bl_len - 9);
800130cc:	30 97       	mov	r7,9
800130ce:	ee 0c 18 00 	cp.b	r12,r7
800130d2:	e0 88 00 07 	brls	800130e0 <sd_mmc_spi_get_capacity+0x88>
    }
  }
  if (card_type == MMC_CARD)
800130d6:	74 0e       	ld.w	lr,r10[0x0]
800130d8:	20 9c       	sub	r12,9
  {
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
800130da:	fc 0c 09 4c 	lsl	r12,lr,r12
800130de:	95 0c       	st.w	r10[0x0],r12
800130e0:	58 0b       	cp.w	r11,0
800130e2:	c3 51       	brne	8001314c <sd_mmc_spi_get_capacity+0xf4>
800130e4:	f5 d9 c0 02 	bfextu	r10,r9,0x0,0x2
800130e8:	f1 38 00 0b 	ld.ub	r8,r8[11]
800130ec:	f3 d9 c0 45 	bfextu	r9,r9,0x2,0x5
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
  if (card_type == SD_CARD_2_SDHC) {
    c_size = ((csd[7] & 0x3F) << 16) | (csd[8] << 8) | csd[9];
800130f0:	a5 98       	lsr	r8,0x5
800130f2:	f1 ea 10 38 	or	r8,r8,r10<<0x3
800130f6:	2f f8       	sub	r8,-1
800130f8:	c3 28       	rjmp	8001315c <sd_mmc_spi_get_capacity+0x104>
800130fa:	f1 3e 00 08 	ld.ub	lr,r8[8]
800130fe:	f1 39 00 09 	ld.ub	r9,r8[9]
80013102:	f3 ee 10 89 	or	r9,r9,lr<<0x8
    ++c_size;
80013106:	11 fe       	ld.ub	lr,r8[0x7]
    capacity = (uint64_t)c_size << 19;
80013108:	fd de c0 06 	bfextu	lr,lr,0x0,0x6
8001310c:	f3 ee 11 0e 	or	lr,r9,lr<<0x10
80013110:	2f fe       	sub	lr,-1
80013112:	fc 09 16 0d 	lsr	r9,lr,0xd
80013116:	fc 0a 15 13 	lsl	r10,lr,0x13
    capacity_mult = (c_size >> 13) & 0x01FF;
8001311a:	e0 6c 3b 3c 	mov	r12,15164
8001311e:	12 9b       	mov	r11,r9
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
80013120:	f8 eb 00 00 	st.d	r12[0],r10
80013124:	f5 d9 c0 09 	bfextu	r10,r9,0x0,0x9
80013128:	e0 69 3b 44 	mov	r9,15172
8001312c:	b2 0a       	st.h	r9[0x0],r10
8001312e:	f8 ea 00 00 	ld.d	r10,r12[0]
80013132:	92 0c       	ld.sh	r12,r9[0x0]
80013134:	f4 09 16 09 	lsr	r9,r10,0x9
80013138:	b7 7c       	lsl	r12,0x17
8001313a:	f3 eb 11 79 	or	r9,r9,r11<<0x17
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
    erase_grp_mult = ((csd[10] & 0x03) << 3) | ((csd[11] & 0xE0) >> 5);
  }
  else
  {
    erase_grp_size = ((csd[10] & 0x3F) << 1) + ((csd[11] & 0x80) >> 7);
8001313e:	20 19       	sub	r9,1
80013140:	18 09       	add	r9,r12
80013142:	e0 6a 3b 48 	mov	r10,15176
80013146:	95 09       	st.w	r10[0x0],r9
80013148:	f1 39 00 0a 	ld.ub	r9,r8[10]
    erase_grp_mult = 0;
  }
  erase_group_size = (erase_grp_size + 1) * (erase_grp_mult + 1);
8001314c:	f1 38 00 0b 	ld.ub	r8,r8[11]
80013150:	a7 98       	lsr	r8,0x7
80013152:	f3 d9 c0 06 	bfextu	r9,r9,0x0,0x6
}
80013156:	f0 09 00 19 	add	r9,r8,r9<<0x1
8001315a:	30 18       	mov	r8,1
8001315c:	2f f9       	sub	r9,-1
8001315e:	b1 39       	mul	r9,r8
80013160:	e0 68 3b 46 	mov	r8,15174
80013164:	b0 09       	st.h	r8[0x0],r9
80013166:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001316a:	d7 03       	nop

8001316c <sd_mmc_spi_write_close>:
8001316c:	5e fc       	retal	r12
8001316e:	d7 03       	nop

80013170 <sd_mmc_spi_read_close_PDCA>:
//! Stop PDCA transfer
//! @brief This function closes a PDCA read transfer
//! page programming.
//!
void sd_mmc_spi_read_close_PDCA (void)
{
80013170:	d4 01       	pushm	lr

  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
80013172:	e0 6b 00 ff 	mov	r11,255
80013176:	fe 7c 28 00 	mov	r12,-55296
8001317a:	fe b0 fd 56 	rcall	80012c26 <spi_write>
  spi_write(SD_MMC_SPI,0xFF);
8001317e:	e0 6b 00 ff 	mov	r11,255
80013182:	fe 7c 28 00 	mov	r12,-55296
80013186:	fe b0 fd 50 	rcall	80012c26 <spi_write>

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
8001318a:	e0 6b 00 ff 	mov	r11,255
8001318e:	fe 7c 28 00 	mov	r12,-55296
80013192:	fe b0 fd 4a 	rcall	80012c26 <spi_write>
  spi_write(SD_MMC_SPI,0xFF);
80013196:	e0 6b 00 ff 	mov	r11,255
8001319a:	fe 7c 28 00 	mov	r12,-55296
8001319e:	fe b0 fd 44 	rcall	80012c26 <spi_write>

  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800131a2:	30 2b       	mov	r11,2
800131a4:	fe 7c 28 00 	mov	r12,-55296
800131a8:	fe b0 fc d2 	rcall	80012b4c <spi_unselectChip>

}
800131ac:	d8 02       	popm	pc
800131ae:	d7 03       	nop

800131b0 <sd_mmc_spi_wait_not_busy>:
800131b0:	d4 21       	pushm	r4-r7,lr
800131b2:	20 1d       	sub	sp,4
800131b4:	30 2b       	mov	r11,2
800131b6:	fe 7c 28 00 	mov	r12,-55296
bool sd_mmc_spi_wait_not_busy(void)
{
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
800131ba:	fa c6 ff fe 	sub	r6,sp,-2
800131be:	fe b0 fc 9f 	rcall	80012afc <spi_selectChip>
800131c2:	e0 65 3b 60 	mov	r5,15200
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
800131c6:	30 07       	mov	r7,0
800131c8:	3f f4       	mov	r4,-1
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
     return 0xFF;
   return data_read;
800131ca:	c0 98       	rjmp	800131dc <sd_mmc_spi_wait_not_busy+0x2c>
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
800131cc:	1b b8       	ld.ub	r8,sp[0x3]
800131ce:	aa 88       	st.b	r5[0x0],r8
800131d0:	e8 08 18 00 	cp.b	r8,r4
  {
    retry++;
    if (retry == 200000)
800131d4:	c1 40       	breq	800131fc <sd_mmc_spi_wait_not_busy+0x4c>
800131d6:	e2 57 0d 40 	cp.w	r7,200000
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800131da:	c1 80       	breq	8001320a <sd_mmc_spi_wait_not_busy+0x5a>
800131dc:	e0 6b 00 ff 	mov	r11,255
800131e0:	fe 7c 28 00 	mov	r12,-55296
800131e4:	fe b0 fd 21 	rcall	80012c26 <spi_write>
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
800131e8:	0c 9b       	mov	r11,r6
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800131ea:	2f f7       	sub	r7,-1
800131ec:	fe 7c 28 00 	mov	r12,-55296
800131f0:	fe b0 fd 29 	rcall	80012c42 <spi_read>
800131f4:	58 1c       	cp.w	r12,1
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
800131f6:	ce b1       	brne	800131cc <sd_mmc_spi_wait_not_busy+0x1c>
800131f8:	3f f8       	mov	r8,-1
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
      return false;
    }
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
800131fa:	aa 88       	st.b	r5[0x0],r8
800131fc:	30 2b       	mov	r11,2
800131fe:	fe 7c 28 00 	mov	r12,-55296
80013202:	fe b0 fc a5 	rcall	80012b4c <spi_unselectChip>
80013206:	2f fd       	sub	sp,-4
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
  {
    retry++;
    if (retry == 200000)
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80013208:	da 2a       	popm	r4-r7,pc,r12=1
8001320a:	30 2b       	mov	r11,2
8001320c:	fe 7c 28 00 	mov	r12,-55296
80013210:	fe b0 fc 9e 	rcall	80012b4c <spi_unselectChip>
80013214:	2f fd       	sub	sp,-4
80013216:	d8 2a       	popm	r4-r7,pc,r12=0

80013218 <sd_mmc_spi_write_open>:
80013218:	d4 01       	pushm	lr
8001321a:	e0 68 07 50 	mov	r8,1872
8001321e:	a9 7c       	lsl	r12,0x9
80013220:	91 0c       	st.w	r8[0x0],r12
80013222:	cc 7f       	rcall	800131b0 <sd_mmc_spi_wait_not_busy>
80013224:	d8 02       	popm	pc
80013226:	d7 03       	nop

80013228 <sd_mmc_spi_command>:
80013228:	eb cd 40 e0 	pushm	r5-r7,lr
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9; // gl_ptr_mem = pos * 512

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
}
8001322c:	20 1d       	sub	sp,4
8001322e:	16 97       	mov	r7,r11
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF time out error)
uint8_t sd_mmc_spi_command(uint8_t command, uint32_t arg)
{
80013230:	18 96       	mov	r6,r12
  uint8_t retry;

  spi_write(SD_MMC_SPI, 0xFF);            // write dummy byte
80013232:	e0 6b 00 ff 	mov	r11,255
80013236:	fe 7c 28 00 	mov	r12,-55296
8001323a:	fe b0 fc f6 	rcall	80012c26 <spi_write>
  spi_write(SD_MMC_SPI, command | 0x40);  // send command
8001323e:	fe 7c 28 00 	mov	r12,-55296
80013242:	0c 9b       	mov	r11,r6
80013244:	a7 ab       	sbr	r11,0x6
80013246:	5c 5b       	castu.b	r11
80013248:	fe b0 fc ef 	rcall	80012c26 <spi_write>
  spi_write(SD_MMC_SPI, arg>>24);         // send parameter
8001324c:	ee 0b 16 18 	lsr	r11,r7,0x18
80013250:	fe 7c 28 00 	mov	r12,-55296
80013254:	fe b0 fc e9 	rcall	80012c26 <spi_write>
  spi_write(SD_MMC_SPI, arg>>16);
80013258:	ee 0b 16 10 	lsr	r11,r7,0x10
8001325c:	fe 7c 28 00 	mov	r12,-55296
80013260:	fe b0 fc e3 	rcall	80012c26 <spi_write>
  spi_write(SD_MMC_SPI, arg>>8 );
80013264:	f7 d7 c1 10 	bfextu	r11,r7,0x8,0x10
80013268:	fe 7c 28 00 	mov	r12,-55296
8001326c:	fe b0 fc dd 	rcall	80012c26 <spi_write>
  spi_write(SD_MMC_SPI, arg    );
80013270:	0e 9b       	mov	r11,r7
80013272:	fe 7c 28 00 	mov	r12,-55296
80013276:	5c 7b       	castu.h	r11
80013278:	fe b0 fc d7 	rcall	80012c26 <spi_write>
  switch(command)
8001327c:	30 08       	mov	r8,0
8001327e:	f0 06 18 00 	cp.b	r6,r8
80013282:	e0 80 00 ec 	breq	8001345a <sd_mmc_spi_command+0x232>
80013286:	30 88       	mov	r8,8
80013288:	f0 06 18 00 	cp.b	r6,r8
8001328c:	e0 80 00 ee 	breq	80013468 <sd_mmc_spi_command+0x240>
         break;
      case MMC_SEND_IF_COND:
         spi_write(SD_MMC_SPI, 0x87);
         break;
      default:
         spi_write(SD_MMC_SPI, 0xff);
80013290:	e0 6b 00 ff 	mov	r11,255
80013294:	fe 7c 28 00 	mov	r12,-55296
80013298:	fe b0 fc c7 	rcall	80012c26 <spi_write>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
8001329c:	e0 6b 00 ff 	mov	r11,255

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
800132a0:	e0 67 3b 60 	mov	r7,15200
800132a4:	3f f5       	mov	r5,-1
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800132a6:	fe 7c 28 00 	mov	r12,-55296

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
800132aa:	ae 85       	st.b	r7[0x0],r5
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800132ac:	fe b0 fc bd 	rcall	80012c26 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800132b0:	fa c6 ff fe 	sub	r6,sp,-2
800132b4:	fe 7c 28 00 	mov	r12,-55296
800132b8:	0c 9b       	mov	r11,r6
800132ba:	fe b0 fc c4 	rcall	80012c42 <spi_read>
800132be:	58 1c       	cp.w	r12,1
800132c0:	e0 80 00 db 	breq	80013476 <sd_mmc_spi_command+0x24e>
     return 0xFF;
   return data_read;
800132c4:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
800132c6:	ae 8c       	st.b	r7[0x0],r12
800132c8:	ea 0c 18 00 	cp.b	r12,r5
800132cc:	e0 81 00 c4 	brne	80013454 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800132d0:	e0 6b 00 ff 	mov	r11,255
800132d4:	fe 7c 28 00 	mov	r12,-55296
800132d8:	fe b0 fc a7 	rcall	80012c26 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800132dc:	0c 9b       	mov	r11,r6
800132de:	fe 7c 28 00 	mov	r12,-55296
800132e2:	fe b0 fc b0 	rcall	80012c42 <spi_read>
800132e6:	58 1c       	cp.w	r12,1
800132e8:	e0 80 00 c9 	breq	8001347a <sd_mmc_spi_command+0x252>
     return 0xFF;
   return data_read;
800132ec:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
800132ee:	ae 8c       	st.b	r7[0x0],r12
800132f0:	3f f8       	mov	r8,-1
800132f2:	f0 0c 18 00 	cp.b	r12,r8
800132f6:	e0 81 00 af 	brne	80013454 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800132fa:	e0 6b 00 ff 	mov	r11,255
800132fe:	fe 7c 28 00 	mov	r12,-55296
80013302:	fe b0 fc 92 	rcall	80012c26 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013306:	0c 9b       	mov	r11,r6
80013308:	fe 7c 28 00 	mov	r12,-55296
8001330c:	fe b0 fc 9b 	rcall	80012c42 <spi_read>
80013310:	58 1c       	cp.w	r12,1
80013312:	e0 80 00 b7 	breq	80013480 <sd_mmc_spi_command+0x258>
     return 0xFF;
   return data_read;
80013316:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80013318:	ae 8c       	st.b	r7[0x0],r12
8001331a:	3f f8       	mov	r8,-1
8001331c:	f0 0c 18 00 	cp.b	r12,r8
80013320:	e0 81 00 9a 	brne	80013454 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013324:	e0 6b 00 ff 	mov	r11,255
80013328:	fe 7c 28 00 	mov	r12,-55296
8001332c:	fe b0 fc 7d 	rcall	80012c26 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013330:	0c 9b       	mov	r11,r6
80013332:	fe 7c 28 00 	mov	r12,-55296
80013336:	fe b0 fc 86 	rcall	80012c42 <spi_read>
8001333a:	58 1c       	cp.w	r12,1
8001333c:	e0 80 00 a5 	breq	80013486 <sd_mmc_spi_command+0x25e>
     return 0xFF;
   return data_read;
80013340:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80013342:	ae 8c       	st.b	r7[0x0],r12
80013344:	3f f8       	mov	r8,-1
80013346:	f0 0c 18 00 	cp.b	r12,r8
8001334a:	e0 81 00 85 	brne	80013454 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
8001334e:	e0 6b 00 ff 	mov	r11,255
80013352:	fe 7c 28 00 	mov	r12,-55296
80013356:	fe b0 fc 68 	rcall	80012c26 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8001335a:	0c 9b       	mov	r11,r6
8001335c:	fe 7c 28 00 	mov	r12,-55296
80013360:	fe b0 fc 71 	rcall	80012c42 <spi_read>
80013364:	58 1c       	cp.w	r12,1
80013366:	e0 80 00 93 	breq	8001348c <sd_mmc_spi_command+0x264>
     return 0xFF;
   return data_read;
8001336a:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
8001336c:	ae 8c       	st.b	r7[0x0],r12
8001336e:	3f f8       	mov	r8,-1
80013370:	f0 0c 18 00 	cp.b	r12,r8
80013374:	c7 01       	brne	80013454 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013376:	e0 6b 00 ff 	mov	r11,255
8001337a:	fe 7c 28 00 	mov	r12,-55296
8001337e:	fe b0 fc 54 	rcall	80012c26 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013382:	0c 9b       	mov	r11,r6
80013384:	fe 7c 28 00 	mov	r12,-55296
80013388:	fe b0 fc 5d 	rcall	80012c42 <spi_read>
8001338c:	58 1c       	cp.w	r12,1
8001338e:	e0 80 00 82 	breq	80013492 <sd_mmc_spi_command+0x26a>
     return 0xFF;
   return data_read;
80013392:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80013394:	ae 8c       	st.b	r7[0x0],r12
80013396:	3f f8       	mov	r8,-1
80013398:	f0 0c 18 00 	cp.b	r12,r8
8001339c:	c5 c1       	brne	80013454 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
8001339e:	e0 6b 00 ff 	mov	r11,255
800133a2:	fe 7c 28 00 	mov	r12,-55296
800133a6:	fe b0 fc 40 	rcall	80012c26 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800133aa:	0c 9b       	mov	r11,r6
800133ac:	fe 7c 28 00 	mov	r12,-55296
800133b0:	fe b0 fc 49 	rcall	80012c42 <spi_read>
800133b4:	58 1c       	cp.w	r12,1
800133b6:	c7 10       	breq	80013498 <sd_mmc_spi_command+0x270>
     return 0xFF;
   return data_read;
800133b8:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
800133ba:	ae 8c       	st.b	r7[0x0],r12
800133bc:	3f f8       	mov	r8,-1
800133be:	f0 0c 18 00 	cp.b	r12,r8
800133c2:	c4 91       	brne	80013454 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800133c4:	e0 6b 00 ff 	mov	r11,255
800133c8:	fe 7c 28 00 	mov	r12,-55296
800133cc:	fe b0 fc 2d 	rcall	80012c26 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800133d0:	0c 9b       	mov	r11,r6
800133d2:	fe 7c 28 00 	mov	r12,-55296
800133d6:	fe b0 fc 36 	rcall	80012c42 <spi_read>
800133da:	58 1c       	cp.w	r12,1
800133dc:	c6 10       	breq	8001349e <sd_mmc_spi_command+0x276>
     return 0xFF;
   return data_read;
800133de:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
800133e0:	ae 8c       	st.b	r7[0x0],r12
800133e2:	3f f8       	mov	r8,-1
800133e4:	f0 0c 18 00 	cp.b	r12,r8
800133e8:	c3 61       	brne	80013454 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800133ea:	e0 6b 00 ff 	mov	r11,255
800133ee:	fe 7c 28 00 	mov	r12,-55296
800133f2:	fe b0 fc 1a 	rcall	80012c26 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800133f6:	0c 9b       	mov	r11,r6
800133f8:	fe 7c 28 00 	mov	r12,-55296
800133fc:	fe b0 fc 23 	rcall	80012c42 <spi_read>
80013400:	58 1c       	cp.w	r12,1
80013402:	c5 10       	breq	800134a4 <sd_mmc_spi_command+0x27c>
     return 0xFF;
   return data_read;
80013404:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80013406:	ae 8c       	st.b	r7[0x0],r12
80013408:	3f f8       	mov	r8,-1
8001340a:	f0 0c 18 00 	cp.b	r12,r8
8001340e:	c2 31       	brne	80013454 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013410:	e0 6b 00 ff 	mov	r11,255
80013414:	fe 7c 28 00 	mov	r12,-55296
80013418:	fe b0 fc 07 	rcall	80012c26 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8001341c:	0c 9b       	mov	r11,r6
8001341e:	fe 7c 28 00 	mov	r12,-55296
80013422:	fe b0 fc 10 	rcall	80012c42 <spi_read>
80013426:	58 1c       	cp.w	r12,1
80013428:	c4 10       	breq	800134aa <sd_mmc_spi_command+0x282>
     return 0xFF;
   return data_read;
8001342a:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
8001342c:	ae 8c       	st.b	r7[0x0],r12
8001342e:	3f f8       	mov	r8,-1
80013430:	f0 0c 18 00 	cp.b	r12,r8
80013434:	c1 01       	brne	80013454 <sd_mmc_spi_command+0x22c>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013436:	e0 6b 00 ff 	mov	r11,255
8001343a:	fe 7c 28 00 	mov	r12,-55296
8001343e:	fe b0 fb f4 	rcall	80012c26 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013442:	0c 9b       	mov	r11,r6
80013444:	fe 7c 28 00 	mov	r12,-55296
80013448:	fe b0 fb fd 	rcall	80012c42 <spi_read>
8001344c:	58 1c       	cp.w	r12,1
8001344e:	c3 10       	breq	800134b0 <sd_mmc_spi_command+0x288>
     return 0xFF;
   return data_read;
80013450:	1b bc       	ld.ub	r12,sp[0x3]
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80013452:	ae 8c       	st.b	r7[0x0],r12
  {
    retry++;
    if(retry > 10) break;
  }
  return r1;
}
80013454:	2f fd       	sub	sp,-4
80013456:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
  spi_write(SD_MMC_SPI, arg>>8 );
  spi_write(SD_MMC_SPI, arg    );
  switch(command)
  {
      case MMC_GO_IDLE_STATE:
         spi_write(SD_MMC_SPI, 0x95);
8001345a:	e0 6b 00 95 	mov	r11,149
8001345e:	fe 7c 28 00 	mov	r12,-55296
80013462:	fe b0 fb e2 	rcall	80012c26 <spi_write>
         break;
80013466:	c1 bb       	rjmp	8001329c <sd_mmc_spi_command+0x74>
      case MMC_SEND_IF_COND:
         spi_write(SD_MMC_SPI, 0x87);
80013468:	e0 6b 00 87 	mov	r11,135
8001346c:	fe 7c 28 00 	mov	r12,-55296
80013470:	fe b0 fb db 	rcall	80012c26 <spi_write>
         break;
80013474:	c1 4b       	rjmp	8001329c <sd_mmc_spi_command+0x74>
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80013476:	ae 85       	st.b	r7[0x0],r5
80013478:	c2 cb       	rjmp	800132d0 <sd_mmc_spi_command+0xa8>
8001347a:	3f f8       	mov	r8,-1
8001347c:	ae 88       	st.b	r7[0x0],r8
8001347e:	c3 eb       	rjmp	800132fa <sd_mmc_spi_command+0xd2>
80013480:	3f f8       	mov	r8,-1
80013482:	ae 88       	st.b	r7[0x0],r8
80013484:	c5 0b       	rjmp	80013324 <sd_mmc_spi_command+0xfc>
80013486:	3f f8       	mov	r8,-1
80013488:	ae 88       	st.b	r7[0x0],r8
8001348a:	c6 2b       	rjmp	8001334e <sd_mmc_spi_command+0x126>
8001348c:	3f f8       	mov	r8,-1
8001348e:	ae 88       	st.b	r7[0x0],r8
80013490:	c7 3b       	rjmp	80013376 <sd_mmc_spi_command+0x14e>
80013492:	3f f8       	mov	r8,-1
80013494:	ae 88       	st.b	r7[0x0],r8
80013496:	c8 4b       	rjmp	8001339e <sd_mmc_spi_command+0x176>
80013498:	3f f8       	mov	r8,-1
8001349a:	ae 88       	st.b	r7[0x0],r8
8001349c:	c9 4b       	rjmp	800133c4 <sd_mmc_spi_command+0x19c>
8001349e:	3f f8       	mov	r8,-1
800134a0:	ae 88       	st.b	r7[0x0],r8
800134a2:	ca 4b       	rjmp	800133ea <sd_mmc_spi_command+0x1c2>
800134a4:	3f f8       	mov	r8,-1
800134a6:	ae 88       	st.b	r7[0x0],r8
800134a8:	cb 4b       	rjmp	80013410 <sd_mmc_spi_command+0x1e8>
800134aa:	3f f8       	mov	r8,-1
800134ac:	ae 88       	st.b	r7[0x0],r8
800134ae:	cc 4b       	rjmp	80013436 <sd_mmc_spi_command+0x20e>
800134b0:	3f f8       	mov	r8,-1
800134b2:	e0 6c 00 ff 	mov	r12,255
800134b6:	ae 88       	st.b	r7[0x0],r8
  {
    retry++;
    if(retry > 10) break;
  }
  return r1;
}
800134b8:	2f fd       	sub	sp,-4
800134ba:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800134be:	d7 03       	nop

800134c0 <sd_mmc_spi_read_open_PDCA>:
800134c0:	d4 21       	pushm	r4-r7,lr
800134c2:	20 1d       	sub	sp,4
800134c4:	a9 7c       	lsl	r12,0x9
800134c6:	e0 67 07 50 	mov	r7,1872
800134ca:	8f 0c       	st.w	r7[0x0],r12

  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9;                    // gl_ptr_mem = pos * 512

  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
800134cc:	c7 2e       	rcall	800131b0 <sd_mmc_spi_wait_not_busy>
800134ce:	c0 31       	brne	800134d4 <sd_mmc_spi_read_open_PDCA+0x14>
    spi_write(SD_MMC_SPI,0xFF);
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return false;
  }
  return true;   // Read done.
}
800134d0:	2f fd       	sub	sp,-4
800134d2:	d8 22       	popm	r4-r7,pc
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
    return false;


  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);          // select SD_MMC_SPI
800134d4:	30 2b       	mov	r11,2
800134d6:	fe 7c 28 00 	mov	r12,-55296
800134da:	fe b0 fb 11 	rcall	80012afc <spi_selectChip>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
800134de:	e0 68 3b 4e 	mov	r8,15182
800134e2:	11 89       	ld.ub	r9,r8[0x0]
800134e4:	30 38       	mov	r8,3
800134e6:	f0 09 18 00 	cp.b	r9,r8
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem>>9);
  } else {
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem);
800134ea:	c3 90       	breq	8001355c <sd_mmc_spi_read_open_PDCA+0x9c>
800134ec:	6e 0b       	ld.w	r11,r7[0x0]
800134ee:	31 1c       	mov	r12,17
800134f0:	e0 66 3b 60 	mov	r6,15200
800134f4:	c9 ae       	rcall	80013228 <sd_mmc_spi_command>
  }

  // check for valid response
  if (r1 != 0x00)
800134f6:	ac 8c       	st.b	r6[0x0],r12
800134f8:	58 0c       	cp.w	r12,0
  {
     read_time_out--;
     if (read_time_out == 0)   // TIME-OUT
     {
       spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS); // unselect SD_MMC_SPI
       return false;
800134fa:	c2 81       	brne	8001354a <sd_mmc_spi_read_open_PDCA+0x8a>
800134fc:	18 97       	mov	r7,r12
800134fe:	fa c5 ff fe 	sub	r5,sp,-2
    return false;
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80013502:	3f f4       	mov	r4,-1
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
     return 0xFF;
   return data_read;
80013504:	c0 a8       	rjmp	80013518 <sd_mmc_spi_read_open_PDCA+0x58>
    return false;
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80013506:	1b b8       	ld.ub	r8,sp[0x3]
80013508:	ac 88       	st.b	r6[0x0],r8
8001350a:	e8 08 18 00 	cp.b	r8,r4

  // check for valid response
  if (r1 != 0x00)
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return false;
8001350e:	c1 41       	brne	80013536 <sd_mmc_spi_read_open_PDCA+0x76>
  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
  {
     read_time_out--;
     if (read_time_out == 0)   // TIME-OUT
80013510:	2f f7       	sub	r7,-1
80013512:	e0 47 75 30 	cp.w	r7,30000
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013516:	c1 a0       	breq	8001354a <sd_mmc_spi_read_open_PDCA+0x8a>
80013518:	e0 6b 00 ff 	mov	r11,255
8001351c:	fe 7c 28 00 	mov	r12,-55296
80013520:	fe b0 fb 83 	rcall	80012c26 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013524:	0a 9b       	mov	r11,r5
80013526:	fe 7c 28 00 	mov	r12,-55296
8001352a:	fe b0 fb 8c 	rcall	80012c42 <spi_read>
8001352e:	58 1c       	cp.w	r12,1
    return false;
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80013530:	ce b1       	brne	80013506 <sd_mmc_spi_read_open_PDCA+0x46>
80013532:	ac 84       	st.b	r6[0x0],r4
       return false;
     }
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
80013534:	ce eb       	rjmp	80013510 <sd_mmc_spi_read_open_PDCA+0x50>
80013536:	3f e9       	mov	r9,-2
80013538:	f2 08 18 00 	cp.b	r8,r9
  {
    spi_write(SD_MMC_SPI,0xFF);
8001353c:	c0 e0       	breq	80013558 <sd_mmc_spi_read_open_PDCA+0x98>
8001353e:	e0 6b 00 ff 	mov	r11,255
80013542:	fe 7c 28 00 	mov	r12,-55296
80013546:	fe b0 fb 70 	rcall	80012c26 <spi_write>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8001354a:	30 2b       	mov	r11,2
8001354c:	fe 7c 28 00 	mov	r12,-55296
80013550:	fe b0 fa fe 	rcall	80012b4c <spi_unselectChip>
80013554:	2f fd       	sub	sp,-4
       return false;
     }
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
80013556:	d8 2a       	popm	r4-r7,pc,r12=0
80013558:	30 1c       	mov	r12,1

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);          // select SD_MMC_SPI

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem>>9);
8001355a:	cb bb       	rjmp	800134d0 <sd_mmc_spi_read_open_PDCA+0x10>
8001355c:	6e 0b       	ld.w	r11,r7[0x0]
8001355e:	31 1c       	mov	r12,17
80013560:	a9 9b       	lsr	r11,0x9
80013562:	e0 66 3b 60 	mov	r6,15200
80013566:	c6 1e       	rcall	80013228 <sd_mmc_spi_command>
80013568:	ac 8c       	st.b	r6[0x0],r12
8001356a:	cc 7b       	rjmp	800134f8 <sd_mmc_spi_read_open_PDCA+0x38>

8001356c <sd_mmc_spi_check_hc>:
8001356c:	eb cd 40 e0 	pushm	r5-r7,lr
80013570:	20 1d       	sub	sp,4
80013572:	c1 fe       	rcall	800131b0 <sd_mmc_spi_wait_not_busy>
80013574:	c0 61       	brne	80013580 <sd_mmc_spi_check_hc+0x14>
80013576:	3f f7       	mov	r7,-1
80013578:	0e 9c       	mov	r12,r7
8001357a:	2f fd       	sub	sp,-4
8001357c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80013580:	30 2b       	mov	r11,2
80013582:	fe 7c 28 00 	mov	r12,-55296
80013586:	fe b0 fa bb 	rcall	80012afc <spi_selectChip>
8001358a:	30 0b       	mov	r11,0
8001358c:	33 ac       	mov	r12,58
8001358e:	e0 66 3b 60 	mov	r6,15200
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
80013592:	c4 be       	rcall	80013228 <sd_mmc_spi_command>
80013594:	ac 8c       	st.b	r6[0x0],r12
80013596:	c5 41       	brne	8001363e <sd_mmc_spi_check_hc+0xd2>
  // check for valid response
  if(r1 != 0) {
80013598:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
8001359c:	fe 7c 28 00 	mov	r12,-55296
800135a0:	fe b0 fb 43 	rcall	80012c26 <spi_write>
800135a4:	fa c5 ff fe 	sub	r5,sp,-2
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800135a8:	fe 7c 28 00 	mov	r12,-55296
800135ac:	0a 9b       	mov	r11,r5
800135ae:	fe b0 fb 4a 	rcall	80012c42 <spi_read>
800135b2:	58 1c       	cp.w	r12,1
800135b4:	c3 a0       	breq	80013628 <sd_mmc_spi_check_hc+0xbc>
800135b6:	1b b7       	ld.ub	r7,sp[0x3]
800135b8:	ef d7 c0 c1 	bfextu	r7,r7,0x6,0x1
800135bc:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800135c0:	fe 7c 28 00 	mov	r12,-55296
800135c4:	fe b0 fb 31 	rcall	80012c26 <spi_write>
800135c8:	0a 9b       	mov	r11,r5
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800135ca:	fe 7c 28 00 	mov	r12,-55296
800135ce:	fe b0 fb 3a 	rcall	80012c42 <spi_read>
800135d2:	58 1c       	cp.w	r12,1
800135d4:	c3 20       	breq	80013638 <sd_mmc_spi_check_hc+0xcc>
800135d6:	1b b8       	ld.ub	r8,sp[0x3]
     return 0xFF;
   return data_read;
800135d8:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800135dc:	ac 88       	st.b	r6[0x0],r8
  if(r1 != 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_FAILURE;
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
800135de:	fe 7c 28 00 	mov	r12,-55296
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800135e2:	fe b0 fb 22 	rcall	80012c26 <spi_write>
800135e6:	0a 9b       	mov	r11,r5
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800135e8:	fe 7c 28 00 	mov	r12,-55296
800135ec:	fe b0 fb 2b 	rcall	80012c42 <spi_read>
800135f0:	58 1c       	cp.w	r12,1
800135f2:	c2 00       	breq	80013632 <sd_mmc_spi_check_hc+0xc6>
800135f4:	1b b8       	ld.ub	r8,sp[0x3]
     return 0xFF;
   return data_read;
800135f6:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800135fa:	ac 88       	st.b	r6[0x0],r8
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_FAILURE;
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
800135fc:	fe 7c 28 00 	mov	r12,-55296
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013600:	fe b0 fb 13 	rcall	80012c26 <spi_write>
80013604:	0a 9b       	mov	r11,r5
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013606:	fe 7c 28 00 	mov	r12,-55296
8001360a:	fe b0 fb 1c 	rcall	80012c42 <spi_read>
8001360e:	58 1c       	cp.w	r12,1
80013610:	c0 e0       	breq	8001362c <sd_mmc_spi_check_hc+0xc0>
80013612:	1b b8       	ld.ub	r8,sp[0x3]
     return 0xFF;
   return data_read;
80013614:	ac 88       	st.b	r6[0x0],r8
    return SD_FAILURE;
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
80013616:	30 2b       	mov	r11,2
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013618:	fe 7c 28 00 	mov	r12,-55296
8001361c:	fe b0 fa 98 	rcall	80012b4c <spi_unselectChip>
80013620:	0e 9c       	mov	r12,r7
  if(hc_bit & 0x40) {
      return SDHC_CARD;
  }
  return 0;
}
80013622:	2f fd       	sub	sp,-4
80013624:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80013628:	18 97       	mov	r7,r12
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8001362a:	cc 9b       	rjmp	800135bc <sd_mmc_spi_check_hc+0x50>
8001362c:	e0 68 00 ff 	mov	r8,255
80013630:	cf 2b       	rjmp	80013614 <sd_mmc_spi_check_hc+0xa8>
80013632:	e0 68 00 ff 	mov	r8,255
80013636:	ce 0b       	rjmp	800135f6 <sd_mmc_spi_check_hc+0x8a>
80013638:	e0 68 00 ff 	mov	r8,255
8001363c:	cc eb       	rjmp	800135d8 <sd_mmc_spi_check_hc+0x6c>
8001363e:	30 2b       	mov	r11,2

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
  // check for valid response
  if(r1 != 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013640:	fe 7c 28 00 	mov	r12,-55296
80013644:	fe b0 fa 84 	rcall	80012b4c <spi_unselectChip>
80013648:	c9 7b       	rjmp	80013576 <sd_mmc_spi_check_hc+0xa>
8001364a:	d7 03       	nop

8001364c <sd_mmc_spi_write_sector_from_ram>:
8001364c:	d4 21       	pushm	r4-r7,lr
8001364e:	20 1d       	sub	sp,4
80013650:	18 97       	mov	r7,r12
80013652:	fe b0 fd af 	rcall	800131b0 <sd_mmc_spi_wait_not_busy>
80013656:	c0 31       	brne	8001365c <sd_mmc_spi_write_sector_from_ram+0x10>
80013658:	2f fd       	sub	sp,-4
8001365a:	d8 22       	popm	r4-r7,pc
8001365c:	30 2b       	mov	r11,2
8001365e:	fe 7c 28 00 	mov	r12,-55296
80013662:	fe b0 fa 4d 	rcall	80012afc <spi_selectChip>
80013666:	e0 68 3b 4e 	mov	r8,15182
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
8001366a:	11 89       	ld.ub	r9,r8[0x0]
8001366c:	30 38       	mov	r8,3
8001366e:	f0 09 18 00 	cp.b	r9,r8
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem>>9);
  } else {
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem);
80013672:	c5 40       	breq	8001371a <sd_mmc_spi_write_sector_from_ram+0xce>
80013674:	e0 64 07 50 	mov	r4,1872
80013678:	31 8c       	mov	r12,24
8001367a:	68 0b       	ld.w	r11,r4[0x0]
8001367c:	e0 65 3b 60 	mov	r5,15200
  }

  // check for valid response
  if(r1 != 0x00)
80013680:	fe b0 fd d4 	rcall	80013228 <sd_mmc_spi_command>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
    return false;
  }
  // send dummy
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
80013684:	aa 8c       	st.b	r5[0x0],r12
80013686:	58 0c       	cp.w	r12,0
80013688:	c4 21       	brne	8001370c <sd_mmc_spi_write_sector_from_ram+0xc0>
8001368a:	e0 6b 00 ff 	mov	r11,255
8001368e:	fe 7c 28 00 	mov	r12,-55296

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
80013692:	fe b0 fa ca 	rcall	80012c26 <spi_write>
80013696:	e0 6b 00 fe 	mov	r11,254
//!
//! @return bit
//!   The write succeeded   -> true
//!   The write failed      -> false
//!
bool sd_mmc_spi_write_sector_from_ram(const void *ram)
8001369a:	fe 7c 28 00 	mov	r12,-55296
  }
  // send dummy
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
8001369e:	ee c6 fe 00 	sub	r6,r7,-512
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,*_ram++);
800136a2:	fe b0 fa c2 	rcall	80012c26 <spi_write>
800136a6:	0f 3b       	ld.ub	r11,r7++
800136a8:	fe 7c 28 00 	mov	r12,-55296
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
800136ac:	fe b0 fa bd 	rcall	80012c26 <spi_write>
  {
    spi_write(SD_MMC_SPI,*_ram++);
  }

  spi_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
800136b0:	0c 37       	cp.w	r7,r6
800136b2:	cf a1       	brne	800136a6 <sd_mmc_spi_write_sector_from_ram+0x5a>
800136b4:	e0 6b 00 ff 	mov	r11,255
800136b8:	fe 7c 28 00 	mov	r12,-55296
  spi_write(SD_MMC_SPI,0xFF);
800136bc:	fe b0 fa b5 	rcall	80012c26 <spi_write>
800136c0:	e0 6b 00 ff 	mov	r11,255
800136c4:	fe 7c 28 00 	mov	r12,-55296
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800136c8:	fe b0 fa af 	rcall	80012c26 <spi_write>
800136cc:	e0 6b 00 ff 	mov	r11,255
800136d0:	fe 7c 28 00 	mov	r12,-55296
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800136d4:	fe b0 fa a9 	rcall	80012c26 <spi_write>
800136d8:	fa cb ff fe 	sub	r11,sp,-2
800136dc:	fe 7c 28 00 	mov	r12,-55296
800136e0:	fe b0 fa b1 	rcall	80012c42 <spi_read>

  spi_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
  spi_write(SD_MMC_SPI,0xFF);

  // read data response token
  r1 = sd_mmc_spi_send_and_read(0xFF);
800136e4:	58 1c       	cp.w	r12,1
  if( (r1&MMC_DR_MASK) != MMC_DR_ACCEPT)
800136e6:	c5 80       	breq	80013796 <sd_mmc_spi_write_sector_from_ram+0x14a>
800136e8:	1b b8       	ld.ub	r8,sp[0x3]
800136ea:	aa 88       	st.b	r5[0x0],r8
800136ec:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
  {
    spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
800136f0:	58 58       	cp.w	r8,5
800136f2:	c1 f0       	breq	80013730 <sd_mmc_spi_write_sector_from_ram+0xe4>
800136f4:	e0 6b 00 ff 	mov	r11,255
800136f8:	fe 7c 28 00 	mov	r12,-55296
    spi_write(SD_MMC_SPI,0xFF);
800136fc:	fe b0 fa 95 	rcall	80012c26 <spi_write>
80013700:	e0 6b 00 ff 	mov	r11,255
80013704:	fe 7c 28 00 	mov	r12,-55296
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80013708:	fe b0 fa 8f 	rcall	80012c26 <spi_write>
8001370c:	30 2b       	mov	r11,2
8001370e:	fe 7c 28 00 	mov	r12,-55296
80013712:	fe b0 fa 1d 	rcall	80012b4c <spi_unselectChip>

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem>>9);
80013716:	2f fd       	sub	sp,-4
80013718:	d8 2a       	popm	r4-r7,pc,r12=0
8001371a:	e0 64 07 50 	mov	r4,1872
8001371e:	31 8c       	mov	r12,24
80013720:	68 0b       	ld.w	r11,r4[0x0]
80013722:	e0 65 3b 60 	mov	r5,15200
    spi_write(SD_MMC_SPI,0xFF);
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
    return false;         // return ERROR byte
  }

  spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
80013726:	a9 9b       	lsr	r11,0x9
80013728:	fe b0 fd 80 	rcall	80013228 <sd_mmc_spi_command>
8001372c:	aa 8c       	st.b	r5[0x0],r12
8001372e:	ca cb       	rjmp	80013686 <sd_mmc_spi_write_sector_from_ram+0x3a>
80013730:	e0 6b 00 ff 	mov	r11,255
  spi_write(SD_MMC_SPI,0xFF);
80013734:	fe 7c 28 00 	mov	r12,-55296
80013738:	fe b0 fa 77 	rcall	80012c26 <spi_write>
8001373c:	e0 6b 00 ff 	mov	r11,255

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013740:	fe 7c 28 00 	mov	r12,-55296
80013744:	fe b0 fa 71 	rcall	80012c26 <spi_write>
  gl_ptr_mem += 512;        // Update the memory pointer.
80013748:	30 2b       	mov	r11,2
8001374a:	fe 7c 28 00 	mov	r12,-55296
8001374e:	fe b0 f9 ff 	rcall	80012b4c <spi_unselectChip>

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
80013752:	68 08       	ld.w	r8,r4[0x0]
80013754:	f0 c8 fe 00 	sub	r8,r8,-512
80013758:	89 08       	st.w	r4[0x0],r8
8001375a:	fe b0 fd 2b 	rcall	800131b0 <sd_mmc_spi_wait_not_busy>
8001375e:	c1 f1       	brne	8001379c <sd_mmc_spi_write_sector_from_ram+0x150>
80013760:	fe b0 fd 28 	rcall	800131b0 <sd_mmc_spi_wait_not_busy>
80013764:	c1 c1       	brne	8001379c <sd_mmc_spi_write_sector_from_ram+0x150>
80013766:	fe b0 fd 25 	rcall	800131b0 <sd_mmc_spi_wait_not_busy>
8001376a:	c1 91       	brne	8001379c <sd_mmc_spi_write_sector_from_ram+0x150>
8001376c:	fe b0 fd 22 	rcall	800131b0 <sd_mmc_spi_wait_not_busy>
80013770:	c1 61       	brne	8001379c <sd_mmc_spi_write_sector_from_ram+0x150>
80013772:	fe b0 fd 1f 	rcall	800131b0 <sd_mmc_spi_wait_not_busy>
80013776:	c1 31       	brne	8001379c <sd_mmc_spi_write_sector_from_ram+0x150>
80013778:	fe b0 fd 1c 	rcall	800131b0 <sd_mmc_spi_wait_not_busy>
8001377c:	c1 01       	brne	8001379c <sd_mmc_spi_write_sector_from_ram+0x150>
8001377e:	fe b0 fd 19 	rcall	800131b0 <sd_mmc_spi_wait_not_busy>
80013782:	c0 d1       	brne	8001379c <sd_mmc_spi_write_sector_from_ram+0x150>
80013784:	fe b0 fd 16 	rcall	800131b0 <sd_mmc_spi_wait_not_busy>
80013788:	c0 a1       	brne	8001379c <sd_mmc_spi_write_sector_from_ram+0x150>
8001378a:	fe b0 fd 13 	rcall	800131b0 <sd_mmc_spi_wait_not_busy>

  spi_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
  spi_write(SD_MMC_SPI,0xFF);

  // read data response token
  r1 = sd_mmc_spi_send_and_read(0xFF);
8001378e:	c0 71       	brne	8001379c <sd_mmc_spi_write_sector_from_ram+0x150>
80013790:	fe b0 fd 10 	rcall	800131b0 <sd_mmc_spi_wait_not_busy>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
80013794:	c6 2b       	rjmp	80013658 <sd_mmc_spi_write_sector_from_ram+0xc>
80013796:	3f f8       	mov	r8,-1
80013798:	aa 88       	st.b	r5[0x0],r8
8001379a:	ca db       	rjmp	800136f4 <sd_mmc_spi_write_sector_from_ram+0xa8>
8001379c:	30 1c       	mov	r12,1
8001379e:	c5 db       	rjmp	80013658 <sd_mmc_spi_write_sector_from_ram+0xc>

800137a0 <sd_mmc_spi_get_if>:
800137a0:	eb cd 40 e0 	pushm	r5-r7,lr
800137a4:	20 1d       	sub	sp,4
800137a6:	fe b0 fd 05 	rcall	800131b0 <sd_mmc_spi_wait_not_busy>
800137aa:	c0 51       	brne	800137b4 <sd_mmc_spi_get_if+0x14>
800137ac:	3f fc       	mov	r12,-1
800137ae:	2f fd       	sub	sp,-4
800137b0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800137b4:	30 2b       	mov	r11,2
800137b6:	fe 7c 28 00 	mov	r12,-55296
800137ba:	fe b0 f9 a1 	rcall	80012afc <spi_selectChip>
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(MMC_SEND_IF_COND, 0x000001AA);
800137be:	e0 6b 01 aa 	mov	r11,426
800137c2:	e0 67 3b 60 	mov	r7,15200
800137c6:	30 8c       	mov	r12,8
800137c8:	fe b0 fd 30 	rcall	80013228 <sd_mmc_spi_command>
  // check for valid response
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
800137cc:	ae 8c       	st.b	r7[0x0],r12
800137ce:	ed bc 00 02 	bld	r12,0x2
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800137d2:	c5 00       	breq	80013872 <sd_mmc_spi_get_if+0xd2>
800137d4:	e0 6b 00 ff 	mov	r11,255
800137d8:	fe 7c 28 00 	mov	r12,-55296
800137dc:	fe b0 fa 25 	rcall	80012c26 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800137e0:	fa c6 ff fe 	sub	r6,sp,-2
800137e4:	fe 7c 28 00 	mov	r12,-55296
800137e8:	0c 9b       	mov	r11,r6
800137ea:	fe b0 fa 2c 	rcall	80012c42 <spi_read>
800137ee:	58 1c       	cp.w	r12,1
     return 0xFF;
   return data_read;
800137f0:	c4 90       	breq	80013882 <sd_mmc_spi_get_if+0xe2>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800137f2:	1b b8       	ld.ub	r8,sp[0x3]
800137f4:	e0 6b 00 ff 	mov	r11,255
800137f8:	ae 88       	st.b	r7[0x0],r8
800137fa:	fe 7c 28 00 	mov	r12,-55296
800137fe:	fe b0 fa 14 	rcall	80012c26 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013802:	0c 9b       	mov	r11,r6
80013804:	fe 7c 28 00 	mov	r12,-55296
80013808:	fe b0 fa 1d 	rcall	80012c42 <spi_read>
8001380c:	58 1c       	cp.w	r12,1
     return 0xFF;
   return data_read;
8001380e:	c4 00       	breq	8001388e <sd_mmc_spi_get_if+0xee>
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013810:	1b b8       	ld.ub	r8,sp[0x3]
80013812:	e0 6b 00 ff 	mov	r11,255
80013816:	ae 88       	st.b	r7[0x0],r8
80013818:	fe 7c 28 00 	mov	r12,-55296
8001381c:	fe b0 fa 05 	rcall	80012c26 <spi_write>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013820:	0c 9b       	mov	r11,r6
80013822:	fe 7c 28 00 	mov	r12,-55296
80013826:	e0 65 3b 60 	mov	r5,15200
8001382a:	fe b0 fa 0c 	rcall	80012c42 <spi_read>
     return 0xFF;
   return data_read;
8001382e:	58 1c       	cp.w	r12,1
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_MMC;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
80013830:	c2 c0       	breq	80013888 <sd_mmc_spi_get_if+0xe8>
  if((r1 & 0x01) == 0) {
80013832:	1b b8       	ld.ub	r8,sp[0x3]
80013834:	aa 88       	st.b	r5[0x0],r8
80013836:	ed b8 00 00 	bld	r8,0x0
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
8001383a:	c3 61       	brne	800138a6 <sd_mmc_spi_get_if+0x106>
8001383c:	e0 6b 00 ff 	mov	r11,255
80013840:	fe 7c 28 00 	mov	r12,-55296
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013844:	fe b0 f9 f1 	rcall	80012c26 <spi_write>
80013848:	0c 9b       	mov	r11,r6
8001384a:	fe 7c 28 00 	mov	r12,-55296
8001384e:	fe b0 f9 fa 	rcall	80012c42 <spi_read>
     return 0xFF;
   return data_read;
80013852:	58 1c       	cp.w	r12,1
  r1 = sd_mmc_spi_send_and_read(0xFF);
  if((r1 & 0x01) == 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_FAILURE;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
80013854:	c2 00       	breq	80013894 <sd_mmc_spi_get_if+0xf4>
  if(r1 != 0xaa) {
80013856:	1b b8       	ld.ub	r8,sp[0x3]
80013858:	ae 88       	st.b	r7[0x0],r8
8001385a:	3a a9       	mov	r9,-86
8001385c:	f2 08 18 00 	cp.b	r8,r9
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_FAILURE; /* wrong test pattern */
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013860:	c1 c1       	brne	80013898 <sd_mmc_spi_get_if+0xf8>
80013862:	30 2b       	mov	r11,2
80013864:	fe 7c 28 00 	mov	r12,-55296
80013868:	fe b0 f9 72 	rcall	80012b4c <spi_unselectChip>
8001386c:	2f fd       	sub	sp,-4

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(MMC_SEND_IF_COND, 0x000001AA);
  // check for valid response
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8001386e:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80013872:	30 2b       	mov	r11,2
80013874:	fe 7c 28 00 	mov	r12,-55296
80013878:	fe b0 f9 6a 	rcall	80012b4c <spi_unselectChip>
8001387c:	2f fd       	sub	sp,-4
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8001387e:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80013882:	e0 68 00 ff 	mov	r8,255
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_MMC;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
80013886:	cb 7b       	rjmp	800137f4 <sd_mmc_spi_get_if+0x54>
80013888:	3f f8       	mov	r8,-1
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8001388a:	aa 88       	st.b	r5[0x0],r8
8001388c:	cd 8b       	rjmp	8001383c <sd_mmc_spi_get_if+0x9c>
8001388e:	e0 68 00 ff 	mov	r8,255
  r1 = sd_mmc_spi_send_and_read(0xFF);
  if((r1 & 0x01) == 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return SD_FAILURE;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
80013892:	cc 0b       	rjmp	80013812 <sd_mmc_spi_get_if+0x72>
  if(r1 != 0xaa) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013894:	3f f8       	mov	r8,-1
80013896:	ae 88       	st.b	r7[0x0],r8
80013898:	30 2b       	mov	r11,2
8001389a:	fe 7c 28 00 	mov	r12,-55296
8001389e:	fe b0 f9 57 	rcall	80012b4c <spi_unselectChip>
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  r1 = sd_mmc_spi_send_and_read(0xFF);
  if((r1 & 0x01) == 0) {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800138a2:	3f fc       	mov	r12,-1
800138a4:	c8 5b       	rjmp	800137ae <sd_mmc_spi_get_if+0xe>
800138a6:	30 2b       	mov	r11,2
800138a8:	fe 7c 28 00 	mov	r12,-55296
800138ac:	fe b0 f9 50 	rcall	80012b4c <spi_unselectChip>
800138b0:	c7 eb       	rjmp	800137ac <sd_mmc_spi_get_if+0xc>
800138b2:	d7 03       	nop

800138b4 <sd_mmc_spi_internal_init>:
800138b4:	d4 31       	pushm	r0-r7,lr
800138b6:	20 1d       	sub	sp,4
800138b8:	e6 68 1a 80 	mov	r8,400000
800138bc:	e0 69 07 64 	mov	r9,1892
800138c0:	e0 67 07 54 	mov	r7,1876
800138c4:	72 0a       	ld.w	r10,r9[0x0]
800138c6:	8f 18       	st.w	r7[0x4],r8
800138c8:	0e 9b       	mov	r11,r7
800138ca:	fe 7c 28 00 	mov	r12,-55296
  int i;
  int if_cond;

  // Start at low frequency
  sd_mmc_opt.baudrate = 400000;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
800138ce:	fe b0 f9 53 	rcall	80012b74 <spi_setupChipReg>

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800138d2:	30 2b       	mov	r11,2
800138d4:	fe 7c 28 00 	mov	r12,-55296
800138d8:	fe b0 f9 12 	rcall	80012afc <spi_selectChip>
  for(i = 0; i < 10; ++i) {
    spi_write(SD_MMC_SPI,0xFF);
800138dc:	e0 6b 00 ff 	mov	r11,255
800138e0:	fe 7c 28 00 	mov	r12,-55296
800138e4:	fe b0 f9 a1 	rcall	80012c26 <spi_write>
800138e8:	e0 6b 00 ff 	mov	r11,255
800138ec:	fe 7c 28 00 	mov	r12,-55296
800138f0:	fe b0 f9 9b 	rcall	80012c26 <spi_write>
800138f4:	e0 6b 00 ff 	mov	r11,255
800138f8:	fe 7c 28 00 	mov	r12,-55296
800138fc:	fe b0 f9 95 	rcall	80012c26 <spi_write>
80013900:	e0 6b 00 ff 	mov	r11,255
80013904:	fe 7c 28 00 	mov	r12,-55296
80013908:	fe b0 f9 8f 	rcall	80012c26 <spi_write>
8001390c:	e0 6b 00 ff 	mov	r11,255
80013910:	fe 7c 28 00 	mov	r12,-55296
80013914:	fe b0 f9 89 	rcall	80012c26 <spi_write>
80013918:	e0 6b 00 ff 	mov	r11,255
8001391c:	fe 7c 28 00 	mov	r12,-55296
80013920:	fe b0 f9 83 	rcall	80012c26 <spi_write>
80013924:	e0 6b 00 ff 	mov	r11,255
80013928:	fe 7c 28 00 	mov	r12,-55296
8001392c:	fe b0 f9 7d 	rcall	80012c26 <spi_write>
80013930:	e0 6b 00 ff 	mov	r11,255
80013934:	fe 7c 28 00 	mov	r12,-55296
80013938:	fe b0 f9 77 	rcall	80012c26 <spi_write>
8001393c:	e0 6b 00 ff 	mov	r11,255
80013940:	fe 7c 28 00 	mov	r12,-55296
80013944:	fe b0 f9 71 	rcall	80012c26 <spi_write>
80013948:	e0 6b 00 ff 	mov	r11,255
8001394c:	fe 7c 28 00 	mov	r12,-55296
80013950:	fe b0 f9 6b 	rcall	80012c26 <spi_write>
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013954:	30 2b       	mov	r11,2
80013956:	fe 7c 28 00 	mov	r12,-55296
8001395a:	fe b0 f8 f9 	rcall	80012b4c <spi_unselectChip>

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
8001395e:	30 08       	mov	r8,0
80013960:	e0 69 07 68 	mov	r9,1896
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013964:	30 2b       	mov	r11,2
    spi_write(SD_MMC_SPI,0xFF);
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
80013966:	b2 88       	st.b	r9[0x0],r8
  card_type = MMC_CARD;
80013968:	e0 61 3b 4e 	mov	r1,15182
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8001396c:	fe 7c 28 00 	mov	r12,-55296
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
  card_type = MMC_CARD;
80013970:	a2 88       	st.b	r1[0x0],r8
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013972:	fe b0 f8 c5 	rcall	80012afc <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80013976:	30 0b       	mov	r11,0
80013978:	16 9c       	mov	r12,r11
8001397a:	fe b0 fc 57 	rcall	80013228 <sd_mmc_spi_command>
8001397e:	e0 66 3b 60 	mov	r6,15200
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013982:	30 2b       	mov	r11,2
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80013984:	ac 8c       	st.b	r6[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013986:	fe 7c 28 00 	mov	r12,-55296
8001398a:	fe b0 f8 e1 	rcall	80012b4c <spi_unselectChip>
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8001398e:	e0 6b 00 ff 	mov	r11,255
80013992:	fe 7c 28 00 	mov	r12,-55296
80013996:	30 05       	mov	r5,0
80013998:	fe b0 f9 47 	rcall	80012c26 <spi_write>
    // do retry counter
    retry++;
    if(retry > 100)
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
8001399c:	0c 90       	mov	r0,r6
8001399e:	30 12       	mov	r2,1
800139a0:	c1 78       	rjmp	800139ce <sd_mmc_spi_internal_init+0x11a>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800139a2:	fe b0 f8 ad 	rcall	80012afc <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
800139a6:	30 0b       	mov	r11,0
800139a8:	16 9c       	mov	r12,r11
800139aa:	fe b0 fc 3f 	rcall	80013228 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800139ae:	30 2b       	mov	r11,2
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
800139b0:	a0 8c       	st.b	r0[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800139b2:	fe 7c 28 00 	mov	r12,-55296
800139b6:	fe b0 f8 cb 	rcall	80012b4c <spi_unselectChip>
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800139ba:	e0 6b 00 ff 	mov	r11,255
800139be:	fe 7c 28 00 	mov	r12,-55296
800139c2:	fe b0 f9 32 	rcall	80012c26 <spi_write>
    // do retry counter
    retry++;
    if(retry > 100)
800139c6:	e0 45 00 64 	cp.w	r5,100
800139ca:	e0 80 00 b4 	breq	80013b32 <sd_mmc_spi_internal_init+0x27e>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800139ce:	30 2b       	mov	r11,2
800139d0:	fe 7c 28 00 	mov	r12,-55296
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800139d4:	2f f5       	sub	r5,-1
    // do retry counter
    retry++;
    if(retry > 100)
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
800139d6:	0d 84       	ld.ub	r4,r6[0x0]
800139d8:	e0 63 3b 60 	mov	r3,15200
800139dc:	e4 04 18 00 	cp.b	r4,r2
800139e0:	ce 11       	brne	800139a2 <sd_mmc_spi_internal_init+0xee>

  if_cond = sd_mmc_spi_get_if();
800139e2:	cd fe       	rcall	800137a0 <sd_mmc_spi_get_if>
800139e4:	5b fc       	cp.w	r12,-1
  if(if_cond == -1) {
800139e6:	e0 80 00 a6 	breq	80013b32 <sd_mmc_spi_internal_init+0x27e>
800139ea:	58 1c       	cp.w	r12,1
      return false; // card is bad
  } else if (if_cond == 1) {
800139ec:	e0 80 00 a6 	breq	80013b38 <sd_mmc_spi_internal_init+0x284>
800139f0:	30 2b       	mov	r11,2
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800139f2:	fe 7c 28 00 	mov	r12,-55296
800139f6:	fe b0 f8 83 	rcall	80012afc <spi_selectChip>
800139fa:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
800139fc:	33 7c       	mov	r12,55
800139fe:	fe b0 fc 15 	rcall	80013228 <sd_mmc_spi_command>
80013a02:	30 2b       	mov	r11,2
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013a04:	a6 8c       	st.b	r3[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80013a06:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013a0a:	fe b0 f8 a1 	rcall	80012b4c <spi_unselectChip>
80013a0e:	e0 6b 00 ff 	mov	r11,255
      card_type = SD_CARD_2;
  } else {
    // IDENTIFICATION OF THE CARD TYPE (SD or MMC)
    // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
    r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80013a12:	fe 7c 28 00 	mov	r12,-55296
80013a16:	fe b0 f9 08 	rcall	80012c26 <spi_write>
80013a1a:	30 2b       	mov	r11,2
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013a1c:	fe 7c 28 00 	mov	r12,-55296
80013a20:	fe b0 f8 6e 	rcall	80012afc <spi_selectChip>
80013a24:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80013a26:	32 9c       	mov	r12,41
80013a28:	fe b0 fc 00 	rcall	80013228 <sd_mmc_spi_command>
80013a2c:	30 2b       	mov	r11,2
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013a2e:	a6 8c       	st.b	r3[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80013a30:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013a34:	fe b0 f8 8c 	rcall	80012b4c <spi_unselectChip>
80013a38:	e0 6b 00 ff 	mov	r11,255
    // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
    r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte

    r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80013a3c:	fe 7c 28 00 	mov	r12,-55296
80013a40:	fe b0 f8 f3 	rcall	80012c26 <spi_write>
80013a44:	07 88       	ld.ub	r8,r3[0x0]

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
80013a46:	e2 18 00 fe 	andl	r8,0xfe,COH
80013a4a:	e0 80 00 d3 	breq	80013bf0 <sd_mmc_spi_internal_init+0x33c>
80013a4e:	30 08       	mov	r8,0
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
    } else {
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
80013a50:	30 2b       	mov	r11,2
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013a52:	a2 88       	st.b	r1[0x0],r8
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
    } else {
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
80013a54:	fe 7c 28 00 	mov	r12,-55296
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013a58:	fe b0 f8 52 	rcall	80012afc <spi_selectChip>
80013a5c:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80013a5e:	16 9c       	mov	r12,r11
80013a60:	fe b0 fb e4 	rcall	80013228 <sd_mmc_spi_command>
80013a64:	30 2b       	mov	r11,2
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013a66:	a6 8c       	st.b	r3[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80013a68:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013a6c:	fe b0 f8 70 	rcall	80012b4c <spi_unselectChip>
80013a70:	e0 6b 00 ff 	mov	r11,255
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80013a74:	fe 7c 28 00 	mov	r12,-55296
80013a78:	30 05       	mov	r5,0
80013a7a:	fe b0 f8 d6 	rcall	80012c26 <spi_write>
80013a7e:	30 14       	mov	r4,1
        // do retry counter
        retry++;
        if(retry > 100)
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80013a80:	c1 68       	rjmp	80013aac <sd_mmc_spi_internal_init+0x1f8>
80013a82:	fe b0 f8 3d 	rcall	80012afc <spi_selectChip>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013a86:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80013a88:	16 9c       	mov	r12,r11
80013a8a:	fe b0 fb cf 	rcall	80013228 <sd_mmc_spi_command>
80013a8e:	30 2b       	mov	r11,2
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013a90:	a6 8c       	st.b	r3[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80013a92:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013a96:	fe b0 f8 5b 	rcall	80012b4c <spi_unselectChip>
80013a9a:	e0 6b 00 ff 	mov	r11,255
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80013a9e:	fe 7c 28 00 	mov	r12,-55296
80013aa2:	fe b0 f8 c2 	rcall	80012c26 <spi_write>
80013aa6:	e0 45 00 64 	cp.w	r5,100
        // do retry counter
        retry++;
        if(retry > 100)
80013aaa:	c4 40       	breq	80013b32 <sd_mmc_spi_internal_init+0x27e>
80013aac:	30 2b       	mov	r11,2
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013aae:	fe 7c 28 00 	mov	r12,-55296
80013ab2:	2f f5       	sub	r5,-1
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80013ab4:	0d 88       	ld.ub	r8,r6[0x0]
        // do retry counter
        retry++;
        if(retry > 100)
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80013ab6:	e8 08 18 00 	cp.b	r8,r4
80013aba:	ce 41       	brne	80013a82 <sd_mmc_spi_internal_init+0x1ce>
80013abc:	03 88       	ld.ub	r8,r1[0x0]
80013abe:	c4 08       	rjmp	80013b3e <sd_mmc_spi_internal_init+0x28a>
80013ac0:	03 89       	ld.ub	r9,r1[0x0]
     if(retry == 50000)    // measured approx. 500 on several cards
        return false;
  } while (r1);

  // CHECK FOR SDHC
  if(card_type == SD_CARD_2) {
80013ac2:	30 28       	mov	r8,2
80013ac4:	f0 09 18 00 	cp.b	r9,r8
80013ac8:	e0 80 01 77 	breq	80013db6 <sd_mmc_spi_internal_init+0x502>
80013acc:	30 2b       	mov	r11,2
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013ace:	fe 7c 28 00 	mov	r12,-55296
80013ad2:	fe b0 f8 15 	rcall	80012afc <spi_selectChip>
80013ad6:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80013ad8:	33 bc       	mov	r12,59
80013ada:	fe b0 fb a7 	rcall	80013228 <sd_mmc_spi_command>
80013ade:	30 2b       	mov	r11,2
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013ae0:	ac 8c       	st.b	r6[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80013ae2:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013ae6:	fe b0 f8 33 	rcall	80012b4c <spi_unselectChip>
80013aea:	e0 6b 00 ff 	mov	r11,255
      }
  }

  // DISABLE CRC TO SIMPLIFY AND SPEED UP COMMUNICATIONS
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80013aee:	fe 7c 28 00 	mov	r12,-55296
80013af2:	fe b0 f8 9a 	rcall	80012c26 <spi_write>
80013af6:	30 2b       	mov	r11,2
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013af8:	fe 7c 28 00 	mov	r12,-55296
80013afc:	fe b0 f8 00 	rcall	80012afc <spi_selectChip>
80013b00:	e0 6b 02 00 	mov	r11,512
  r1 = sd_mmc_spi_command(command, arg);
80013b04:	31 0c       	mov	r12,16
80013b06:	fe b0 fb 91 	rcall	80013228 <sd_mmc_spi_command>
80013b0a:	30 2b       	mov	r11,2
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013b0c:	ac 8c       	st.b	r6[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80013b0e:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013b12:	fe b0 f8 1d 	rcall	80012b4c <spi_unselectChip>
80013b16:	e0 6b 00 ff 	mov	r11,255
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80013b1a:	fe 7c 28 00 	mov	r12,-55296
80013b1e:	e0 64 3b 60 	mov	r4,15200
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80013b22:	fe b0 f8 82 	rcall	80012c26 <spi_write>
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80013b26:	0d 85       	ld.ub	r5,r6[0x0]
  if (r1 != 0x00)
80013b28:	58 05       	cp.w	r5,0
80013b2a:	c0 41       	brne	80013b32 <sd_mmc_spi_internal_init+0x27e>
80013b2c:	fe b0 fb 42 	rcall	800131b0 <sd_mmc_spi_wait_not_busy>
bool sd_mmc_spi_get_csd(uint8_t *buffer)
{
uint8_t retry;
unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80013b30:	c6 31       	brne	80013bf6 <sd_mmc_spi_internal_init+0x342>
80013b32:	30 0c       	mov	r12,0
  sd_mmc_spi_init_done = true;

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
  return true;
80013b34:	2f fd       	sub	sp,-4
}
80013b36:	d8 32       	popm	r0-r7,pc
80013b38:	30 28       	mov	r8,2

  if_cond = sd_mmc_spi_get_if();
  if(if_cond == -1) {
      return false; // card is bad
  } else if (if_cond == 1) {
      card_type = SD_CARD_2;
80013b3a:	a2 88       	st.b	r1[0x0],r8
80013b3c:	30 28       	mov	r8,2
80013b3e:	30 05       	mov	r5,0
        // do retry counter
        retry++;
        if(retry > 100)
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80013b40:	30 14       	mov	r4,1

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
80013b42:	30 23       	mov	r3,2
80013b44:	c1 d8       	rjmp	80013b7e <sd_mmc_spi_internal_init+0x2ca>
80013b46:	fe b0 f7 db 	rcall	80012afc <spi_selectChip>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013b4a:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80013b4c:	30 1c       	mov	r12,1
80013b4e:	fe b0 fb 6d 	rcall	80013228 <sd_mmc_spi_command>
80013b52:	30 2b       	mov	r11,2
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013b54:	ac 8c       	st.b	r6[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80013b56:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013b5a:	fe b0 f7 f9 	rcall	80012b4c <spi_unselectChip>
80013b5e:	e0 6b 00 ff 	mov	r11,255
      break;
    case SD_CARD_2:
      // set high capacity bit mask
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0x40000000);
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80013b62:	fe 7c 28 00 	mov	r12,-55296
80013b66:	fe b0 f8 60 	rcall	80012c26 <spi_write>
80013b6a:	e0 45 c3 4f 	cp.w	r5,49999
      break;
    }
     // do retry counter
     retry++;
     if(retry == 50000)    // measured approx. 500 on several cards
80013b6e:	ce 20       	breq	80013b32 <sd_mmc_spi_internal_init+0x27e>
80013b70:	2f f5       	sub	r5,-1
80013b72:	0d 89       	ld.ub	r9,r6[0x0]
        return false;
  } while (r1);
80013b74:	30 08       	mov	r8,0
80013b76:	f0 09 18 00 	cp.b	r9,r8
80013b7a:	ca 30       	breq	80013ac0 <sd_mmc_spi_internal_init+0x20c>
80013b7c:	03 88       	ld.ub	r8,r1[0x0]
80013b7e:	e8 08 18 00 	cp.b	r8,r4

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
80013b82:	c2 00       	breq	80013bc2 <sd_mmc_spi_internal_init+0x30e>
80013b84:	30 2b       	mov	r11,2
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013b86:	fe 7c 28 00 	mov	r12,-55296
80013b8a:	cd e3       	brcs	80013b46 <sd_mmc_spi_internal_init+0x292>

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
80013b8c:	e6 08 18 00 	cp.b	r8,r3
80013b90:	ce d1       	brne	80013b6a <sd_mmc_spi_internal_init+0x2b6>
80013b92:	30 2b       	mov	r11,2
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013b94:	fe 7c 28 00 	mov	r12,-55296
80013b98:	fe b0 f7 b2 	rcall	80012afc <spi_selectChip>
80013b9c:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80013b9e:	33 7c       	mov	r12,55
80013ba0:	fe b0 fb 44 	rcall	80013228 <sd_mmc_spi_command>
80013ba4:	30 2b       	mov	r11,2
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013ba6:	ac 8c       	st.b	r6[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80013ba8:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013bac:	fe b0 f7 d0 	rcall	80012b4c <spi_unselectChip>
80013bb0:	30 2b       	mov	r11,2
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013bb2:	fe 7c 28 00 	mov	r12,-55296
80013bb6:	fe b0 f7 a3 	rcall	80012afc <spi_selectChip>
80013bba:	fc 1b 40 00 	movh	r11,0x4000
  r1 = sd_mmc_spi_command(command, arg);
80013bbe:	32 9c       	mov	r12,41
80013bc0:	cc 7b       	rjmp	80013b4e <sd_mmc_spi_internal_init+0x29a>
80013bc2:	30 2b       	mov	r11,2
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013bc4:	fe 7c 28 00 	mov	r12,-55296
80013bc8:	fe b0 f7 9a 	rcall	80012afc <spi_selectChip>
80013bcc:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80013bce:	33 7c       	mov	r12,55
80013bd0:	fe b0 fb 2c 	rcall	80013228 <sd_mmc_spi_command>
80013bd4:	30 2b       	mov	r11,2
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013bd6:	ac 8c       	st.b	r6[0x0],r12
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80013bd8:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013bdc:	fe b0 f7 b8 	rcall	80012b4c <spi_unselectChip>
80013be0:	30 2b       	mov	r11,2
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013be2:	fe 7c 28 00 	mov	r12,-55296
80013be6:	fe b0 f7 8b 	rcall	80012afc <spi_selectChip>
80013bea:	30 0b       	mov	r11,0
  r1 = sd_mmc_spi_command(command, arg);
80013bec:	32 9c       	mov	r12,41
80013bee:	cb 0b       	rjmp	80013b4e <sd_mmc_spi_internal_init+0x29a>
80013bf0:	a2 84       	st.b	r1[0x0],r4

    r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
80013bf2:	30 18       	mov	r8,1
80013bf4:	ca 5b       	rjmp	80013b3e <sd_mmc_spi_internal_init+0x28a>
80013bf6:	30 2b       	mov	r11,2
unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80013bf8:	fe 7c 28 00 	mov	r12,-55296
80013bfc:	fe b0 f7 80 	rcall	80012afc <spi_selectChip>
80013c00:	30 0b       	mov	r11,0
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
80013c02:	30 9c       	mov	r12,9
80013c04:	fe b0 fb 12 	rcall	80013228 <sd_mmc_spi_command>
80013c08:	a8 8c       	st.b	r4[0x0],r12
80013c0a:	e0 81 01 f1 	brne	80013fec <sd_mmc_spi_internal_init+0x738>
  // check for valid response
  if(r1 != 0x00)
80013c0e:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013c12:	fe 7c 28 00 	mov	r12,-55296
80013c16:	fe b0 f8 08 	rcall	80012c26 <spi_write>
80013c1a:	1a 95       	mov	r5,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013c1c:	fe 7c 28 00 	mov	r12,-55296
80013c20:	1a 9b       	mov	r11,sp
80013c22:	fe b0 f8 10 	rcall	80012c42 <spi_read>
80013c26:	58 1c       	cp.w	r12,1
80013c28:	e0 80 01 ed 	breq	80014002 <sd_mmc_spi_internal_init+0x74e>
80013c2c:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80013c2e:	a8 88       	st.b	r4[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80013c30:	3f e9       	mov	r9,-2
80013c32:	f2 08 18 00 	cp.b	r8,r9
80013c36:	e0 80 00 d1 	breq	80013dd8 <sd_mmc_spi_internal_init+0x524>
80013c3a:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013c3e:	fe 7c 28 00 	mov	r12,-55296
80013c42:	fe b0 f7 f2 	rcall	80012c26 <spi_write>
80013c46:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013c48:	fe 7c 28 00 	mov	r12,-55296
80013c4c:	fe b0 f7 fb 	rcall	80012c42 <spi_read>
80013c50:	58 1c       	cp.w	r12,1
80013c52:	e0 80 00 c0 	breq	80013dd2 <sd_mmc_spi_internal_init+0x51e>
80013c56:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80013c58:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80013c5a:	3f e9       	mov	r9,-2
80013c5c:	f2 08 18 00 	cp.b	r8,r9
80013c60:	e0 80 00 bc 	breq	80013dd8 <sd_mmc_spi_internal_init+0x524>
80013c64:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013c68:	fe 7c 28 00 	mov	r12,-55296
80013c6c:	fe b0 f7 dd 	rcall	80012c26 <spi_write>
80013c70:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013c72:	fe 7c 28 00 	mov	r12,-55296
80013c76:	fe b0 f7 e6 	rcall	80012c42 <spi_read>
80013c7a:	58 1c       	cp.w	r12,1
80013c7c:	e0 80 01 cb 	breq	80014012 <sd_mmc_spi_internal_init+0x75e>
80013c80:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80013c82:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80013c84:	3f e9       	mov	r9,-2
80013c86:	f2 08 18 00 	cp.b	r8,r9
80013c8a:	e0 80 00 a7 	breq	80013dd8 <sd_mmc_spi_internal_init+0x524>
80013c8e:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013c92:	fe 7c 28 00 	mov	r12,-55296
80013c96:	fe b0 f7 c8 	rcall	80012c26 <spi_write>
80013c9a:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013c9c:	fe 7c 28 00 	mov	r12,-55296
80013ca0:	fe b0 f7 d1 	rcall	80012c42 <spi_read>
80013ca4:	58 1c       	cp.w	r12,1
80013ca6:	e0 80 01 b2 	breq	8001400a <sd_mmc_spi_internal_init+0x756>
80013caa:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80013cac:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80013cae:	3f e9       	mov	r9,-2
80013cb0:	f2 08 18 00 	cp.b	r8,r9
80013cb4:	e0 80 00 92 	breq	80013dd8 <sd_mmc_spi_internal_init+0x524>
80013cb8:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013cbc:	fe 7c 28 00 	mov	r12,-55296
80013cc0:	fe b0 f7 b3 	rcall	80012c26 <spi_write>
80013cc4:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013cc6:	fe 7c 28 00 	mov	r12,-55296
80013cca:	fe b0 f7 bc 	rcall	80012c42 <spi_read>
80013cce:	58 1c       	cp.w	r12,1
80013cd0:	e0 80 01 a9 	breq	80014022 <sd_mmc_spi_internal_init+0x76e>
80013cd4:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80013cd6:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80013cd8:	3f e9       	mov	r9,-2
80013cda:	f2 08 18 00 	cp.b	r8,r9
80013cde:	c7 d0       	breq	80013dd8 <sd_mmc_spi_internal_init+0x524>
80013ce0:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013ce4:	fe 7c 28 00 	mov	r12,-55296
80013ce8:	fe b0 f7 9f 	rcall	80012c26 <spi_write>
80013cec:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013cee:	fe 7c 28 00 	mov	r12,-55296
80013cf2:	fe b0 f7 a8 	rcall	80012c42 <spi_read>
80013cf6:	58 1c       	cp.w	r12,1
80013cf8:	e0 80 01 91 	breq	8001401a <sd_mmc_spi_internal_init+0x766>
80013cfc:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80013cfe:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80013d00:	3f e9       	mov	r9,-2
80013d02:	f2 08 18 00 	cp.b	r8,r9
80013d06:	c6 90       	breq	80013dd8 <sd_mmc_spi_internal_init+0x524>
80013d08:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013d0c:	fe 7c 28 00 	mov	r12,-55296
80013d10:	fe b0 f7 8b 	rcall	80012c26 <spi_write>
80013d14:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013d16:	fe 7c 28 00 	mov	r12,-55296
80013d1a:	fe b0 f7 94 	rcall	80012c42 <spi_read>
80013d1e:	58 1c       	cp.w	r12,1
80013d20:	e0 80 01 85 	breq	8001402a <sd_mmc_spi_internal_init+0x776>
80013d24:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80013d26:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80013d28:	3f e9       	mov	r9,-2
80013d2a:	f2 08 18 00 	cp.b	r8,r9
80013d2e:	c5 50       	breq	80013dd8 <sd_mmc_spi_internal_init+0x524>
80013d30:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013d34:	fe 7c 28 00 	mov	r12,-55296
80013d38:	fe b0 f7 77 	rcall	80012c26 <spi_write>
80013d3c:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013d3e:	fe 7c 28 00 	mov	r12,-55296
80013d42:	fe b0 f7 80 	rcall	80012c42 <spi_read>
80013d46:	58 1c       	cp.w	r12,1
80013d48:	e0 80 01 75 	breq	80014032 <sd_mmc_spi_internal_init+0x77e>
80013d4c:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80013d4e:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80013d50:	3f e9       	mov	r9,-2
80013d52:	f2 08 18 00 	cp.b	r8,r9
80013d56:	c4 10       	breq	80013dd8 <sd_mmc_spi_internal_init+0x524>
80013d58:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013d5c:	fe 7c 28 00 	mov	r12,-55296
80013d60:	fe b0 f7 63 	rcall	80012c26 <spi_write>
80013d64:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013d66:	fe 7c 28 00 	mov	r12,-55296
80013d6a:	fe b0 f7 6c 	rcall	80012c42 <spi_read>
80013d6e:	58 1c       	cp.w	r12,1
80013d70:	e0 80 01 68 	breq	80014040 <sd_mmc_spi_internal_init+0x78c>
80013d74:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80013d76:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80013d78:	3f e9       	mov	r9,-2
80013d7a:	f2 08 18 00 	cp.b	r8,r9
80013d7e:	c2 d0       	breq	80013dd8 <sd_mmc_spi_internal_init+0x524>
80013d80:	e0 6b 00 ff 	mov	r11,255
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80013d84:	fe 7c 28 00 	mov	r12,-55296
80013d88:	fe b0 f7 4f 	rcall	80012c26 <spi_write>
80013d8c:	1a 9b       	mov	r11,sp
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80013d8e:	fe 7c 28 00 	mov	r12,-55296
80013d92:	fe b0 f7 58 	rcall	80012c42 <spi_read>
80013d96:	58 1c       	cp.w	r12,1
80013d98:	e0 80 01 51 	breq	8001403a <sd_mmc_spi_internal_init+0x786>
80013d9c:	1b 98       	ld.ub	r8,sp[0x1]
     return 0xFF;
   return data_read;
80013d9e:	ac 88       	st.b	r6[0x0],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80013da0:	3f e9       	mov	r9,-2
80013da2:	f2 08 18 00 	cp.b	r8,r9
80013da6:	c1 90       	breq	80013dd8 <sd_mmc_spi_internal_init+0x524>
80013da8:	30 2b       	mov	r11,2
  {
    if (retry > 8)
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013daa:	fe 7c 28 00 	mov	r12,-55296
80013dae:	fe b0 f6 cf 	rcall	80012b4c <spi_unselectChip>
80013db2:	30 0c       	mov	r12,0
80013db4:	cc 0a       	rjmp	80013b34 <sd_mmc_spi_internal_init+0x280>
80013db6:	fe b0 fb db 	rcall	8001356c <sd_mmc_spi_check_hc>
        return false;
  } while (r1);

  // CHECK FOR SDHC
  if(card_type == SD_CARD_2) {
    if_cond = sd_mmc_spi_check_hc();
80013dba:	5b fc       	cp.w	r12,-1
    if (if_cond == -1) {
80013dbc:	fe 90 fe bb 	breq	80013b32 <sd_mmc_spi_internal_init+0x27e>
80013dc0:	58 1c       	cp.w	r12,1
      return false;
    } else if (if_cond == 1){
80013dc2:	fe 91 fe 85 	brne	80013acc <sd_mmc_spi_internal_init+0x218>
80013dc6:	30 39       	mov	r9,3
          card_type = SD_CARD_2_SDHC;
80013dc8:	e0 68 3b 4e 	mov	r8,15182
80013dcc:	b0 89       	st.b	r8[0x0],r9
80013dce:	fe 9f fe 7f 	bral	80013acc <sd_mmc_spi_internal_init+0x218>
80013dd2:	3f f8       	mov	r8,-1
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80013dd4:	ac 88       	st.b	r6[0x0],r8
80013dd6:	c4 7b       	rjmp	80013c64 <sd_mmc_spi_internal_init+0x3b0>
80013dd8:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013ddc:	fe 7c 28 00 	mov	r12,-55296
80013de0:	fe b0 f7 23 	rcall	80012c26 <spi_write>
80013de4:	fa c5 ff fe 	sub	r5,sp,-2
   spi_read(SD_MMC_SPI,&data_read);
80013de8:	fe 7c 28 00 	mov	r12,-55296
80013dec:	0a 9b       	mov	r11,r5
80013dee:	fe b0 f7 2a 	rcall	80012c42 <spi_read>
80013df2:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013df4:	e0 66 3b 50 	mov	r6,15184
80013df8:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013dfc:	ac 88       	st.b	r6[0x0],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013dfe:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013e02:	fe b0 f7 12 	rcall	80012c26 <spi_write>
80013e06:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80013e08:	fe 7c 28 00 	mov	r12,-55296
80013e0c:	fe b0 f7 1b 	rcall	80012c42 <spi_read>
80013e10:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013e12:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013e16:	ac 98       	st.b	r6[0x1],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013e18:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013e1c:	fe b0 f7 05 	rcall	80012c26 <spi_write>
80013e20:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80013e22:	fe 7c 28 00 	mov	r12,-55296
80013e26:	fe b0 f7 0e 	rcall	80012c42 <spi_read>
80013e2a:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013e2c:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013e30:	ac a8       	st.b	r6[0x2],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013e32:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013e36:	fe b0 f6 f8 	rcall	80012c26 <spi_write>
80013e3a:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80013e3c:	fe 7c 28 00 	mov	r12,-55296
80013e40:	fe b0 f7 01 	rcall	80012c42 <spi_read>
80013e44:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013e46:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013e4a:	ac b8       	st.b	r6[0x3],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013e4c:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013e50:	fe b0 f6 eb 	rcall	80012c26 <spi_write>
80013e54:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80013e56:	fe 7c 28 00 	mov	r12,-55296
80013e5a:	fe b0 f6 f4 	rcall	80012c42 <spi_read>
80013e5e:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013e60:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013e64:	ac c8       	st.b	r6[0x4],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013e66:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013e6a:	fe b0 f6 de 	rcall	80012c26 <spi_write>
80013e6e:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80013e70:	fe 7c 28 00 	mov	r12,-55296
80013e74:	fe b0 f6 e7 	rcall	80012c42 <spi_read>
80013e78:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013e7a:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013e7e:	ac d8       	st.b	r6[0x5],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013e80:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013e84:	fe b0 f6 d1 	rcall	80012c26 <spi_write>
80013e88:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80013e8a:	fe 7c 28 00 	mov	r12,-55296
80013e8e:	fe b0 f6 da 	rcall	80012c42 <spi_read>
80013e92:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013e94:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013e98:	ac e8       	st.b	r6[0x6],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013e9a:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013e9e:	fe b0 f6 c4 	rcall	80012c26 <spi_write>
80013ea2:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80013ea4:	fe 7c 28 00 	mov	r12,-55296
80013ea8:	fe b0 f6 cd 	rcall	80012c42 <spi_read>
80013eac:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013eae:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013eb2:	ac f8       	st.b	r6[0x7],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013eb4:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013eb8:	fe b0 f6 b7 	rcall	80012c26 <spi_write>
80013ebc:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80013ebe:	fe 7c 28 00 	mov	r12,-55296
80013ec2:	fe b0 f6 c0 	rcall	80012c42 <spi_read>
80013ec6:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013ec8:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013ecc:	ed 68 00 08 	st.b	r6[8],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013ed0:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013ed4:	fe b0 f6 a9 	rcall	80012c26 <spi_write>
80013ed8:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80013eda:	fe 7c 28 00 	mov	r12,-55296
80013ede:	fe b0 f6 b2 	rcall	80012c42 <spi_read>
80013ee2:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013ee4:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013ee8:	ed 68 00 09 	st.b	r6[9],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013eec:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013ef0:	fe b0 f6 9b 	rcall	80012c26 <spi_write>
80013ef4:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80013ef6:	fe 7c 28 00 	mov	r12,-55296
80013efa:	fe b0 f6 a4 	rcall	80012c42 <spi_read>
80013efe:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013f00:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013f04:	ed 68 00 0a 	st.b	r6[10],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013f08:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013f0c:	fe b0 f6 8d 	rcall	80012c26 <spi_write>
80013f10:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80013f12:	fe 7c 28 00 	mov	r12,-55296
80013f16:	fe b0 f6 96 	rcall	80012c42 <spi_read>
80013f1a:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013f1c:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013f20:	ed 68 00 0b 	st.b	r6[11],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013f24:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013f28:	fe b0 f6 7f 	rcall	80012c26 <spi_write>
80013f2c:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80013f2e:	fe 7c 28 00 	mov	r12,-55296
80013f32:	fe b0 f6 88 	rcall	80012c42 <spi_read>
80013f36:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013f38:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013f3c:	ed 68 00 0c 	st.b	r6[12],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013f40:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013f44:	fe b0 f6 71 	rcall	80012c26 <spi_write>
80013f48:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80013f4a:	fe 7c 28 00 	mov	r12,-55296
80013f4e:	fe b0 f6 7a 	rcall	80012c42 <spi_read>
80013f52:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013f54:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013f58:	ed 68 00 0d 	st.b	r6[13],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013f5c:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013f60:	fe b0 f6 63 	rcall	80012c26 <spi_write>
80013f64:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80013f66:	fe 7c 28 00 	mov	r12,-55296
80013f6a:	fe b0 f6 6c 	rcall	80012c42 <spi_read>
80013f6e:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013f70:	e0 6b 00 ff 	mov	r11,255
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013f74:	ed 68 00 0e 	st.b	r6[14],r8
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013f78:	fe 7c 28 00 	mov	r12,-55296
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
80013f7c:	fe b0 f6 55 	rcall	80012c26 <spi_write>
80013f80:	0a 9b       	mov	r11,r5
   spi_read(SD_MMC_SPI,&data_read);
80013f82:	fe 7c 28 00 	mov	r12,-55296
80013f86:	fe b0 f6 5e 	rcall	80012c42 <spi_read>
80013f8a:	9a 18       	ld.sh	r8,sp[0x2]
    buffer[retry] = data_read;
80013f8c:	e0 6b 00 ff 	mov	r11,255
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
80013f90:	ed 68 00 0f 	st.b	r6[15],r8
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
80013f94:	fe 7c 28 00 	mov	r12,-55296
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
80013f98:	fe b0 f6 47 	rcall	80012c26 <spi_write>
80013f9c:	e0 6b 00 ff 	mov	r11,255
   spi_write(SD_MMC_SPI,0xFF);
80013fa0:	fe 7c 28 00 	mov	r12,-55296
80013fa4:	fe b0 f6 41 	rcall	80012c26 <spi_write>
80013fa8:	e0 6b 00 ff 	mov	r11,255
   spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
80013fac:	fe 7c 28 00 	mov	r12,-55296
80013fb0:	fe b0 f6 3b 	rcall	80012c26 <spi_write>
80013fb4:	30 2b       	mov	r11,2
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013fb6:	fe 7c 28 00 	mov	r12,-55296
80013fba:	fe b0 f5 c9 	rcall	80012b4c <spi_unselectChip>
80013fbe:	fe b0 f8 4d 	rcall	80013058 <sd_mmc_spi_get_capacity>
  // GET CARD SPECIFIC DATA
  if (false ==  sd_mmc_spi_get_csd(csd))
    return false;

  // GET CARD CAPACITY and NUMBER OF SECTORS
  sd_mmc_spi_get_capacity();
80013fc2:	e0 69 07 64 	mov	r9,1892
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == true)
  if (false ==  sd_mmc_spi_get_cid(cid))
    return false;
#endif

  sd_mmc_spi_init_done = true;
80013fc6:	30 18       	mov	r8,1

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80013fc8:	72 0a       	ld.w	r10,r9[0x0]
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == true)
  if (false ==  sd_mmc_spi_get_cid(cid))
    return false;
#endif

  sd_mmc_spi_init_done = true;
80013fca:	e0 69 07 68 	mov	r9,1896

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
80013fce:	b2 88       	st.b	r9[0x0],r8
80013fd0:	e0 68 1b 00 	mov	r8,6912
80013fd4:	ea 18 00 b7 	orh	r8,0xb7
80013fd8:	e0 6b 07 54 	mov	r11,1876
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80013fdc:	8f 18       	st.w	r7[0x4],r8
80013fde:	fe 7c 28 00 	mov	r12,-55296
80013fe2:	fe b0 f5 c9 	rcall	80012b74 <spi_setupChipReg>
  return true;
80013fe6:	30 1c       	mov	r12,1
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
  // check for valid response
  if(r1 != 0x00)
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80013fe8:	fe 9f fd a6 	bral	80013b34 <sd_mmc_spi_internal_init+0x280>
80013fec:	30 2b       	mov	r11,2
80013fee:	fe 7c 28 00 	mov	r12,-55296
    sd_mmc_spi_init_done = false;
80013ff2:	fe b0 f5 ad 	rcall	80012b4c <spi_unselectChip>
80013ff6:	e0 68 07 68 	mov	r8,1896
80013ffa:	30 0c       	mov	r12,0
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80013ffc:	b0 85       	st.b	r8[0x0],r5
80013ffe:	fe 9f fd 9b 	bral	80013b34 <sd_mmc_spi_internal_init+0x280>
80014002:	3f f8       	mov	r8,-1
80014004:	a8 88       	st.b	r4[0x0],r8
80014006:	fe 9f fe 1a 	bral	80013c3a <sd_mmc_spi_internal_init+0x386>
8001400a:	3f f8       	mov	r8,-1
8001400c:	ac 88       	st.b	r6[0x0],r8
8001400e:	fe 9f fe 55 	bral	80013cb8 <sd_mmc_spi_internal_init+0x404>
80014012:	3f f8       	mov	r8,-1
80014014:	ac 88       	st.b	r6[0x0],r8
80014016:	fe 9f fe 3c 	bral	80013c8e <sd_mmc_spi_internal_init+0x3da>
8001401a:	3f f8       	mov	r8,-1
8001401c:	ac 88       	st.b	r6[0x0],r8
8001401e:	fe 9f fe 75 	bral	80013d08 <sd_mmc_spi_internal_init+0x454>
80014022:	3f f8       	mov	r8,-1
80014024:	ac 88       	st.b	r6[0x0],r8
80014026:	fe 9f fe 5d 	bral	80013ce0 <sd_mmc_spi_internal_init+0x42c>
8001402a:	3f f8       	mov	r8,-1
8001402c:	ac 88       	st.b	r6[0x0],r8
8001402e:	fe 9f fe 81 	bral	80013d30 <sd_mmc_spi_internal_init+0x47c>
80014032:	3f f8       	mov	r8,-1
80014034:	ac 88       	st.b	r6[0x0],r8
80014036:	fe 9f fe 91 	bral	80013d58 <sd_mmc_spi_internal_init+0x4a4>
8001403a:	3f f8       	mov	r8,-1
8001403c:	ac 88       	st.b	r6[0x0],r8
8001403e:	cb 5a       	rjmp	80013da8 <sd_mmc_spi_internal_init+0x4f4>
80014040:	3f f8       	mov	r8,-1
80014042:	ac 88       	st.b	r6[0x0],r8
80014044:	fe 9f fe 9e 	bral	80013d80 <sd_mmc_spi_internal_init+0x4cc>

80014048 <sd_mmc_spi_init>:
80014048:	eb cd 40 10 	pushm	r4,lr
8001404c:	e0 68 07 54 	mov	r8,1876
80014050:	fa c4 ff f8 	sub	r4,sp,-8
80014054:	e8 ea 00 08 	ld.d	r10,r4[8]
80014058:	f0 eb 00 08 	st.d	r8[8],r10
8001405c:	e0 69 07 64 	mov	r9,1892
80014060:	93 0c       	st.w	r9[0x0],r12
80014062:	e8 ea 00 00 	ld.d	r10,r4[0]
80014066:	f0 eb 00 00 	st.d	r8[0],r10
8001406a:	fe b0 fc 25 	rcall	800138b4 <sd_mmc_spi_internal_init>
8001406e:	e3 cd 80 10 	ldm	sp++,r4,pc
80014072:	d7 03       	nop

80014074 <sd_mmc_spi_mem_check>:
80014074:	eb cd 40 e0 	pushm	r5-r7,lr
80014078:	e0 65 07 68 	mov	r5,1896
8001407c:	30 07       	mov	r7,0
8001407e:	0b 88       	ld.ub	r8,r5[0x0]
80014080:	ee 08 18 00 	cp.b	r8,r7
bool sd_mmc_spi_check_presence(void)
{
  uint16_t retry;

  retry = 0;
  if (sd_mmc_spi_init_done == false)
80014084:	e0 81 01 2c 	brne	800142dc <sd_mmc_spi_mem_check+0x268>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80014088:	30 2b       	mov	r11,2
8001408a:	fe 7c 28 00 	mov	r12,-55296
8001408e:	fe b0 f5 37 	rcall	80012afc <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80014092:	30 0b       	mov	r11,0
80014094:	16 9c       	mov	r12,r11
80014096:	fe b0 f8 c9 	rcall	80013228 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8001409a:	30 2b       	mov	r11,2
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
8001409c:	e0 67 3b 60 	mov	r7,15200
800140a0:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800140a2:	fe 7c 28 00 	mov	r12,-55296
800140a6:	fe b0 f5 53 	rcall	80012b4c <spi_unselectChip>
  return r1;
800140aa:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
800140ac:	ae 88       	st.b	r7[0x0],r8
800140ae:	30 16       	mov	r6,1
800140b0:	ec 08 18 00 	cp.b	r8,r6
800140b4:	e0 80 01 29 	breq	80014306 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800140b8:	e0 6b 00 ff 	mov	r11,255
800140bc:	fe 7c 28 00 	mov	r12,-55296
800140c0:	fe b0 f5 b3 	rcall	80012c26 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800140c4:	30 2b       	mov	r11,2
800140c6:	fe 7c 28 00 	mov	r12,-55296
800140ca:	fe b0 f5 19 	rcall	80012afc <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
800140ce:	30 0b       	mov	r11,0
800140d0:	16 9c       	mov	r12,r11
800140d2:	fe b0 f8 ab 	rcall	80013228 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800140d6:	30 2b       	mov	r11,2
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
800140d8:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800140da:	fe 7c 28 00 	mov	r12,-55296
800140de:	fe b0 f5 37 	rcall	80012b4c <spi_unselectChip>
  return r1;
800140e2:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
800140e4:	ae 88       	st.b	r7[0x0],r8
800140e6:	ec 08 18 00 	cp.b	r8,r6
800140ea:	e0 80 01 0e 	breq	80014306 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800140ee:	e0 6b 00 ff 	mov	r11,255
800140f2:	fe 7c 28 00 	mov	r12,-55296
800140f6:	fe b0 f5 98 	rcall	80012c26 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800140fa:	30 2b       	mov	r11,2
800140fc:	fe 7c 28 00 	mov	r12,-55296
80014100:	fe b0 f4 fe 	rcall	80012afc <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80014104:	30 0b       	mov	r11,0
80014106:	16 9c       	mov	r12,r11
80014108:	fe b0 f8 90 	rcall	80013228 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8001410c:	30 2b       	mov	r11,2
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
8001410e:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80014110:	fe 7c 28 00 	mov	r12,-55296
80014114:	fe b0 f5 1c 	rcall	80012b4c <spi_unselectChip>
  return r1;
80014118:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
8001411a:	ae 88       	st.b	r7[0x0],r8
8001411c:	ec 08 18 00 	cp.b	r8,r6
80014120:	e0 80 00 f3 	breq	80014306 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80014124:	e0 6b 00 ff 	mov	r11,255
80014128:	fe 7c 28 00 	mov	r12,-55296
8001412c:	fe b0 f5 7d 	rcall	80012c26 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80014130:	30 2b       	mov	r11,2
80014132:	fe 7c 28 00 	mov	r12,-55296
80014136:	fe b0 f4 e3 	rcall	80012afc <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
8001413a:	30 0b       	mov	r11,0
8001413c:	16 9c       	mov	r12,r11
8001413e:	fe b0 f8 75 	rcall	80013228 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80014142:	30 2b       	mov	r11,2
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80014144:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80014146:	fe 7c 28 00 	mov	r12,-55296
8001414a:	fe b0 f5 01 	rcall	80012b4c <spi_unselectChip>
  return r1;
8001414e:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80014150:	ae 88       	st.b	r7[0x0],r8
80014152:	ec 08 18 00 	cp.b	r8,r6
80014156:	e0 80 00 d8 	breq	80014306 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8001415a:	e0 6b 00 ff 	mov	r11,255
8001415e:	fe 7c 28 00 	mov	r12,-55296
80014162:	fe b0 f5 62 	rcall	80012c26 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80014166:	30 2b       	mov	r11,2
80014168:	fe 7c 28 00 	mov	r12,-55296
8001416c:	fe b0 f4 c8 	rcall	80012afc <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80014170:	30 0b       	mov	r11,0
80014172:	16 9c       	mov	r12,r11
80014174:	fe b0 f8 5a 	rcall	80013228 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80014178:	30 2b       	mov	r11,2
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
8001417a:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8001417c:	fe 7c 28 00 	mov	r12,-55296
80014180:	fe b0 f4 e6 	rcall	80012b4c <spi_unselectChip>
  return r1;
80014184:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80014186:	ae 88       	st.b	r7[0x0],r8
80014188:	ec 08 18 00 	cp.b	r8,r6
8001418c:	e0 80 00 bd 	breq	80014306 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80014190:	e0 6b 00 ff 	mov	r11,255
80014194:	fe 7c 28 00 	mov	r12,-55296
80014198:	fe b0 f5 47 	rcall	80012c26 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8001419c:	30 2b       	mov	r11,2
8001419e:	fe 7c 28 00 	mov	r12,-55296
800141a2:	fe b0 f4 ad 	rcall	80012afc <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
800141a6:	30 0b       	mov	r11,0
800141a8:	16 9c       	mov	r12,r11
800141aa:	fe b0 f8 3f 	rcall	80013228 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800141ae:	30 2b       	mov	r11,2
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
800141b0:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800141b2:	fe 7c 28 00 	mov	r12,-55296
800141b6:	fe b0 f4 cb 	rcall	80012b4c <spi_unselectChip>
  return r1;
800141ba:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
800141bc:	ae 88       	st.b	r7[0x0],r8
800141be:	ec 08 18 00 	cp.b	r8,r6
800141c2:	e0 80 00 a2 	breq	80014306 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800141c6:	e0 6b 00 ff 	mov	r11,255
800141ca:	fe 7c 28 00 	mov	r12,-55296
800141ce:	fe b0 f5 2c 	rcall	80012c26 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800141d2:	30 2b       	mov	r11,2
800141d4:	fe 7c 28 00 	mov	r12,-55296
800141d8:	fe b0 f4 92 	rcall	80012afc <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
800141dc:	30 0b       	mov	r11,0
800141de:	16 9c       	mov	r12,r11
800141e0:	fe b0 f8 24 	rcall	80013228 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800141e4:	30 2b       	mov	r11,2
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
800141e6:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800141e8:	fe 7c 28 00 	mov	r12,-55296
800141ec:	fe b0 f4 b0 	rcall	80012b4c <spi_unselectChip>
  return r1;
800141f0:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
800141f2:	ae 88       	st.b	r7[0x0],r8
800141f4:	ec 08 18 00 	cp.b	r8,r6
800141f8:	e0 80 00 87 	breq	80014306 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800141fc:	e0 6b 00 ff 	mov	r11,255
80014200:	fe 7c 28 00 	mov	r12,-55296
80014204:	fe b0 f5 11 	rcall	80012c26 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80014208:	30 2b       	mov	r11,2
8001420a:	fe 7c 28 00 	mov	r12,-55296
8001420e:	fe b0 f4 77 	rcall	80012afc <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80014212:	30 0b       	mov	r11,0
80014214:	16 9c       	mov	r12,r11
80014216:	fe b0 f8 09 	rcall	80013228 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8001421a:	30 2b       	mov	r11,2
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
8001421c:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8001421e:	fe 7c 28 00 	mov	r12,-55296
80014222:	fe b0 f4 95 	rcall	80012b4c <spi_unselectChip>
  return r1;
80014226:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80014228:	ae 88       	st.b	r7[0x0],r8
8001422a:	ec 08 18 00 	cp.b	r8,r6
8001422e:	c6 c0       	breq	80014306 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80014230:	e0 6b 00 ff 	mov	r11,255
80014234:	fe 7c 28 00 	mov	r12,-55296
80014238:	fe b0 f4 f7 	rcall	80012c26 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8001423c:	30 2b       	mov	r11,2
8001423e:	fe 7c 28 00 	mov	r12,-55296
80014242:	fe b0 f4 5d 	rcall	80012afc <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
80014246:	30 0b       	mov	r11,0
80014248:	16 9c       	mov	r12,r11
8001424a:	fe b0 f7 ef 	rcall	80013228 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8001424e:	30 2b       	mov	r11,2
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80014250:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80014252:	fe 7c 28 00 	mov	r12,-55296
80014256:	fe b0 f4 7b 	rcall	80012b4c <spi_unselectChip>
  return r1;
8001425a:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
8001425c:	ae 88       	st.b	r7[0x0],r8
8001425e:	ec 08 18 00 	cp.b	r8,r6
80014262:	c5 20       	breq	80014306 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80014264:	e0 6b 00 ff 	mov	r11,255
80014268:	fe 7c 28 00 	mov	r12,-55296
8001426c:	fe b0 f4 dd 	rcall	80012c26 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80014270:	30 2b       	mov	r11,2
80014272:	fe 7c 28 00 	mov	r12,-55296
80014276:	fe b0 f4 43 	rcall	80012afc <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
8001427a:	30 0b       	mov	r11,0
8001427c:	16 9c       	mov	r12,r11
8001427e:	fe b0 f7 d5 	rcall	80013228 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80014282:	30 2b       	mov	r11,2
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
80014284:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80014286:	fe 7c 28 00 	mov	r12,-55296
8001428a:	fe b0 f4 61 	rcall	80012b4c <spi_unselectChip>
  return r1;
8001428e:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80014290:	ae 88       	st.b	r7[0x0],r8
80014292:	ec 08 18 00 	cp.b	r8,r6
80014296:	c3 80       	breq	80014306 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80014298:	e0 6b 00 ff 	mov	r11,255
8001429c:	fe 7c 28 00 	mov	r12,-55296
800142a0:	fe b0 f4 c3 	rcall	80012c26 <spi_write>
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800142a4:	30 2b       	mov	r11,2
800142a6:	fe 7c 28 00 	mov	r12,-55296
800142aa:	fe b0 f4 29 	rcall	80012afc <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
800142ae:	30 0b       	mov	r11,0
800142b0:	16 9c       	mov	r12,r11
800142b2:	fe b0 f7 bb 	rcall	80013228 <sd_mmc_spi_command>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800142b6:	30 2b       	mov	r11,2
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  r1 = sd_mmc_spi_command(command, arg);
800142b8:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800142ba:	fe 7c 28 00 	mov	r12,-55296
800142be:	fe b0 f4 47 	rcall	80012b4c <spi_unselectChip>
  return r1;
800142c2:	0f 88       	ld.ub	r8,r7[0x0]
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
800142c4:	ae 88       	st.b	r7[0x0],r8
800142c6:	ec 08 18 00 	cp.b	r8,r6
800142ca:	c1 e0       	breq	80014306 <sd_mmc_spi_mem_check+0x292>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800142cc:	e0 6b 00 ff 	mov	r11,255
800142d0:	fe 7c 28 00 	mov	r12,-55296
800142d4:	fe b0 f4 a9 	rcall	80012c26 <spi_write>
800142d8:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800142dc:	30 2b       	mov	r11,2
800142de:	fe 7c 28 00 	mov	r12,-55296
800142e2:	fe b0 f4 0d 	rcall	80012afc <spi_selectChip>
  r1 = sd_mmc_spi_command(command, arg);
800142e6:	30 0b       	mov	r11,0
800142e8:	33 bc       	mov	r12,59
800142ea:	fe b0 f7 9f 	rcall	80013228 <sd_mmc_spi_command>
800142ee:	e0 66 3b 60 	mov	r6,15200
800142f2:	30 2b       	mov	r11,2
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800142f4:	ac 8c       	st.b	r6[0x0],r12
800142f6:	fe 7c 28 00 	mov	r12,-55296
800142fa:	fe b0 f4 29 	rcall	80012b4c <spi_unselectChip>
    return true;
  }
  else
  {
    // If memory already initialized, send a CRC command (CMD59) (supported only if card is initialized)
    if ((r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0)) == 0x00)
800142fe:	0d 88       	ld.ub	r8,r6[0x0]
80014300:	ac 88       	st.b	r6[0x0],r8
80014302:	58 08       	cp.w	r8,0
//!   The memory check failed -> false
bool sd_mmc_spi_mem_check(void)
{
  if (sd_mmc_spi_check_presence())
  {
    if (sd_mmc_spi_init_done == false)
80014304:	c0 c1       	brne	8001431c <sd_mmc_spi_mem_check+0x2a8>
80014306:	0b 89       	ld.ub	r9,r5[0x0]
80014308:	30 08       	mov	r8,0
8001430a:	f0 09 18 00 	cp.b	r9,r8
8001430e:	c0 30       	breq	80014314 <sd_mmc_spi_mem_check+0x2a0>
80014310:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
    {
      return sd_mmc_spi_internal_init();
80014314:	fe b0 fa d0 	rcall	800138b4 <sd_mmc_spi_internal_init>
    }
    else
      return true;
  }
  return false;
}
80014318:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
  else
  {
    // If memory already initialized, send a CRC command (CMD59) (supported only if card is initialized)
    if ((r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0)) == 0x00)
      return true;
    sd_mmc_spi_init_done = false;
8001431c:	aa 87       	st.b	r5[0x0],r7
8001431e:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80014322:	d7 03       	nop

80014324 <uhd_get_speed>:
	cpu_irq_restore(flags);
}

uhd_speed_t uhd_get_speed(void)
{
	switch (uhd_get_speed_mode()) {
80014324:	fe 68 08 04 	mov	r8,-129020
80014328:	70 08       	ld.w	r8,r8[0x0]
8001432a:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
8001432e:	58 38       	cp.w	r8,3
80014330:	c0 50       	breq	8001433a <uhd_get_speed+0x16>
80014332:	48 39       	lddpc	r9,8001433c <uhd_get_speed+0x18>
80014334:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]

	default:
		Assert(false);
		return UHD_SPEED_LOW;
	}
}
80014338:	5e fc       	retal	r12
	cpu_irq_restore(flags);
}

uhd_speed_t uhd_get_speed(void)
{
	switch (uhd_get_speed_mode()) {
8001433a:	5e fd       	retal	0
8001433c:	80 02       	ld.sh	r2,r0[0x0]
8001433e:	1c 08       	add	r8,lr

80014340 <uhd_send_reset>:
	return uhd_get_microsof_number();
}

void uhd_send_reset(uhd_callback_reset_t callback)
{
	uhd_reset_callback = callback;
80014340:	e0 69 07 6c 	mov	r9,1900
	uhd_start_reset();
80014344:	93 0c       	st.w	r9[0x0],r12
80014346:	fe 68 04 00 	mov	r8,-130048
8001434a:	70 09       	ld.w	r9,r8[0x0]
8001434c:	a9 b9       	sbr	r9,0x9
}
8001434e:	91 09       	st.w	r8[0x0],r9
80014350:	5e fc       	retal	r12
80014352:	d7 03       	nop

80014354 <uhd_suspend>:

void uhd_suspend(void)
{
80014354:	eb cd 40 80 	pushm	r7,lr
	if (uhd_ctrl_request_timeout) {
80014358:	e0 68 3b 74 	mov	r8,15220
8001435c:	90 08       	ld.sh	r8,r8[0x0]
8001435e:	58 08       	cp.w	r8,0
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80014360:	c4 d1       	brne	800143fa <uhd_suspend+0xa6>
80014362:	fe 69 05 c4 	mov	r9,-129596
		uhd_freeze_pipe(pipe);
80014366:	72 0e       	ld.w	lr,r9[0x0]
80014368:	fe 69 05 f4 	mov	r9,-129548
8001436c:	e2 68 00 00 	mov	r8,131072
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80014370:	93 08       	st.w	r9[0x0],r8
80014372:	fe 69 05 c8 	mov	r9,-129592
		uhd_freeze_pipe(pipe);
80014376:	72 0c       	ld.w	r12,r9[0x0]
80014378:	fe 69 05 f8 	mov	r9,-129544
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
8001437c:	93 08       	st.w	r9[0x0],r8
8001437e:	fe 69 05 cc 	mov	r9,-129588
		uhd_freeze_pipe(pipe);
80014382:	72 0b       	ld.w	r11,r9[0x0]
80014384:	fe 69 05 fc 	mov	r9,-129540
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80014388:	93 08       	st.w	r9[0x0],r8
8001438a:	fe 69 05 d0 	mov	r9,-129584
		uhd_freeze_pipe(pipe);
8001438e:	72 0a       	ld.w	r10,r9[0x0]
80014390:	fe 69 06 00 	mov	r9,-129536
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80014394:	93 08       	st.w	r9[0x0],r8
80014396:	10 5e       	eor	lr,r8
80014398:	10 5c       	eor	r12,r8
8001439a:	10 5b       	eor	r11,r8
8001439c:	10 5a       	eor	r10,r8
8001439e:	fe 69 05 d4 	mov	r9,-129580
		uhd_freeze_pipe(pipe);
800143a2:	fe 67 06 04 	mov	r7,-129532
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
800143a6:	72 09       	ld.w	r9,r9[0x0]
800143a8:	fd de c2 21 	bfextu	lr,lr,0x11,0x1
800143ac:	8f 08       	st.w	r7[0x0],r8
800143ae:	10 59       	eor	r9,r8
800143b0:	f9 dc c2 21 	bfextu	r12,r12,0x11,0x1
800143b4:	f3 d9 c2 21 	bfextu	r9,r9,0x11,0x1
800143b8:	a3 6c       	lsl	r12,0x2
800143ba:	f7 db c2 21 	bfextu	r11,r11,0x11,0x1
800143be:	f9 ee 10 1e 	or	lr,r12,lr<<0x1
800143c2:	f5 da c2 21 	bfextu	r10,r10,0x11,0x1
800143c6:	fd eb 10 3b 	or	r11,lr,r11<<0x3
800143ca:	f7 ea 10 4a 	or	r10,r11,r10<<0x4
800143ce:	f5 e9 10 5a 	or	r10,r10,r9<<0x5
800143d2:	fe 69 05 d8 	mov	r9,-129576
800143d6:	72 09       	ld.w	r9,r9[0x0]
800143d8:	10 59       	eor	r9,r8
800143da:	f3 d9 c2 21 	bfextu	r9,r9,0x11,0x1
800143de:	f5 e9 10 69 	or	r9,r10,r9<<0x6
		uhd_freeze_pipe(pipe);
800143e2:	fe 6a 06 08 	mov	r10,-129528
800143e6:	95 08       	st.w	r10[0x0],r8
800143e8:	e0 68 07 e9 	mov	r8,2025
	}
	// Wait three SOFs before entering in suspend state
	uhd_suspend_start = 3;
800143ec:	b0 89       	st.b	r8[0x0],r9
800143ee:	30 39       	mov	r9,3
800143f0:	e0 68 07 e8 	mov	r8,2024

void uhd_suspend(void)
{
	if (uhd_ctrl_request_timeout) {
		// Delay suspend after setup requests
		uhd_b_suspend_requested = true;
800143f4:	b0 89       	st.b	r8[0x0],r9
800143f6:	e3 cd 80 80 	ldm	sp++,r7,pc
		return;
800143fa:	30 19       	mov	r9,1
800143fc:	e0 68 07 eb 	mov	r8,2027
80014400:	b0 89       	st.b	r8[0x0],r9
80014402:	e3 cd 80 80 	ldm	sp++,r7,pc
80014406:	d7 03       	nop

80014408 <uhd_ep_alloc>:
80014408:	d4 21       	pushm	r4-r7,lr
8001440a:	fe 69 00 00 	mov	r9,-131072
8001440e:	f2 f8 04 1c 	ld.w	r8,r9[1052]
	uint8_t ep_dir;
	uint8_t ep_interval;
	uint8_t bank;

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
80014412:	ed b8 00 01 	bld	r8,0x1
80014416:	c2 90       	breq	80014468 <uhd_ep_alloc+0x60>
80014418:	30 2a       	mov	r10,2
8001441a:	30 19       	mov	r9,1
			continue;
		}
		uhd_enable_pipe(pipe);
8001441c:	fe 68 00 00 	mov	r8,-131072
		ep_addr = ep_desc->bEndpointAddress & USB_EP_ADDR_MASK;
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
80014420:	e0 67 02 00 	mov	r7,512

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		uhd_enable_pipe(pipe);
80014424:	f0 fe 04 1c 	ld.w	lr,r8[1052]
80014428:	f5 ee 10 0e 	or	lr,r10,lr
8001442c:	f1 4e 04 1c 	st.w	r8[1052],lr
		ep_addr = ep_desc->bEndpointAddress & USB_EP_ADDR_MASK;
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
80014430:	e0 68 01 00 	mov	r8,256
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		uhd_enable_pipe(pipe);
		ep_addr = ep_desc->bEndpointAddress & USB_EP_ADDR_MASK;
80014434:	17 ae       	ld.ub	lr,r11[0x2]
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
80014436:	30 06       	mov	r6,0
80014438:	fc 06 18 00 	cp.b	r6,lr
8001443c:	f0 06 17 90 	movgt	r6,r8
80014440:	ee 06 17 a0 	movle	r6,r7
				AVR32_USBB_UPCFG0_PTOKEN_IN:
				AVR32_USBB_UPCFG0_PTOKEN_OUT,
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
80014444:	17 b8       	ld.ub	r8,r11[0x3]
		// Bank choice
		switch(ep_type) {
80014446:	30 27       	mov	r7,2
		uhd_enable_pipe(pipe);
		ep_addr = ep_desc->bEndpointAddress & USB_EP_ADDR_MASK;
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
				AVR32_USBB_UPCFG0_PTOKEN_IN:
				AVR32_USBB_UPCFG0_PTOKEN_OUT,
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
80014448:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
		// Bank choice
		switch(ep_type) {
8001444c:	ee 08 18 00 	cp.b	r8,r7
80014450:	e0 80 00 9b 	breq	80014586 <uhd_ep_alloc+0x17e>
80014454:	30 37       	mov	r7,3
80014456:	ee 08 18 00 	cp.b	r8,r7
8001445a:	c1 d0       	breq	80014494 <uhd_ep_alloc+0x8c>
8001445c:	30 17       	mov	r7,1
8001445e:	ee 08 18 00 	cp.b	r8,r7
80014462:	e0 80 00 8e 	breq	8001457e <uhd_ep_alloc+0x176>
		// Enable endpoint interrupts
		uhd_enable_pipe_dma_interrupt(pipe);
		uhd_enable_stall_interrupt(pipe);
		uhd_enable_pipe_error_interrupt(pipe);
		uhd_enable_pipe_interrupt(pipe);
		return true;
80014466:	d8 2a       	popm	r4-r7,pc,r12=0
	uint8_t ep_dir;
	uint8_t ep_interval;
	uint8_t bank;

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
80014468:	f2 f8 04 1c 	ld.w	r8,r9[1052]
8001446c:	ed b8 00 02 	bld	r8,0x2
80014470:	c0 f1       	brne	8001448e <uhd_ep_alloc+0x86>
80014472:	f2 f8 04 1c 	ld.w	r8,r9[1052]
80014476:	ed b8 00 03 	bld	r8,0x3
8001447a:	c4 c1       	brne	80014512 <uhd_ep_alloc+0x10a>
8001447c:	f2 f8 04 1c 	ld.w	r8,r9[1052]
80014480:	ed b8 00 04 	bld	r8,0x4
80014484:	e0 80 00 84 	breq	8001458c <uhd_ep_alloc+0x184>
80014488:	31 0a       	mov	r10,16
8001448a:	30 49       	mov	r9,4
8001448c:	cc 8b       	rjmp	8001441c <uhd_ep_alloc+0x14>
8001448e:	30 4a       	mov	r10,4
80014490:	30 29       	mov	r9,2
80014492:	cc 5b       	rjmp	8001441c <uhd_ep_alloc+0x14>
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
				AVR32_USBB_UPCFG0_PTOKEN_IN:
				AVR32_USBB_UPCFG0_PTOKEN_OUT,
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
		// Bank choice
		switch(ep_type) {
80014494:	17 e5       	ld.ub	r5,r11[0x6]
80014496:	30 07       	mov	r7,0
80014498:	b9 65       	lsl	r5,0x18
		default:
			Assert(false);
			return false;
		}

		uhd_configure_pipe(pipe, ep_interval, ep_addr, ep_type, ep_dir,
8001449a:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
8001449e:	ad 68       	lsl	r8,0xc
800144a0:	f1 ee 11 08 	or	r8,r8,lr<<0x10
800144a4:	ab a8       	sbr	r8,0xa
800144a6:	0c 48       	or	r8,r6
800144a8:	f1 e5 10 05 	or	r5,r8,r5
800144ac:	eb e7 10 06 	or	r6,r5,r7
800144b0:	fe 65 05 00 	mov	r5,-129792
800144b4:	17 d4       	ld.ub	r4,r11[0x5]
800144b6:	f2 0e 15 02 	lsl	lr,r9,0x2
800144ba:	17 cb       	ld.ub	r11,r11[0x4]
800144bc:	fc 05 00 08 	add	r8,lr,r5
800144c0:	e9 eb 10 8b 	or	r11,r4,r11<<0x8
800144c4:	30 87       	mov	r7,8
800144c6:	e0 65 04 00 	mov	r5,1024
800144ca:	5c cb       	swap.bh	r11
800144cc:	5c 7b       	castu.h	r11
800144ce:	f6 07 0c 4b 	max	r11,r11,r7
800144d2:	f6 05 0d 45 	min	r5,r11,r5
				le16_to_cpu(ep_desc->wMaxPacketSize),
				bank, AVR32_USBB_UPCFG0_AUTOSW_MASK);
		uhd_allocate_memory(pipe);
		if (!Is_uhd_pipe_configured(pipe)) {
800144d6:	fe 6b 05 30 	mov	r11,-129744
		default:
			Assert(false);
			return false;
		}

		uhd_configure_pipe(pipe, ep_interval, ep_addr, ep_type, ep_dir,
800144da:	a1 75       	lsl	r5,0x1
800144dc:	20 15       	sub	r5,1
800144de:	ea 05 12 00 	clz	r5,r5
800144e2:	ea 05 11 1c 	rsub	r5,r5,28
800144e6:	ed e5 10 45 	or	r5,r6,r5<<0x4
800144ea:	91 05       	st.w	r8[0x0],r5
				le16_to_cpu(ep_desc->wMaxPacketSize),
				bank, AVR32_USBB_UPCFG0_AUTOSW_MASK);
		uhd_allocate_memory(pipe);
		if (!Is_uhd_pipe_configured(pipe)) {
800144ec:	fc 0b 00 06 	add	r6,lr,r11
		}

		uhd_configure_pipe(pipe, ep_interval, ep_addr, ep_type, ep_dir,
				le16_to_cpu(ep_desc->wMaxPacketSize),
				bank, AVR32_USBB_UPCFG0_AUTOSW_MASK);
		uhd_allocate_memory(pipe);
800144f0:	70 0b       	ld.w	r11,r8[0x0]
800144f2:	a1 bb       	sbr	r11,0x1
800144f4:	91 0b       	st.w	r8[0x0],r11
		if (!Is_uhd_pipe_configured(pipe)) {
800144f6:	6c 08       	ld.w	r8,r6[0x0]
800144f8:	e6 18 00 04 	andh	r8,0x4,COH
800144fc:	c0 e1       	brne	80014518 <uhd_ep_alloc+0x110>
			uhd_disable_pipe(pipe);
800144fe:	5c da       	com	r10
80014500:	10 9c       	mov	r12,r8
80014502:	fe 68 00 00 	mov	r8,-131072
80014506:	f0 f9 04 1c 	ld.w	r9,r8[1052]
8001450a:	12 6a       	and	r10,r9
8001450c:	f1 4a 04 1c 	st.w	r8[1052],r10
			return false;
80014510:	d8 22       	popm	r4-r7,pc
	uint8_t ep_dir;
	uint8_t ep_interval;
	uint8_t bank;

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
80014512:	30 8a       	mov	r10,8
80014514:	30 39       	mov	r9,3
80014516:	c8 3b       	rjmp	8001441c <uhd_ep_alloc+0x14>
		uhd_allocate_memory(pipe);
		if (!Is_uhd_pipe_configured(pipe)) {
			uhd_disable_pipe(pipe);
			return false;
		}
		uhd_configure_address(pipe, add);
80014518:	37 f5       	mov	r5,127
8001451a:	12 98       	mov	r8,r9
8001451c:	f7 d9 c0 02 	bfextu	r11,r9,0x0,0x2
80014520:	e2 18 00 04 	andl	r8,0x4,COH
80014524:	a3 7b       	lsl	r11,0x3
80014526:	e0 38 fb dc 	sub	r8,130012
8001452a:	ea 0b 09 4b 	lsl	r11,r5,r11
8001452e:	70 06       	ld.w	r6,r8[0x0]
80014530:	16 95       	mov	r5,r11
80014532:	5c 95       	brev	r5
80014534:	ea 05 12 00 	clz	r5,r5
80014538:	16 86       	andn	r6,r11
8001453a:	f8 05 09 4c 	lsl	r12,r12,r5
8001453e:	f9 eb 00 0b 	and	r11,r12,r11
80014542:	0c 4b       	or	r11,r6
80014544:	91 0b       	st.w	r8[0x0],r11
		uhd_enable_pipe(pipe);
80014546:	fe 68 00 00 	mov	r8,-131072
8001454a:	f0 fb 04 1c 	ld.w	r11,r8[1052]
8001454e:	16 4a       	or	r10,r11
80014550:	f1 4a 04 1c 	st.w	r8[1052],r10

		// Enable endpoint interrupts
		uhd_enable_pipe_dma_interrupt(pipe);
80014554:	fc 1b 02 00 	movh	r11,0x200
80014558:	f2 ca 00 01 	sub	r10,r9,1
8001455c:	f6 0a 09 4a 	lsl	r10,r11,r10
80014560:	f1 4a 04 18 	st.w	r8[1048],r10
		uhd_enable_stall_interrupt(pipe);
80014564:	e0 3e fa 10 	sub	lr,129552
80014568:	34 0a       	mov	r10,64
8001456a:	9d 0a       	st.w	lr[0x0],r10
		uhd_enable_pipe_error_interrupt(pipe);
8001456c:	9d 07       	st.w	lr[0x0],r7
		uhd_enable_pipe_interrupt(pipe);
8001456e:	e0 6a 01 00 	mov	r10,256
80014572:	30 1c       	mov	r12,1
80014574:	f4 09 09 49 	lsl	r9,r10,r9
80014578:	f1 49 04 18 	st.w	r8[1048],r9
		return true;
8001457c:	d8 22       	popm	r4-r7,pc
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
				AVR32_USBB_UPCFG0_PTOKEN_IN:
				AVR32_USBB_UPCFG0_PTOKEN_OUT,
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
		// Bank choice
		switch(ep_type) {
8001457e:	17 e5       	ld.ub	r5,r11[0x6]
80014580:	30 47       	mov	r7,4
80014582:	b9 65       	lsl	r5,0x18
		case 1:
			bank = AVR32_USBB_UECFG0_EPBK_SINGLE;
			break;
		case 2:
			bank = AVR32_USBB_UECFG0_EPBK_DOUBLE;
			break;
80014584:	c8 bb       	rjmp	8001449a <uhd_ep_alloc+0x92>
		ep_dir = (ep_desc->bEndpointAddress & USB_EP_DIR_IN)?
				AVR32_USBB_UPCFG0_PTOKEN_IN:
				AVR32_USBB_UPCFG0_PTOKEN_OUT,
		ep_type = ep_desc->bmAttributes&USB_EP_TYPE_MASK;
		// Bank choice
		switch(ep_type) {
80014586:	30 05       	mov	r5,0
80014588:	30 47       	mov	r7,4
8001458a:	c8 8b       	rjmp	8001449a <uhd_ep_alloc+0x92>
	uint8_t ep_dir;
	uint8_t ep_interval;
	uint8_t bank;

	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (Is_uhd_pipe_enabled(pipe)) {
8001458c:	f2 f8 04 1c 	ld.w	r8,r9[1052]
80014590:	ed b8 00 05 	bld	r8,0x5
80014594:	c0 a1       	brne	800145a8 <uhd_ep_alloc+0x1a0>
80014596:	f2 f8 04 1c 	ld.w	r8,r9[1052]
8001459a:	ed b8 00 06 	bld	r8,0x6
8001459e:	fe 90 ff 64 	breq	80014466 <uhd_ep_alloc+0x5e>
800145a2:	34 0a       	mov	r10,64
800145a4:	30 69       	mov	r9,6
800145a6:	c3 bb       	rjmp	8001441c <uhd_ep_alloc+0x14>
800145a8:	32 0a       	mov	r10,32
800145aa:	30 59       	mov	r9,5
800145ac:	c3 8b       	rjmp	8001441c <uhd_ep_alloc+0x14>

800145ae <uhd_ep0_alloc>:
	uhd_send_resume();
	uhd_sleep_mode(UHD_STATE_IDLE);
}

bool uhd_ep0_alloc(usb_add_t add, uint8_t ep_size)
{
800145ae:	d4 01       	pushm	lr
	if (ep_size < 8) {
800145b0:	30 78       	mov	r8,7
800145b2:	f0 0b 18 00 	cp.b	r11,r8
800145b6:	e0 88 00 3f 	brls	80014634 <uhd_ep0_alloc+0x86>
#error TODO Add USB address in a list
		return true;
	}
#endif

	uhd_enable_pipe(0);
800145ba:	fe 69 00 00 	mov	r9,-131072
800145be:	f2 f8 04 1c 	ld.w	r8,r9[1052]
800145c2:	a1 a8       	sbr	r8,0x0
800145c4:	f3 48 04 1c 	st.w	r9[1052],r8
	uhd_configure_pipe(0, // Pipe 0
800145c8:	30 8e       	mov	lr,8
800145ca:	fe 68 05 00 	mov	r8,-129792
800145ce:	f6 0e 0c 4b 	max	r11,r11,lr
800145d2:	e0 6a 04 00 	mov	r10,1024
800145d6:	f6 0a 0d 4a 	min	r10,r11,r10
800145da:	a1 7a       	lsl	r10,0x1
800145dc:	20 1a       	sub	r10,1
800145de:	f4 0a 12 00 	clz	r10,r10
800145e2:	f4 0a 11 1c 	rsub	r10,r10,28
800145e6:	a5 6a       	lsl	r10,0x4
800145e8:	91 0a       	st.w	r8[0x0],r10
#else
			ep_size,
#endif
			AVR32_USBB_UECFG0_EPBK_SINGLE, 0);

	uhd_allocate_memory(0);
800145ea:	70 0a       	ld.w	r10,r8[0x0]
800145ec:	a1 ba       	sbr	r10,0x1
800145ee:	91 0a       	st.w	r8[0x0],r10
	if (!Is_uhd_pipe_configured(0)) {
800145f0:	fe 68 05 30 	mov	r8,-129744
800145f4:	70 08       	ld.w	r8,r8[0x0]
800145f6:	e6 18 00 04 	andh	r8,0x4,COH
800145fa:	c1 60       	breq	80014626 <uhd_ep0_alloc+0x78>
		uhd_disable_pipe(0);
		return false;
	}
	uhd_configure_address(0, add);
800145fc:	fe 6a 04 24 	mov	r10,-130012
80014600:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80014604:	74 08       	ld.w	r8,r10[0x0]
80014606:	e0 18 ff 80 	andl	r8,0xff80
8001460a:	f9 e8 10 08 	or	r8,r12,r8
8001460e:	95 08       	st.w	r10[0x0],r8

	// Always enable stall and error interrupts of control endpoint
	uhd_enable_stall_interrupt(0);
80014610:	fe 68 05 f0 	mov	r8,-129552
80014614:	34 0a       	mov	r10,64
80014616:	91 0a       	st.w	r8[0x0],r10
	uhd_enable_pipe_error_interrupt(0);
80014618:	91 0e       	st.w	r8[0x0],lr
	uhd_enable_pipe_interrupt(0);
8001461a:	30 1c       	mov	r12,1
8001461c:	e0 68 01 00 	mov	r8,256
80014620:	f3 48 04 18 	st.w	r9[1048],r8
	return true;
}
80014624:	d8 02       	popm	pc
#endif
			AVR32_USBB_UECFG0_EPBK_SINGLE, 0);

	uhd_allocate_memory(0);
	if (!Is_uhd_pipe_configured(0)) {
		uhd_disable_pipe(0);
80014626:	10 9c       	mov	r12,r8
80014628:	f2 f8 04 1c 	ld.w	r8,r9[1052]
8001462c:	a1 c8       	cbr	r8,0x0
8001462e:	f3 48 04 1c 	st.w	r9[1052],r8
		return false;
80014632:	d8 02       	popm	pc
	uhd_sleep_mode(UHD_STATE_IDLE);
}

bool uhd_ep0_alloc(usb_add_t add, uint8_t ep_size)
{
	if (ep_size < 8) {
80014634:	d8 0a       	popm	pc,r12=0
80014636:	d7 03       	nop

80014638 <otg_dual_enable>:
	}
	otg_data_memory_barrier();
}

bool otg_dual_enable(void)
{
80014638:	eb cd 40 80 	pushm	r7,lr
	if (otg_initialized) {
8001463c:	e0 68 07 69 	mov	r8,1897
80014640:	30 09       	mov	r9,0
80014642:	11 8a       	ld.ub	r10,r8[0x0]
80014644:	f2 0a 18 00 	cp.b	r10,r9
80014648:	c0 30       	breq	8001464e <otg_dual_enable+0x16>
8001464a:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
		return false; // Dual role already initialized
	}
	otg_initialized = true;
8001464e:	30 19       	mov	r9,1

	//* Enable USB hardware clock
	sysclk_enable_usb();
80014650:	b0 89       	st.b	r8[0x0],r9
80014652:	e0 a0 0b a5 	rcall	80015d9c <sysclk_enable_usb>

	//* Link USB interrupt on OTG interrupt in dual role
	irq_register_handler(otg_interrupt, AVR32_USBB_IRQ, UHD_USB_INT_LEVEL);
80014656:	30 0a       	mov	r10,0
80014658:	e0 6b 02 20 	mov	r11,544
8001465c:	fe cc f5 48 	sub	r12,pc,-2744
	//pm_asyn_wake_up_enable(AVR32_PM_AWEN_USB_WAKEN_MASK);

# ifdef USB_ID
	// By default USBB is already configured with ID pin enable
	// The USBB must be enabled to provide interrupt
	otg_input_id_pin();
80014660:	fe b0 f0 ec 	rcall	80012838 <INTC_register_interrupt>
80014664:	fe 78 10 00 	mov	r8,-61440
80014668:	fc 19 00 20 	movh	r9,0x20
8001466c:	91 69       	st.w	r8[0x18],r9
8001466e:	91 99       	st.w	r8[0x24],r9
80014670:	91 29       	st.w	r8[0x8],r9
	otg_unfreeze_clock();
80014672:	f1 49 00 74 	st.w	r8[116],r9
80014676:	fe 68 08 00 	mov	r8,-129024
8001467a:	70 09       	ld.w	r9,r8[0x0]
	otg_enable();
8001467c:	af c9       	cbr	r9,0xe
8001467e:	91 09       	st.w	r8[0x0],r9
80014680:	70 09       	ld.w	r9,r8[0x0]
	otg_enable_id_interrupt();
80014682:	af b9       	sbr	r9,0xf
80014684:	91 09       	st.w	r8[0x0],r9
80014686:	70 09       	ld.w	r9,r8[0x0]
	otg_ack_id_transition();
80014688:	a1 a9       	sbr	r9,0x0
8001468a:	91 09       	st.w	r8[0x0],r9
8001468c:	30 17       	mov	r7,1
8001468e:	fe 69 08 08 	mov	r9,-129016
	otg_freeze_clock();
80014692:	93 07       	st.w	r9[0x0],r7
80014694:	70 09       	ld.w	r9,r8[0x0]
	if (Is_otg_id_device()) {
80014696:	af a9       	sbr	r9,0xe
80014698:	91 09       	st.w	r8[0x0],r9
8001469a:	fe 68 08 04 	mov	r8,-129020
8001469e:	70 08       	ld.w	r8,r8[0x0]
800146a0:	ed b8 00 0a 	bld	r8,0xa
		uhd_sleep_mode(UHD_STATE_WAIT_ID_HOST);
		UHC_MODE_CHANGE(false);
		udc_start();
	} else {
		UHC_MODE_CHANGE(true);
800146a4:	c0 90       	breq	800146b6 <otg_dual_enable+0x7e>
800146a6:	0e 9c       	mov	r12,r7
		uhc_start();
800146a8:	e0 a0 26 7a 	rcall	8001939c <usb_mode_change>
800146ac:	e0 a0 0c 4c 	rcall	80015f44 <uhc_start>
	return true;  // ID pin management has been enabled
# else
	uhd_sleep_mode(UHD_STATE_OFF);
	return false; // ID pin management has not been enabled
# endif
}
800146b0:	0e 9c       	mov	r12,r7
	otg_enable_id_interrupt();
	otg_ack_id_transition();
	otg_freeze_clock();
	if (Is_otg_id_device()) {
		uhd_sleep_mode(UHD_STATE_WAIT_ID_HOST);
		UHC_MODE_CHANGE(false);
800146b2:	e3 cd 80 80 	ldm	sp++,r7,pc
800146b6:	30 0c       	mov	r12,0
800146b8:	e0 a0 26 72 	rcall	8001939c <usb_mode_change>
800146bc:	0e 9c       	mov	r12,r7
800146be:	e3 cd 80 80 	ldm	sp++,r7,pc
800146c2:	d7 03       	nop

800146c4 <uhd_enable>:
800146c4:	eb cd 40 80 	pushm	r7,lr
800146c8:	e1 b7 00 00 	mfsr	r7,0x0
800146cc:	d3 03       	ssrf	0x10
800146ce:	cb 5f       	rcall	80014638 <otg_dual_enable>
800146d0:	c0 71       	brne	800146de <uhd_enable+0x1a>
800146d2:	fe 6b 08 04 	mov	r11,-129020
800146d6:	76 08       	ld.w	r8,r11[0x0]
		return;
	}

#ifdef USB_ID
	// Check that the host mode is selected by ID pin
	if (!Is_otg_id_host()) {
800146d8:	e2 18 04 00 	andl	r8,0x400,COH
800146dc:	c0 70       	breq	800146ea <uhd_enable+0x26>
800146de:	e6 17 00 01 	andh	r7,0x1,COH
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800146e2:	c0 21       	brne	800146e6 <uhd_enable+0x22>
800146e4:	d5 03       	csrf	0x10
      cpu_irq_enable();
800146e6:	e3 cd 80 80 	ldm	sp++,r7,pc
   }

	barrier();
800146ea:	fe 79 10 00 	mov	r9,-61440
	otg_force_host_mode();
#endif

	// Enable USB hardware
#ifdef USB_VBOF
	uhd_output_vbof_pin();
800146ee:	fc 1a 00 40 	movh	r10,0x40
800146f2:	93 6a       	st.w	r9[0x18],r10
800146f4:	93 9a       	st.w	r9[0x24],r10
800146f6:	93 2a       	st.w	r9[0x8],r10
800146f8:	f3 4a 00 88 	st.w	r9[136],r10
800146fc:	f3 4a 00 78 	st.w	r9[120],r10
80014700:	fe 69 08 00 	mov	r9,-129024
# if USB_VBOF_ACTIVE_LEVEL == HIGH
	uhd_set_vbof_active_high();
# else // USB_VBOF_ACTIVE_LEVEL == LOW
	uhd_set_vbof_active_low();
80014704:	72 0a       	ld.w	r10,r9[0x0]
80014706:	ad ba       	sbr	r10,0xd
80014708:	93 0a       	st.w	r9[0x0],r10
8001470a:	72 0a       	ld.w	r10,r9[0x0]
# endif
#endif
	otg_enable_pad();
8001470c:	ad aa       	sbr	r10,0xc
8001470e:	93 0a       	st.w	r9[0x0],r10
80014710:	72 0a       	ld.w	r10,r9[0x0]
	otg_enable();
80014712:	af ba       	sbr	r10,0xf
80014714:	93 0a       	st.w	r9[0x0],r10
80014716:	e0 6a 3b 74 	mov	r10,15220

	uhd_ctrl_request_first = NULL;
	uhd_ctrl_request_last = NULL;
	uhd_ctrl_request_timeout = 0;
8001471a:	b4 08       	st.h	r10[0x0],r8
	uhd_suspend_start = 0;
	uhd_resume_start = 0;
	uhd_b_suspend_requested = false;

	otg_unfreeze_clock();
8001471c:	72 0a       	ld.w	r10,r9[0x0]
8001471e:	af ca       	cbr	r10,0xe
80014720:	93 0a       	st.w	r9[0x0],r10
	uhd_disable_high_speed_mode();
#  endif
#endif

	// Clear all interrupts that may have been set by a previous host mode
	AVR32_USBB.uhintclr = AVR32_USBB_UHINTCLR_DCONNIC_MASK
80014722:	37 fa       	mov	r10,127
80014724:	fe 69 00 00 	mov	r9,-131072
80014728:	f3 4a 04 08 	st.w	r9[1032],r10
			| AVR32_USBB_UHINTCLR_DDISCIC_MASK | AVR32_USBB_UHINTCLR_HSOFIC_MASK
			| AVR32_USBB_UHINTCLR_HWUPIC_MASK | AVR32_USBB_UHINTCLR_RSMEDIC_MASK
			| AVR32_USBB_UHINTCLR_RSTIC_MASK | AVR32_USBB_UHINTCLR_RXRSMIC_MASK;
	otg_ack_vbus_transition();
8001472c:	fe 6a 08 08 	mov	r10,-129016
80014730:	30 2c       	mov	r12,2
80014732:	95 0c       	st.w	r10[0x0],r12

	// Enable Vbus change and error interrupts
	// Disable automatic Vbus control after Vbus error
	Set_bits(AVR32_USBB.usbcon, AVR32_USBB_USBCON_VBUSHWC_MASK
80014734:	f2 fa 08 00 	ld.w	r10,r9[2048]
80014738:	e8 1a 01 0a 	orl	r10,0x10a
8001473c:	f3 4a 08 00 	st.w	r9[2048],r10
# endif
#endif
	otg_enable_pad();
	otg_enable();

	uhd_ctrl_request_first = NULL;
80014740:	e0 6a 3b 68 	mov	r10,15208
80014744:	10 99       	mov	r9,r8
	uhd_ctrl_request_last = NULL;
80014746:	95 08       	st.w	r10[0x0],r8
80014748:	e0 6a 3b 70 	mov	r10,15216
	uhd_ctrl_request_timeout = 0;
	uhd_suspend_start = 0;
8001474c:	95 08       	st.w	r10[0x0],r8
	uhd_resume_start = 0;
8001474e:	e0 68 07 e8 	mov	r8,2024
	uhd_b_suspend_requested = false;
80014752:	b0 89       	st.b	r8[0x0],r9
80014754:	e0 68 07 ea 	mov	r8,2026
	// Enable Vbus change and error interrupts
	// Disable automatic Vbus control after Vbus error
	Set_bits(AVR32_USBB.usbcon, AVR32_USBB_USBCON_VBUSHWC_MASK
			|AVR32_USBB_USBCON_VBUSTE_MASK
			|AVR32_USBB_USBCON_VBERRE_MASK);
	uhd_enable_vbus();
80014758:	b0 89       	st.b	r8[0x0],r9
8001475a:	e0 68 07 eb 	mov	r8,2027
8001475e:	b0 89       	st.b	r8[0x0],r9

	// Force Vbus interrupt when Vbus is always high
	// This is possible due to a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
80014760:	fe 69 08 0c 	mov	r9,-129012
		otg_raise_vbus_transition();
80014764:	e0 68 02 00 	mov	r8,512
80014768:	93 08       	st.w	r9[0x0],r8
	}

	// Enable main control interrupt
	// Connection, SOF and reset
	AVR32_USBB.uhinteset = AVR32_USBB_UHINTESET_DCONNIES_MASK
8001476a:	76 08       	ld.w	r8,r11[0x0]
8001476c:	ed b8 00 0b 	bld	r8,0xb
80014770:	f3 fc 0a 00 	st.weq	r9[0x0],r12
			| AVR32_USBB_UHINTESET_HSOFIES_MASK
			| AVR32_USBB_UHINTESET_RSTIES_MASK;

	otg_freeze_clock();
80014774:	32 59       	mov	r9,37
80014776:	fe 68 00 00 	mov	r8,-131072
8001477a:	f1 49 04 18 	st.w	r8[1048],r9
8001477e:	fe 69 08 00 	mov	r9,-129024
80014782:	72 08       	ld.w	r8,r9[0x0]
80014784:	af a8       	sbr	r8,0xe
80014786:	93 08       	st.w	r9[0x0],r8
80014788:	ca bb       	rjmp	800146de <uhd_enable+0x1a>
8001478a:	d7 03       	nop

8001478c <uhd_disable>:
8001478c:	eb cd 40 c0 	pushm	r6-r7,lr
80014790:	fe 69 08 04 	mov	r9,-129020
80014794:	18 96       	mov	r6,r12
80014796:	72 08       	ld.w	r8,r9[0x0]
80014798:	ed b8 00 0e 	bld	r8,0xe
void uhd_disable(bool b_id_stop)
{
	irqflags_t flags;

	// Check USB clock ready after a potential sleep mode < IDLE
	while (!Is_otg_clock_usable());
8001479c:	cf d1       	brne	80014796 <uhd_disable+0xa>
	otg_unfreeze_clock();
8001479e:	fe 67 08 00 	mov	r7,-129024
800147a2:	6e 08       	ld.w	r8,r7[0x0]
800147a4:	af c8       	cbr	r8,0xe
800147a6:	8f 08       	st.w	r7[0x0],r8

	// Disable Vbus change and error interrupts
	Clr_bits(AVR32_USBB.usbcon, AVR32_USBB_USBCON_VBUSTE_MASK
800147a8:	fe 68 00 00 	mov	r8,-131072
800147ac:	f0 f9 08 00 	ld.w	r9,r8[2048]
800147b0:	e0 19 ff f5 	andl	r9,0xfff5
800147b4:	f1 49 08 00 	st.w	r8[2048],r9
			| AVR32_USBB_USBCON_VBERRE_MASK);

	// Disable main control interrupt
	// (Connection, disconnection, SOF and reset)
	AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_DCONNIEC_MASK
800147b8:	37 f9       	mov	r9,127
800147ba:	f1 49 04 14 	st.w	r8[1044],r9
			| AVR32_USBB_UHINTECLR_HSOFIEC_MASK
			| AVR32_USBB_UHINTECLR_RSTIEC_MASK
			| AVR32_USBB_UHINTECLR_HWUPIEC_MASK
			| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
			| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
	uhd_disable_sof();
800147be:	fe 69 04 00 	mov	r9,-130048
800147c2:	72 08       	ld.w	r8,r9[0x0]
800147c4:	a9 c8       	cbr	r8,0x8
800147c6:	93 08       	st.w	r9[0x0],r8
	uhd_disable_vbus();
800147c8:	fe 68 08 08 	mov	r8,-129016
800147cc:	e0 69 02 00 	mov	r9,512
	uhc_notify_connection(false);
800147d0:	30 0c       	mov	r12,0
			| AVR32_USBB_UHINTECLR_RSTIEC_MASK
			| AVR32_USBB_UHINTECLR_HWUPIEC_MASK
			| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
			| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
	uhd_disable_sof();
	uhd_disable_vbus();
800147d2:	91 09       	st.w	r8[0x0],r9
	uhc_notify_connection(false);
800147d4:	e0 a0 0f 04 	rcall	800165dc <uhc_notify_connection>
	otg_freeze_clock();
800147d8:	6e 08       	ld.w	r8,r7[0x0]
800147da:	af a8       	sbr	r8,0xe
800147dc:	8f 08       	st.w	r7[0x0],r8

#ifdef USB_ID
	uhd_sleep_mode(UHD_STATE_WAIT_ID_HOST);
	if (!b_id_stop) {
800147de:	58 06       	cp.w	r6,0
800147e0:	c0 31       	brne	800147e6 <uhd_disable+0x5a>
800147e2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800147e6:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
800147ea:	d3 03       	ssrf	0x10
}


void otg_dual_disable(void)
{
	if (!otg_initialized) {
800147ec:	e0 68 07 69 	mov	r8,1897
800147f0:	30 09       	mov	r9,0
800147f2:	11 8a       	ld.ub	r10,r8[0x0]
800147f4:	f2 0a 18 00 	cp.b	r10,r9
		return; // Dual role not initialized
	}
	otg_initialized = false;

	// Do not authorize asynchronous USB interrupts
	AVR32_PM.AWEN.usb_waken = 0;
800147f8:	c1 90       	breq	8001482a <uhd_disable+0x9e>
800147fa:	fe 7a 0c 00 	mov	r10,-62464
800147fe:	30 0c       	mov	r12,0
80014800:	f4 fb 01 44 	ld.w	r11,r10[324]
80014804:	f7 dc d0 01 	bfins	r11,r12,0x0,0x1
80014808:	f5 4b 01 44 	st.w	r10[324],r11
	otg_unfreeze_clock();
8001480c:	6e 0a       	ld.w	r10,r7[0x0]
8001480e:	af ca       	cbr	r10,0xe
# ifdef USB_ID
	otg_disable_id_interrupt();
80014810:	8f 0a       	st.w	r7[0x0],r10
80014812:	6e 0a       	ld.w	r10,r7[0x0]
80014814:	a1 ca       	cbr	r10,0x0
# endif
	otg_disable();
80014816:	8f 0a       	st.w	r7[0x0],r10
80014818:	6e 0a       	ld.w	r10,r7[0x0]
8001481a:	af da       	cbr	r10,0xf
void otg_dual_disable(void)
{
	if (!otg_initialized) {
		return; // Dual role not initialized
	}
	otg_initialized = false;
8001481c:	8f 0a       	st.w	r7[0x0],r10
	otg_unfreeze_clock();
# ifdef USB_ID
	otg_disable_id_interrupt();
# endif
	otg_disable();
	otg_disable_pad();
8001481e:	b0 89       	st.b	r8[0x0],r9
80014820:	6e 08       	ld.w	r8,r7[0x0]
80014822:	ad c8       	cbr	r8,0xc
	sysclk_disable_usb();
80014824:	8f 08       	st.w	r7[0x0],r8
80014826:	e0 a0 0a 41 	rcall	80015ca8 <sysclk_disable_usb>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8001482a:	e6 16 00 01 	andh	r6,0x1,COH
      cpu_irq_enable();
   }

	barrier();
8001482e:	c0 30       	breq	80014834 <uhd_disable+0xa8>
80014830:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014834:	d5 03       	csrf	0x10
80014836:	cf db       	rjmp	80014830 <uhd_disable+0xa4>

80014838 <uhd_ctrl_request_end>:
80014838:	eb cd 40 f8 	pushm	r3-r7,lr
8001483c:	20 2d       	sub	sp,8
8001483e:	30 08       	mov	r8,0
80014840:	18 93       	mov	r3,r12
80014842:	e0 64 3b 74 	mov	r4,15220
	irqflags_t flags;
	uhd_callback_setup_end_t callback_end;
	struct uhd_ctrl_request_t *request_to_free;
	bool b_new_request;

	uhd_ctrl_request_timeout = 0;
80014846:	e0 67 3b 68 	mov	r7,15208

	// Remove request from the control request list
	callback_end = uhd_ctrl_request_first->callback_end;
8001484a:	a8 08       	st.h	r4[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8001484c:	6e 0c       	ld.w	r12,r7[0x0]
8001484e:	78 65       	ld.w	r5,r12[0x18]
	cpu_irq_disable();
80014850:	e1 b8 00 00 	mfsr	r8,0x0
	request_to_free = uhd_ctrl_request_first;
	flags = cpu_irq_save();
	uhd_ctrl_request_first = uhd_ctrl_request_first->next_request;
80014854:	d3 03       	ssrf	0x10
80014856:	6e 09       	ld.w	r9,r7[0x0]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80014858:	72 76       	ld.w	r6,r9[0x1c]
8001485a:	8f 06       	st.w	r7[0x0],r6
8001485c:	ed b8 00 10 	bld	r8,0x10
	b_new_request = (uhd_ctrl_request_first != NULL);
	cpu_irq_restore(flags);
	free(request_to_free);
80014860:	e0 81 00 c2 	brne	800149e4 <uhd_ctrl_request_end+0x1ac>

	// Call callback
	if (callback_end != NULL) {
80014864:	e0 a0 62 8e 	rcall	80020d80 <free>
		callback_end(uhd_get_configured_address(0), status, uhd_ctrl_nb_trans);
80014868:	58 05       	cp.w	r5,0
8001486a:	c0 b0       	breq	80014880 <uhd_ctrl_request_end+0x48>
8001486c:	fe 68 04 24 	mov	r8,-130012
80014870:	70 0c       	ld.w	r12,r8[0x0]
80014872:	e0 68 3b 6c 	mov	r8,15212
80014876:	06 9b       	mov	r11,r3
80014878:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
	}

	// If a setup request is pending and no started by previous callback
	if (b_new_request) {
8001487c:	90 8a       	ld.uh	r10,r8[0x0]
		usb_setup_req_t req;
		uint64_t value64;
	} setup;
	volatile uint64_t *ptr_ep_data;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
8001487e:	5d 15       	icall	r5
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));
80014880:	58 06       	cp.w	r6,0
80014882:	c3 50       	breq	800148ec <uhd_ctrl_request_end+0xb4>
		usb_setup_req_t req;
		uint64_t value64;
	} setup;
	volatile uint64_t *ptr_ep_data;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
80014884:	e0 68 3b 64 	mov	r8,15204
80014888:	6e 0b       	ld.w	r11,r7[0x0]
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));
8001488a:	30 8a       	mov	r10,8
8001488c:	30 07       	mov	r7,0
8001488e:	2f fb       	sub	r11,-1

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
	uhd_ctrl_nb_trans = 0;
80014890:	91 07       	st.w	r8[0x0],r7
80014892:	1a 9c       	mov	r12,sp
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
80014894:	e0 a0 64 9e 	rcall	800211d0 <memcpy>
		uint64_t value64;
	} setup;
	volatile uint64_t *ptr_ep_data;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));
80014898:	e0 68 3b 6c 	mov	r8,15212

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
8001489c:	b0 07       	st.h	r8[0x0],r7
8001489e:	fe 68 00 00 	mov	r8,-131072
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
800148a2:	40 09       	lddsp	r9,sp[0x0]
800148a4:	f5 d9 b0 10 	bfexts	r10,r9,0x0,0x10

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
800148a8:	5c ca       	swap.bh	r10
		uint64_t value64;
	} setup;
	volatile uint64_t *ptr_ep_data;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));
800148aa:	5c 8a       	casts.h	r10

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
800148ac:	f0 fb 04 1c 	ld.w	r11,r8[1052]
800148b0:	f3 da d0 10 	bfins	r9,r10,0x0,0x10
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
800148b4:	40 18       	lddsp	r8,sp[0x4]
800148b6:	f0 0a 14 10 	asr	r10,r8,0x10
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
800148ba:	5c ca       	swap.bh	r10
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
800148bc:	5c 8a       	casts.h	r10
800148be:	f7 db c0 01 	bfextu	r11,r11,0x0,0x1
800148c2:	f1 da d2 10 	bfins	r8,r10,0x10,0x10
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
800148c6:	f5 d8 b0 10 	bfexts	r10,r8,0x0,0x10
			(uhd_ctrl_request_first->add != uhd_get_configured_address(0))) {
800148ca:	5c ca       	swap.bh	r10
800148cc:	5c 8a       	casts.h	r10
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
800148ce:	58 0b       	cp.w	r11,0
800148d0:	c0 c0       	breq	800148e8 <uhd_ctrl_request_end+0xb0>
800148d2:	fe 6b 04 24 	mov	r11,-130012
800148d6:	76 0b       	ld.w	r11,r11[0x0]
800148d8:	e0 6c 3b 68 	mov	r12,15208
			(uhd_ctrl_request_first->add != uhd_get_configured_address(0))) {
		uhd_ctrl_request_end(UHD_TRANS_DISCONNECT);
800148dc:	f7 db c0 07 	bfextu	r11,r11,0x0,0x7

	// If a setup request is pending and no started by previous callback
	if (b_new_request) {
		uhd_ctrl_phase_setup();
	}
	if (uhd_b_suspend_requested) {
800148e0:	78 0c       	ld.w	r12,r12[0x0]
800148e2:	19 8c       	ld.ub	r12,r12[0x0]
800148e4:	16 3c       	cp.w	r12,r11
800148e6:	c0 d0       	breq	80014900 <uhd_ctrl_request_end+0xc8>
800148e8:	30 1c       	mov	r12,1
800148ea:	ca 7f       	rcall	80014838 <uhd_ctrl_request_end>
		// A suspend request has been delay after all setup request
		uhd_b_suspend_requested = false;
		uhd_suspend();
	}
}
800148ec:	e0 68 07 eb 	mov	r8,2027
800148f0:	30 09       	mov	r9,0
		return; // Endpoint not valid
	}
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_SETUP);
800148f2:	11 8a       	ld.ub	r10,r8[0x0]
800148f4:	f2 0a 18 00 	cp.b	r10,r9
800148f8:	c2 51       	brne	80014942 <uhd_ctrl_request_end+0x10a>
800148fa:	2f ed       	sub	sp,-8
800148fc:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
80014900:	fe 6c 05 00 	mov	r12,-129792
	}
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_SETUP);
	uhd_ack_setup_ready(0);
80014904:	78 0b       	ld.w	r11,r12[0x0]
80014906:	e0 1b fc ff 	andl	r11,0xfcff
	Assert(sizeof(setup) == sizeof(uint64_t));
	ptr_ep_data = (volatile uint64_t *)&uhd_get_pipe_fifo_access(0, 64);
	*ptr_ep_data = setup.value64;
8001490a:	99 0b       	st.w	r12[0x0],r11
8001490c:	f1 da d0 10 	bfins	r8,r10,0x0,0x10
80014910:	30 4c       	mov	r12,4
80014912:	fe 6b 05 60 	mov	r11,-129696

	uhd_ctrl_request_timeout = 5000;
80014916:	97 0c       	st.w	r11[0x0],r12
80014918:	10 9a       	mov	r10,r8
8001491a:	12 9b       	mov	r11,r9
	uhd_enable_setup_ready_interrupt(0);
8001491c:	fc 18 e0 00 	movh	r8,0xe000
80014920:	f0 eb 00 00 	st.d	r8[0],r10
	uhd_ack_fifocon(0);
80014924:	e0 68 13 88 	mov	r8,5000
80014928:	a8 08       	st.h	r4[0x0],r8
8001492a:	fe 68 05 f0 	mov	r8,-129552
	uhd_unfreeze_pipe(0);
8001492e:	91 0c       	st.w	r8[0x0],r12
80014930:	e0 69 40 00 	mov	r9,16384
	if (b_new_request) {
		uhd_ctrl_phase_setup();
	}
	if (uhd_b_suspend_requested) {
		// A suspend request has been delay after all setup request
		uhd_b_suspend_requested = false;
80014934:	fe 68 06 20 	mov	r8,-129504
	uhd_start_reset();
}

void uhd_suspend(void)
{
	if (uhd_ctrl_request_timeout) {
80014938:	91 09       	st.w	r8[0x0],r9
8001493a:	e2 69 00 00 	mov	r9,131072
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
8001493e:	91 09       	st.w	r8[0x0],r9
80014940:	cd 6b       	rjmp	800148ec <uhd_ctrl_request_end+0xb4>
		uhd_freeze_pipe(pipe);
80014942:	b0 89       	st.b	r8[0x0],r9
80014944:	88 09       	ld.sh	r9,r4[0x0]
80014946:	58 09       	cp.w	r9,0
80014948:	c5 01       	brne	800149e8 <uhd_ctrl_request_end+0x1b0>
8001494a:	fe 69 05 c4 	mov	r9,-129596
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
8001494e:	72 07       	ld.w	r7,r9[0x0]
80014950:	fe 69 05 f4 	mov	r9,-129548
		uhd_freeze_pipe(pipe);
80014954:	e2 68 00 00 	mov	r8,131072
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80014958:	93 08       	st.w	r9[0x0],r8
8001495a:	fe 69 05 c8 	mov	r9,-129592
		uhd_freeze_pipe(pipe);
8001495e:	72 0c       	ld.w	r12,r9[0x0]
80014960:	fe 69 05 f8 	mov	r9,-129544
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80014964:	93 08       	st.w	r9[0x0],r8
80014966:	fe 69 05 cc 	mov	r9,-129588
		uhd_freeze_pipe(pipe);
8001496a:	72 0b       	ld.w	r11,r9[0x0]
8001496c:	fe 69 05 fc 	mov	r9,-129540
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80014970:	93 08       	st.w	r9[0x0],r8
80014972:	fe 69 05 d0 	mov	r9,-129584
80014976:	72 0a       	ld.w	r10,r9[0x0]
80014978:	fe 69 06 00 	mov	r9,-129536
		uhd_freeze_pipe(pipe);
8001497c:	93 08       	st.w	r9[0x0],r8
8001497e:	10 57       	eor	r7,r8
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
80014980:	10 5c       	eor	r12,r8
80014982:	10 5b       	eor	r11,r8
80014984:	10 5a       	eor	r10,r8
		uhd_freeze_pipe(pipe);
80014986:	fe 69 05 d4 	mov	r9,-129580
		return;
	}
	// Save pipe freeze states and freeze pipes
	uhd_pipes_unfreeze = 0;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		uhd_pipes_unfreeze |= (!Is_uhd_pipe_frozen(pipe)) << pipe;
8001498a:	fe 66 06 04 	mov	r6,-129532
8001498e:	72 09       	ld.w	r9,r9[0x0]
80014990:	ef d7 c2 21 	bfextu	r7,r7,0x11,0x1
80014994:	8d 08       	st.w	r6[0x0],r8
80014996:	10 59       	eor	r9,r8
80014998:	f9 dc c2 21 	bfextu	r12,r12,0x11,0x1
8001499c:	f3 d9 c2 21 	bfextu	r9,r9,0x11,0x1
800149a0:	a3 6c       	lsl	r12,0x2
800149a2:	f7 db c2 21 	bfextu	r11,r11,0x11,0x1
800149a6:	f9 e7 10 17 	or	r7,r12,r7<<0x1
800149aa:	f5 da c2 21 	bfextu	r10,r10,0x11,0x1
800149ae:	ef eb 10 3b 	or	r11,r7,r11<<0x3
800149b2:	f7 ea 10 4a 	or	r10,r11,r10<<0x4
800149b6:	f5 e9 10 5a 	or	r10,r10,r9<<0x5
800149ba:	fe 69 05 d8 	mov	r9,-129576
		uhd_freeze_pipe(pipe);
800149be:	72 09       	ld.w	r9,r9[0x0]
800149c0:	10 59       	eor	r9,r8
800149c2:	f3 d9 c2 21 	bfextu	r9,r9,0x11,0x1
	}
	// Wait three SOFs before entering in suspend state
	uhd_suspend_start = 3;
800149c6:	f5 e9 10 69 	or	r9,r10,r9<<0x6
800149ca:	fe 6a 06 08 	mov	r10,-129528
	if (uhd_b_suspend_requested) {
		// A suspend request has been delay after all setup request
		uhd_b_suspend_requested = false;
		uhd_suspend();
	}
}
800149ce:	95 08       	st.w	r10[0x0],r8
800149d0:	e0 68 07 e9 	mov	r8,2025
      cpu_irq_enable();
800149d4:	b0 89       	st.b	r8[0x0],r9

void uhd_suspend(void)
{
	if (uhd_ctrl_request_timeout) {
		// Delay suspend after setup requests
		uhd_b_suspend_requested = true;
800149d6:	30 39       	mov	r9,3
800149d8:	e0 68 07 e8 	mov	r8,2024
	if (uhd_b_suspend_requested) {
		// A suspend request has been delay after all setup request
		uhd_b_suspend_requested = false;
		uhd_suspend();
	}
}
800149dc:	b0 89       	st.b	r8[0x0],r9
800149de:	2f ed       	sub	sp,-8
800149e0:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800149e4:	d5 03       	csrf	0x10
800149e6:	c3 fb       	rjmp	80014864 <uhd_ctrl_request_end+0x2c>
800149e8:	30 19       	mov	r9,1
800149ea:	b0 89       	st.b	r8[0x0],r9
800149ec:	2f ed       	sub	sp,-8
800149ee:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800149f2:	d7 03       	nop

800149f4 <uhd_setup_request>:
800149f4:	eb cd 40 fc 	pushm	r2-r7,lr
800149f8:	20 3d       	sub	sp,12
800149fa:	18 97       	mov	r7,r12
800149fc:	50 0b       	stdsp	sp[0x0],r11
800149fe:	14 92       	mov	r2,r10
80014a00:	12 96       	mov	r6,r9
80014a02:	10 93       	mov	r3,r8
		usb_setup_req_t *req,
		uint8_t *payload,
		uint16_t payload_size,
		uhd_callback_setup_run_t callback_run,
		uhd_callback_setup_end_t callback_end)
{
80014a04:	40 a4       	lddsp	r4,sp[0x28]
	irqflags_t flags;
	struct uhd_ctrl_request_t *request;
	bool b_start_request = false;

	request = malloc( sizeof(struct uhd_ctrl_request_t) );
80014a06:	32 0c       	mov	r12,32
80014a08:	e0 a0 61 c4 	rcall	80020d90 <malloc>
	if (request == NULL) {
80014a0c:	40 0b       	lddsp	r11,sp[0x0]
{
	irqflags_t flags;
	struct uhd_ctrl_request_t *request;
	bool b_start_request = false;

	request = malloc( sizeof(struct uhd_ctrl_request_t) );
80014a0e:	18 95       	mov	r5,r12
	if (request == NULL) {
80014a10:	c5 c0       	breq	80014ac8 <uhd_setup_request+0xd4>
		Assert(false);
		return false;
	}

	// Fill structure
	request->add = (uint8_t) add;
80014a12:	18 c7       	st.b	r12++,r7
	memcpy(&request->req, req, sizeof(usb_setup_req_t));
80014a14:	30 8a       	mov	r10,8
80014a16:	e0 a0 63 dd 	rcall	800211d0 <memcpy>
	request->payload = payload;
	request->payload_size = payload_size;
	request->callback_run = callback_run;
	request->callback_end = callback_end;
	request->next_request = NULL;
80014a1a:	30 08       	mov	r8,0
	}

	// Fill structure
	request->add = (uint8_t) add;
	memcpy(&request->req, req, sizeof(usb_setup_req_t));
	request->payload = payload;
80014a1c:	8b 32       	st.w	r5[0xc],r2
	request->payload_size = payload_size;
80014a1e:	eb 56 00 10 	st.h	r5[16],r6
	request->callback_run = callback_run;
80014a22:	8b 53       	st.w	r5[0x14],r3
	request->callback_end = callback_end;
80014a24:	8b 64       	st.w	r5[0x18],r4
	request->next_request = NULL;
80014a26:	8b 78       	st.w	r5[0x1c],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80014a28:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
80014a2c:	d3 03       	ssrf	0x10

	// Add this request in the queue
	flags = cpu_irq_save();
	if (uhd_ctrl_request_first == NULL) {
80014a2e:	e0 69 3b 68 	mov	r9,15208
80014a32:	72 0a       	ld.w	r10,r9[0x0]
80014a34:	58 0a       	cp.w	r10,0
		uhd_ctrl_request_first = request;
		b_start_request = true;
	} else {
		uhd_ctrl_request_last->next_request = request;
80014a36:	c6 f0       	breq	80014b14 <uhd_setup_request+0x120>
80014a38:	10 9a       	mov	r10,r8
80014a3a:	e0 68 3b 70 	mov	r8,15216
	}
	uhd_ctrl_request_last = request;
80014a3e:	70 0c       	ld.w	r12,r8[0x0]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80014a40:	99 75       	st.w	r12[0x1c],r5
80014a42:	91 05       	st.w	r8[0x0],r5
80014a44:	ed bb 00 10 	bld	r11,0x10
	cpu_irq_restore(flags);

	if (b_start_request) {
80014a48:	c3 e1       	brne	80014ac4 <uhd_setup_request+0xd0>
	*ptr_ep_data = setup.value64;

	uhd_ctrl_request_timeout = 5000;
	uhd_enable_setup_ready_interrupt(0);
	uhd_ack_fifocon(0);
	uhd_unfreeze_pipe(0);
80014a4a:	58 0a       	cp.w	r10,0
80014a4c:	c0 41       	brne	80014a54 <uhd_setup_request+0x60>
80014a4e:	2f dd       	sub	sp,-12
		usb_setup_req_t req;
		uint64_t value64;
	} setup;
	volatile uint64_t *ptr_ep_data;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
80014a50:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
80014a54:	e0 68 3b 64 	mov	r8,15204
80014a58:	72 0b       	ld.w	r11,r9[0x0]
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));
80014a5a:	30 07       	mov	r7,0
80014a5c:	2f fb       	sub	r11,-1
80014a5e:	91 07       	st.w	r8[0x0],r7
80014a60:	30 8a       	mov	r10,8
80014a62:	fa cc ff fc 	sub	r12,sp,-4

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
	uhd_ctrl_nb_trans = 0;
80014a66:	e0 a0 63 b5 	rcall	800211d0 <memcpy>
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
80014a6a:	e0 68 3b 6c 	mov	r8,15212

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
80014a6e:	b0 07       	st.h	r8[0x0],r7
80014a70:	fe 68 00 00 	mov	r8,-131072
80014a74:	40 19       	lddsp	r9,sp[0x4]
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
80014a76:	f5 d9 b0 10 	bfexts	r10,r9,0x0,0x10

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
80014a7a:	5c ca       	swap.bh	r10
80014a7c:	5c 8a       	casts.h	r10
		uint64_t value64;
	} setup;
	volatile uint64_t *ptr_ep_data;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));
80014a7e:	f0 fb 04 1c 	ld.w	r11,r8[1052]

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
80014a82:	f3 da d0 10 	bfins	r9,r10,0x0,0x10
80014a86:	40 28       	lddsp	r8,sp[0x8]
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
80014a88:	f0 0a 14 10 	asr	r10,r8,0x10
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_SETUP;
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
80014a8c:	5c ca       	swap.bh	r10
80014a8e:	5c 8a       	casts.h	r10
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
80014a90:	f7 db c0 01 	bfextu	r11,r11,0x0,0x1
80014a94:	f1 da d2 10 	bfins	r8,r10,0x10,0x10
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
80014a98:	f5 d8 b0 10 	bfexts	r10,r8,0x0,0x10
			(uhd_ctrl_request_first->add != uhd_get_configured_address(0))) {
80014a9c:	5c ca       	swap.bh	r10
80014a9e:	5c 8a       	casts.h	r10
80014aa0:	58 0b       	cp.w	r11,0
	}
#error TODO check address in list
	// Reconfigure USB address of pipe 0 used for all control endpoints
	uhd_configure_address(0, uhd_ctrl_request_first->add);
#else
	if (!Is_uhd_pipe_enabled(0) ||
80014aa2:	c0 c0       	breq	80014aba <uhd_setup_request+0xc6>
80014aa4:	fe 6b 04 24 	mov	r11,-130012
80014aa8:	76 0b       	ld.w	r11,r11[0x0]
80014aaa:	e0 6c 3b 68 	mov	r12,15208
80014aae:	f7 db c0 07 	bfextu	r11,r11,0x0,0x7
			(uhd_ctrl_request_first->add != uhd_get_configured_address(0))) {
		uhd_ctrl_request_end(UHD_TRANS_DISCONNECT);
80014ab2:	78 0c       	ld.w	r12,r12[0x0]
80014ab4:	19 8c       	ld.ub	r12,r12[0x0]
80014ab6:	16 3c       	cp.w	r12,r11
80014ab8:	c0 b0       	breq	80014ace <uhd_setup_request+0xda>
80014aba:	30 1c       	mov	r12,1
      cpu_irq_enable();
80014abc:	cb ee       	rcall	80014838 <uhd_ctrl_request_end>
80014abe:	2f dd       	sub	sp,-12
	if (b_start_request) {
		// Start immediately request
		uhd_ctrl_phase_setup();
	}
	return true;
}
80014ac0:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
80014ac4:	d5 03       	csrf	0x10
		return; // Endpoint not valid
	}
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_SETUP);
80014ac6:	cc 2b       	rjmp	80014a4a <uhd_setup_request+0x56>
80014ac8:	2f dd       	sub	sp,-12
80014aca:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80014ace:	fe 6c 05 00 	mov	r12,-129792
	memcpy( &setup.req, &uhd_ctrl_request_first->req, sizeof(usb_setup_req_t));

	// Manage LSB/MSB to fit with CPU usage
	setup.req.wValue = cpu_to_le16(setup.req.wValue);
	setup.req.wIndex = cpu_to_le16(setup.req.wIndex);
	setup.req.wLength = cpu_to_le16(setup.req.wLength);
80014ad2:	78 0b       	ld.w	r11,r12[0x0]
80014ad4:	e0 1b fc ff 	andl	r11,0xfcff
	}
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_SETUP);
	uhd_ack_setup_ready(0);
80014ad8:	99 0b       	st.w	r12[0x0],r11
80014ada:	f1 da d0 10 	bfins	r8,r10,0x0,0x10
	Assert(sizeof(setup) == sizeof(uint64_t));
	ptr_ep_data = (volatile uint64_t *)&uhd_get_pipe_fifo_access(0, 64);
	*ptr_ep_data = setup.value64;
80014ade:	30 4c       	mov	r12,4
80014ae0:	fe 6b 05 60 	mov	r11,-129696
80014ae4:	97 0c       	st.w	r11[0x0],r12
80014ae6:	10 9a       	mov	r10,r8
80014ae8:	12 9b       	mov	r11,r9

	uhd_ctrl_request_timeout = 5000;
80014aea:	fc 18 e0 00 	movh	r8,0xe000
80014aee:	f0 eb 00 00 	st.d	r8[0],r10
	uhd_enable_setup_ready_interrupt(0);
80014af2:	e0 69 13 88 	mov	r9,5000
80014af6:	e0 68 3b 74 	mov	r8,15220
	uhd_ack_fifocon(0);
80014afa:	b0 09       	st.h	r8[0x0],r9
80014afc:	fe 68 05 f0 	mov	r8,-129552
80014b00:	91 0c       	st.w	r8[0x0],r12
	uhd_unfreeze_pipe(0);
80014b02:	e0 69 40 00 	mov	r9,16384
80014b06:	fe 68 06 20 	mov	r8,-129504
	request->next_request = NULL;

	// Add this request in the queue
	flags = cpu_irq_save();
	if (uhd_ctrl_request_first == NULL) {
		uhd_ctrl_request_first = request;
80014b0a:	91 09       	st.w	r8[0x0],r9
80014b0c:	e2 69 00 00 	mov	r9,131072
80014b10:	91 09       	st.w	r8[0x0],r9
80014b12:	c9 eb       	rjmp	80014a4e <uhd_setup_request+0x5a>
80014b14:	93 05       	st.w	r9[0x0],r5
80014b16:	30 1a       	mov	r10,1
80014b18:	e0 68 3b 70 	mov	r8,15216
80014b1c:	c9 3b       	rjmp	80014a42 <uhd_setup_request+0x4e>
80014b1e:	d7 03       	nop

80014b20 <uhd_ep_abort_pipe>:
80014b20:	eb cd 40 c0 	pushm	r6-r7,lr
80014b24:	fe 68 00 00 	mov	r8,-131072
80014b28:	e0 79 00 00 	mov	r9,65536
80014b2c:	f0 fa 04 1c 	ld.w	r10,r8[1052]
80014b30:	f2 0c 09 49 	lsl	r9,r9,r12
 * \param status Reason of abort
 */
static void uhd_ep_abort_pipe(uint8_t pipe, uhd_trans_status_t status)
{
	// Stop transfer
	uhd_reset_pipe(pipe);
80014b34:	f3 ea 10 0a 	or	r10,r9,r10
80014b38:	f1 4a 04 1c 	st.w	r8[1052],r10
80014b3c:	f0 fa 04 1c 	ld.w	r10,r8[1052]
80014b40:	5c d9       	com	r9
80014b42:	14 69       	and	r9,r10

	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
80014b44:	fe 6a 05 00 	mov	r10,-129792
 * \param status Reason of abort
 */
static void uhd_ep_abort_pipe(uint8_t pipe, uhd_trans_status_t status)
{
	// Stop transfer
	uhd_reset_pipe(pipe);
80014b48:	f1 49 04 1c 	st.w	r8[1052],r9

	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
80014b4c:	f8 08 15 02 	lsl	r8,r12,0x2
80014b50:	f0 0a 00 0e 	add	lr,r8,r10
	uhd_enable_stall_interrupt(pipe);
80014b54:	fe 6a 05 f0 	mov	r10,-129552
{
	// Stop transfer
	uhd_reset_pipe(pipe);

	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
80014b58:	7c 09       	ld.w	r9,lr[0x0]
80014b5a:	ab a9       	sbr	r9,0xa
80014b5c:	9d 09       	st.w	lr[0x0],r9
	uhd_enable_stall_interrupt(pipe);
80014b5e:	f0 0a 00 09 	add	r9,r8,r10
80014b62:	34 0a       	mov	r10,64
80014b64:	93 0a       	st.w	r9[0x0],r10
	uhd_enable_pipe_error_interrupt(pipe);

	uhd_disable_out_ready_interrupt(pipe);
80014b66:	e0 38 f9 e0 	sub	r8,129504
	uhd_reset_pipe(pipe);

	// Autoswitch bank and interrupts has been reseted, then re-enable it
	uhd_enable_pipe_bank_autoswitch(pipe);
	uhd_enable_stall_interrupt(pipe);
	uhd_enable_pipe_error_interrupt(pipe);
80014b6a:	30 8a       	mov	r10,8
80014b6c:	93 0a       	st.w	r9[0x0],r10

	uhd_disable_out_ready_interrupt(pipe);
80014b6e:	30 29       	mov	r9,2
80014b70:	91 09       	st.w	r8[0x0],r9
	uhd_pipe_dma_set_control(pipe, 0);
80014b72:	f8 08 15 04 	lsl	r8,r12,0x4
80014b76:	e0 38 f9 00 	sub	r8,129280
80014b7a:	30 09       	mov	r9,0
80014b7c:	91 29       	st.w	r8[0x8],r9
static void uhd_pipe_finish_job(uint8_t pipe, uhd_trans_status_t status)
{
	uhd_pipe_job_t *ptr_job;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
80014b7e:	e0 68 07 70 	mov	r8,1904
80014b82:	f8 ca 00 01 	sub	r10,r12,1
80014b86:	f4 0a 00 2a 	add	r10,r10,r10<<0x2
80014b8a:	f0 0a 00 2a 	add	r10,r8,r10<<0x2
	if (ptr_job->busy == false) {
80014b8e:	74 08       	ld.w	r8,r10[0x0]
80014b90:	58 08       	cp.w	r8,0
		return; // No job running
	}
	ptr_job->busy = false;
80014b92:	c2 b4       	brge	80014be8 <uhd_ep_abort_pipe+0xc8>
80014b94:	f1 d9 d3 e1 	bfins	r8,r9,0x1f,0x1
	if (NULL == ptr_job->call_end) {
80014b98:	95 08       	st.w	r10[0x0],r8
80014b9a:	74 48       	ld.w	r8,r10[0x10]
80014b9c:	58 08       	cp.w	r8,0
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
			uhd_get_pipe_endpoint_address(pipe),
80014b9e:	c2 50       	breq	80014be8 <uhd_ep_abort_pipe+0xc8>
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
80014ba0:	7c 06       	ld.w	r6,lr[0x0]
80014ba2:	74 39       	ld.w	r9,r10[0xc]
			uhd_get_pipe_endpoint_address(pipe),
80014ba4:	16 9a       	mov	r10,r11
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
80014ba6:	7c 0b       	ld.w	r11,lr[0x0]
80014ba8:	fd d6 c2 04 	bfextu	lr,r6,0x10,0x4
80014bac:	ef dc c0 02 	bfextu	r7,r12,0x0,0x2
80014bb0:	f7 db c1 02 	bfextu	r11,r11,0x8,0x2
80014bb4:	a3 77       	lsl	r7,0x3
80014bb6:	e0 66 00 80 	mov	r6,128
80014bba:	e2 1c 03 fc 	andl	r12,0x3fc,COH
80014bbe:	58 1b       	cp.w	r11,1
80014bc0:	ec 0b 17 00 	moveq	r11,r6
80014bc4:	f9 bb 01 00 	movne	r11,0
80014bc8:	e0 3c fb dc 	sub	r12,130012
80014bcc:	1c 4b       	or	r11,lr
80014bce:	78 0c       	ld.w	r12,r12[0x0]
80014bd0:	37 fe       	mov	lr,127
80014bd2:	fc 07 09 4e 	lsl	lr,lr,r7
80014bd6:	fd ec 00 0c 	and	r12,lr,r12
80014bda:	5c 9e       	brev	lr
80014bdc:	fc 0e 12 00 	clz	lr,lr
80014be0:	f8 0e 0a 4c 	lsr	r12,r12,lr
80014be4:	5c 5c       	castu.b	r12
80014be6:	5d 18       	icall	r8
80014be8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

80014bec <uhd_ep_free>:
80014bec:	d4 31       	pushm	r0-r7,lr
80014bee:	20 2d       	sub	sp,8
	return false;
}


void uhd_ep_free(usb_add_t add, usb_ep_t endp)
{
80014bf0:	30 17       	mov	r7,1
80014bf2:	18 91       	mov	r1,r12
80014bf4:	16 90       	mov	r0,r11
80014bf6:	30 06       	mov	r6,0
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80014bf8:	fe 65 00 00 	mov	r5,-131072
80014bfc:	0e 94       	mov	r4,r7
		}
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80014bfe:	30 63       	mov	r3,6
		if (!Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80014c00:	37 f2       	mov	r2,127
			continue;
		}
		if (endp != 0xFF) {
80014c02:	3f f8       	mov	r8,-1
80014c04:	c0 48       	rjmp	80014c0c <uhd_ep_free+0x20>
	return false;
}


void uhd_ep_free(usb_add_t add, usb_ep_t endp)
{
80014c06:	2f f7       	sub	r7,-1
80014c08:	2f f6       	sub	r6,-1
80014c0a:	5c 57       	castu.b	r7
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80014c0c:	ea fa 04 1c 	ld.w	r10,r5[1052]
	return false;
}


void uhd_ep_free(usb_add_t add, usb_ep_t endp)
{
80014c10:	f9 d6 c0 08 	bfextu	r12,r6,0x0,0x8
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80014c14:	e8 0c 09 49 	lsl	r9,r4,r12
80014c18:	f3 ea 00 0a 	and	r10,r9,r10
80014c1c:	c1 50       	breq	80014c46 <uhd_ep_free+0x5a>
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80014c1e:	18 9a       	mov	r10,r12
80014c20:	e2 1a 00 fc 	andl	r10,0xfc,COH
80014c24:	e0 3a fb dc 	sub	r10,130012
80014c28:	74 0b       	ld.w	r11,r10[0x0]
80014c2a:	f5 dc c0 02 	bfextu	r10,r12,0x0,0x2
80014c2e:	a3 7a       	lsl	r10,0x3
80014c30:	e4 0a 09 4a 	lsl	r10,r2,r10
80014c34:	f5 eb 00 0b 	and	r11,r10,r11
80014c38:	5c 9a       	brev	r10
80014c3a:	f4 0a 12 00 	clz	r10,r10
80014c3e:	f6 0a 0a 4a 	lsr	r10,r11,r10
80014c42:	14 31       	cp.w	r1,r10
80014c44:	c0 70       	breq	80014c52 <uhd_ep_free+0x66>
		}
		return;
	}
#endif
	// Search endpoint(s) in all pipes
	for (uint8_t pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
80014c46:	e6 07 18 00 	cp.b	r7,r3
80014c4a:	fe 98 ff de 	brls	80014c06 <uhd_ep_free+0x1a>
		}
#endif
		// Endpoint interrupt, bulk or isochronous
		uhd_ep_abort_pipe(pipe, UHD_TRANS_DISCONNECT);
	}
}
80014c4e:	2f ed       	sub	sp,-8
80014c50:	d8 32       	popm	r0-r7,pc
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
			continue;
		}
		if (endp != 0xFF) {
80014c52:	f0 00 18 00 	cp.b	r0,r8
80014c56:	c2 d0       	breq	80014cb0 <uhd_ep_free+0xc4>
			// Disable specific endpoint number
			if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80014c58:	f8 0a 15 02 	lsl	r10,r12,0x2
80014c5c:	e0 3a fb 00 	sub	r10,129792
80014c60:	74 0e       	ld.w	lr,r10[0x0]
80014c62:	fd de c2 04 	bfextu	lr,lr,0x10,0x4
80014c66:	74 0b       	ld.w	r11,r10[0x0]
80014c68:	50 0e       	stdsp	sp[0x0],lr
80014c6a:	e0 6e 00 80 	mov	lr,128
80014c6e:	f7 db c1 02 	bfextu	r11,r11,0x8,0x2
80014c72:	58 1b       	cp.w	r11,1
80014c74:	fc 0b 17 00 	moveq	r11,lr
80014c78:	f9 bb 01 00 	movne	r11,0
80014c7c:	40 0e       	lddsp	lr,sp[0x0]
80014c7e:	1c 4b       	or	r11,lr
80014c80:	16 30       	cp.w	r0,r11
80014c82:	ce 21       	brne	80014c46 <uhd_ep_free+0x5a>
				continue; // Mismatch
			}
		}
		// Unalloc pipe
		uhd_disable_pipe(pipe);
80014c84:	ea fb 04 1c 	ld.w	r11,r5[1052]
80014c88:	5c d9       	com	r9
80014c8a:	16 69       	and	r9,r11
80014c8c:	eb 49 04 1c 	st.w	r5[1052],r9
		uhd_unallocate_memory(pipe);
80014c90:	74 09       	ld.w	r9,r10[0x0]
80014c92:	a1 d9       	cbr	r9,0x1
80014c94:	95 09       	st.w	r10[0x0],r9

		// Stop transfer on this pipe
#ifndef USB_HOST_HUB_SUPPORT
		if (pipe == 0) {
80014c96:	58 0c       	cp.w	r12,0
80014c98:	c1 11       	brne	80014cba <uhd_ep_free+0xce>
			// Endpoint control
			if (uhd_ctrl_request_timeout) {
80014c9a:	e0 6a 3b 74 	mov	r10,15220
80014c9e:	94 09       	ld.sh	r9,r10[0x0]
80014ca0:	58 09       	cp.w	r9,0
				uhd_ctrl_request_end(UHD_TRANS_DISCONNECT);
80014ca2:	cd 20       	breq	80014c46 <uhd_ep_free+0x5a>
80014ca4:	50 18       	stdsp	sp[0x4],r8
80014ca6:	30 1c       	mov	r12,1
80014ca8:	fe b0 fd c8 	rcall	80014838 <uhd_ctrl_request_end>
80014cac:	40 18       	lddsp	r8,sp[0x4]
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
			continue;
		}
		if (endp != 0xFF) {
80014cae:	ca cb       	rjmp	80014c06 <uhd_ep_free+0x1a>
80014cb0:	f8 0a 15 02 	lsl	r10,r12,0x2
80014cb4:	e0 3a fb 00 	sub	r10,129792
			}
			continue;
		}
#endif
		// Endpoint interrupt, bulk or isochronous
		uhd_ep_abort_pipe(pipe, UHD_TRANS_DISCONNECT);
80014cb8:	ce 6b       	rjmp	80014c84 <uhd_ep_free+0x98>
80014cba:	50 18       	stdsp	sp[0x4],r8
80014cbc:	30 1b       	mov	r11,1
80014cbe:	c3 1f       	rcall	80014b20 <uhd_ep_abort_pipe>
80014cc0:	40 18       	lddsp	r8,sp[0x4]
80014cc2:	cc 2b       	rjmp	80014c46 <uhd_ep_free+0x5a>

80014cc4 <uhd_pipe_trans_complet>:
80014cc4:	eb cd 40 f8 	pushm	r3-r7,lr
80014cc8:	e0 69 07 70 	mov	r9,1904
80014ccc:	f8 c8 00 01 	sub	r8,r12,1
	iram_size_t max_trans;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
80014cd0:	f0 08 00 28 	add	r8,r8,r8<<0x2
80014cd4:	f2 08 00 28 	add	r8,r9,r8<<0x2

	if (!ptr_job->busy) {
80014cd8:	70 0a       	ld.w	r10,r8[0x0]
80014cda:	58 0a       	cp.w	r10,0
80014cdc:	e0 84 00 8c 	brge	80014df4 <uhd_pipe_trans_complet+0x130>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
80014ce0:	70 39       	ld.w	r9,r8[0xc]
80014ce2:	70 26       	ld.w	r6,r8[0x8]
80014ce4:	0c 39       	cp.w	r9,r6
80014ce6:	e0 80 00 89 	breq	80014df8 <uhd_pipe_trans_complet+0x134>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
		max_trans = UHD_PIPE_MAX_TRANS;
		if (uhd_is_pipe_in(pipe)) {
80014cea:	fe 67 05 00 	mov	r7,-129792
80014cee:	f8 0e 15 02 	lsl	lr,r12,0x2
80014cf2:	fc 07 00 0b 	add	r11,lr,r7
80014cf6:	76 07       	ld.w	r7,r11[0x0]
80014cf8:	ef d7 c1 02 	bfextu	r7,r7,0x8,0x2
80014cfc:	58 17       	cp.w	r7,1
80014cfe:	e0 80 00 d5 	breq	80014ea8 <uhd_pipe_trans_complet+0x1e4>
			// 256 is the maximum of IN requests via UPINRQ
			if ((256L*uhd_get_pipe_size(pipe))<UHD_PIPE_MAX_TRANS) {
				 max_trans = 256L * uhd_get_pipe_size(pipe);
80014d02:	e0 77 00 00 	mov	r7,65536
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
80014d06:	12 16       	sub	r6,r9
80014d08:	0c 37       	cp.w	r7,r6
80014d0a:	ec 07 17 b0 	movhi	r7,r6
			// The USB hardware supports a maximum
			// transfer size of UHD_PIPE_MAX_TRANS Bytes
			next_trans = max_trans;
		}

		if (next_trans == UHD_PIPE_MAX_TRANS) {
80014d0e:	e0 57 00 00 	cp.w	r7,65536
80014d12:	e0 80 00 c9 	breq	80014ea4 <uhd_pipe_trans_complet+0x1e0>
			// Set 0 to transfer the maximum
			uhd_dma_ctrl = (0 <<
					AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		} else {
			uhd_dma_ctrl = (next_trans <<
80014d16:	ee 06 15 10 	lsl	r6,r7,0x10
					AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		}

		if (uhd_is_pipe_out(pipe)) {
80014d1a:	76 05       	ld.w	r5,r11[0x0]
80014d1c:	eb d5 c1 02 	bfextu	r5,r5,0x8,0x2
80014d20:	58 25       	cp.w	r5,2
80014d22:	e0 80 00 b0 	breq	80014e82 <uhd_pipe_trans_complet+0x1be>
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != uhd_get_pipe_type(pipe))
80014d26:	76 0a       	ld.w	r10,r11[0x0]
80014d28:	f5 da c1 82 	bfextu	r10,r10,0xc,0x2
80014d2c:	58 1a       	cp.w	r10,1
80014d2e:	e0 80 00 d0 	breq	80014ece <uhd_pipe_trans_complet+0x20a>
					|| (next_trans <= uhd_get_pipe_size(pipe))) {
				// Enable short packet reception
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_EOT_IRQ_EN_MASK
80014d32:	e8 16 00 14 	orl	r6,0x14
						| AVR32_USBB_UHDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		uhd_pipe_dma_set_addr(pipe, (U32) &ptr_job->buf[ptr_job->nb_trans]);
80014d36:	70 1a       	ld.w	r10,r8[0x4]
80014d38:	f4 09 00 09 	add	r9,r10,r9
80014d3c:	f8 0a 15 04 	lsl	r10,r12,0x4
80014d40:	e0 3a f9 00 	sub	r10,129280
80014d44:	95 19       	st.w	r10[0x4],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80014d46:	e1 b5 00 00 	mfsr	r5,0x0
	cpu_irq_disable();
80014d4a:	d3 03       	ssrf	0x10
				AVR32_USBB_UHDMA1_CONTROL_CH_EN_MASK;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if( !(uhd_pipe_dma_get_status(pipe)
80014d4c:	74 39       	ld.w	r9,r10[0xc]
80014d4e:	ed b9 00 04 	bld	r9,0x4
80014d52:	c1 a0       	breq	80014d86 <uhd_pipe_trans_complet+0xc2>
				& AVR32_USBB_UHDMA1_STATUS_EOT_STA_MASK)) {
			if (uhd_is_pipe_in(pipe)) {
80014d54:	76 09       	ld.w	r9,r11[0x0]
80014d56:	f3 d9 c1 02 	bfextu	r9,r9,0x8,0x2
80014d5a:	58 19       	cp.w	r9,1
80014d5c:	c7 70       	breq	80014e4a <uhd_pipe_trans_complet+0x186>
				uhd_in_request_number(pipe,
						(next_trans+uhd_get_pipe_size(pipe)-1)/uhd_get_pipe_size(pipe));
			}
			uhd_disable_bank_interrupt(pipe);
80014d5e:	e0 3e f9 e0 	sub	lr,129504
80014d62:	e0 69 10 00 	mov	r9,4096
80014d66:	9d 09       	st.w	lr[0x0],r9
			uhd_unfreeze_pipe(pipe);
80014d68:	e2 69 00 00 	mov	r9,131072
80014d6c:	9d 09       	st.w	lr[0x0],r9
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		uhd_pipe_dma_set_addr(pipe, (U32) &ptr_job->buf[ptr_job->nb_trans]);
		uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
80014d6e:	e8 16 00 21 	orl	r6,0x21
				uhd_in_request_number(pipe,
						(next_trans+uhd_get_pipe_size(pipe)-1)/uhd_get_pipe_size(pipe));
			}
			uhd_disable_bank_interrupt(pipe);
			uhd_unfreeze_pipe(pipe);
			uhd_pipe_dma_set_control(pipe, uhd_dma_ctrl);
80014d72:	95 26       	st.w	r10[0x8],r6
			ptr_job->nb_trans += next_trans;
80014d74:	70 39       	ld.w	r9,r8[0xc]
80014d76:	f2 07 00 07 	add	r7,r9,r7
80014d7a:	91 37       	st.w	r8[0xc],r7
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80014d7c:	e6 15 00 01 	andh	r5,0x1,COH
80014d80:	c6 30       	breq	80014e46 <uhd_pipe_trans_complet+0x182>
			cpu_irq_restore(flags);
			return;
80014d82:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80014d86:	e6 15 00 01 	andh	r5,0x1,COH
80014d8a:	c0 21       	brne	80014d8e <uhd_pipe_trans_complet+0xca>
      cpu_irq_enable();
80014d8c:	d5 03       	csrf	0x10
		}
		cpu_irq_restore(flags);
		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
80014d8e:	70 39       	ld.w	r9,r8[0xc]
80014d90:	91 29       	st.w	r8[0x8],r9
	}
	if (uhd_is_pipe_out(pipe)) {
80014d92:	76 07       	ld.w	r7,r11[0x0]
		}
		cpu_irq_restore(flags);
		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
80014d94:	70 0a       	ld.w	r10,r8[0x0]
	}
	if (uhd_is_pipe_out(pipe)) {
80014d96:	ef d7 c1 02 	bfextu	r7,r7,0x8,0x2
80014d9a:	58 27       	cp.w	r7,2
80014d9c:	c3 90       	breq	80014e0e <uhd_pipe_trans_complet+0x14a>
{
	uhd_pipe_job_t *ptr_job;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
	if (ptr_job->busy == false) {
80014d9e:	58 0a       	cp.w	r10,0
80014da0:	c2 a4       	brge	80014df4 <uhd_pipe_trans_complet+0x130>
		return; // No job running
	}
	ptr_job->busy = false;
80014da2:	14 9e       	mov	lr,r10
80014da4:	30 0a       	mov	r10,0
80014da6:	fd da d3 e1 	bfins	lr,r10,0x1f,0x1
80014daa:	91 0e       	st.w	r8[0x0],lr
	if (NULL == ptr_job->call_end) {
80014dac:	70 48       	ld.w	r8,r8[0x10]
80014dae:	58 08       	cp.w	r8,0
80014db0:	c2 20       	breq	80014df4 <uhd_pipe_trans_complet+0x130>
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
			uhd_get_pipe_endpoint_address(pipe),
80014db2:	76 0e       	ld.w	lr,r11[0x0]
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
80014db4:	ef dc c0 02 	bfextu	r7,r12,0x0,0x2
			uhd_get_pipe_endpoint_address(pipe),
80014db8:	76 06       	ld.w	r6,r11[0x0]
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
80014dba:	e2 1c 03 fc 	andl	r12,0x3fc,COH
80014dbe:	f7 de c2 04 	bfextu	r11,lr,0x10,0x4
80014dc2:	e0 3c fb dc 	sub	r12,130012
80014dc6:	ed d6 c1 02 	bfextu	r6,r6,0x8,0x2
80014dca:	e0 6e 00 80 	mov	lr,128
80014dce:	58 16       	cp.w	r6,1
80014dd0:	f4 0e 17 10 	movne	lr,r10
80014dd4:	a3 77       	lsl	r7,0x3
80014dd6:	fd eb 10 0b 	or	r11,lr,r11
80014dda:	78 0e       	ld.w	lr,r12[0x0]
80014ddc:	37 fc       	mov	r12,127
80014dde:	f8 07 09 4c 	lsl	r12,r12,r7
80014de2:	f9 ee 00 0e 	and	lr,r12,lr
80014de6:	5c 9c       	brev	r12
80014de8:	f8 0c 12 00 	clz	r12,r12
80014dec:	fc 0c 0a 4c 	lsr	r12,lr,r12
80014df0:	5c 5c       	castu.b	r12
80014df2:	5d 18       	icall	r8
80014df4:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc

	if (!ptr_job->busy) {
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
80014df8:	fe 67 05 00 	mov	r7,-129792
80014dfc:	f8 0e 15 02 	lsl	lr,r12,0x2
80014e00:	fc 07 00 0b 	add	r11,lr,r7
		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
	}
	if (uhd_is_pipe_out(pipe)) {
80014e04:	76 07       	ld.w	r7,r11[0x0]
80014e06:	ef d7 c1 02 	bfextu	r7,r7,0x8,0x2
80014e0a:	58 27       	cp.w	r7,2
80014e0c:	cc 91       	brne	80014d9e <uhd_pipe_trans_complet+0xda>
		if (ptr_job->b_shortpacket) {
80014e0e:	14 96       	mov	r6,r10
80014e10:	e6 16 40 00 	andh	r6,0x4000,COH
80014e14:	cc 50       	breq	80014d9e <uhd_pipe_trans_complet+0xda>
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			uhd_ack_out_ready(pipe);
80014e16:	fe 69 05 60 	mov	r9,-129696
80014e1a:	fc 09 00 08 	add	r8,lr,r9
80014e1e:	91 07       	st.w	r8[0x0],r7
			if (Is_uhd_write_enabled(pipe)) {
80014e20:	fe 69 05 30 	mov	r9,-129744
80014e24:	fc 09 00 08 	add	r8,lr,r9
80014e28:	70 08       	ld.w	r8,r8[0x0]
80014e2a:	ed b8 00 10 	bld	r8,0x10
80014e2e:	c0 61       	brne	80014e3a <uhd_pipe_trans_complet+0x176>
				// Force interrupt in case of pipe already free
				uhd_raise_out_ready(pipe);
80014e30:	fe 69 05 90 	mov	r9,-129648
80014e34:	fc 09 00 08 	add	r8,lr,r9
80014e38:	91 07       	st.w	r8[0x0],r7
			}
			uhd_enable_out_ready_interrupt(pipe);
80014e3a:	e0 3e fa 10 	sub	lr,129552
80014e3e:	30 28       	mov	r8,2
80014e40:	9d 08       	st.w	lr[0x0],r8
			return;
80014e42:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80014e46:	d5 03       	csrf	0x10
80014e48:	c9 db       	rjmp	80014d82 <uhd_pipe_trans_complet+0xbe>
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if( !(uhd_pipe_dma_get_status(pipe)
				& AVR32_USBB_UHDMA1_STATUS_EOT_STA_MASK)) {
			if (uhd_is_pipe_in(pipe)) {
				uhd_in_request_number(pipe,
80014e4a:	fe 69 06 50 	mov	r9,-129456
80014e4e:	fc 09 00 0c 	add	r12,lr,r9
80014e52:	78 09       	ld.w	r9,r12[0x0]
80014e54:	76 03       	ld.w	r3,r11[0x0]
80014e56:	e0 19 ff 00 	andl	r9,0xff00
80014e5a:	76 04       	ld.w	r4,r11[0x0]
80014e5c:	f7 d3 c0 83 	bfextu	r11,r3,0x4,0x3
80014e60:	e9 d4 c0 83 	bfextu	r4,r4,0x4,0x3
80014e64:	30 83       	mov	r3,8
80014e66:	2f d4       	sub	r4,-3
80014e68:	e6 0b 09 4b 	lsl	r11,r3,r11
80014e6c:	20 1b       	sub	r11,1
80014e6e:	0e 0b       	add	r11,r7
80014e70:	f6 04 0a 4b 	lsr	r11,r11,r4
80014e74:	20 1b       	sub	r11,1
80014e76:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80014e7a:	f7 e9 10 09 	or	r9,r11,r9
80014e7e:	99 09       	st.w	r12[0x0],r9
80014e80:	c6 fb       	rjmp	80014d5e <uhd_pipe_trans_complet+0x9a>
					AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UHDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		}

		if (uhd_is_pipe_out(pipe)) {
			if (0 != next_trans % uhd_get_pipe_size(pipe)) {
80014e82:	76 05       	ld.w	r5,r11[0x0]
80014e84:	30 84       	mov	r4,8
80014e86:	eb d5 c0 83 	bfextu	r5,r5,0x4,0x3
80014e8a:	e8 05 09 45 	lsl	r5,r4,r5
80014e8e:	20 15       	sub	r5,1
80014e90:	ef e5 00 05 	and	r5,r7,r5
80014e94:	fe 90 ff 51 	breq	80014d36 <uhd_pipe_trans_complet+0x72>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
80014e98:	30 05       	mov	r5,0
		if (uhd_is_pipe_out(pipe)) {
			if (0 != next_trans % uhd_get_pipe_size(pipe)) {
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_DMAEND_EN_MASK;
80014e9a:	08 46       	or	r6,r4
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
80014e9c:	f5 d5 d3 c1 	bfins	r10,r5,0x1e,0x1
80014ea0:	91 0a       	st.w	r8[0x0],r10
80014ea2:	c4 ab       	rjmp	80014d36 <uhd_pipe_trans_complet+0x72>
			// The USB hardware supports a maximum
			// transfer size of UHD_PIPE_MAX_TRANS Bytes
			next_trans = max_trans;
		}

		if (next_trans == UHD_PIPE_MAX_TRANS) {
80014ea4:	30 06       	mov	r6,0
80014ea6:	c3 ab       	rjmp	80014d1a <uhd_pipe_trans_complet+0x56>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
		max_trans = UHD_PIPE_MAX_TRANS;
		if (uhd_is_pipe_in(pipe)) {
			// 256 is the maximum of IN requests via UPINRQ
			if ((256L*uhd_get_pipe_size(pipe))<UHD_PIPE_MAX_TRANS) {
80014ea8:	76 05       	ld.w	r5,r11[0x0]
80014eaa:	30 87       	mov	r7,8
80014eac:	eb d5 c0 83 	bfextu	r5,r5,0x4,0x3
80014eb0:	ee 05 09 45 	lsl	r5,r7,r5
80014eb4:	ea 07 09 45 	lsl	r5,r5,r7
80014eb8:	e0 45 ff ff 	cp.w	r5,65535
80014ebc:	fe 99 ff 23 	brgt	80014d02 <uhd_pipe_trans_complet+0x3e>
				 max_trans = 256L * uhd_get_pipe_size(pipe);
80014ec0:	76 05       	ld.w	r5,r11[0x0]
80014ec2:	eb d5 c0 83 	bfextu	r5,r5,0x4,0x3
80014ec6:	ee 05 09 47 	lsl	r7,r7,r5
80014eca:	a9 67       	lsl	r7,0x8
80014ecc:	c1 db       	rjmp	80014d06 <uhd_pipe_trans_complet+0x42>
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != uhd_get_pipe_type(pipe))
					|| (next_trans <= uhd_get_pipe_size(pipe))) {
80014ece:	76 0a       	ld.w	r10,r11[0x0]
				uhd_dma_ctrl |= AVR32_USBB_UHDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != uhd_get_pipe_type(pipe))
80014ed0:	30 85       	mov	r5,8
80014ed2:	f5 da c0 83 	bfextu	r10,r10,0x4,0x3
80014ed6:	ea 0a 09 4a 	lsl	r10,r5,r10
80014eda:	0e 3a       	cp.w	r10,r7
80014edc:	fe 93 ff 2d 	brlo	80014d36 <uhd_pipe_trans_complet+0x72>
80014ee0:	c2 9b       	rjmp	80014d32 <uhd_pipe_trans_complet+0x6e>
80014ee2:	d7 03       	nop

80014ee4 <uhd_ep_run>:
80014ee4:	eb cd 40 f8 	pushm	r3-r7,lr
{
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80014ee8:	fe 6e 00 00 	mov	lr,-131072
80014eec:	fc fe 04 1c 	ld.w	lr,lr[1052]
		bool b_shortpacket,
		uint8_t *buf,
		iram_size_t buf_size,
		uint16_t timeout,
		uhd_callback_trans_t callback)
{
80014ef0:	fa c4 ff e8 	sub	r4,sp,-24
{
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80014ef4:	fd de c0 01 	bfextu	lr,lr,0x0,0x1
		bool b_shortpacket,
		uint8_t *buf,
		iram_size_t buf_size,
		uint16_t timeout,
		uhd_callback_trans_t callback)
{
80014ef8:	68 17       	ld.w	r7,r4[0x4]
80014efa:	68 04       	ld.w	r4,r4[0x0]
{
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80014efc:	c0 90       	breq	80014f0e <uhd_ep_run+0x2a>
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80014efe:	fe 6e 04 24 	mov	lr,-130012
80014f02:	7c 0e       	ld.w	lr,lr[0x0]
80014f04:	fd de c0 07 	bfextu	lr,lr,0x0,0x7
80014f08:	1c 3c       	cp.w	r12,lr
80014f0a:	e0 80 00 b4 	breq	80015072 <uhd_ep_run+0x18e>
{
	uint8_t pipe;

	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
80014f0e:	fe 6e 00 00 	mov	lr,-131072
80014f12:	fc fe 04 1c 	ld.w	lr,lr[1052]
80014f16:	ed be 00 01 	bld	lr,0x1
80014f1a:	c2 e0       	breq	80014f76 <uhd_ep_run+0x92>
80014f1c:	fe 6e 00 00 	mov	lr,-131072
80014f20:	fc fe 04 1c 	ld.w	lr,lr[1052]
80014f24:	ed be 00 02 	bld	lr,0x2
80014f28:	c4 00       	breq	80014fa8 <uhd_ep_run+0xc4>
80014f2a:	fe 6e 00 00 	mov	lr,-131072
80014f2e:	fc fe 04 1c 	ld.w	lr,lr[1052]
80014f32:	ed be 00 03 	bld	lr,0x3
80014f36:	c5 20       	breq	80014fda <uhd_ep_run+0xf6>
80014f38:	fe 6e 00 00 	mov	lr,-131072
80014f3c:	fc fe 04 1c 	ld.w	lr,lr[1052]
80014f40:	ed be 00 04 	bld	lr,0x4
80014f44:	c6 40       	breq	8001500c <uhd_ep_run+0x128>
80014f46:	fe 6e 00 00 	mov	lr,-131072
80014f4a:	fc fe 04 1c 	ld.w	lr,lr[1052]
80014f4e:	ed be 00 05 	bld	lr,0x5
80014f52:	c7 60       	breq	8001503e <uhd_ep_run+0x15a>
80014f54:	fe 6e 00 00 	mov	lr,-131072
80014f58:	fc fe 04 1c 	ld.w	lr,lr[1052]
80014f5c:	e2 1e 00 40 	andl	lr,0x40,COH
80014f60:	c0 90       	breq	80014f72 <uhd_ep_run+0x8e>
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80014f62:	fe 6e 04 28 	mov	lr,-130008
80014f66:	7c 0e       	ld.w	lr,lr[0x0]
80014f68:	fd de c2 07 	bfextu	lr,lr,0x10,0x7
80014f6c:	1c 3c       	cp.w	r12,lr
80014f6e:	e0 80 00 aa 	breq	800150c2 <uhd_ep_run+0x1de>
	ptr_job->call_end = callback;
	cpu_irq_restore(flags);

	// Request first transfer
	uhd_pipe_trans_complet(pipe);
	return true;
80014f72:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80014f76:	fe 6e 04 24 	mov	lr,-130012
80014f7a:	7c 0e       	ld.w	lr,lr[0x0]
80014f7c:	fd de c1 07 	bfextu	lr,lr,0x8,0x7
80014f80:	1c 3c       	cp.w	r12,lr
80014f82:	cc d1       	brne	80014f1c <uhd_ep_run+0x38>
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80014f84:	fe 6e 05 04 	mov	lr,-129788
80014f88:	7c 06       	ld.w	r6,lr[0x0]
80014f8a:	7c 05       	ld.w	r5,lr[0x0]
80014f8c:	ed d6 c2 04 	bfextu	r6,r6,0x10,0x4
80014f90:	eb d5 c1 02 	bfextu	r5,r5,0x8,0x2
80014f94:	e0 6e 00 80 	mov	lr,128
80014f98:	58 15       	cp.w	r5,1
80014f9a:	f9 be 01 00 	movne	lr,0
80014f9e:	0c 4e       	or	lr,r6
80014fa0:	1c 3b       	cp.w	r11,lr
80014fa2:	cb d1       	brne	80014f1c <uhd_ep_run+0x38>
80014fa4:	30 1c       	mov	r12,1
80014fa6:	c7 88       	rjmp	80015096 <uhd_ep_run+0x1b2>
	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80014fa8:	fe 6e 04 24 	mov	lr,-130012
80014fac:	7c 0e       	ld.w	lr,lr[0x0]
80014fae:	fd de c2 07 	bfextu	lr,lr,0x10,0x7
80014fb2:	1c 3c       	cp.w	r12,lr
80014fb4:	cb b1       	brne	80014f2a <uhd_ep_run+0x46>
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80014fb6:	fe 6e 05 08 	mov	lr,-129784
80014fba:	7c 06       	ld.w	r6,lr[0x0]
80014fbc:	7c 05       	ld.w	r5,lr[0x0]
80014fbe:	ed d6 c2 04 	bfextu	r6,r6,0x10,0x4
80014fc2:	eb d5 c1 02 	bfextu	r5,r5,0x8,0x2
80014fc6:	e0 6e 00 80 	mov	lr,128
80014fca:	58 15       	cp.w	r5,1
80014fcc:	f9 be 01 00 	movne	lr,0
80014fd0:	0c 4e       	or	lr,r6
80014fd2:	1c 3b       	cp.w	r11,lr
80014fd4:	ca b1       	brne	80014f2a <uhd_ep_run+0x46>
80014fd6:	30 2c       	mov	r12,2
80014fd8:	c5 f8       	rjmp	80015096 <uhd_ep_run+0x1b2>
	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
80014fda:	fe 6e 04 24 	mov	lr,-130012
80014fde:	7c 0e       	ld.w	lr,lr[0x0]
80014fe0:	fd de c3 07 	bfextu	lr,lr,0x18,0x7
80014fe4:	1c 3c       	cp.w	r12,lr
80014fe6:	ca 91       	brne	80014f38 <uhd_ep_run+0x54>
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
80014fe8:	fe 6e 05 0c 	mov	lr,-129780
80014fec:	7c 06       	ld.w	r6,lr[0x0]
80014fee:	7c 05       	ld.w	r5,lr[0x0]
80014ff0:	ed d6 c2 04 	bfextu	r6,r6,0x10,0x4
80014ff4:	eb d5 c1 02 	bfextu	r5,r5,0x8,0x2
80014ff8:	e0 6e 00 80 	mov	lr,128
80014ffc:	58 15       	cp.w	r5,1
80014ffe:	f9 be 01 00 	movne	lr,0
80015002:	0c 4e       	or	lr,r6
80015004:	1c 3b       	cp.w	r11,lr
80015006:	c9 91       	brne	80014f38 <uhd_ep_run+0x54>
80015008:	30 3c       	mov	r12,3
8001500a:	c4 68       	rjmp	80015096 <uhd_ep_run+0x1b2>
	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
8001500c:	fe 6e 04 28 	mov	lr,-130008
80015010:	7c 0e       	ld.w	lr,lr[0x0]
80015012:	fd de c0 07 	bfextu	lr,lr,0x0,0x7
80015016:	1c 3c       	cp.w	r12,lr
80015018:	c9 71       	brne	80014f46 <uhd_ep_run+0x62>
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
8001501a:	fe 6e 05 10 	mov	lr,-129776
8001501e:	7c 06       	ld.w	r6,lr[0x0]
80015020:	7c 05       	ld.w	r5,lr[0x0]
80015022:	ed d6 c2 04 	bfextu	r6,r6,0x10,0x4
80015026:	eb d5 c1 02 	bfextu	r5,r5,0x8,0x2
8001502a:	e0 6e 00 80 	mov	lr,128
8001502e:	58 15       	cp.w	r5,1
80015030:	f9 be 01 00 	movne	lr,0
80015034:	0c 4e       	or	lr,r6
80015036:	1c 3b       	cp.w	r11,lr
80015038:	c8 71       	brne	80014f46 <uhd_ep_run+0x62>
8001503a:	30 4c       	mov	r12,4
8001503c:	c2 d8       	rjmp	80015096 <uhd_ep_run+0x1b2>
	// Search pipe
	for (pipe = 0; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		if (!Is_uhd_pipe_enabled(pipe)) {
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
8001503e:	fe 6e 04 28 	mov	lr,-130008
80015042:	7c 0e       	ld.w	lr,lr[0x0]
80015044:	fd de c1 07 	bfextu	lr,lr,0x8,0x7
80015048:	1c 3c       	cp.w	r12,lr
8001504a:	c8 51       	brne	80014f54 <uhd_ep_run+0x70>
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
8001504c:	fe 6e 05 14 	mov	lr,-129772
80015050:	7c 06       	ld.w	r6,lr[0x0]
80015052:	7c 05       	ld.w	r5,lr[0x0]
80015054:	ed d6 c2 04 	bfextu	r6,r6,0x10,0x4
80015058:	eb d5 c1 02 	bfextu	r5,r5,0x8,0x2
8001505c:	e0 6e 00 80 	mov	lr,128
80015060:	58 15       	cp.w	r5,1
80015062:	f9 be 01 00 	movne	lr,0
80015066:	0c 4e       	or	lr,r6
80015068:	1c 3b       	cp.w	r11,lr
8001506a:	fe 91 ff 75 	brne	80014f54 <uhd_ep_run+0x70>
8001506e:	30 5c       	mov	r12,5
80015070:	c1 38       	rjmp	80015096 <uhd_ep_run+0x1b2>
80015072:	fe 6e 05 00 	mov	lr,-129792
80015076:	7c 06       	ld.w	r6,lr[0x0]
80015078:	7c 05       	ld.w	r5,lr[0x0]
8001507a:	ed d6 c2 04 	bfextu	r6,r6,0x10,0x4
8001507e:	eb d5 c1 02 	bfextu	r5,r5,0x8,0x2
80015082:	e0 6e 00 80 	mov	lr,128
80015086:	58 15       	cp.w	r5,1
80015088:	f9 be 01 00 	movne	lr,0
8001508c:	0c 4e       	or	lr,r6
8001508e:	1c 3b       	cp.w	r11,lr
80015090:	fe 91 ff 3f 	brne	80014f0e <uhd_ep_run+0x2a>
80015094:	30 0c       	mov	r12,0
	if (pipe == AVR32_USBB_EPT_NUM) {
		return false; // pipe not found
	}

	// Get job about pipe
	ptr_job = &uhd_pipe_job[pipe-1];
80015096:	f8 cb 00 01 	sub	r11,r12,1
8001509a:	e0 6e 07 70 	mov	lr,1904
8001509e:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
800150a2:	fc 0b 00 2b 	add	r11,lr,r11<<0x2

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800150a6:	e1 b6 00 00 	mfsr	r6,0x0
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
800150aa:	d3 03       	ssrf	0x10
800150ac:	76 0e       	ld.w	lr,r11[0x0]
800150ae:	1c 95       	mov	r5,lr
800150b0:	e6 15 80 00 	andh	r5,0x8000,COH
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800150b4:	c1 a0       	breq	800150e8 <uhd_ep_run+0x204>
800150b6:	e6 16 00 01 	andh	r6,0x1,COH
      cpu_irq_enable();
800150ba:	c0 21       	brne	800150be <uhd_ep_run+0x1da>
   }

	barrier();
800150bc:	d5 03       	csrf	0x10
800150be:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
			continue;
		}
		if (add != uhd_get_configured_address(pipe)) {
			continue;
		}
		if (endp != uhd_get_pipe_endpoint_address(pipe)) {
800150c2:	fe 6c 05 18 	mov	r12,-129768
800150c6:	78 0e       	ld.w	lr,r12[0x0]
800150c8:	78 06       	ld.w	r6,r12[0x0]
800150ca:	fd de c2 04 	bfextu	lr,lr,0x10,0x4
800150ce:	ed d6 c1 02 	bfextu	r6,r6,0x8,0x2
800150d2:	e0 6c 00 80 	mov	r12,128
800150d6:	58 16       	cp.w	r6,1
800150d8:	f9 bc 01 00 	movne	r12,0
800150dc:	1c 4c       	or	r12,lr
800150de:	18 3b       	cp.w	r11,r12
800150e0:	fe 91 ff 49 	brne	80014f72 <uhd_ep_run+0x8e>
	ptr_job->call_end = callback;
	cpu_irq_restore(flags);

	// Request first transfer
	uhd_pipe_trans_complet(pipe);
	return true;
800150e4:	30 6c       	mov	r12,6
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false; // Job already on going
	}
	ptr_job->busy = true;
800150e6:	cd 8b       	rjmp	80015096 <uhd_ep_run+0x1b2>
800150e8:	30 13       	mov	r3,1
800150ea:	fd d3 d3 e1 	bfins	lr,r3,0x1f,0x1

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
	ptr_job->buf_size = buf_size;
	ptr_job->nb_trans = 0;
	ptr_job->timeout = timeout;
800150ee:	97 0e       	st.w	r11[0x0],lr
	}
	ptr_job->busy = true;

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
	ptr_job->buf_size = buf_size;
800150f0:	b6 14       	st.h	r11[0x2],r4
	ptr_job->nb_trans = 0;
	ptr_job->timeout = timeout;
	ptr_job->b_shortpacket = b_shortpacket;
	ptr_job->call_end = callback;
800150f2:	97 28       	st.w	r11[0x8],r8
	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
	ptr_job->buf_size = buf_size;
	ptr_job->nb_trans = 0;
	ptr_job->timeout = timeout;
	ptr_job->b_shortpacket = b_shortpacket;
800150f4:	97 47       	st.w	r11[0x10],r7
		return false; // Job already on going
	}
	ptr_job->busy = true;

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
800150f6:	76 08       	ld.w	r8,r11[0x0]
	ptr_job->buf_size = buf_size;
	ptr_job->nb_trans = 0;
	ptr_job->timeout = timeout;
	ptr_job->b_shortpacket = b_shortpacket;
800150f8:	97 19       	st.w	r11[0x4],r9
800150fa:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
800150fe:	97 35       	st.w	r11[0xc],r5
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80015100:	97 08       	st.w	r11[0x0],r8
80015102:	e6 16 00 01 	andh	r6,0x1,COH
	ptr_job->call_end = callback;
	cpu_irq_restore(flags);

	// Request first transfer
	uhd_pipe_trans_complet(pipe);
80015106:	c0 50       	breq	80015110 <uhd_ep_run+0x22c>
80015108:	fe b0 fd de 	rcall	80014cc4 <uhd_pipe_trans_complet>
8001510c:	e3 cf 90 f8 	ldm	sp++,r3-r7,pc,r12=1
      cpu_irq_enable();
80015110:	d5 03       	csrf	0x10
80015112:	cf bb       	rjmp	80015108 <uhd_ep_run+0x224>

80015114 <otg_interrupt>:
80015114:	d4 31       	pushm	r0-r7,lr
80015116:	20 1d       	sub	sp,4
80015118:	fe 69 08 04 	mov	r9,-129020
ISR(otg_interrupt, AVR32_USBB_IRQ_GROUP, UHD_USB_INT_LEVEL)
{
	bool b_mode_device;

#ifdef USB_ID
	if (Is_otg_id_transition()) {
8001511c:	72 08       	ld.w	r8,r9[0x0]
8001511e:	ed b8 00 00 	bld	r8,0x0
80015122:	c0 c0       	breq	8001513a <otg_interrupt+0x26>
			UHC_MODE_CHANGE(true);
			uhc_start();
		}
		return;
	}
	b_mode_device = Is_otg_id_device();
80015124:	72 08       	ld.w	r8,r9[0x0]
#else
	b_mode_device = Is_otg_device_mode_forced();
#endif

	// Redirection to host or device interrupt
	if (b_mode_device) {
80015126:	ed b8 00 0a 	bld	r8,0xa
8001512a:	c2 e1       	brne	80015186 <otg_interrupt+0x72>
		udd_interrupt();
	} else {
		uhd_interrupt();
	}
	otg_data_memory_barrier();
8001512c:	fe 68 00 00 	mov	r8,-131072
80015130:	f0 f8 08 18 	ld.w	r8,r8[2072]
}
80015134:	2f fd       	sub	sp,-4
80015136:	d4 32       	popm	r0-r7,lr
80015138:	d6 03       	rete
{
	bool b_mode_device;

#ifdef USB_ID
	if (Is_otg_id_transition()) {
		while (!Is_otg_clock_usable());
8001513a:	72 08       	ld.w	r8,r9[0x0]
8001513c:	ed b8 00 0e 	bld	r8,0xe
80015140:	cf d1       	brne	8001513a <otg_interrupt+0x26>
		otg_unfreeze_clock();
80015142:	fe 68 08 00 	mov	r8,-129024
80015146:	70 09       	ld.w	r9,r8[0x0]
80015148:	af c9       	cbr	r9,0xe
8001514a:	91 09       	st.w	r8[0x0],r9
		otg_ack_id_transition();
8001514c:	30 1c       	mov	r12,1
8001514e:	fe 69 08 08 	mov	r9,-129016
80015152:	93 0c       	st.w	r9[0x0],r12
		otg_freeze_clock();
80015154:	70 09       	ld.w	r9,r8[0x0]
80015156:	af a9       	sbr	r9,0xe
80015158:	91 09       	st.w	r8[0x0],r9
		if (Is_otg_id_device()) {
8001515a:	fe 68 08 04 	mov	r8,-129020
8001515e:	70 08       	ld.w	r8,r8[0x0]
80015160:	ed b8 00 0a 	bld	r8,0xa
80015164:	c0 a1       	brne	80015178 <otg_interrupt+0x64>
			uhc_stop(false);
80015166:	30 0c       	mov	r12,0
80015168:	e0 a0 06 ea 	rcall	80015f3c <uhc_stop>
			UHC_MODE_CHANGE(false);
8001516c:	30 0c       	mov	r12,0
8001516e:	e0 a0 21 17 	rcall	8001939c <usb_mode_change>
		udd_interrupt();
	} else {
		uhd_interrupt();
	}
	otg_data_memory_barrier();
}
80015172:	2f fd       	sub	sp,-4
80015174:	d4 32       	popm	r0-r7,lr
80015176:	d6 03       	rete
			uhc_stop(false);
			UHC_MODE_CHANGE(false);
			udc_start();
		} else {
			udc_stop();
			UHC_MODE_CHANGE(true);
80015178:	e0 a0 21 12 	rcall	8001939c <usb_mode_change>
			uhc_start();
8001517c:	e0 a0 06 e4 	rcall	80015f44 <uhc_start>
		udd_interrupt();
	} else {
		uhd_interrupt();
	}
	otg_data_memory_barrier();
}
80015180:	2f fd       	sub	sp,-4
80015182:	d4 32       	popm	r0-r7,lr
80015184:	d6 03       	rete
static void uhd_interrupt(void)
{
	uint8_t pipe_int;

	// Manage SOF interrupt
	if (Is_uhd_sof()) {
80015186:	fe 6a 04 04 	mov	r10,-130044
8001518a:	74 08       	ld.w	r8,r10[0x0]
8001518c:	ed b8 00 05 	bld	r8,0x5
80015190:	e0 80 00 a5 	breq	800152da <otg_interrupt+0x1c6>
		uhd_sof_interrupt();
		return;
	}

	// Manage pipe interrupts
	pipe_int = uhd_get_interrupt_pipe_number();
80015194:	fe 69 00 00 	mov	r9,-131072
80015198:	f2 f8 04 04 	ld.w	r8,r9[1028]
8001519c:	f2 fc 04 10 	ld.w	r12,r9[1040]
800151a0:	a9 88       	lsr	r8,0x8
800151a2:	f1 ec 02 8c 	and	r12,r8,r12>>0x8
800151a6:	a7 bc       	sbr	r12,0x7
800151a8:	5c 9c       	brev	r12
800151aa:	f8 0c 12 00 	clz	r12,r12
	if (pipe_int == 0) {
800151ae:	e0 80 00 c3 	breq	80015334 <otg_interrupt+0x220>
		// Interrupt acked by control endpoint managed
		uhd_ctrl_interrupt();
		return;
	}
	if (pipe_int != AVR32_USBB_EPT_NUM) {
800151b2:	30 78       	mov	r8,7
800151b4:	f0 0c 18 00 	cp.b	r12,r8
800151b8:	c5 c1       	brne	80015270 <otg_interrupt+0x15c>
		// Interrupt acked by bulk/interrupt/isochronous endpoint
		uhd_pipe_interrupt(pipe_int);
		return;
	}
	pipe_int = uhd_get_pipe_dma_interrupt_number();
800151ba:	f2 fb 04 04 	ld.w	r11,r9[1028]
800151be:	f2 fc 04 10 	ld.w	r12,r9[1040]
800151c2:	b9 9b       	lsr	r11,0x19
800151c4:	f7 ec 03 9b 	and	r11,r11,r12>>0x19
800151c8:	a7 ab       	sbr	r11,0x6
800151ca:	5c 9b       	brev	r11
800151cc:	f6 0b 12 00 	clz	r11,r11
800151d0:	f6 cc ff ff 	sub	r12,r11,-1
	if (pipe_int != AVR32_USBB_EPT_NUM) {
800151d4:	f0 0c 18 00 	cp.b	r12,r8
800151d8:	c3 b0       	breq	8001524e <otg_interrupt+0x13a>
static void uhd_pipe_interrupt_dma(uint8_t pipe)
{
	uhd_pipe_job_t *ptr_job;
	uint32_t nb_remaining;

	if (uhd_pipe_dma_get_status(pipe)
800151da:	f8 08 15 04 	lsl	r8,r12,0x4
800151de:	e0 38 f9 00 	sub	r8,129280
800151e2:	70 39       	ld.w	r9,r8[0xc]
800151e4:	ed b9 00 00 	bld	r9,0x0
800151e8:	ca 20       	breq	8001512c <otg_interrupt+0x18>
			& AVR32_USBB_UHDMA1_STATUS_CH_EN_MASK) {
		return; // Ignore EOT_STA interrupt
	}
	// Save number of data no transfered
	nb_remaining = (uhd_pipe_dma_get_status(pipe) &
800151ea:	70 3b       	ld.w	r11,r8[0xc]
800151ec:	b1 8b       	lsr	r11,0x10
			AVR32_USBB_UHDMA1_STATUS_CH_BYTE_CNT_MASK)
			>> AVR32_USBB_UHDMA1_STATUS_CH_BYTE_CNT_OFFSET;
	if (nb_remaining) {
800151ee:	c0 d0       	breq	80015208 <otg_interrupt+0xf4>
		// Get job corresponding at endpoint
		ptr_job = &uhd_pipe_job[pipe - 1];
800151f0:	e0 69 07 70 	mov	r9,1904
800151f4:	f8 c8 00 01 	sub	r8,r12,1
800151f8:	f0 08 00 28 	add	r8,r8,r8<<0x2
800151fc:	f2 08 00 28 	add	r8,r9,r8<<0x2

		// Transfer no complete (short packet or ZLP) then:
		// Update number of transfered data
		ptr_job->nb_trans -= nb_remaining;
80015200:	70 39       	ld.w	r9,r8[0xc]
80015202:	16 19       	sub	r9,r11

		// Set transfer complete to stop the transfer
		ptr_job->buf_size = ptr_job->nb_trans;
80015204:	91 29       	st.w	r8[0x8],r9
		// Get job corresponding at endpoint
		ptr_job = &uhd_pipe_job[pipe - 1];

		// Transfer no complete (short packet or ZLP) then:
		// Update number of transfered data
		ptr_job->nb_trans -= nb_remaining;
80015206:	91 39       	st.w	r8[0xc],r9

		// Set transfer complete to stop the transfer
		ptr_job->buf_size = ptr_job->nb_trans;
	}

	if (uhd_is_pipe_out(pipe)) {
80015208:	f8 0a 15 02 	lsl	r10,r12,0x2
8001520c:	fe 69 05 00 	mov	r9,-129792
80015210:	f4 09 00 08 	add	r8,r10,r9
80015214:	70 08       	ld.w	r8,r8[0x0]
80015216:	f1 d8 c1 02 	bfextu	r8,r8,0x8,0x2
8001521a:	58 28       	cp.w	r8,2
8001521c:	e0 80 02 35 	breq	80015686 <otg_interrupt+0x572>
		// Wait that all banks are free to freeze clock of OUT endpoint
		// and call callback
		uhd_enable_bank_interrupt(pipe);
	} else {
		if (!Is_uhd_pipe_frozen(pipe)) {
80015220:	fe 68 05 c0 	mov	r8,-129600
80015224:	f4 08 00 09 	add	r9,r10,r8
80015228:	72 08       	ld.w	r8,r9[0x0]
8001522a:	ed b8 00 11 	bld	r8,0x11
8001522e:	c0 80       	breq	8001523e <otg_interrupt+0x12a>
			// Pipe is not freeze in case of :
			// - incomplete transfer when the request number INRQ is not complete.
			// - low USB speed and with a high CPU frequency,
			// a ACK from host can be always running on USB line.

			if (nb_remaining) {
80015230:	58 0b       	cp.w	r11,0
80015232:	c0 90       	breq	80015244 <otg_interrupt+0x130>
				// Freeze pipe in case of incomplete transfer
				uhd_freeze_pipe(pipe);
80015234:	e0 3a fa 10 	sub	r10,129552
80015238:	e2 68 00 00 	mov	r8,131072
8001523c:	95 08       	st.w	r10[0x0],r8
				// Wait freeze in case of ASK on going
				while (!Is_uhd_pipe_frozen(pipe)) {
				}
			}
		}
		uhd_pipe_trans_complet(pipe);
8001523e:	fe b0 fd 43 	rcall	80014cc4 <uhd_pipe_trans_complet>
80015242:	c7 5b       	rjmp	8001512c <otg_interrupt+0x18>
			if (nb_remaining) {
				// Freeze pipe in case of incomplete transfer
				uhd_freeze_pipe(pipe);
			} else {
				// Wait freeze in case of ASK on going
				while (!Is_uhd_pipe_frozen(pipe)) {
80015244:	72 08       	ld.w	r8,r9[0x0]
80015246:	ed b8 00 11 	bld	r8,0x11
8001524a:	cf d1       	brne	80015244 <otg_interrupt+0x130>
8001524c:	cf 9b       	rjmp	8001523e <otg_interrupt+0x12a>
		// Interrupt DMA acked by bulk/interrupt/isochronous endpoint
		uhd_pipe_interrupt_dma(pipe_int);
		return;
	}
	// USB bus reset detection
	if (Is_uhd_reset_sent()) {
8001524e:	74 08       	ld.w	r8,r10[0x0]
80015250:	e2 18 00 04 	andl	r8,0x4,COH
80015254:	e0 80 01 79 	breq	80015546 <otg_interrupt+0x432>
		uhd_ack_reset_sent();
80015258:	fe 68 04 08 	mov	r8,-130040
8001525c:	30 49       	mov	r9,4
8001525e:	91 09       	st.w	r8[0x0],r9
		if (uhd_reset_callback != NULL) {
80015260:	e0 68 07 6c 	mov	r8,1900
80015264:	70 08       	ld.w	r8,r8[0x0]
80015266:	58 08       	cp.w	r8,0
80015268:	fe 90 ff 62 	breq	8001512c <otg_interrupt+0x18>
			uhd_reset_callback();
8001526c:	5d 18       	icall	r8
8001526e:	c5 fb       	rjmp	8001512c <otg_interrupt+0x18>
 *
 * \param pipe  Pipe number
 */
static void uhd_pipe_interrupt(uint8_t pipe)
{
	if (Is_uhd_bank_interrupt_enabled(pipe) && (0==uhd_nb_busy_bank(pipe))) {
80015270:	fe 68 05 c0 	mov	r8,-129600
80015274:	f8 0b 15 02 	lsl	r11,r12,0x2
80015278:	f6 08 00 0e 	add	lr,r11,r8
8001527c:	7c 08       	ld.w	r8,lr[0x0]
8001527e:	ed b8 00 0c 	bld	r8,0xc
80015282:	e0 81 00 95 	brne	800153ac <otg_interrupt+0x298>
80015286:	fe 68 05 30 	mov	r8,-129744
8001528a:	f6 08 00 09 	add	r9,r11,r8
8001528e:	72 0a       	ld.w	r10,r9[0x0]
80015290:	f5 da c1 82 	bfextu	r10,r10,0xc,0x2
80015294:	e0 80 02 00 	breq	80015694 <otg_interrupt+0x580>
		uhd_disable_bank_interrupt(pipe);
		uhd_pipe_finish_job(pipe, UHD_TRANS_NOERROR);
		return;
	}
	if (Is_uhd_out_ready_interrupt_enabled(pipe) && Is_uhd_out_ready(pipe)) {
80015298:	7c 08       	ld.w	r8,lr[0x0]
8001529a:	ed b8 00 01 	bld	r8,0x1
8001529e:	c0 61       	brne	800152aa <otg_interrupt+0x196>
800152a0:	72 08       	ld.w	r8,r9[0x0]
800152a2:	ed b8 00 01 	bld	r8,0x1
800152a6:	e0 80 01 a5 	breq	800155f0 <otg_interrupt+0x4dc>
		uhd_ack_fifocon(pipe);
		uhd_unfreeze_pipe(pipe);
		uhd_enable_bank_interrupt(pipe);
		return;
	}
	if (Is_uhd_stall(pipe)) {
800152aa:	72 08       	ld.w	r8,r9[0x0]
800152ac:	e2 18 00 40 	andl	r8,0x40,COH
800152b0:	e0 81 01 d9 	brne	80015662 <otg_interrupt+0x54e>
		uhd_ack_stall(pipe);
		uhd_reset_data_toggle(pipe);
		uhd_ep_abort_pipe(pipe, UHD_TRANS_STALL);
		return;
	}
	if (Is_uhd_pipe_error(pipe)) {
800152b4:	72 09       	ld.w	r9,r9[0x0]
800152b6:	ed b9 00 03 	bld	r9,0x3
800152ba:	fe 91 ff 39 	brne	8001512c <otg_interrupt+0x18>
 *
 * \return UHD transfer error
 */
static uhd_trans_status_t uhd_pipe_get_error(uint8_t pipe)
{
	uint32_t error = uhd_error_status(pipe) &
800152be:	e0 3b f9 80 	sub	r11,129408
800152c2:	76 09       	ld.w	r9,r11[0x0]
			(AVR32_USBB_UPERR0_DATATGL_MASK |
			AVR32_USBB_UPERR0_TIMEOUT_MASK |
			AVR32_USBB_UPERR0_PID_MASK |
			AVR32_USBB_UPERR0_DATAPID_MASK);
	uhd_ack_all_errors(pipe);
800152c4:	97 08       	st.w	r11[0x0],r8
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
			uhd_get_pipe_endpoint_address(pipe),
			status, ptr_job->nb_trans);
}
800152c6:	f1 d9 c0 04 	bfextu	r8,r9,0x0,0x4
800152ca:	20 18       	sub	r8,1
800152cc:	58 28       	cp.w	r8,2
800152ce:	e0 88 01 a9 	brls	80015620 <otg_interrupt+0x50c>
800152d2:	30 6b       	mov	r11,6
		uhd_ep_abort_pipe(pipe, UHD_TRANS_STALL);
		return;
	}
	if (Is_uhd_pipe_error(pipe)) {
		// Get and ack error
		uhd_ep_abort_pipe(pipe, uhd_pipe_get_error(pipe));
800152d4:	fe b0 fc 26 	rcall	80014b20 <uhd_ep_abort_pipe>
800152d8:	c2 ab       	rjmp	8001512c <otg_interrupt+0x18>
{
	uint8_t pipe_int;

	// Manage SOF interrupt
	if (Is_uhd_sof()) {
		uhd_ack_sof();
800152da:	32 09       	mov	r9,32
800152dc:	fe 68 04 08 	mov	r8,-130040
800152e0:	91 09       	st.w	r8[0x0],r9
			return;
		}
	}

	// Manage a delay to enter in suspend
	if (uhd_suspend_start) {
800152e2:	e0 68 07 e8 	mov	r8,2024
800152e6:	11 89       	ld.ub	r9,r8[0x0]
800152e8:	58 09       	cp.w	r9,0
800152ea:	c6 60       	breq	800153b6 <otg_interrupt+0x2a2>
		if (--uhd_suspend_start == 0) {
800152ec:	20 19       	sub	r9,1
800152ee:	5c 59       	castu.b	r9
800152f0:	b0 89       	st.b	r8[0x0],r9
800152f2:	fe 91 ff 1d 	brne	8001512c <otg_interrupt+0x18>
			// then wait end of SOF generation
			// to be sure that disable SOF has been accepted
#ifdef AVR32_USBB_USBSTA_SPEED_HIGH // If UTMI
			while (115<uhd_get_frame_position()) {
#else
			while (185<uhd_get_frame_position()) {
800152f6:	fe 69 04 20 	mov	r9,-130016
800152fa:	72 08       	ld.w	r8,r9[0x0]
800152fc:	f1 d8 c2 08 	bfextu	r8,r8,0x10,0x8
80015300:	e0 48 00 b9 	cp.w	r8,185
80015304:	e0 88 00 06 	brls	80015310 <otg_interrupt+0x1fc>
#endif
				if (Is_uhd_disconnection()) {
80015308:	74 08       	ld.w	r8,r10[0x0]
8001530a:	ed b8 00 01 	bld	r8,0x1
8001530e:	cf 61       	brne	800152fa <otg_interrupt+0x1e6>
					break;
				}
			}
			uhd_disable_sof();
80015310:	fe 69 04 00 	mov	r9,-130048
80015314:	72 08       	ld.w	r8,r9[0x0]
80015316:	a9 c8       	cbr	r8,0x8
80015318:	93 08       	st.w	r9[0x0],r8

			// Ack previous wakeup and resumes interrupts
			AVR32_USBB.uhintclr = AVR32_USBB_UHINTCLR_HWUPIC_MASK
8001531a:	fe 68 00 00 	mov	r8,-131072
8001531e:	35 89       	mov	r9,88
80015320:	f1 49 04 08 	st.w	r8[1032],r9
					|AVR32_USBB_UHINTCLR_RSMEDIC_MASK
					|AVR32_USBB_UHINTCLR_RXRSMIC_MASK;

			// Enable wakeup/resumes interrupts
			AVR32_USBB.uhinteset = AVR32_USBB_UHINTESET_HWUPIES_MASK
80015324:	f1 49 04 18 	st.w	r8[1048],r9
					|AVR32_USBB_UHINTESET_RSMEDIES_MASK
					|AVR32_USBB_UHINTESET_RXRSMIES_MASK;

			otg_freeze_clock();
80015328:	fe 69 08 00 	mov	r9,-129024
8001532c:	72 08       	ld.w	r8,r9[0x0]
8001532e:	af a8       	sbr	r8,0xe
80015330:	93 08       	st.w	r9[0x0],r8
80015332:	cf da       	rjmp	8001512c <otg_interrupt+0x18>
{
	// A setup request is on-going
	Assert(uhd_ctrl_request_timeout!=0);

	// Disable setup, IN and OUT interrupts of control endpoint
	AVR32_USBB.upcon0clr = AVR32_USBB_UPCON0CLR_TXSTPEC_MASK
80015334:	30 78       	mov	r8,7
80015336:	f3 48 06 20 	st.w	r9[1568],r8
			| AVR32_USBB_UPCON0CLR_RXINEC_MASK
			| AVR32_USBB_UPCON0CLR_TXOUTEC_MASK;

	// Search event on control endpoint
	if (Is_uhd_setup_ready(0)) {
8001533a:	fe 69 05 30 	mov	r9,-129744
8001533e:	72 08       	ld.w	r8,r9[0x0]
80015340:	ed b8 00 02 	bld	r8,0x2
80015344:	c7 91       	brne	80015436 <otg_interrupt+0x322>
		// SETUP packet sent
		uhd_freeze_pipe(0);
80015346:	fe 6b 05 f0 	mov	r11,-129552
8001534a:	e2 69 00 00 	mov	r9,131072
8001534e:	97 09       	st.w	r11[0x0],r9
		uhd_ack_setup_ready(0);
80015350:	30 4a       	mov	r10,4
80015352:	fe 68 05 60 	mov	r8,-129696
80015356:	91 0a       	st.w	r8[0x0],r10
		Assert(uhd_ctrl_request_phase == UHD_CTRL_REQ_PHASE_SETUP);

		// Start DATA phase
		if ((uhd_ctrl_request_first->req.bmRequestType & USB_REQ_DIR_MASK)
80015358:	e0 67 3b 68 	mov	r7,15208
8001535c:	18 9e       	mov	lr,r12
8001535e:	6e 0a       	ld.w	r10,r7[0x0]
80015360:	15 96       	ld.ub	r6,r10[0x1]
80015362:	f8 06 18 00 	cp.b	r6,r12
80015366:	e0 85 02 e5 	brlt	80015930 <otg_interrupt+0x81c>
				== USB_REQ_DIR_IN ) {
			uhd_ctrl_phase_data_in_start();
		} else {
			if (uhd_ctrl_request_first->req.wLength) {
8001536a:	15 f6       	ld.ub	r6,r10[0x7]
8001536c:	f5 3e 00 08 	ld.ub	lr,r10[8]
80015370:	fd e6 10 8e 	or	lr,lr,r6<<0x8
80015374:	f8 0e 19 00 	cp.h	lr,r12
80015378:	e0 81 01 ce 	brne	80015714 <otg_interrupt+0x600>
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
8001537c:	fe 6c 05 00 	mov	r12,-129792
80015380:	78 0a       	ld.w	r10,r12[0x0]
80015382:	e0 1a fc ff 	andl	r10,0xfcff
80015386:	a9 aa       	sbr	r10,0x8
80015388:	99 0a       	st.w	r12[0x0],r10
	uhd_ack_in_received(0);
8001538a:	30 1a       	mov	r10,1
8001538c:	91 0a       	st.w	r8[0x0],r10
	uhd_ack_short_packet(0);
8001538e:	e0 6c 00 80 	mov	r12,128
80015392:	91 0c       	st.w	r8[0x0],r12
	uhd_enable_in_received_interrupt(0);
80015394:	97 0a       	st.w	r11[0x0],r10
	uhd_ack_fifocon(0);
80015396:	fe 68 06 20 	mov	r8,-129504
8001539a:	e0 6a 40 00 	mov	r10,16384
8001539e:	91 0a       	st.w	r8[0x0],r10
	uhd_unfreeze_pipe(0);
800153a0:	91 09       	st.w	r8[0x0],r9
 * \internal
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
800153a2:	30 39       	mov	r9,3
800153a4:	e0 68 3b 64 	mov	r8,15204
800153a8:	91 09       	st.w	r8[0x0],r9
800153aa:	cc 1a       	rjmp	8001512c <otg_interrupt+0x18>
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
800153ac:	fe 68 05 30 	mov	r8,-129744
800153b0:	f6 08 00 09 	add	r9,r11,r8
800153b4:	c7 2b       	rjmp	80015298 <otg_interrupt+0x184>
			uhd_sleep_mode(UHD_STATE_SUSPEND);
		}
		return; // Abort SOF events
	}
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
800153b6:	e0 68 07 ea 	mov	r8,2026
800153ba:	11 89       	ld.ub	r9,r8[0x0]
800153bc:	58 09       	cp.w	r9,0
800153be:	c5 90       	breq	80015470 <otg_interrupt+0x35c>
		if (--uhd_resume_start == 0) {
800153c0:	20 19       	sub	r9,1
800153c2:	5c 59       	castu.b	r9
800153c4:	b0 89       	st.b	r8[0x0],r9
800153c6:	fe 91 fe b3 	brne	8001512c <otg_interrupt+0x18>
800153ca:	e0 68 07 e9 	mov	r8,2025
800153ce:	11 88       	ld.ub	r8,r8[0x0]
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
800153d0:	ed b8 00 01 	bld	r8,0x1
800153d4:	c0 61       	brne	800153e0 <otg_interrupt+0x2cc>
					uhd_unfreeze_pipe(pipe);
800153d6:	e2 6a 00 00 	mov	r10,131072
800153da:	fe 69 06 24 	mov	r9,-129500
800153de:	93 0a       	st.w	r9[0x0],r10
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
		if (--uhd_resume_start == 0) {
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
800153e0:	ed b8 00 02 	bld	r8,0x2
800153e4:	c0 61       	brne	800153f0 <otg_interrupt+0x2dc>
					uhd_unfreeze_pipe(pipe);
800153e6:	e2 6a 00 00 	mov	r10,131072
800153ea:	fe 69 06 28 	mov	r9,-129496
800153ee:	93 0a       	st.w	r9[0x0],r10
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
		if (--uhd_resume_start == 0) {
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
800153f0:	ed b8 00 03 	bld	r8,0x3
800153f4:	c0 61       	brne	80015400 <otg_interrupt+0x2ec>
					uhd_unfreeze_pipe(pipe);
800153f6:	e2 6a 00 00 	mov	r10,131072
800153fa:	fe 69 06 2c 	mov	r9,-129492
800153fe:	93 0a       	st.w	r9[0x0],r10
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
		if (--uhd_resume_start == 0) {
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
80015400:	ed b8 00 04 	bld	r8,0x4
80015404:	c0 61       	brne	80015410 <otg_interrupt+0x2fc>
					uhd_unfreeze_pipe(pipe);
80015406:	e2 6a 00 00 	mov	r10,131072
8001540a:	fe 69 06 30 	mov	r9,-129488
8001540e:	93 0a       	st.w	r9[0x0],r10
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
		if (--uhd_resume_start == 0) {
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
80015410:	ed b8 00 05 	bld	r8,0x5
80015414:	c0 61       	brne	80015420 <otg_interrupt+0x30c>
					uhd_unfreeze_pipe(pipe);
80015416:	e2 6a 00 00 	mov	r10,131072
8001541a:	fe 69 06 34 	mov	r9,-129484
8001541e:	93 0a       	st.w	r9[0x0],r10
	// Manage a delay to exit of suspend
	if (uhd_resume_start) {
		if (--uhd_resume_start == 0) {
			// Restore pipes unfreezed
			for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
				if ((uhd_pipes_unfreeze >> pipe) & 0x01) {
80015420:	ed b8 00 06 	bld	r8,0x6
80015424:	c0 61       	brne	80015430 <otg_interrupt+0x31c>
					uhd_unfreeze_pipe(pipe);
80015426:	e2 69 00 00 	mov	r9,131072
8001542a:	fe 68 06 38 	mov	r8,-129480
8001542e:	91 09       	st.w	r8[0x0],r9
				}
			}
			uhc_notify_resume();
80015430:	e0 a0 09 12 	rcall	80016654 <uhc_notify_resume>
80015434:	c7 ca       	rjmp	8001512c <otg_interrupt+0x18>
				uhd_ctrl_phase_zlp_in();
			}
		}
		return;
	}
	if (Is_uhd_in_received(0)) {
80015436:	72 0c       	ld.w	r12,r9[0x0]
80015438:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8001543c:	e0 80 00 f8 	breq	8001562c <otg_interrupt+0x518>
		// In case of low USB speed and with a high CPU frequency,
		// a ACK from host can be always running on USB line
		// then wait end of ACK on IN pipe.
		while(!Is_uhd_pipe_frozen(0));
80015440:	fe 69 05 c0 	mov	r9,-129600
80015444:	72 08       	ld.w	r8,r9[0x0]
80015446:	ed b8 00 11 	bld	r8,0x11
8001544a:	cf d1       	brne	80015444 <otg_interrupt+0x330>

		// IN packet received
		uhd_ack_in_received(0);
8001544c:	fe 68 05 60 	mov	r8,-129696
80015450:	30 19       	mov	r9,1
80015452:	91 09       	st.w	r8[0x0],r9
		switch(uhd_ctrl_request_phase) {
80015454:	e0 60 3b 64 	mov	r0,15204
80015458:	60 08       	ld.w	r8,r0[0x0]
8001545a:	58 28       	cp.w	r8,2
8001545c:	e0 80 02 14 	breq	80015884 <otg_interrupt+0x770>
80015460:	58 38       	cp.w	r8,3
80015462:	fe 91 fe 65 	brne	8001512c <otg_interrupt+0x18>
		case UHD_CTRL_REQ_PHASE_DATA_IN:
			uhd_ctrl_phase_data_in();
			break;
		case UHD_CTRL_REQ_PHASE_ZLP_IN:
			uhd_ctrl_request_end(UHD_TRANS_NOERROR);
80015466:	30 0c       	mov	r12,0
80015468:	fe b0 f9 e8 	rcall	80014838 <uhd_ctrl_request_end>
8001546c:	fe 9f fe 60 	bral	8001512c <otg_interrupt+0x18>
			uhc_notify_resume();
		}
		return; // Abort SOF events
	}
	// Manage the timeout on endpoint control transfer
	if (uhd_ctrl_request_timeout) {
80015470:	e0 68 3b 74 	mov	r8,15220
80015474:	90 09       	ld.sh	r9,r8[0x0]
80015476:	58 09       	cp.w	r9,0
80015478:	c0 80       	breq	80015488 <otg_interrupt+0x374>
		// Setup request on-going
		if (--uhd_ctrl_request_timeout == 0) {
8001547a:	90 09       	ld.sh	r9,r8[0x0]
8001547c:	20 19       	sub	r9,1
8001547e:	b0 09       	st.h	r8[0x0],r9
80015480:	90 08       	ld.sh	r8,r8[0x0]
80015482:	58 08       	cp.w	r8,0
80015484:	e0 80 03 07 	breq	80015a92 <otg_interrupt+0x97e>
	}
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		ptr_job = &uhd_pipe_job[pipe-1];
		if (ptr_job->busy == true) {
80015488:	e0 67 07 70 	mov	r7,1904
8001548c:	6e 08       	ld.w	r8,r7[0x0]
8001548e:	58 08       	cp.w	r8,0
80015490:	c0 94       	brge	800154a2 <otg_interrupt+0x38e>
			if (ptr_job->timeout) {
80015492:	8e 18       	ld.sh	r8,r7[0x2]
80015494:	58 08       	cp.w	r8,0
80015496:	c0 60       	breq	800154a2 <otg_interrupt+0x38e>
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
80015498:	20 18       	sub	r8,1
8001549a:	5c 88       	casts.h	r8
8001549c:	ae 18       	st.h	r7[0x2],r8
8001549e:	e0 80 03 99 	breq	80015bd0 <otg_interrupt+0xabc>
	}
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		ptr_job = &uhd_pipe_job[pipe-1];
		if (ptr_job->busy == true) {
800154a2:	e0 68 07 70 	mov	r8,1904
800154a6:	6e 59       	ld.w	r9,r7[0x14]
800154a8:	58 09       	cp.w	r9,0
800154aa:	c0 b4       	brge	800154c0 <otg_interrupt+0x3ac>
			if (ptr_job->timeout) {
800154ac:	f1 09 00 16 	ld.sh	r9,r8[22]
800154b0:	58 09       	cp.w	r9,0
800154b2:	c0 70       	breq	800154c0 <otg_interrupt+0x3ac>
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
800154b4:	20 19       	sub	r9,1
800154b6:	5c 89       	casts.h	r9
800154b8:	f1 59 00 16 	st.h	r8[22],r9
800154bc:	e0 80 03 90 	breq	80015bdc <otg_interrupt+0xac8>
	}
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		ptr_job = &uhd_pipe_job[pipe-1];
		if (ptr_job->busy == true) {
800154c0:	e0 68 07 70 	mov	r8,1904
800154c4:	6e a9       	ld.w	r9,r7[0x28]
800154c6:	58 09       	cp.w	r9,0
800154c8:	c0 b4       	brge	800154de <otg_interrupt+0x3ca>
			if (ptr_job->timeout) {
800154ca:	f1 09 00 2a 	ld.sh	r9,r8[42]
800154ce:	58 09       	cp.w	r9,0
800154d0:	c0 70       	breq	800154de <otg_interrupt+0x3ca>
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
800154d2:	20 19       	sub	r9,1
800154d4:	5c 89       	casts.h	r9
800154d6:	f1 59 00 2a 	st.h	r8[42],r9
800154da:	e0 80 03 87 	breq	80015be8 <otg_interrupt+0xad4>
	}
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		ptr_job = &uhd_pipe_job[pipe-1];
		if (ptr_job->busy == true) {
800154de:	e0 68 07 70 	mov	r8,1904
800154e2:	6e f9       	ld.w	r9,r7[0x3c]
800154e4:	58 09       	cp.w	r9,0
800154e6:	c0 b4       	brge	800154fc <otg_interrupt+0x3e8>
			if (ptr_job->timeout) {
800154e8:	f1 09 00 3e 	ld.sh	r9,r8[62]
800154ec:	58 09       	cp.w	r9,0
800154ee:	c0 70       	breq	800154fc <otg_interrupt+0x3e8>
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
800154f0:	20 19       	sub	r9,1
800154f2:	5c 89       	casts.h	r9
800154f4:	f1 59 00 3e 	st.h	r8[62],r9
800154f8:	e0 80 03 7e 	breq	80015bf4 <otg_interrupt+0xae0>
	}
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		ptr_job = &uhd_pipe_job[pipe-1];
		if (ptr_job->busy == true) {
800154fc:	e0 68 07 70 	mov	r8,1904
80015500:	6f 49       	ld.w	r9,r7[0x50]
80015502:	58 09       	cp.w	r9,0
80015504:	c0 b4       	brge	8001551a <otg_interrupt+0x406>
			if (ptr_job->timeout) {
80015506:	f1 09 00 52 	ld.sh	r9,r8[82]
8001550a:	58 09       	cp.w	r9,0
8001550c:	c0 70       	breq	8001551a <otg_interrupt+0x406>
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
8001550e:	20 19       	sub	r9,1
80015510:	5c 89       	casts.h	r9
80015512:	f1 59 00 52 	st.h	r8[82],r9
80015516:	e0 80 03 75 	breq	80015c00 <otg_interrupt+0xaec>
	}
	// Manage the timeouts on endpoint transfer
	uhd_pipe_job_t *ptr_job;
	for (uint8_t pipe = 1; pipe < AVR32_USBB_EPT_NUM; pipe++) {
		ptr_job = &uhd_pipe_job[pipe-1];
		if (ptr_job->busy == true) {
8001551a:	6f 99       	ld.w	r9,r7[0x64]
8001551c:	e0 68 07 70 	mov	r8,1904
80015520:	58 09       	cp.w	r9,0
80015522:	c0 b4       	brge	80015538 <otg_interrupt+0x424>
			if (ptr_job->timeout) {
80015524:	f1 09 00 66 	ld.sh	r9,r8[102]
80015528:	58 09       	cp.w	r9,0
8001552a:	c0 70       	breq	80015538 <otg_interrupt+0x424>
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
8001552c:	20 19       	sub	r9,1
8001552e:	5c 89       	casts.h	r9
80015530:	f1 59 00 66 	st.h	r8[102],r9
80015534:	e0 80 03 32 	breq	80015b98 <otg_interrupt+0xa84>
				}
			}
		}
	}
	// Notify the UHC
	uhc_notify_sof(false);
80015538:	30 0c       	mov	r12,0
8001553a:	e0 a0 04 df 	rcall	80015ef8 <uhc_notify_sof>

	// Notify the user application
	UHC_SOF_EVENT();
8001553e:	e0 a0 1f 34 	rcall	800193a6 <usb_sof>
80015542:	fe 9f fd f5 	bral	8001512c <otg_interrupt+0x18>
		}
		return;
	}

	// Manage dis/connection event
	if (Is_uhd_disconnection() && Is_uhd_disconnection_int_enabled()) {
80015546:	74 0a       	ld.w	r10,r10[0x0]
80015548:	ed ba 00 01 	bld	r10,0x1
8001554c:	c0 81       	brne	8001555c <otg_interrupt+0x448>
8001554e:	fe 6a 04 10 	mov	r10,-130032
80015552:	74 0a       	ld.w	r10,r10[0x0]
80015554:	ed ba 00 01 	bld	r10,0x1
80015558:	e0 80 02 a7 	breq	80015aa6 <otg_interrupt+0x992>
		uhd_suspend_start = 0;
		uhd_resume_start = 0;
		uhc_notify_connection(false);
		return;
	}
	if (Is_uhd_connection() && Is_uhd_connection_int_enabled()) {
8001555c:	fe 68 04 04 	mov	r8,-130044
80015560:	70 08       	ld.w	r8,r8[0x0]
80015562:	ed b8 00 00 	bld	r8,0x0
80015566:	c0 81       	brne	80015576 <otg_interrupt+0x462>
80015568:	fe 68 04 10 	mov	r8,-130032
8001556c:	70 08       	ld.w	r8,r8[0x0]
8001556e:	ed b8 00 00 	bld	r8,0x0
80015572:	e0 80 02 b8 	breq	80015ae2 <otg_interrupt+0x9ce>
		uhc_notify_connection(true);
		return;
	}

	// Manage Vbus error
	if (Is_uhd_vbus_error_interrupt()) {
80015576:	fe 69 08 04 	mov	r9,-129020
8001557a:	72 08       	ld.w	r8,r9[0x0]
8001557c:	ed b8 00 03 	bld	r8,0x3
80015580:	e0 80 01 f1 	breq	80015962 <otg_interrupt+0x84e>
		UHC_VBUS_ERROR();
		return;
	}

	// Check USB clock ready after asynchronous interrupt
	while (!Is_otg_clock_usable());
80015584:	72 08       	ld.w	r8,r9[0x0]
80015586:	ed b8 00 0e 	bld	r8,0xe
8001558a:	cf d1       	brne	80015584 <otg_interrupt+0x470>
	otg_unfreeze_clock();
8001558c:	fe 69 08 00 	mov	r9,-129024
80015590:	72 08       	ld.w	r8,r9[0x0]
80015592:	af c8       	cbr	r8,0xe
80015594:	93 08       	st.w	r9[0x0],r8

	if (Is_uhd_wakeup_interrupt_enabled() && (Is_uhd_wakeup() ||
80015596:	fe 68 04 10 	mov	r8,-130032
8001559a:	70 08       	ld.w	r8,r8[0x0]
8001559c:	ed b8 00 06 	bld	r8,0x6
800155a0:	e0 81 01 43 	brne	80015826 <otg_interrupt+0x712>
800155a4:	fe 68 04 04 	mov	r8,-130044
800155a8:	70 09       	ld.w	r9,r8[0x0]
800155aa:	ed b9 00 06 	bld	r9,0x6
800155ae:	c0 a0       	breq	800155c2 <otg_interrupt+0x4ae>
			Is_uhd_downstream_resume() || Is_uhd_upstream_resume())) {
800155b0:	70 09       	ld.w	r9,r8[0x0]

	// Check USB clock ready after asynchronous interrupt
	while (!Is_otg_clock_usable());
	otg_unfreeze_clock();

	if (Is_uhd_wakeup_interrupt_enabled() && (Is_uhd_wakeup() ||
800155b2:	ed b9 00 03 	bld	r9,0x3
800155b6:	c0 60       	breq	800155c2 <otg_interrupt+0x4ae>
			Is_uhd_downstream_resume() || Is_uhd_upstream_resume())) {
800155b8:	70 08       	ld.w	r8,r8[0x0]

	// Check USB clock ready after asynchronous interrupt
	while (!Is_otg_clock_usable());
	otg_unfreeze_clock();

	if (Is_uhd_wakeup_interrupt_enabled() && (Is_uhd_wakeup() ||
800155ba:	ed b8 00 04 	bld	r8,0x4
800155be:	e0 81 01 34 	brne	80015826 <otg_interrupt+0x712>
			Is_uhd_downstream_resume() || Is_uhd_upstream_resume())) {
		// Disable wakeup/resumes interrupts
		AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_HWUPIEC_MASK
800155c2:	fe 68 00 00 	mov	r8,-131072
800155c6:	35 89       	mov	r9,88
				| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
				| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
		uhd_enable_sof();
800155c8:	fe 6a 04 00 	mov	r10,-130048
	otg_unfreeze_clock();

	if (Is_uhd_wakeup_interrupt_enabled() && (Is_uhd_wakeup() ||
			Is_uhd_downstream_resume() || Is_uhd_upstream_resume())) {
		// Disable wakeup/resumes interrupts
		AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_HWUPIEC_MASK
800155cc:	f1 49 04 14 	st.w	r8[1044],r9
				| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
				| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
		uhd_enable_sof();
800155d0:	74 08       	ld.w	r8,r10[0x0]
800155d2:	a9 a8       	sbr	r8,0x8
		if ((!Is_uhd_downstream_resume())
800155d4:	fe 69 04 04 	mov	r9,-130044
			Is_uhd_downstream_resume() || Is_uhd_upstream_resume())) {
		// Disable wakeup/resumes interrupts
		AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_HWUPIEC_MASK
				| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
				| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
		uhd_enable_sof();
800155d8:	95 08       	st.w	r10[0x0],r8
		if ((!Is_uhd_downstream_resume())
800155da:	72 08       	ld.w	r8,r9[0x0]
				&&(!Is_uhd_disconnection())) {
800155dc:	ed b8 00 03 	bld	r8,0x3
800155e0:	f3 f8 10 00 	ld.wne	r8,r9[0x0]
			if (Is_uhd_high_speed_mode()) {
				uhd_send_resume();
			}
		}
		// Wait 50ms before restarting transfer
		uhd_resume_start = 50;
800155e4:	e0 68 07 ea 	mov	r8,2026
800155e8:	33 29       	mov	r9,50
800155ea:	b0 89       	st.b	r8[0x0],r9
800155ec:	fe 9f fd a0 	bral	8001512c <otg_interrupt+0x18>
		uhd_disable_bank_interrupt(pipe);
		uhd_pipe_finish_job(pipe, UHD_TRANS_NOERROR);
		return;
	}
	if (Is_uhd_out_ready_interrupt_enabled(pipe) && Is_uhd_out_ready(pipe)) {
		uhd_disable_out_ready_interrupt(pipe);
800155f0:	30 29       	mov	r9,2
800155f2:	fe 6c 06 20 	mov	r12,-129504
800155f6:	f6 0c 00 08 	add	r8,r11,r12
800155fa:	91 09       	st.w	r8[0x0],r9
		// One bank is free then send a ZLP
		uhd_ack_out_ready(pipe);
800155fc:	fe 6c 05 60 	mov	r12,-129696
80015600:	f6 0c 00 0a 	add	r10,r11,r12
80015604:	95 09       	st.w	r10[0x0],r9
		uhd_ack_fifocon(pipe);
80015606:	e0 69 40 00 	mov	r9,16384
8001560a:	91 09       	st.w	r8[0x0],r9
		uhd_unfreeze_pipe(pipe);
8001560c:	e2 69 00 00 	mov	r9,131072
80015610:	91 09       	st.w	r8[0x0],r9
		uhd_enable_bank_interrupt(pipe);
80015612:	e0 3b fa 10 	sub	r11,129552
80015616:	e0 68 10 00 	mov	r8,4096
8001561a:	97 08       	st.w	r11[0x0],r8
8001561c:	fe 9f fd 88 	bral	8001512c <otg_interrupt+0x18>
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
			uhd_get_pipe_endpoint_address(pipe),
			status, ptr_job->nb_trans);
}
80015620:	fe f9 05 ec 	ld.w	r9,pc[1516]
80015624:	f2 08 03 2b 	ld.w	r11,r9[r8<<0x2]
80015628:	fe 9f fe 56 	bral	800152d4 <otg_interrupt+0x1c0>
			Assert(false);
			break;
		}
		return;
	}
	if (Is_uhd_out_ready(0)) {
8001562c:	72 08       	ld.w	r8,r9[0x0]
8001562e:	ed b8 00 01 	bld	r8,0x1
80015632:	e0 81 01 13 	brne	80015858 <otg_interrupt+0x744>
		// OUT packet sent
		uhd_freeze_pipe(0);
80015636:	fe 64 05 f0 	mov	r4,-129552
8001563a:	e2 65 00 00 	mov	r5,131072
8001563e:	89 05       	st.w	r4[0x0],r5
		uhd_ack_out_ready(0);
80015640:	30 28       	mov	r8,2
80015642:	fe 6e 05 60 	mov	lr,-129696
80015646:	9d 08       	st.w	lr[0x0],r8
		switch(uhd_ctrl_request_phase) {
80015648:	e0 60 3b 64 	mov	r0,15204
8001564c:	60 08       	ld.w	r8,r0[0x0]
8001564e:	58 18       	cp.w	r8,1
80015650:	e0 80 01 a5 	breq	8001599a <otg_interrupt+0x886>
80015654:	58 48       	cp.w	r8,4
80015656:	fe 91 fd 6b 	brne	8001512c <otg_interrupt+0x18>
		uhd_ctrl_request_end(UHD_TRANS_STALL);
		return;
	}
	if (Is_uhd_pipe_error(0)) {
		// Get and ack error
		uhd_ctrl_request_end(uhd_pipe_get_error(0));
8001565a:	fe b0 f8 ef 	rcall	80014838 <uhd_ctrl_request_end>
8001565e:	fe 9f fd 67 	bral	8001512c <otg_interrupt+0x18>
		uhd_unfreeze_pipe(pipe);
		uhd_enable_bank_interrupt(pipe);
		return;
	}
	if (Is_uhd_stall(pipe)) {
		uhd_ack_stall(pipe);
80015662:	fe 69 05 60 	mov	r9,-129696
80015666:	f6 09 00 08 	add	r8,r11,r9
8001566a:	34 09       	mov	r9,64
8001566c:	91 09       	st.w	r8[0x0],r9
		uhd_reset_data_toggle(pipe);
8001566e:	fe 69 05 f0 	mov	r9,-129552
80015672:	f6 09 00 08 	add	r8,r11,r9
80015676:	e4 69 00 00 	mov	r9,262144
		uhd_ep_abort_pipe(pipe, UHD_TRANS_STALL);
8001567a:	30 4b       	mov	r11,4
		uhd_enable_bank_interrupt(pipe);
		return;
	}
	if (Is_uhd_stall(pipe)) {
		uhd_ack_stall(pipe);
		uhd_reset_data_toggle(pipe);
8001567c:	91 09       	st.w	r8[0x0],r9
		uhd_ep_abort_pipe(pipe, UHD_TRANS_STALL);
8001567e:	fe b0 fa 51 	rcall	80014b20 <uhd_ep_abort_pipe>
80015682:	fe 9f fd 55 	bral	8001512c <otg_interrupt+0x18>
	}

	if (uhd_is_pipe_out(pipe)) {
		// Wait that all banks are free to freeze clock of OUT endpoint
		// and call callback
		uhd_enable_bank_interrupt(pipe);
80015686:	e0 3a fa 10 	sub	r10,129552
8001568a:	e0 68 10 00 	mov	r8,4096
8001568e:	95 08       	st.w	r10[0x0],r8
80015690:	fe 9f fd 4e 	bral	8001512c <otg_interrupt+0x18>
 * \param pipe  Pipe number
 */
static void uhd_pipe_interrupt(uint8_t pipe)
{
	if (Is_uhd_bank_interrupt_enabled(pipe) && (0==uhd_nb_busy_bank(pipe))) {
		uhd_disable_bank_interrupt(pipe);
80015694:	fe 69 06 20 	mov	r9,-129504
80015698:	f6 09 00 08 	add	r8,r11,r9
8001569c:	e0 69 10 00 	mov	r9,4096
800156a0:	91 09       	st.w	r8[0x0],r9
static void uhd_pipe_finish_job(uint8_t pipe, uhd_trans_status_t status)
{
	uhd_pipe_job_t *ptr_job;

	// Get job corresponding at endpoint
	ptr_job = &uhd_pipe_job[pipe - 1];
800156a2:	e0 68 07 70 	mov	r8,1904
800156a6:	f8 c9 00 01 	sub	r9,r12,1
800156aa:	f2 09 00 29 	add	r9,r9,r9<<0x2
800156ae:	f0 09 00 29 	add	r9,r8,r9<<0x2
	if (ptr_job->busy == false) {
800156b2:	72 08       	ld.w	r8,r9[0x0]
800156b4:	58 08       	cp.w	r8,0
800156b6:	fe 94 fd 3b 	brge	8001512c <otg_interrupt+0x18>
		return; // No job running
	}
	ptr_job->busy = false;
800156ba:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
800156be:	93 08       	st.w	r9[0x0],r8
	if (NULL == ptr_job->call_end) {
800156c0:	72 48       	ld.w	r8,r9[0x10]
800156c2:	58 08       	cp.w	r8,0
800156c4:	fe 90 fd 34 	breq	8001512c <otg_interrupt+0x18>
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
			uhd_get_pipe_endpoint_address(pipe),
800156c8:	e0 3b fb 00 	sub	r11,129792
800156cc:	76 0e       	ld.w	lr,r11[0x0]
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
800156ce:	ef dc c0 02 	bfextu	r7,r12,0x0,0x2
			uhd_get_pipe_endpoint_address(pipe),
800156d2:	76 06       	ld.w	r6,r11[0x0]
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_end) {
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
800156d4:	e2 1c 00 3c 	andl	r12,0x3c,COH
800156d8:	f7 de c2 04 	bfextu	r11,lr,0x10,0x4
800156dc:	ed d6 c1 02 	bfextu	r6,r6,0x8,0x2
800156e0:	e0 3c fb dc 	sub	r12,130012
800156e4:	e0 6e 00 80 	mov	lr,128
800156e8:	58 16       	cp.w	r6,1
800156ea:	f9 be 01 00 	movne	lr,0
800156ee:	a3 77       	lsl	r7,0x3
800156f0:	fd eb 10 0b 	or	r11,lr,r11
800156f4:	78 0e       	ld.w	lr,r12[0x0]
800156f6:	37 fc       	mov	r12,127
800156f8:	f8 07 09 4c 	lsl	r12,r12,r7
800156fc:	f9 ee 00 0e 	and	lr,r12,lr
80015700:	72 39       	ld.w	r9,r9[0xc]
80015702:	5c 9c       	brev	r12
80015704:	f8 0c 12 00 	clz	r12,r12
80015708:	fc 0c 0a 4c 	lsr	r12,lr,r12
8001570c:	5c 5c       	castu.b	r12
8001570e:	5d 18       	icall	r8
80015710:	fe 9f fd 0e 	bral	8001512c <otg_interrupt+0x18>
static void uhd_ctrl_phase_data_out(void)
{
	uint8_t *ptr_ep_data;
	uint8_t ep_ctrl_size;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_OUT;
80015714:	e0 60 3b 64 	mov	r0,15204
80015718:	30 14       	mov	r4,1
8001571a:	81 04       	st.w	r0[0x0],r4

	if (uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength) {
8001571c:	f5 3e 00 08 	ld.ub	lr,r10[8]
80015720:	e0 66 3b 6c 	mov	r6,15212
80015724:	15 f5       	ld.ub	r5,r10[0x7]
80015726:	fd e5 10 85 	or	r5,lr,r5<<0x8
8001572a:	8c 0e       	ld.sh	lr,r6[0x0]
8001572c:	5c 85       	casts.h	r5
8001572e:	fc 05 19 00 	cp.h	r5,lr
80015732:	e0 80 01 f3 	breq	80015b18 <otg_interrupt+0xa04>
		// End of DATA phase
		uhd_ctrl_phase_zlp_in();
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
80015736:	f5 08 00 10 	ld.sh	r8,r10[16]
8001573a:	f8 08 19 00 	cp.h	r8,r12
8001573e:	c1 81       	brne	8001576e <otg_interrupt+0x65a>
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
				|| !uhd_ctrl_request_first->callback_run(
80015740:	74 58       	ld.w	r8,r10[0x14]
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
80015742:	58 08       	cp.w	r8,0
80015744:	e0 80 01 17 	breq	80015972 <otg_interrupt+0x85e>
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
80015748:	fe 69 04 24 	mov	r9,-130012
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
8001574c:	f4 cb ff f4 	sub	r11,r10,-12
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
80015750:	72 0c       	ld.w	r12,r9[0x0]
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
80015752:	2f 0a       	sub	r10,-16
80015754:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80015758:	5d 18       	icall	r8
8001575a:	e0 80 01 0c 	breq	80015972 <otg_interrupt+0x85e>
8001575e:	6e 0a       	ld.w	r10,r7[0x0]
80015760:	8c 0e       	ld.sh	lr,r6[0x0]
80015762:	15 f5       	ld.ub	r5,r10[0x7]
80015764:	f5 38 00 08 	ld.ub	r8,r10[8]
80015768:	f1 e5 10 85 	or	r5,r8,r5<<0x8
8001576c:	5c 85       	casts.h	r5
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
8001576e:	fe 69 05 00 	mov	r9,-129792
80015772:	72 0c       	ld.w	r12,r9[0x0]
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
80015774:	72 08       	ld.w	r8,r9[0x0]
80015776:	e0 18 fc ff 	andl	r8,0xfcff
8001577a:	a9 b8       	sbr	r8,0x9
8001577c:	93 08       	st.w	r9[0x0],r8
	uhd_ack_out_ready(0);
8001577e:	fe 68 05 60 	mov	r8,-129696
80015782:	30 29       	mov	r9,2
80015784:	91 09       	st.w	r8[0x0],r9
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
80015786:	f1 dc c0 83 	bfextu	r8,r12,0x4,0x3

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
8001578a:	fc 05 19 00 	cp.h	r5,lr
8001578e:	5f bb       	srhi	r11
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
80015790:	30 8e       	mov	lr,8
80015792:	fc 08 09 4e 	lsl	lr,lr,r8

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
80015796:	30 08       	mov	r8,0
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
80015798:	5c 5e       	castu.b	lr

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
8001579a:	f0 0e 18 00 	cp.b	lr,r8
8001579e:	5f 19       	srne	r9
800157a0:	f7 e9 00 09 	and	r9,r11,r9
800157a4:	f0 09 18 00 	cp.b	r9,r8
800157a8:	c3 10       	breq	8001580a <otg_interrupt+0x6f6>
800157aa:	f5 08 00 10 	ld.sh	r8,r10[16]
800157ae:	30 0b       	mov	r11,0
800157b0:	f6 08 19 00 	cp.h	r8,r11
800157b4:	c2 b0       	breq	8001580a <otg_interrupt+0x6f6>
800157b6:	16 95       	mov	r5,r11
800157b8:	fc 19 e0 00 	movh	r9,0xe000
800157bc:	c0 68       	rjmp	800157c8 <otg_interrupt+0x6b4>
800157be:	f5 08 00 10 	ld.sh	r8,r10[16]
800157c2:	ea 08 19 00 	cp.h	r8,r5
800157c6:	c2 20       	breq	8001580a <otg_interrupt+0x6f6>
			&& ep_ctrl_size && uhd_ctrl_request_first->payload_size) {
		*ptr_ep_data++ = *uhd_ctrl_request_first->payload++;
800157c8:	74 38       	ld.w	r8,r10[0xc]
800157ca:	11 3c       	ld.ub	r12,r8++
800157cc:	12 cc       	st.b	r9++,r12
800157ce:	95 38       	st.w	r10[0xc],r8
		uhd_ctrl_nb_trans++;
800157d0:	8c 08       	ld.sh	r8,r6[0x0]
800157d2:	2f f8       	sub	r8,-1
800157d4:	ac 08       	st.h	r6[0x0],r8
		ep_ctrl_size--;
		uhd_ctrl_request_first->payload_size--;
800157d6:	6e 08       	ld.w	r8,r7[0x0]
800157d8:	f1 0a 00 10 	ld.sh	r10,r8[16]
800157dc:	20 1a       	sub	r10,1
800157de:	f1 5a 00 10 	st.h	r8[16],r10

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
800157e2:	fc 09 01 08 	sub	r8,lr,r9
800157e6:	6e 0a       	ld.w	r10,r7[0x0]
800157e8:	f6 08 18 00 	cp.b	r8,r11
800157ec:	5f 1c       	srne	r12
800157ee:	8c 04       	ld.sh	r4,r6[0x0]
800157f0:	15 f3       	ld.ub	r3,r10[0x7]
800157f2:	f5 38 00 08 	ld.ub	r8,r10[8]
800157f6:	f1 e3 10 88 	or	r8,r8,r3<<0x8
800157fa:	f0 04 19 00 	cp.h	r4,r8
800157fe:	5f 38       	srlo	r8
80015800:	f9 e8 00 08 	and	r8,r12,r8
80015804:	f6 08 18 00 	cp.b	r8,r11
80015808:	cd b1       	brne	800157be <otg_interrupt+0x6aa>
		*ptr_ep_data++ = *uhd_ctrl_request_first->payload++;
		uhd_ctrl_nb_trans++;
		ep_ctrl_size--;
		uhd_ctrl_request_first->payload_size--;
	}
	uhd_enable_out_ready_interrupt(0);
8001580a:	30 29       	mov	r9,2
8001580c:	fe 68 05 f0 	mov	r8,-129552
80015810:	91 09       	st.w	r8[0x0],r9
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_OUT;
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	uhd_enable_out_ready_interrupt(0);
	uhd_ack_fifocon(0);
80015812:	fe 68 06 20 	mov	r8,-129504
80015816:	e0 69 40 00 	mov	r9,16384
8001581a:	91 09       	st.w	r8[0x0],r9
	uhd_unfreeze_pipe(0);
8001581c:	e2 69 00 00 	mov	r9,131072
80015820:	91 09       	st.w	r8[0x0],r9
80015822:	fe 9f fc 85 	bral	8001512c <otg_interrupt+0x18>
		uhd_sleep_mode(UHD_STATE_IDLE);
		return;
	}

	// Manage Vbus state change
	if (Is_otg_vbus_transition()) {
80015826:	fe 69 08 04 	mov	r9,-129020
8001582a:	72 08       	ld.w	r8,r9[0x0]
8001582c:	ed b8 00 01 	bld	r8,0x1
80015830:	fe 91 fc 7e 	brne	8001512c <otg_interrupt+0x18>
		otg_ack_vbus_transition();
80015834:	30 2a       	mov	r10,2
80015836:	fe 68 08 08 	mov	r8,-129016
8001583a:	91 0a       	st.w	r8[0x0],r10
		if (Is_otg_vbus_high()) {
8001583c:	72 0c       	ld.w	r12,r9[0x0]
8001583e:	e2 1c 08 00 	andl	r12,0x800,COH
80015842:	e0 81 01 81 	brne	80015b44 <otg_interrupt+0xa30>
			uhd_sleep_mode(UHD_STATE_DISCONNECT);
			UHC_VBUS_CHANGE(true);
		} else {
			uhd_sleep_mode(UHD_STATE_NO_VBUS);
			otg_freeze_clock();
80015846:	fe 69 08 00 	mov	r9,-129024
8001584a:	72 08       	ld.w	r8,r9[0x0]
8001584c:	af a8       	sbr	r8,0xe
8001584e:	93 08       	st.w	r9[0x0],r8
			UHC_VBUS_CHANGE(false);
80015850:	e0 a0 1d a7 	rcall	8001939e <usb_vbus_change>
80015854:	fe 9f fc 6c 	bral	8001512c <otg_interrupt+0x18>
			Assert(false);
			break;
		}
		return;
	}
	if (Is_uhd_stall(0)) {
80015858:	72 08       	ld.w	r8,r9[0x0]
8001585a:	e2 18 00 40 	andl	r8,0x40,COH
8001585e:	e0 81 01 94 	brne	80015b86 <otg_interrupt+0xa72>
		// Stall Handshake received
		uhd_ack_stall(0);
		uhd_ctrl_request_end(UHD_TRANS_STALL);
		return;
	}
	if (Is_uhd_pipe_error(0)) {
80015862:	72 09       	ld.w	r9,r9[0x0]
80015864:	ed b9 00 03 	bld	r9,0x3
80015868:	fe 91 fc 62 	brne	8001512c <otg_interrupt+0x18>
 *
 * \return UHD transfer error
 */
static uhd_trans_status_t uhd_pipe_get_error(uint8_t pipe)
{
	uint32_t error = uhd_error_status(pipe) &
8001586c:	fe 69 06 80 	mov	r9,-129408
80015870:	72 0a       	ld.w	r10,r9[0x0]
			(AVR32_USBB_UPERR0_DATATGL_MASK |
			AVR32_USBB_UPERR0_TIMEOUT_MASK |
			AVR32_USBB_UPERR0_PID_MASK |
			AVR32_USBB_UPERR0_DATAPID_MASK);
	uhd_ack_all_errors(pipe);
80015872:	93 08       	st.w	r9[0x0],r8
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
			uhd_get_pipe_endpoint_address(pipe),
			status, ptr_job->nb_trans);
}
80015874:	f1 da c0 04 	bfextu	r8,r10,0x0,0x4
80015878:	20 18       	sub	r8,1
8001587a:	58 28       	cp.w	r8,2
8001587c:	e0 88 01 80 	brls	80015b7c <otg_interrupt+0xa68>
80015880:	30 6c       	mov	r12,6
80015882:	ce ca       	rjmp	8001565a <otg_interrupt+0x546>
	bool b_short_packet;
	uint8_t *ptr_ep_data;
	uint8_t nb_byte_received;

	// Get information to read data
	nb_byte_received = uhd_byte_count(0);
80015884:	fe 68 05 30 	mov	r8,-129744
80015888:	e0 67 3b 68 	mov	r7,15208
8001588c:	70 05       	ld.w	r5,r8[0x0]
	//! In HUB mode, the control pipe is always configured to 64B
	//! thus the short packet flag must be computed
	b_short_packet = (nb_byte_received != uhd_get_pipe_size(0));
	uhd_ack_short_packet(0);
#else
	b_short_packet = Is_uhd_short_packet(0);
8001588e:	fc 12 e0 00 	movh	r2,0xe000
80015892:	70 08       	ld.w	r8,r8[0x0]
	bool b_short_packet;
	uint8_t *ptr_ep_data;
	uint8_t nb_byte_received;

	// Get information to read data
	nb_byte_received = uhd_byte_count(0);
80015894:	eb d5 c2 88 	bfextu	r5,r5,0x14,0x8
	//! In HUB mode, the control pipe is always configured to 64B
	//! thus the short packet flag must be computed
	b_short_packet = (nb_byte_received != uhd_get_pipe_size(0));
	uhd_ack_short_packet(0);
#else
	b_short_packet = Is_uhd_short_packet(0);
80015898:	50 08       	stdsp	sp[0x0],r8
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
8001589a:	0e 91       	mov	r1,r7
8001589c:	30 06       	mov	r6,0
8001589e:	30 04       	mov	r4,0
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
		uhd_ctrl_nb_trans++;
800158a0:	e0 63 3b 6c 	mov	r3,15212
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
800158a4:	6e 0a       	ld.w	r10,r7[0x0]
800158a6:	ec 05 18 00 	cp.b	r5,r6
800158aa:	5f 18       	srne	r8
800158ac:	f5 09 00 10 	ld.sh	r9,r10[16]
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
		uhd_ctrl_nb_trans++;
		uhd_ctrl_request_first->payload_size--;
		nb_byte_received--;
800158b0:	ea ce 00 01 	sub	lr,r5,1
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
800158b4:	e8 09 19 00 	cp.h	r9,r4
800158b8:	5f 1c       	srne	r12
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
800158ba:	f4 cb ff f4 	sub	r11,r10,-12
#endif

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
800158be:	f1 ec 00 0c 	and	r12,r8,r12
800158c2:	ec 0c 18 00 	cp.b	r12,r6
800158c6:	c2 51       	brne	80015910 <otg_interrupt+0x7fc>
		uhd_ctrl_nb_trans++;
		uhd_ctrl_request_first->payload_size--;
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
800158c8:	e8 09 19 00 	cp.h	r9,r4
800158cc:	5f 09       	sreq	r9
800158ce:	12 68       	and	r8,r9
800158d0:	ec 08 18 00 	cp.b	r8,r6
800158d4:	e0 80 01 3d 	breq	80015b4e <otg_interrupt+0xa3a>
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
				|| !uhd_ctrl_request_first->callback_run(
800158d8:	74 58       	ld.w	r8,r10[0x14]
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
800158da:	58 08       	cp.w	r8,0
800158dc:	c0 90       	breq	800158ee <otg_interrupt+0x7da>
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
800158de:	fe 69 04 24 	mov	r9,-130012
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
800158e2:	2f 0a       	sub	r10,-16
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
800158e4:	72 0c       	ld.w	r12,r9[0x0]
		nb_byte_received--;
	}

	if (!uhd_ctrl_request_first->payload_size && nb_byte_received) {
		// payload buffer is full to store data remaining
		if (uhd_ctrl_request_first->callback_run == NULL
800158e6:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800158ea:	5d 18       	icall	r8
800158ec:	cd c1       	brne	800158a4 <otg_interrupt+0x790>
 * \internal
 * \brief Starts the ZLP OUT phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_out(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_OUT;
800158ee:	30 48       	mov	r8,4
800158f0:	81 08       	st.w	r0[0x0],r8
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
800158f2:	fe 69 05 00 	mov	r9,-129792
800158f6:	72 08       	ld.w	r8,r9[0x0]
800158f8:	e0 18 fc ff 	andl	r8,0xfcff
800158fc:	a9 b8       	sbr	r8,0x9
800158fe:	93 08       	st.w	r9[0x0],r8
	uhd_ack_out_ready(0);
80015900:	30 28       	mov	r8,2
80015902:	fe 69 05 60 	mov	r9,-129696
80015906:	93 08       	st.w	r9[0x0],r8
	uhd_enable_out_ready_interrupt(0);
80015908:	fe 69 05 f0 	mov	r9,-129552
8001590c:	93 08       	st.w	r9[0x0],r8
8001590e:	c8 2b       	rjmp	80015812 <otg_interrupt+0x6fe>

	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
80015910:	05 39       	ld.ub	r9,r2++
80015912:	74 38       	ld.w	r8,r10[0xc]
80015914:	10 c9       	st.b	r8++,r9
80015916:	95 38       	st.w	r10[0xc],r8
		uhd_ctrl_nb_trans++;
80015918:	86 08       	ld.sh	r8,r3[0x0]
8001591a:	2f f8       	sub	r8,-1
8001591c:	a6 08       	st.h	r3[0x0],r8
		uhd_ctrl_request_first->payload_size--;
		nb_byte_received--;
8001591e:	eb de c0 08 	bfextu	r5,lr,0x0,0x8
uhd_ctrl_receiv_in_read_data:
	// Copy data from pipe to payload buffer
	while (uhd_ctrl_request_first->payload_size && nb_byte_received) {
		*uhd_ctrl_request_first->payload++ = *ptr_ep_data++;
		uhd_ctrl_nb_trans++;
		uhd_ctrl_request_first->payload_size--;
80015922:	62 08       	ld.w	r8,r1[0x0]
80015924:	f1 09 00 10 	ld.sh	r9,r8[16]
80015928:	20 19       	sub	r9,1
8001592a:	f1 59 00 10 	st.h	r8[16],r9
8001592e:	cb bb       	rjmp	800158a4 <otg_interrupt+0x790>
 * \brief Starts the DATA IN phase on control endpoint
 */
static void uhd_ctrl_phase_data_in_start(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_IN;
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
80015930:	fe 6c 05 00 	mov	r12,-129792
80015934:	78 0a       	ld.w	r10,r12[0x0]
80015936:	e0 1a fc ff 	andl	r10,0xfcff
8001593a:	a9 aa       	sbr	r10,0x8
8001593c:	99 0a       	st.w	r12[0x0],r10
	uhd_ack_in_received(0);
8001593e:	30 1a       	mov	r10,1
80015940:	91 0a       	st.w	r8[0x0],r10
	uhd_ack_short_packet(0);
80015942:	e0 6c 00 80 	mov	r12,128
80015946:	91 0c       	st.w	r8[0x0],r12
	uhd_enable_in_received_interrupt(0);
80015948:	97 0a       	st.w	r11[0x0],r10
	uhd_ack_fifocon(0);
8001594a:	fe 68 06 20 	mov	r8,-129504
8001594e:	e0 6a 40 00 	mov	r10,16384
80015952:	91 0a       	st.w	r8[0x0],r10
	uhd_unfreeze_pipe(0);
80015954:	91 09       	st.w	r8[0x0],r9
 * \internal
 * \brief Starts the DATA IN phase on control endpoint
 */
static void uhd_ctrl_phase_data_in_start(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_IN;
80015956:	30 29       	mov	r9,2
80015958:	e0 68 3b 64 	mov	r8,15204
8001595c:	91 09       	st.w	r8[0x0],r9
8001595e:	fe 9f fb e7 	bral	8001512c <otg_interrupt+0x18>
		return;
	}

	// Manage Vbus error
	if (Is_uhd_vbus_error_interrupt()) {
		uhd_ack_vbus_error_interrupt();
80015962:	30 89       	mov	r9,8
80015964:	fe 68 08 08 	mov	r8,-129016
80015968:	91 09       	st.w	r8[0x0],r9
		UHC_VBUS_ERROR();
8001596a:	e0 a0 1d 1b 	rcall	800193a0 <usb_vbus_error>
8001596e:	fe 9f fb df 	bral	8001512c <otg_interrupt+0x18>
 * \internal
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
80015972:	30 38       	mov	r8,3
80015974:	81 08       	st.w	r0[0x0],r8
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
80015976:	fe 69 05 00 	mov	r9,-129792
8001597a:	72 08       	ld.w	r8,r9[0x0]
8001597c:	e0 18 fc ff 	andl	r8,0xfcff
80015980:	a9 a8       	sbr	r8,0x8
80015982:	93 08       	st.w	r9[0x0],r8
	uhd_ack_in_received(0);
80015984:	fe 69 05 60 	mov	r9,-129696
80015988:	30 18       	mov	r8,1
8001598a:	93 08       	st.w	r9[0x0],r8
	uhd_ack_short_packet(0);
8001598c:	e0 6a 00 80 	mov	r10,128
80015990:	93 0a       	st.w	r9[0x0],r10
	uhd_enable_in_received_interrupt(0);
80015992:	fe 69 05 f0 	mov	r9,-129552
80015996:	93 08       	st.w	r9[0x0],r8
80015998:	c3 db       	rjmp	80015812 <otg_interrupt+0x6fe>
static void uhd_ctrl_phase_data_out(void)
{
	uint8_t *ptr_ep_data;
	uint8_t ep_ctrl_size;

	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_DATA_OUT;
8001599a:	81 08       	st.w	r0[0x0],r8

	if (uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength) {
8001599c:	e0 67 3b 68 	mov	r7,15208
800159a0:	e0 66 3b 6c 	mov	r6,15212
800159a4:	6e 0a       	ld.w	r10,r7[0x0]
800159a6:	8c 0b       	ld.sh	r11,r6[0x0]
800159a8:	15 f3       	ld.ub	r3,r10[0x7]
800159aa:	f5 39 00 08 	ld.ub	r9,r10[8]
800159ae:	f3 e3 10 89 	or	r9,r9,r3<<0x8
800159b2:	5c 89       	casts.h	r9
800159b4:	f6 09 19 00 	cp.h	r9,r11
800159b8:	e0 80 00 f6 	breq	80015ba4 <otg_interrupt+0xa90>
		// End of DATA phase
		uhd_ctrl_phase_zlp_in();
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
800159bc:	f5 08 00 10 	ld.sh	r8,r10[16]
800159c0:	f8 08 19 00 	cp.h	r8,r12
800159c4:	c1 51       	brne	800159ee <otg_interrupt+0x8da>
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
				|| !uhd_ctrl_request_first->callback_run(
800159c6:	74 58       	ld.w	r8,r10[0x14]
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
800159c8:	58 08       	cp.w	r8,0
800159ca:	cd 40       	breq	80015972 <otg_interrupt+0x85e>
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
800159cc:	fe 69 04 24 	mov	r9,-130012
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
800159d0:	f4 cb ff f4 	sub	r11,r10,-12
				|| !uhd_ctrl_request_first->callback_run(
				uhd_get_configured_address(0),
800159d4:	72 0c       	ld.w	r12,r9[0x0]
		return;
	}

	if (!uhd_ctrl_request_first->payload_size) {
		// Buffer empty, then request a new buffer
		if (uhd_ctrl_request_first->callback_run==NULL
800159d6:	2f 0a       	sub	r10,-16
800159d8:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800159dc:	5d 18       	icall	r8
800159de:	cc a0       	breq	80015972 <otg_interrupt+0x85e>
800159e0:	6e 0a       	ld.w	r10,r7[0x0]
800159e2:	8c 0b       	ld.sh	r11,r6[0x0]
800159e4:	15 f9       	ld.ub	r9,r10[0x7]
800159e6:	f5 38 00 08 	ld.ub	r8,r10[8]
800159ea:	f1 e9 10 89 	or	r9,r8,r9<<0x8
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
800159ee:	fe 6c 05 00 	mov	r12,-129792
800159f2:	78 0e       	ld.w	lr,r12[0x0]
#endif

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
800159f4:	78 08       	ld.w	r8,r12[0x0]
800159f6:	e0 18 fc ff 	andl	r8,0xfcff
800159fa:	a9 b8       	sbr	r8,0x9
800159fc:	99 08       	st.w	r12[0x0],r8
	uhd_ack_out_ready(0);
800159fe:	fe 68 05 60 	mov	r8,-129696
80015a02:	30 2c       	mov	r12,2
80015a04:	91 0c       	st.w	r8[0x0],r12
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
80015a06:	f1 de c0 83 	bfextu	r8,lr,0x4,0x3

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
80015a0a:	f2 0b 19 00 	cp.h	r11,r9
80015a0e:	5f 3b       	srlo	r11
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
80015a10:	30 8c       	mov	r12,8
80015a12:	f8 08 09 4c 	lsl	r12,r12,r8

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
80015a16:	30 08       	mov	r8,0
	}

#ifdef USB_HOST_HUB_SUPPORT
	// TODO
#else
	ep_ctrl_size = uhd_get_pipe_size(0);
80015a18:	5c 5c       	castu.b	r12

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
80015a1a:	f0 0c 18 00 	cp.b	r12,r8
80015a1e:	5f 19       	srne	r9
80015a20:	f7 e9 00 09 	and	r9,r11,r9
80015a24:	f0 09 18 00 	cp.b	r9,r8
80015a28:	fe 90 fe f1 	breq	8001580a <otg_interrupt+0x6f6>
80015a2c:	f5 09 00 10 	ld.sh	r9,r10[16]
80015a30:	30 08       	mov	r8,0
80015a32:	f0 09 19 00 	cp.h	r9,r8
80015a36:	fe 90 fe ea 	breq	8001580a <otg_interrupt+0x6f6>
80015a3a:	10 9e       	mov	lr,r8
80015a3c:	fc 19 e0 00 	movh	r9,0xe000
80015a40:	c0 78       	rjmp	80015a4e <otg_interrupt+0x93a>
80015a42:	f5 0b 00 10 	ld.sh	r11,r10[16]
80015a46:	fc 0b 19 00 	cp.h	r11,lr
80015a4a:	fe 90 fe e0 	breq	8001580a <otg_interrupt+0x6f6>
			&& ep_ctrl_size && uhd_ctrl_request_first->payload_size) {
		*ptr_ep_data++ = *uhd_ctrl_request_first->payload++;
80015a4e:	74 3b       	ld.w	r11,r10[0xc]
80015a50:	17 35       	ld.ub	r5,r11++
80015a52:	12 c5       	st.b	r9++,r5
80015a54:	95 3b       	st.w	r10[0xc],r11
		uhd_ctrl_nb_trans++;
80015a56:	8c 0a       	ld.sh	r10,r6[0x0]
80015a58:	2f fa       	sub	r10,-1
80015a5a:	ac 0a       	st.h	r6[0x0],r10
		ep_ctrl_size--;
		uhd_ctrl_request_first->payload_size--;
80015a5c:	6e 0a       	ld.w	r10,r7[0x0]
80015a5e:	f5 0b 00 10 	ld.sh	r11,r10[16]
80015a62:	20 1b       	sub	r11,1
80015a64:	f5 5b 00 10 	st.h	r10[16],r11

	// Fill pipe
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_OUT);
	uhd_ack_out_ready(0);
	ptr_ep_data = (uint8_t *) & uhd_get_pipe_fifo_access(0, 8);
	while ((uhd_ctrl_nb_trans < uhd_ctrl_request_first->req.wLength)
80015a68:	f8 09 01 0a 	sub	r10,r12,r9
80015a6c:	8c 04       	ld.sh	r4,r6[0x0]
80015a6e:	f0 0a 18 00 	cp.b	r10,r8
80015a72:	5f 15       	srne	r5
80015a74:	6e 0a       	ld.w	r10,r7[0x0]
80015a76:	15 f3       	ld.ub	r3,r10[0x7]
80015a78:	f5 3b 00 08 	ld.ub	r11,r10[8]
80015a7c:	f7 e3 10 8b 	or	r11,r11,r3<<0x8
80015a80:	f6 04 19 00 	cp.h	r4,r11
80015a84:	5f 3b       	srlo	r11
80015a86:	eb eb 00 0b 	and	r11,r5,r11
80015a8a:	f0 0b 18 00 	cp.b	r11,r8
80015a8e:	cd a1       	brne	80015a42 <otg_interrupt+0x92e>
80015a90:	cb da       	rjmp	8001580a <otg_interrupt+0x6f6>
	// Manage the timeout on endpoint control transfer
	if (uhd_ctrl_request_timeout) {
		// Setup request on-going
		if (--uhd_ctrl_request_timeout == 0) {
			// Stop request
			uhd_freeze_pipe(0);
80015a92:	e2 69 00 00 	mov	r9,131072
80015a96:	fe 68 05 f0 	mov	r8,-129552
			uhd_ctrl_request_end(UHD_TRANS_TIMEOUT);
80015a9a:	30 7c       	mov	r12,7
	// Manage the timeout on endpoint control transfer
	if (uhd_ctrl_request_timeout) {
		// Setup request on-going
		if (--uhd_ctrl_request_timeout == 0) {
			// Stop request
			uhd_freeze_pipe(0);
80015a9c:	91 09       	st.w	r8[0x0],r9
			uhd_ctrl_request_end(UHD_TRANS_TIMEOUT);
80015a9e:	fe b0 f6 cd 	rcall	80014838 <uhd_ctrl_request_end>
80015aa2:	fe 9f fc f3 	bral	80015488 <otg_interrupt+0x374>
		return;
	}

	// Manage dis/connection event
	if (Is_uhd_disconnection() && Is_uhd_disconnection_int_enabled()) {
		uhd_ack_disconnection();
80015aa6:	30 2a       	mov	r10,2
80015aa8:	fe 6b 04 08 	mov	r11,-130040
80015aac:	97 0a       	st.w	r11[0x0],r10
		uhd_disable_disconnection_int();
80015aae:	fe 6b 04 14 	mov	r11,-130028
80015ab2:	97 0a       	st.w	r11[0x0],r10
		// Stop reset signal, in case of disconnection during reset
		uhd_stop_reset();
80015ab4:	fe 6b 04 00 	mov	r11,-130048
80015ab8:	76 0a       	ld.w	r10,r11[0x0]
80015aba:	a9 da       	cbr	r10,0x9
80015abc:	97 0a       	st.w	r11[0x0],r10
		// Disable wakeup/resumes interrupts,
		// in case of disconnection during suspend mode
		AVR32_USBB.uhinteclr = AVR32_USBB_UHINTECLR_HWUPIEC_MASK
80015abe:	35 8a       	mov	r10,88
80015ac0:	f3 4a 04 14 	st.w	r9[1044],r10
				| AVR32_USBB_UHINTECLR_RSMEDIEC_MASK
				| AVR32_USBB_UHINTECLR_RXRSMIEC_MASK;
		uhd_sleep_mode(UHD_STATE_DISCONNECT);
		uhd_enable_connection_int();
80015ac4:	fe 69 04 18 	mov	r9,-130024
80015ac8:	30 1a       	mov	r10,1
80015aca:	93 0a       	st.w	r9[0x0],r10
		uhd_suspend_start = 0;
80015acc:	e0 69 07 e8 	mov	r9,2024
		uhd_resume_start = 0;
80015ad0:	b2 88       	st.b	r9[0x0],r8
		uhc_notify_connection(false);
80015ad2:	e0 69 07 ea 	mov	r9,2026
80015ad6:	10 9c       	mov	r12,r8
80015ad8:	b2 88       	st.b	r9[0x0],r8
80015ada:	e0 a0 05 81 	rcall	800165dc <uhc_notify_connection>
		return;
	}
	if (Is_uhd_connection() && Is_uhd_connection_int_enabled()) {
		uhd_ack_connection();
80015ade:	fe 9f fb 27 	bral	8001512c <otg_interrupt+0x18>
80015ae2:	fe 68 04 08 	mov	r8,-130040
		uhd_disable_connection_int();
80015ae6:	30 1c       	mov	r12,1
80015ae8:	91 0c       	st.w	r8[0x0],r12
80015aea:	fe 68 04 14 	mov	r8,-130028
		uhd_enable_disconnection_int();
80015aee:	91 0c       	st.w	r8[0x0],r12
		uhd_enable_sof();
80015af0:	fe 68 04 18 	mov	r8,-130024
		return;
	}
	if (Is_uhd_connection() && Is_uhd_connection_int_enabled()) {
		uhd_ack_connection();
		uhd_disable_connection_int();
		uhd_enable_disconnection_int();
80015af4:	fe 6a 04 00 	mov	r10,-130048
		uhd_enable_sof();
80015af8:	30 29       	mov	r9,2
80015afa:	91 09       	st.w	r8[0x0],r9
80015afc:	74 08       	ld.w	r8,r10[0x0]
		uhd_sleep_mode(UHD_STATE_IDLE);
		uhd_suspend_start = 0;
80015afe:	a9 a8       	sbr	r8,0x8
80015b00:	95 08       	st.w	r10[0x0],r8
80015b02:	e0 68 07 e8 	mov	r8,2024
		uhd_resume_start = 0;
80015b06:	30 09       	mov	r9,0
		uhc_notify_connection(true);
80015b08:	b0 89       	st.b	r8[0x0],r9
80015b0a:	e0 68 07 ea 	mov	r8,2026
80015b0e:	b0 89       	st.b	r8[0x0],r9
 * \internal
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
80015b10:	e0 a0 05 66 	rcall	800165dc <uhc_notify_connection>
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
80015b14:	fe 9f fb 0c 	bral	8001512c <otg_interrupt+0x18>
80015b18:	30 3a       	mov	r10,3
80015b1a:	81 0a       	st.w	r0[0x0],r10
80015b1c:	fe 6c 05 00 	mov	r12,-129792
80015b20:	78 0a       	ld.w	r10,r12[0x0]
	uhd_ack_in_received(0);
80015b22:	e0 1a fc ff 	andl	r10,0xfcff
	uhd_ack_short_packet(0);
80015b26:	a9 aa       	sbr	r10,0x8
80015b28:	99 0a       	st.w	r12[0x0],r10
	uhd_enable_in_received_interrupt(0);
80015b2a:	91 04       	st.w	r8[0x0],r4
	uhd_ack_fifocon(0);
80015b2c:	e0 6a 00 80 	mov	r10,128
80015b30:	91 0a       	st.w	r8[0x0],r10
80015b32:	97 04       	st.w	r11[0x0],r4
80015b34:	fe 68 06 20 	mov	r8,-129504
	uhd_unfreeze_pipe(0);
80015b38:	e0 6a 40 00 	mov	r10,16384
	// Manage Vbus state change
	if (Is_otg_vbus_transition()) {
		otg_ack_vbus_transition();
		if (Is_otg_vbus_high()) {
			uhd_sleep_mode(UHD_STATE_DISCONNECT);
			UHC_VBUS_CHANGE(true);
80015b3c:	91 0a       	st.w	r8[0x0],r10
80015b3e:	91 09       	st.w	r8[0x0],r9
80015b40:	fe 9f fa f6 	bral	8001512c <otg_interrupt+0x18>
80015b44:	30 1c       	mov	r12,1
		// thus the data load can restart.
		goto uhd_ctrl_receiv_in_read_data;
	}

	// Test short packet
	if ((uhd_ctrl_nb_trans == uhd_ctrl_request_first->req.wLength)
80015b46:	e0 a0 1c 2c 	rcall	8001939e <usb_vbus_change>
80015b4a:	fe 9f fa f1 	bral	8001512c <otg_interrupt+0x18>
80015b4e:	15 f9       	ld.ub	r9,r10[0x7]
80015b50:	f5 38 00 08 	ld.ub	r8,r10[8]
80015b54:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80015b58:	e0 69 3b 6c 	mov	r9,15212
80015b5c:	92 09       	ld.sh	r9,r9[0x0]
80015b5e:	f0 09 19 00 	cp.h	r9,r8
80015b62:	fe 90 fe c6 	breq	800158ee <otg_interrupt+0x7da>
		uhd_ctrl_phase_zlp_out();
		return;
	}

	// Send a new IN packet request
	uhd_enable_in_received_interrupt(0);
80015b66:	40 08       	lddsp	r8,sp[0x0]
80015b68:	ed b8 00 07 	bld	r8,0x7
80015b6c:	fe 90 fe c1 	breq	800158ee <otg_interrupt+0x7da>
80015b70:	30 19       	mov	r9,1
		return; // No callback linked to job
	}
	ptr_job->call_end(uhd_get_configured_address(pipe),
			uhd_get_pipe_endpoint_address(pipe),
			status, ptr_job->nb_trans);
}
80015b72:	fe 68 05 f0 	mov	r8,-129552
80015b76:	91 09       	st.w	r8[0x0],r9
80015b78:	fe 9f fe 4d 	bral	80015812 <otg_interrupt+0x6fe>
		}
		return;
	}
	if (Is_uhd_stall(0)) {
		// Stall Handshake received
		uhd_ack_stall(0);
80015b7c:	4a 49       	lddpc	r9,80015c0c <otg_interrupt+0xaf8>
80015b7e:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		uhd_ctrl_request_end(UHD_TRANS_STALL);
80015b82:	fe 9f fd 6c 	bral	8001565a <otg_interrupt+0x546>
80015b86:	34 09       	mov	r9,64
80015b88:	fe 68 05 60 	mov	r8,-129696
80015b8c:	30 4c       	mov	r12,4
		if (ptr_job->busy == true) {
			if (ptr_job->timeout) {
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
					// Abort job
					uhd_ep_abort_pipe(pipe,UHD_TRANS_TIMEOUT);
80015b8e:	91 09       	st.w	r8[0x0],r9
80015b90:	fe b0 f6 54 	rcall	80014838 <uhd_ctrl_request_end>
80015b94:	fe 9f fa cc 	bral	8001512c <otg_interrupt+0x18>
80015b98:	30 7b       	mov	r11,7
 * \internal
 * \brief Starts the ZLP IN phase on control endpoint
 */
static void uhd_ctrl_phase_zlp_in(void)
{
	uhd_ctrl_request_phase = UHD_CTRL_REQ_PHASE_ZLP_IN;
80015b9a:	30 6c       	mov	r12,6
80015b9c:	fe b0 f7 c2 	rcall	80014b20 <uhd_ep_abort_pipe>
	uhd_configure_pipe_token(0, AVR32_USBB_PTOKEN_IN);
80015ba0:	fe 9f fc cc 	bral	80015538 <otg_interrupt+0x424>
80015ba4:	30 39       	mov	r9,3
80015ba6:	81 09       	st.w	r0[0x0],r9
80015ba8:	fe 6a 05 00 	mov	r10,-129792
	uhd_ack_in_received(0);
80015bac:	74 09       	ld.w	r9,r10[0x0]
	uhd_ack_short_packet(0);
80015bae:	e0 19 fc ff 	andl	r9,0xfcff
80015bb2:	a9 a9       	sbr	r9,0x8
	uhd_enable_in_received_interrupt(0);
80015bb4:	95 09       	st.w	r10[0x0],r9
	uhd_ack_fifocon(0);
80015bb6:	9d 08       	st.w	lr[0x0],r8
80015bb8:	e0 69 00 80 	mov	r9,128
80015bbc:	9d 09       	st.w	lr[0x0],r9
80015bbe:	89 08       	st.w	r4[0x0],r8
	uhd_unfreeze_pipe(0);
80015bc0:	e0 69 40 00 	mov	r9,16384
80015bc4:	fe 68 06 20 	mov	r8,-129504
		if (ptr_job->busy == true) {
			if (ptr_job->timeout) {
				// Timeout enabled on this job
				if (--ptr_job->timeout == 0) {
					// Abort job
					uhd_ep_abort_pipe(pipe,UHD_TRANS_TIMEOUT);
80015bc8:	91 09       	st.w	r8[0x0],r9
80015bca:	91 05       	st.w	r8[0x0],r5
80015bcc:	fe 9f fa b0 	bral	8001512c <otg_interrupt+0x18>
80015bd0:	30 7b       	mov	r11,7
80015bd2:	30 1c       	mov	r12,1
80015bd4:	fe b0 f7 a6 	rcall	80014b20 <uhd_ep_abort_pipe>
80015bd8:	fe 9f fc 65 	bral	800154a2 <otg_interrupt+0x38e>
80015bdc:	30 7b       	mov	r11,7
80015bde:	30 2c       	mov	r12,2
80015be0:	fe b0 f7 a0 	rcall	80014b20 <uhd_ep_abort_pipe>
80015be4:	fe 9f fc 6e 	bral	800154c0 <otg_interrupt+0x3ac>
80015be8:	30 7b       	mov	r11,7
80015bea:	30 3c       	mov	r12,3
80015bec:	fe b0 f7 9a 	rcall	80014b20 <uhd_ep_abort_pipe>
80015bf0:	fe 9f fc 77 	bral	800154de <otg_interrupt+0x3ca>
80015bf4:	30 7b       	mov	r11,7
80015bf6:	30 4c       	mov	r12,4
80015bf8:	fe b0 f7 94 	rcall	80014b20 <uhd_ep_abort_pipe>
80015bfc:	fe 9f fc 80 	bral	800154fc <otg_interrupt+0x3e8>
80015c00:	30 7b       	mov	r11,7
80015c02:	30 5c       	mov	r12,5
80015c04:	fe b0 f7 8e 	rcall	80014b20 <uhd_ep_abort_pipe>
80015c08:	fe 9f fc 89 	bral	8001551a <otg_interrupt+0x406>
80015c0c:	80 02       	ld.sh	r2,r0[0x0]
80015c0e:	1c 14       	sub	r4,lr

80015c10 <osc_enable>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80015c10:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80015c14:	d3 03       	ssrf	0x10
	irqflags_t flags;
	uint32_t   oscctrl;

	flags = cpu_irq_save();

	switch (id) {
80015c16:	58 0c       	cp.w	r12,0
80015c18:	c0 f0       	breq	80015c36 <osc_enable+0x26>
80015c1a:	30 29       	mov	r9,2
80015c1c:	f2 0c 18 00 	cp.b	r12,r9
80015c20:	c0 61       	brne	80015c2c <osc_enable+0x1c>
	case OSC_ID_OSC32:
		oscctrl = OSC32_STARTUP_VALUE
				<< AVR32_PM_OSCCTRL32_STARTUP_OFFSET;
		oscctrl |= OSC32_MODE_VALUE << AVR32_PM_OSCCTRL32_MODE_OFFSET;
		oscctrl |= 1 << AVR32_PM_OSCCTRL32_OSC32EN_OFFSET;
		AVR32_PM.oscctrl32 = oscctrl;
80015c22:	e2 6a 01 01 	mov	r10,131329
80015c26:	fe 79 0c 00 	mov	r9,-62464
80015c2a:	93 ca       	st.w	r9[0x30],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80015c2c:	ed b8 00 10 	bld	r8,0x10
80015c30:	c0 20       	breq	80015c34 <osc_enable+0x24>
      cpu_irq_enable();
80015c32:	d5 03       	csrf	0x10
		/* unhandled_case(id); */
		break;
	}

	cpu_irq_restore(flags);
}
80015c34:	5e fc       	retal	r12
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
80015c36:	fe 79 0c 00 	mov	r9,-62464
80015c3a:	e0 6a 03 07 	mov	r10,775
80015c3e:	93 aa       	st.w	r9[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
80015c40:	72 0a       	ld.w	r10,r9[0x0]
80015c42:	a3 aa       	sbr	r10,0x2
80015c44:	93 0a       	st.w	r9[0x0],r10
		break;
80015c46:	cf 3b       	rjmp	80015c2c <osc_enable+0x1c>

80015c48 <sysclk_priv_disable_module>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80015c48:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80015c4c:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80015c4e:	fe 79 0c 00 	mov	r9,-62464
80015c52:	73 58       	ld.w	r8,r9[0x54]
80015c54:	ed b8 00 06 	bld	r8,0x6
80015c58:	cf d1       	brne	80015c52 <sysclk_priv_disable_module+0xa>
		/* Do nothing */
	}

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80015c5a:	a3 6c       	lsl	r12,0x2
	mask &= ~(1U << module_index);
80015c5c:	30 18       	mov	r8,1
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80015c5e:	e0 2c f3 f8 	sub	r12,62456
	mask &= ~(1U << module_index);
80015c62:	f0 0b 09 48 	lsl	r8,r8,r11
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80015c66:	78 09       	ld.w	r9,r12[0x0]
	mask &= ~(1U << module_index);
80015c68:	5c d8       	com	r8
80015c6a:	12 68       	and	r8,r9
	*(&AVR32_PM.cpumask + bus_id) = mask;
80015c6c:	99 08       	st.w	r12[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80015c6e:	ed ba 00 10 	bld	r10,0x10
80015c72:	c0 20       	breq	80015c76 <sysclk_priv_disable_module+0x2e>
      cpu_irq_enable();
80015c74:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80015c76:	5e fc       	retal	r12

80015c78 <sysclk_priv_enable_module>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80015c78:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80015c7c:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80015c7e:	fe 79 0c 00 	mov	r9,-62464
80015c82:	73 58       	ld.w	r8,r9[0x54]
80015c84:	ed b8 00 06 	bld	r8,0x6
80015c88:	cf d1       	brne	80015c82 <sysclk_priv_enable_module+0xa>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
	mask |= 1U << module_index;
80015c8a:	30 18       	mov	r8,1
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80015c8c:	a3 6c       	lsl	r12,0x2
	mask |= 1U << module_index;
80015c8e:	f0 0b 09 4b 	lsl	r11,r8,r11
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80015c92:	e0 2c f3 f8 	sub	r12,62456
80015c96:	78 08       	ld.w	r8,r12[0x0]
	mask |= 1U << module_index;
80015c98:	10 4b       	or	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
80015c9a:	99 0b       	st.w	r12[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80015c9c:	ed ba 00 10 	bld	r10,0x10
80015ca0:	c0 20       	breq	80015ca4 <sysclk_priv_enable_module+0x2c>
      cpu_irq_enable();
80015ca2:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80015ca4:	5e fc       	retal	r12
80015ca6:	d7 03       	nop

80015ca8 <sysclk_disable_usb>:

/**
 * \brief Disable the USB generic clock
 */
void sysclk_disable_usb(void)
{
80015ca8:	eb cd 40 80 	pushm	r7,lr
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
}

static inline void genclk_disable(unsigned int id)
{
	AVR32_PM.gcctrl[id] = 0;
80015cac:	fe 79 0c 00 	mov	r9,-62464
80015cb0:	30 08       	mov	r8,0
80015cb2:	f3 48 00 70 	st.w	r9[112],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80015cb6:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80015cba:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80015cbc:	73 58       	ld.w	r8,r9[0x54]
80015cbe:	ed b8 00 06 	bld	r8,0x6
80015cc2:	cf d1       	brne	80015cbc <sysclk_disable_usb+0x14>
		/* Do nothing */
	}

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80015cc4:	fe 79 0c 0c 	mov	r9,-62452
80015cc8:	72 08       	ld.w	r8,r9[0x0]
	mask &= ~(1U << module_index);
80015cca:	a3 d8       	cbr	r8,0x3
	*(&AVR32_PM.cpumask + bus_id) = mask;
80015ccc:	93 08       	st.w	r9[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80015cce:	ed ba 00 10 	bld	r10,0x10
80015cd2:	c0 20       	breq	80015cd6 <sysclk_disable_usb+0x2e>
      cpu_irq_enable();
80015cd4:	d5 03       	csrf	0x10

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80015cd6:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80015cda:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80015cdc:	fe 79 0c 00 	mov	r9,-62464
80015ce0:	73 58       	ld.w	r8,r9[0x54]
80015ce2:	ed b8 00 06 	bld	r8,0x6
80015ce6:	cf d1       	brne	80015ce0 <sysclk_disable_usb+0x38>
		/* Do nothing */
	}

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80015ce8:	fe 79 0c 14 	mov	r9,-62444
80015cec:	72 08       	ld.w	r8,r9[0x0]
	mask &= ~(1U << module_index);
80015cee:	a1 d8       	cbr	r8,0x1
	*(&AVR32_PM.cpumask + bus_id) = mask;
80015cf0:	93 08       	st.w	r9[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80015cf2:	ed ba 00 10 	bld	r10,0x10
80015cf6:	c0 20       	breq	80015cfa <sysclk_disable_usb+0x52>
      cpu_irq_enable();
80015cf8:	d5 03       	csrf	0x10

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80015cfa:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80015cfe:	d3 03       	ssrf	0x10
	sysclk_priv_disable_module(AVR32_PM_CLK_GRP_PBB, index);

	/* Disable the bridge if possible */
	flags = cpu_irq_save();

	sysclk_pbb_refcount--;
80015d00:	e0 69 07 ec 	mov	r9,2028
80015d04:	13 88       	ld.ub	r8,r9[0x0]
80015d06:	20 18       	sub	r8,1
80015d08:	5c 58       	castu.b	r8
	if (!sysclk_pbb_refcount)
80015d0a:	b2 88       	st.b	r9[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80015d0c:	c0 70       	breq	80015d1a <sysclk_disable_usb+0x72>
80015d0e:	e6 17 00 01 	andh	r7,0x1,COH
      cpu_irq_enable();
80015d12:	c0 21       	brne	80015d16 <sysclk_disable_usb+0x6e>
void sysclk_disable_usb(void)
{
	genclk_disable(AVR32_PM_GCLK_USBB);
	sysclk_disable_hsb_module(SYSCLK_USBB_DATA);
	sysclk_disable_pbb_module(SYSCLK_USBB_REGS);
}
80015d14:	d5 03       	csrf	0x10
80015d16:	e3 cd 80 80 	ldm	sp++,r7,pc
 * \brief Disable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_disable_hsb_module(unsigned int index)
{
	sysclk_priv_disable_module(AVR32_PM_CLK_GRP_HSB, index);
80015d1a:	30 2b       	mov	r11,2
80015d1c:	30 1c       	mov	r12,1
80015d1e:	c9 5f       	rcall	80015c48 <sysclk_priv_disable_module>
80015d20:	cf 7b       	rjmp	80015d0e <sysclk_disable_usb+0x66>
80015d22:	d7 03       	nop

80015d24 <sysclk_enable_pbb_module>:
80015d24:	d4 01       	pushm	lr
80015d26:	e1 bb 00 00 	mfsr	r11,0x0
80015d2a:	d3 03       	ssrf	0x10
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (!sysclk_pbb_refcount)
80015d2c:	e0 69 07 ec 	mov	r9,2028
80015d30:	13 88       	ld.ub	r8,r9[0x0]
80015d32:	58 08       	cp.w	r8,0
		sysclk_enable_hsb_module(SYSCLK_PBB_BRIDGE);

	sysclk_pbb_refcount++;
80015d34:	c1 d0       	breq	80015d6e <sysclk_enable_pbb_module+0x4a>
80015d36:	2f f8       	sub	r8,-1
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80015d38:	b2 88       	st.b	r9[0x0],r8
80015d3a:	ed bb 00 10 	bld	r11,0x10
      cpu_irq_enable();
80015d3e:	c0 20       	breq	80015d42 <sysclk_enable_pbb_module+0x1e>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80015d40:	d5 03       	csrf	0x10
80015d42:	e1 ba 00 00 	mfsr	r10,0x0

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80015d46:	d3 03       	ssrf	0x10
80015d48:	fe 79 0c 00 	mov	r9,-62464
80015d4c:	73 58       	ld.w	r8,r9[0x54]
80015d4e:	ed b8 00 06 	bld	r8,0x6
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
	mask |= 1U << module_index;
80015d52:	cf d1       	brne	80015d4c <sysclk_enable_pbb_module+0x28>
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80015d54:	30 19       	mov	r9,1
80015d56:	fe 78 0c 14 	mov	r8,-62444
	mask |= 1U << module_index;
80015d5a:	f2 0c 09 4c 	lsl	r12,r9,r12
80015d5e:	70 09       	ld.w	r9,r8[0x0]
	*(&AVR32_PM.cpumask + bus_id) = mask;
80015d60:	12 4c       	or	r12,r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80015d62:	91 0c       	st.w	r8[0x0],r12
80015d64:	ed ba 00 10 	bld	r10,0x10
      cpu_irq_enable();
80015d68:	c0 20       	breq	80015d6c <sysclk_enable_pbb_module+0x48>

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
}
80015d6a:	d5 03       	csrf	0x10

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80015d6c:	d8 02       	popm	pc
80015d6e:	e1 be 00 00 	mfsr	lr,0x0

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80015d72:	d3 03       	ssrf	0x10
80015d74:	fe 7a 0c 00 	mov	r10,-62464
80015d78:	75 58       	ld.w	r8,r10[0x54]
80015d7a:	ed b8 00 06 	bld	r8,0x6
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80015d7e:	cf d1       	brne	80015d78 <sysclk_enable_pbb_module+0x54>
80015d80:	fe 7a 0c 0c 	mov	r10,-62452
	mask |= 1U << module_index;
80015d84:	74 08       	ld.w	r8,r10[0x0]
	*(&AVR32_PM.cpumask + bus_id) = mask;
80015d86:	a3 a8       	sbr	r8,0x2
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80015d88:	95 08       	st.w	r10[0x0],r8
80015d8a:	ed be 00 10 	bld	lr,0x10
      cpu_irq_enable();
   }

	barrier();
80015d8e:	c0 31       	brne	80015d94 <sysclk_enable_pbb_module+0x70>
80015d90:	13 88       	ld.ub	r8,r9[0x0]
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
80015d92:	cd 2b       	rjmp	80015d36 <sysclk_enable_pbb_module+0x12>
   }

	barrier();
80015d94:	d5 03       	csrf	0x10
80015d96:	13 88       	ld.ub	r8,r9[0x0]
80015d98:	cc fb       	rjmp	80015d36 <sysclk_enable_pbb_module+0x12>
80015d9a:	d7 03       	nop

80015d9c <sysclk_enable_usb>:
 * \pre The USB generic clock must be configured to 48MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
80015d9c:	eb cd 40 c0 	pushm	r6-r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80015da0:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80015da4:	d3 03       	ssrf	0x10
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (!sysclk_pbb_refcount)
80015da6:	e0 67 07 ec 	mov	r7,2028
80015daa:	0f 88       	ld.ub	r8,r7[0x0]
80015dac:	58 08       	cp.w	r8,0
		sysclk_enable_hsb_module(SYSCLK_PBB_BRIDGE);

	sysclk_pbb_refcount++;
80015dae:	c4 e0       	breq	80015e4a <sysclk_enable_usb+0xae>
80015db0:	2f f8       	sub	r8,-1
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80015db2:	ae 88       	st.b	r7[0x0],r8
80015db4:	e6 16 00 01 	andh	r6,0x1,COH
      cpu_irq_enable();
80015db8:	c0 21       	brne	80015dbc <sysclk_enable_usb+0x20>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80015dba:	d5 03       	csrf	0x10
80015dbc:	e1 ba 00 00 	mfsr	r10,0x0

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80015dc0:	d3 03       	ssrf	0x10
80015dc2:	fe 79 0c 00 	mov	r9,-62464
80015dc6:	73 58       	ld.w	r8,r9[0x54]
80015dc8:	ed b8 00 06 	bld	r8,0x6
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80015dcc:	cf d1       	brne	80015dc6 <sysclk_enable_usb+0x2a>
80015dce:	fe 79 0c 14 	mov	r9,-62444
	mask |= 1U << module_index;
80015dd2:	72 08       	ld.w	r8,r9[0x0]
	*(&AVR32_PM.cpumask + bus_id) = mask;
80015dd4:	a1 b8       	sbr	r8,0x1
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80015dd6:	93 08       	st.w	r9[0x0],r8
80015dd8:	ed ba 00 10 	bld	r10,0x10
      cpu_irq_enable();
80015ddc:	c0 20       	breq	80015de0 <sysclk_enable_usb+0x44>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80015dde:	d5 03       	csrf	0x10
80015de0:	e1 ba 00 00 	mfsr	r10,0x0

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80015de4:	d3 03       	ssrf	0x10
80015de6:	fe 79 0c 00 	mov	r9,-62464
80015dea:	73 58       	ld.w	r8,r9[0x54]
80015dec:	ed b8 00 06 	bld	r8,0x6
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80015df0:	cf d1       	brne	80015dea <sysclk_enable_usb+0x4e>
80015df2:	fe 79 0c 0c 	mov	r9,-62452
	mask |= 1U << module_index;
80015df6:	72 08       	ld.w	r8,r9[0x0]
	*(&AVR32_PM.cpumask + bus_id) = mask;
80015df8:	a3 b8       	sbr	r8,0x3
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80015dfa:	93 08       	st.w	r9[0x0],r8
80015dfc:	ed ba 00 10 	bld	r10,0x10
      cpu_irq_enable();
80015e00:	c0 20       	breq	80015e04 <sysclk_enable_usb+0x68>

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80015e02:	d5 03       	csrf	0x10
80015e04:	fe 77 0c 00 	mov	r7,-62464

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
80015e08:	6f 58       	ld.w	r8,r7[0x54]
80015e0a:	ed b8 00 01 	bld	r8,0x1
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
80015e0e:	c1 10       	breq	80015e30 <sysclk_enable_usb+0x94>

static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
80015e10:	6f 5c       	ld.w	r12,r7[0x54]
80015e12:	e2 1c 00 80 	andl	r12,0x80,COH
static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
80015e16:	c1 40       	breq	80015e3e <sysclk_enable_usb+0xa2>
80015e18:	fe 78 0c 00 	mov	r8,-62464
		vco_hz *= 2;
		pll_config_set_option(cfg, PLL_OPT_OUTPUT_DIV);
	}

	/* Set VCO frequency range according to calculated value */
	if (vco_hz < PLL_VCO_LOW_THRESHOLD)
80015e1c:	e0 6a 02 0d 	mov	r10,525
80015e20:	ea 1a 3f 0f 	orh	r10,0x3f0f
static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
80015e24:	10 99       	mov	r9,r8

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80015e26:	91 9a       	st.w	r8[0x24],r10
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
80015e28:	73 58       	ld.w	r8,r9[0x54]
80015e2a:	ed b8 00 01 	bld	r8,0x1
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
80015e2e:	cf d1       	brne	80015e28 <sysclk_enable_usb+0x8c>
80015e30:	30 79       	mov	r9,7
80015e32:	fe 78 0c 00 	mov	r8,-62464
80015e36:	f1 49 00 70 	st.w	r8[112],r9
void sysclk_enable_usb(void)
{
	sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
	sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
	genclk_enable_config(AVR32_PM_GCLK_USBB, CONFIG_USBCLK_SOURCE, CONFIG_USBCLK_DIV);
}
80015e3a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
			osc_enable(OSC_ID_OSC0);
80015e3e:	ce 9e       	rcall	80015c10 <osc_enable>
80015e40:	6f 58       	ld.w	r8,r7[0x54]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
80015e42:	ed b8 00 07 	bld	r8,0x7
80015e46:	cf d1       	brne	80015e40 <sysclk_enable_usb+0xa4>
80015e48:	ce 8b       	rjmp	80015e18 <sysclk_enable_usb+0x7c>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80015e4a:	30 2b       	mov	r11,2
80015e4c:	30 1c       	mov	r12,1
80015e4e:	c1 5f       	rcall	80015c78 <sysclk_priv_enable_module>
80015e50:	0f 88       	ld.ub	r8,r7[0x0]
80015e52:	ca fb       	rjmp	80015db0 <sysclk_enable_usb+0x14>

80015e54 <sysclk_init>:
80015e54:	eb cd 40 80 	pushm	r7,lr
80015e58:	fe 77 0c 00 	mov	r7,-62464
80015e5c:	6f 58       	ld.w	r8,r7[0x54]
80015e5e:	ed b8 00 00 	bld	r8,0x0
80015e62:	c1 10       	breq	80015e84 <sysclk_init+0x30>
80015e64:	6f 5c       	ld.w	r12,r7[0x54]

static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
80015e66:	e2 1c 00 80 	andl	r12,0x80,COH
80015e6a:	c2 c0       	breq	80015ec2 <sysclk_init+0x6e>
static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
80015e6c:	fe 78 0c 00 	mov	r8,-62464
		vco_hz *= 2;
		pll_config_set_option(cfg, PLL_OPT_OUTPUT_DIV);
	}

	/* Set VCO frequency range according to calculated value */
	if (vco_hz < PLL_VCO_LOW_THRESHOLD)
80015e70:	e0 6a 02 05 	mov	r10,517
80015e74:	ea 1a 3f 0a 	orh	r10,0x3f0a

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80015e78:	10 99       	mov	r9,r8
static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
80015e7a:	91 8a       	st.w	r8[0x20],r10

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80015e7c:	73 58       	ld.w	r8,r9[0x54]
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
80015e7e:	ed b8 00 00 	bld	r8,0x0
80015e82:	cf d1       	brne	80015e7c <sysclk_init+0x28>

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
80015e84:	e0 6c 14 80 	mov	r12,5248
80015e88:	ea 1c 03 ef 	orh	r12,0x3ef
80015e8c:	fe b0 e1 17 	rcall	800120ba <flashc_set_bus_freq>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80015e90:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80015e94:	d3 03       	ssrf	0x10
	uint32_t   mcctrl;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
80015e96:	fe 7a 0c 00 	mov	r10,-62464
80015e9a:	74 08       	ld.w	r8,r10[0x0]
80015e9c:	e0 18 ff fc 	andl	r8,0xfffc
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
80015ea0:	a1 b8       	sbr	r8,0x1
	AVR32_PM.mcctrl = mcctrl;
80015ea2:	95 08       	st.w	r10[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80015ea4:	ed b9 00 10 	bld	r9,0x10
80015ea8:	c0 20       	breq	80015eac <sysclk_init+0x58>
      cpu_irq_enable();
80015eaa:	d5 03       	csrf	0x10
	/* If the user has specified clock masks, enable only requested clocks */
#if defined(CONFIG_SYSCLK_INIT_CPUMASK)
	AVR32_PM.cpumask = SYSCLK_INIT_MINIMAL_CPUMASK | CONFIG_SYSCLK_INIT_CPUMASK;
#endif
#if defined(CONFIG_SYSCLK_INIT_PBAMASK)
	AVR32_PM.pbamask = SYSCLK_INIT_MINIMAL_PBAMASK | CONFIG_SYSCLK_INIT_PBAMASK;
80015eac:	fe 78 0c 00 	mov	r8,-62464
80015eb0:	e0 69 43 6f 	mov	r9,17263
80015eb4:	91 49       	st.w	r8[0x10],r9
#endif
#if defined(CONFIG_SYSCLK_INIT_PBBMASK)
	AVR32_PM.pbbmask = SYSCLK_INIT_MINIMAL_PBBMASK | CONFIG_SYSCLK_INIT_PBBMASK;
80015eb6:	31 59       	mov	r9,21
80015eb8:	91 59       	st.w	r8[0x14],r9
#endif
#if defined(CONFIG_SYSCLK_INIT_HSBMASK)
	AVR32_PM.hsbmask = SYSCLK_INIT_MINIMAL_HSBMASK | CONFIG_SYSCLK_INIT_HSBMASK;
80015eba:	36 39       	mov	r9,99
80015ebc:	91 39       	st.w	r8[0xc],r9

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80015ebe:	e3 cd 80 80 	ldm	sp++,r7,pc
static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
			osc_enable(OSC_ID_OSC0);
80015ec2:	ca 7e       	rcall	80015c10 <osc_enable>
80015ec4:	6f 58       	ld.w	r8,r7[0x54]
80015ec6:	ed b8 00 07 	bld	r8,0x7
80015eca:	cf d1       	brne	80015ec4 <sysclk_init+0x70>
80015ecc:	cd 0b       	rjmp	80015e6c <sysclk_init+0x18>
80015ece:	d7 03       	nop

80015ed0 <uhc_enumeration_step2>:
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
80015ed0:	fe c9 ff 70 	sub	r9,pc,-144
80015ed4:	e0 68 08 10 	mov	r8,2064
	uhc_sof_timeout = timeout;
80015ed8:	91 09       	st.w	r8[0x0],r9
80015eda:	31 49       	mov	r9,20
 * Lets USB line in IDLE state during 20ms.
 */
static void uhc_enumeration_step2(void)
{
	uhc_enable_timeout_callback(20, uhc_enumeration_step3);
}
80015edc:	e0 68 3b 76 	mov	r8,15222
80015ee0:	b0 89       	st.b	r8[0x0],r9
80015ee2:	5e fc       	retal	r12

80015ee4 <uhc_enumeration_step8>:
80015ee4:	fe c9 fe 44 	sub	r9,pc,-444
80015ee8:	e0 68 08 10 	mov	r8,2064
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
	uhc_sof_timeout = timeout;
80015eec:	91 09       	st.w	r8[0x0],r9
80015eee:	36 49       	mov	r9,100
 */
static void uhc_enumeration_step8(void)
{
	// Wait 100ms
	uhc_enable_timeout_callback(100, uhc_enumeration_step9);
}
80015ef0:	e0 68 3b 76 	mov	r8,15222
80015ef4:	b0 89       	st.b	r8[0x0],r9
80015ef6:	5e fc       	retal	r12

80015ef8 <uhc_notify_sof>:
80015ef8:	eb cd 40 c0 	pushm	r6-r7,lr
80015efc:	48 f7       	lddpc	r7,80015f38 <uhc_notify_sof+0x40>
80015efe:	18 96       	mov	r6,r12

void uhc_notify_sof(bool b_micro)
{
	// Call all UHIs
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
		if (uhc_uhis[i].sof_notify != NULL) {
80015f00:	6e 38       	ld.w	r8,r7[0xc]
80015f02:	58 08       	cp.w	r8,0
80015f04:	c0 20       	breq	80015f08 <uhc_notify_sof+0x10>
			uhc_uhis[i].sof_notify(b_micro);
80015f06:	5d 18       	icall	r8

void uhc_notify_sof(bool b_micro)
{
	// Call all UHIs
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
		if (uhc_uhis[i].sof_notify != NULL) {
80015f08:	6e 78       	ld.w	r8,r7[0x1c]
80015f0a:	58 08       	cp.w	r8,0
80015f0c:	c0 30       	breq	80015f12 <uhc_notify_sof+0x1a>
			uhc_uhis[i].sof_notify(b_micro);
80015f0e:	0c 9c       	mov	r12,r6
80015f10:	5d 18       	icall	r8
		}
	}

	if (!b_micro) {
80015f12:	58 06       	cp.w	r6,0
80015f14:	c0 a1       	brne	80015f28 <uhc_notify_sof+0x30>
		// Manage SOF timeout
		if (uhc_sof_timeout) {
80015f16:	e0 68 3b 76 	mov	r8,15222
80015f1a:	11 89       	ld.ub	r9,r8[0x0]
80015f1c:	58 09       	cp.w	r9,0
			if (--uhc_sof_timeout == 0) {
80015f1e:	c0 50       	breq	80015f28 <uhc_notify_sof+0x30>
80015f20:	20 19       	sub	r9,1
80015f22:	5c 59       	castu.b	r9
80015f24:	b0 89       	st.b	r8[0x0],r9
80015f26:	c0 30       	breq	80015f2c <uhc_notify_sof+0x34>
80015f28:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
				uhc_sof_timeout_callback();
80015f2c:	e0 68 08 10 	mov	r8,2064
80015f30:	70 08       	ld.w	r8,r8[0x0]
80015f32:	5d 18       	icall	r8
80015f34:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015f38:	80 02       	ld.sh	r2,r0[0x0]
80015f3a:	1f 34       	ld.ub	r4,pc++

80015f3c <uhc_stop>:
80015f3c:	d4 01       	pushm	lr
80015f3e:	fe b0 f4 27 	rcall	8001478c <uhd_disable>

void uhc_stop(bool b_id_stop)
{
	// Stop UHD
	uhd_disable(b_id_stop);
}
80015f42:	d8 02       	popm	pc

80015f44 <uhc_start>:
80015f44:	d4 01       	pushm	lr
80015f46:	3f f9       	mov	r9,-1
 *
 * @{
 */
void uhc_start(void)
{
	g_uhc_device_root.address = UHC_USB_ADD_NOT_VALID;
80015f48:	e0 68 07 f0 	mov	r8,2032
80015f4c:	f1 69 00 12 	st.b	r8[18],r9
	uhc_sof_timeout = 0; // No callback registered on a SOF timeout
80015f50:	30 09       	mov	r9,0
80015f52:	e0 68 3b 76 	mov	r8,15222
	uhd_enable();
80015f56:	b0 89       	st.b	r8[0x0],r9
}
80015f58:	fe b0 f3 b6 	rcall	800146c4 <uhd_enable>
80015f5c:	d8 02       	popm	pc
80015f5e:	d7 03       	nop

80015f60 <uhc_enumeration_step3>:
80015f60:	d4 01       	pushm	lr
80015f62:	fe cc ff ea 	sub	r12,pc,-22
80015f66:	fe b0 f1 ed 	rcall	80014340 <uhd_send_reset>
 * Reset USB line.
 */
static void uhc_enumeration_step3(void)
{
	uhc_enumeration_reset(uhc_enumeration_step4);
}
80015f6a:	d8 02       	popm	pc

80015f6c <uhc_enumeration_step7>:
80015f6c:	d4 01       	pushm	lr
80015f6e:	fe cc 00 8a 	sub	r12,pc,138
80015f72:	fe b0 f1 e7 	rcall	80014340 <uhd_send_reset>
 * Reset USB line.
 */
static void uhc_enumeration_step7(void)
{
	uhc_enumeration_reset(uhc_enumeration_step8);
}
80015f76:	d8 02       	popm	pc

80015f78 <uhc_enumeration_step4>:
80015f78:	d4 01       	pushm	lr
80015f7a:	fe b0 f1 d5 	rcall	80014324 <uhd_get_speed>
80015f7e:	e0 68 07 f0 	mov	r8,2032
 * \brief Device enumeration step 4
 * Lets USB line in IDLE state during 100ms.
 */
static void uhc_enumeration_step4(void)
{
	uhc_dev_enum->speed = uhd_get_speed();
80015f82:	fe c9 ff 82 	sub	r9,pc,-126
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
80015f86:	91 5c       	st.w	r8[0x14],r12
	uhc_sof_timeout = timeout;
80015f88:	e0 68 08 10 	mov	r8,2064
80015f8c:	91 09       	st.w	r8[0x0],r9
 */
static void uhc_enumeration_step4(void)
{
	uhc_dev_enum->speed = uhd_get_speed();
	uhc_enable_timeout_callback(100, uhc_enumeration_step5);
}
80015f8e:	36 49       	mov	r9,100
80015f90:	e0 68 3b 76 	mov	r8,15222
80015f94:	b0 89       	st.b	r8[0x0],r9
80015f96:	d8 02       	popm	pc

80015f98 <uhc_enumeration_error>:
80015f98:	d4 21       	pushm	r4-r7,lr
80015f9a:	18 96       	mov	r6,r12
80015f9c:	58 7c       	cp.w	r12,7
80015f9e:	c2 c0       	breq	80015ff6 <uhc_enumeration_error+0x5e>
80015fa0:	e0 67 07 f0 	mov	r7,2032
{
	if (status == UHC_ENUM_DISCONNECT) {
		uhc_enum_try = 0;
		return; // Abort enumeration process
	}
	uhd_ep_free(uhc_dev_enum->address, 0xFF);
80015fa4:	e0 6b 00 ff 	mov	r11,255
80015fa8:	ef 3c 00 12 	ld.ub	r12,r7[18]
80015fac:	fe b0 f6 20 	rcall	80014bec <uhd_ep_free>

	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
80015fb0:	6e 6c       	ld.w	r12,r7[0x18]
80015fb2:	58 0c       	cp.w	r12,0
		free(uhc_dev_enum->conf_desc);
80015fb4:	c0 50       	breq	80015fbe <uhc_enumeration_error+0x26>
80015fb6:	e0 a0 56 e5 	rcall	80020d80 <free>
		uhc_dev_enum->conf_desc = NULL;
80015fba:	30 08       	mov	r8,0
	}
	uhc_dev_enum->address = 0;
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80015fbc:	8f 68       	st.w	r7[0x18],r8
	// Free USB configuration descriptor buffer
	if (uhc_dev_enum->conf_desc != NULL) {
		free(uhc_dev_enum->conf_desc);
		uhc_dev_enum->conf_desc = NULL;
	}
	uhc_dev_enum->address = 0;
80015fbe:	e0 65 08 0c 	mov	r5,2060
80015fc2:	30 04       	mov	r4,0
80015fc4:	0b 88       	ld.ub	r8,r5[0x0]
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
80015fc6:	ef 64 00 12 	st.b	r7[18],r4
80015fca:	f0 c9 ff ff 	sub	r9,r8,-1
80015fce:	aa 89       	st.b	r5[0x0],r9
80015fd0:	30 39       	mov	r9,3
80015fd2:	f2 08 18 00 	cp.b	r8,r9
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
80015fd6:	e0 88 00 0b 	brls	80015fec <uhc_enumeration_error+0x54>
		uhc_enumeration_step1();
		return;
	}
	// Abort enumeration, set line in suspend mode
	uhc_enumeration_suspend();
	UHC_ENUM_EVENT(uhc_dev_enum, status);
80015fda:	fe b0 f1 bd 	rcall	80014354 <uhd_suspend>
80015fde:	0c 9b       	mov	r11,r6
80015fe0:	e0 6c 07 f0 	mov	r12,2032
	uhc_enum_try = 0;
80015fe4:	e0 a0 19 e2 	rcall	800193a8 <usb_enum>
		// Device connected on USB hub
		uhi_hub_send_reset(uhc_dev_enum, callback);
	} else
#endif
	{
		uhd_send_reset(callback);
80015fe8:	aa 84       	st.b	r5[0x0],r4
80015fea:	d8 22       	popm	r4-r7,pc
	}
	uhc_dev_enum->address = 0;
	if (uhc_enum_try++ < UHC_ENUM_NB_TRY) {
		// Restart enumeration at beginning
		uhc_enumeration_step1();
		return;
80015fec:	fe cc 01 1c 	sub	r12,pc,284
 * \param status        Enumeration error occurred
 */
static void uhc_enumeration_error(uhc_enum_status_t status)
{
	if (status == UHC_ENUM_DISCONNECT) {
		uhc_enum_try = 0;
80015ff0:	fe b0 f1 a8 	rcall	80014340 <uhd_send_reset>
		return; // Abort enumeration process
80015ff4:	d8 22       	popm	r4-r7,pc
80015ff6:	30 09       	mov	r9,0
80015ff8:	e0 68 08 0c 	mov	r8,2060
80015ffc:	b0 89       	st.b	r8[0x0],r9
80015ffe:	d8 22       	popm	r4-r7,pc

80016000 <uhc_enumeration_step5>:
80016000:	d4 01       	pushm	lr
80016002:	20 2d       	sub	sp,8
80016004:	38 08       	mov	r8,-128
80016006:	ba 88       	st.b	sp[0x0],r8
80016008:	30 68       	mov	r8,6
8001600a:	ba 98       	st.b	sp[0x1],r8
8001600c:	e0 68 01 00 	mov	r8,256
80016010:	ba 18       	st.h	sp[0x2],r8
80016012:	30 08       	mov	r8,0
80016014:	ba 28       	st.h	sp[0x4],r8
80016016:	30 88       	mov	r8,8
	req.wValue = (USB_DT_DEVICE << 8);
	req.wIndex = 0;
	req.wLength = offsetof(uhc_device_t, dev_desc.bMaxPacketSize0)
			+ sizeof(uhc_dev_enum->dev_desc.bMaxPacketSize0);

	if (!uhd_ep0_alloc(0, 64)) {
80016018:	34 0b       	mov	r11,64

	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_DEVICE << 8);
	req.wIndex = 0;
	req.wLength = offsetof(uhc_device_t, dev_desc.bMaxPacketSize0)
8001601a:	ba 38       	st.h	sp[0x6],r8
			+ sizeof(uhc_dev_enum->dev_desc.bMaxPacketSize0);

	if (!uhd_ep0_alloc(0, 64)) {
8001601c:	30 0c       	mov	r12,0
8001601e:	fe b0 f2 c8 	rcall	800145ae <uhd_ep0_alloc>
80016022:	c1 60       	breq	8001604e <uhc_enumeration_step5+0x4e>
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
		return;
	}
	if (!uhd_setup_request(0,
80016024:	fe c9 ff cc 	sub	r9,pc,-52
80016028:	30 08       	mov	r8,0
8001602a:	1a d9       	st.w	--sp,r9
8001602c:	e0 6a 07 f0 	mov	r10,2032
80016030:	fa cb ff fc 	sub	r11,sp,-4
80016034:	31 29       	mov	r9,18
80016036:	10 9c       	mov	r12,r8
80016038:	fe b0 f4 de 	rcall	800149f4 <uhd_setup_request>
8001603c:	2f fd       	sub	sp,-4
			NULL,
			uhc_enumeration_step6)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
}
8001603e:	58 0c       	cp.w	r12,0
80016040:	c0 30       	breq	80016046 <uhc_enumeration_step5+0x46>
			&req,
			(uint8_t*)&uhc_dev_enum->dev_desc,
			sizeof(usb_dev_desc_t),
			NULL,
			uhc_enumeration_step6)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
80016042:	2f ed       	sub	sp,-8
80016044:	d8 02       	popm	pc
80016046:	30 6c       	mov	r12,6
		return;
	}
}
80016048:	ca 8f       	rcall	80015f98 <uhc_enumeration_error>
8001604a:	2f ed       	sub	sp,-8
	req.wIndex = 0;
	req.wLength = offsetof(uhc_device_t, dev_desc.bMaxPacketSize0)
			+ sizeof(uhc_dev_enum->dev_desc.bMaxPacketSize0);

	if (!uhd_ep0_alloc(0, 64)) {
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
8001604c:	d8 02       	popm	pc
8001604e:	30 4c       	mov	r12,4
80016050:	ca 4f       	rcall	80015f98 <uhc_enumeration_error>
			NULL,
			uhc_enumeration_step6)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
}
80016052:	2f ed       	sub	sp,-8
80016054:	d8 02       	popm	pc
80016056:	d7 03       	nop

80016058 <uhc_enumeration_step6>:
80016058:	d4 01       	pushm	lr
8001605a:	30 79       	mov	r9,7
8001605c:	58 0b       	cp.w	r11,0
8001605e:	5f 18       	srne	r8
80016060:	f2 0a 19 00 	cp.h	r10,r9
80016064:	5f 89       	srls	r9
80016066:	f3 e8 10 08 	or	r8,r9,r8
8001606a:	c0 b1       	brne	80016080 <uhc_enumeration_step6+0x28>
		usb_add_t add,
		uhd_trans_status_t status,
		uint16_t payload_trans)
{
	UNUSED(add);
	if ((status != UHD_TRANS_NOERROR) || (payload_trans < 8)
8001606c:	e0 68 07 f0 	mov	r8,2032
80016070:	11 99       	ld.ub	r9,r8[0x1]
80016072:	30 18       	mov	r8,1
80016074:	f0 09 18 00 	cp.b	r9,r8
			|| (uhc_dev_enum->dev_desc.bDescriptorType != USB_DT_DEVICE)) {
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
80016078:	c0 90       	breq	8001608a <uhc_enumeration_step6+0x32>
8001607a:	30 3c       	mov	r12,3
8001607c:	c8 ef       	rcall	80015f98 <uhc_enumeration_error>
				UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
		return;
8001607e:	d8 02       	popm	pc
		uint16_t payload_trans)
{
	UNUSED(add);
	if ((status != UHD_TRANS_NOERROR) || (payload_trans < 8)
			|| (uhc_dev_enum->dev_desc.bDescriptorType != USB_DT_DEVICE)) {
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
80016080:	58 1b       	cp.w	r11,1
80016082:	cf c1       	brne	8001607a <uhc_enumeration_step6+0x22>
80016084:	30 7c       	mov	r12,7
80016086:	c8 9f       	rcall	80015f98 <uhc_enumeration_error>
80016088:	d8 02       	popm	pc
				UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
		return;
8001608a:	fe c9 01 1e 	sub	r9,pc,286
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
8001608e:	e0 68 08 10 	mov	r8,2064
	uhc_sof_timeout = timeout;
80016092:	91 09       	st.w	r8[0x0],r9
80016094:	31 49       	mov	r9,20
80016096:	e0 68 3b 76 	mov	r8,15222
8001609a:	b0 89       	st.b	r8[0x0],r9
8001609c:	d8 02       	popm	pc
8001609e:	d7 03       	nop

800160a0 <uhc_enumeration_step9>:
800160a0:	eb cd 40 80 	pushm	r7,lr
800160a4:	20 2d       	sub	sp,8
800160a6:	30 18       	mov	r8,1
800160a8:	e0 67 07 f0 	mov	r7,2032
800160ac:	ba 18       	st.h	sp[0x2],r8
800160ae:	ef 68 00 12 	st.b	r7[18],r8
#else
	req.wValue = UHC_DEVICE_ENUM_ADD;
	uhc_dev_enum->address = UHC_DEVICE_ENUM_ADD;
#endif
	req.wIndex = 0;
	req.wLength = 0;
800160b2:	30 08       	mov	r8,0
	uhc_dev_enum->address = usb_addr_free;
#else
	req.wValue = UHC_DEVICE_ENUM_ADD;
	uhc_dev_enum->address = UHC_DEVICE_ENUM_ADD;
#endif
	req.wIndex = 0;
800160b4:	ba 38       	st.h	sp[0x6],r8
 */
static void uhc_enumeration_step9(void)
{
	usb_setup_req_t req;

	req.bmRequestType = USB_REQ_RECIP_DEVICE
800160b6:	ba 28       	st.h	sp[0x4],r8
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_ADDRESS;
800160b8:	ba 88       	st.b	sp[0x0],r8
#endif
	req.wIndex = 0;
	req.wLength = 0;

	// After a USB reset, the reallocation is required
	uhd_ep_free(0, 0);
800160ba:	30 58       	mov	r8,5
{
	usb_setup_req_t req;

	req.bmRequestType = USB_REQ_RECIP_DEVICE
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_ADDRESS;
800160bc:	30 0b       	mov	r11,0
#endif
	req.wIndex = 0;
	req.wLength = 0;

	// After a USB reset, the reallocation is required
	uhd_ep_free(0, 0);
800160be:	ba 98       	st.b	sp[0x1],r8
800160c0:	16 9c       	mov	r12,r11
800160c2:	fe b0 f5 95 	rcall	80014bec <uhd_ep_free>
	if (!uhd_ep0_alloc(0, uhc_dev_enum->dev_desc.bMaxPacketSize0)) {
800160c6:	0f fb       	ld.ub	r11,r7[0x7]
800160c8:	30 0c       	mov	r12,0
800160ca:	fe b0 f2 72 	rcall	800145ae <uhd_ep0_alloc>
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
		return;
	}

	if (!uhd_setup_request(0,
800160ce:	c1 70       	breq	800160fc <uhc_enumeration_step9+0x5c>
800160d0:	fe c9 ff c8 	sub	r9,pc,-56
800160d4:	30 08       	mov	r8,0
800160d6:	1a d9       	st.w	--sp,r9
800160d8:	0e 9a       	mov	r10,r7
800160da:	fa cb ff fc 	sub	r11,sp,-4
800160de:	31 29       	mov	r9,18
800160e0:	10 9c       	mov	r12,r8
800160e2:	fe b0 f4 89 	rcall	800149f4 <uhd_setup_request>
800160e6:	2f fd       	sub	sp,-4
			NULL,
			uhc_enumeration_step10)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
}
800160e8:	58 0c       	cp.w	r12,0
800160ea:	c0 40       	breq	800160f2 <uhc_enumeration_step9+0x52>
800160ec:	2f ed       	sub	sp,-8
			&req,
			(uint8_t*)&uhc_dev_enum->dev_desc,
			sizeof(usb_dev_desc_t),
			NULL,
			uhc_enumeration_step10)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
800160ee:	e3 cd 80 80 	ldm	sp++,r7,pc
800160f2:	30 6c       	mov	r12,6
		return;
	}
}
800160f4:	c5 2f       	rcall	80015f98 <uhc_enumeration_error>
800160f6:	2f ed       	sub	sp,-8
800160f8:	e3 cd 80 80 	ldm	sp++,r7,pc
	req.wLength = 0;

	// After a USB reset, the reallocation is required
	uhd_ep_free(0, 0);
	if (!uhd_ep0_alloc(0, uhc_dev_enum->dev_desc.bMaxPacketSize0)) {
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
800160fc:	30 4c       	mov	r12,4
800160fe:	c4 df       	rcall	80015f98 <uhc_enumeration_error>
			NULL,
			uhc_enumeration_step10)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
}
80016100:	2f ed       	sub	sp,-8
80016102:	e3 cd 80 80 	ldm	sp++,r7,pc
80016106:	d7 03       	nop

80016108 <uhc_enumeration_step10>:
80016108:	d4 01       	pushm	lr
8001610a:	58 0b       	cp.w	r11,0
8001610c:	c0 80       	breq	8001611c <uhc_enumeration_step10+0x14>
8001610e:	58 1b       	cp.w	r11,1
80016110:	f9 bc 00 07 	moveq	r12,7
80016114:	f9 bc 01 03 	movne	r12,3
80016118:	c4 0f       	rcall	80015f98 <uhc_enumeration_error>
8001611a:	d8 02       	popm	pc
8001611c:	fe c9 ff ec 	sub	r9,pc,-20
 * \param callback Callback to call at the end of timeout
 */
static void uhc_enable_timeout_callback(uint8_t timeout,
		uhc_sof_timeout_callback_t callback)
{
	uhc_sof_timeout_callback = callback;
80016120:	e0 68 08 10 	mov	r8,2064
	uhc_sof_timeout = timeout;
80016124:	91 09       	st.w	r8[0x0],r9
80016126:	31 49       	mov	r9,20
80016128:	e0 68 3b 76 	mov	r8,15222
8001612c:	b0 89       	st.b	r8[0x0],r9
8001612e:	d8 02       	popm	pc

80016130 <uhc_enumeration_step11>:
80016130:	eb cd 40 80 	pushm	r7,lr
80016134:	20 2d       	sub	sp,8
80016136:	30 0b       	mov	r11,0
80016138:	16 9c       	mov	r12,r11
8001613a:	fe b0 f5 59 	rcall	80014bec <uhd_ep_free>

	// Free address 0 used to start enumeration
	uhd_ep_free(0, 0);

	// Alloc control endpoint with the new USB address
	if (!uhd_ep0_alloc(UHC_DEVICE_ENUM_ADD,
8001613e:	30 1c       	mov	r12,1
80016140:	e0 67 07 f0 	mov	r7,2032
80016144:	0f fb       	ld.ub	r11,r7[0x7]
80016146:	fe b0 f2 34 	rcall	800145ae <uhd_ep0_alloc>
			uhc_dev_enum->dev_desc.bMaxPacketSize0)) {
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
		return;
	}
	// Send USB device descriptor request
	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
8001614a:	c2 20       	breq	8001618e <uhc_enumeration_step11+0x5e>
8001614c:	38 08       	mov	r8,-128
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
8001614e:	ba 88       	st.b	sp[0x0],r8
80016150:	30 68       	mov	r8,6
	req.wValue = (USB_DT_DEVICE << 8);
80016152:	ba 98       	st.b	sp[0x1],r8
80016154:	e0 68 01 00 	mov	r8,256
	req.wIndex = 0;
80016158:	ba 18       	st.h	sp[0x2],r8
8001615a:	30 08       	mov	r8,0
	req.wLength = sizeof(usb_dev_desc_t);
8001615c:	ba 28       	st.h	sp[0x4],r8
8001615e:	31 28       	mov	r8,18
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80016160:	ba 38       	st.h	sp[0x6],r8
80016162:	fe c8 ff ca 	sub	r8,pc,-54
80016166:	0e 9a       	mov	r10,r7
80016168:	1a d8       	st.w	--sp,r8
8001616a:	31 29       	mov	r9,18
8001616c:	fa cb ff fc 	sub	r11,sp,-4
80016170:	30 08       	mov	r8,0
80016172:	30 1c       	mov	r12,1
80016174:	fe b0 f4 40 	rcall	800149f4 <uhd_setup_request>
80016178:	2f fd       	sub	sp,-4
			sizeof(usb_dev_desc_t),
			NULL, uhc_enumeration_step12)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
}
8001617a:	58 0c       	cp.w	r12,0
8001617c:	c0 40       	breq	80016184 <uhc_enumeration_step11+0x54>
8001617e:	2f ed       	sub	sp,-8
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
			&req,
			(uint8_t *) & uhc_dev_enum->dev_desc,
			sizeof(usb_dev_desc_t),
			NULL, uhc_enumeration_step12)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
80016180:	e3 cd 80 80 	ldm	sp++,r7,pc
80016184:	30 6c       	mov	r12,6
		return;
	}
}
80016186:	c0 9f       	rcall	80015f98 <uhc_enumeration_error>
80016188:	2f ed       	sub	sp,-8
8001618a:	e3 cd 80 80 	ldm	sp++,r7,pc
	uhd_ep_free(0, 0);

	// Alloc control endpoint with the new USB address
	if (!uhd_ep0_alloc(UHC_DEVICE_ENUM_ADD,
			uhc_dev_enum->dev_desc.bMaxPacketSize0)) {
		uhc_enumeration_error(UHC_ENUM_HARDWARE_LIMIT);
8001618e:	30 4c       	mov	r12,4
80016190:	c0 4f       	rcall	80015f98 <uhc_enumeration_error>
			sizeof(usb_dev_desc_t),
			NULL, uhc_enumeration_step12)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
}
80016192:	2f ed       	sub	sp,-8
80016194:	e3 cd 80 80 	ldm	sp++,r7,pc

80016198 <uhc_enumeration_step12>:
80016198:	eb cd 40 80 	pushm	r7,lr
8001619c:	20 2d       	sub	sp,8
8001619e:	31 29       	mov	r9,18
800161a0:	58 0b       	cp.w	r11,0
800161a2:	5f 18       	srne	r8
800161a4:	f2 0a 19 00 	cp.h	r10,r9
800161a8:	5f 19       	srne	r9
800161aa:	f3 e8 10 08 	or	r8,r9,r8
800161ae:	c0 d1       	brne	800161c8 <uhc_enumeration_step12+0x30>
{
	usb_setup_req_t req;
	uint8_t conf_num;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_dev_desc_t))
800161b0:	e0 67 07 f0 	mov	r7,2032
800161b4:	30 18       	mov	r8,1
800161b6:	0f 99       	ld.ub	r9,r7[0x1]
800161b8:	f0 09 18 00 	cp.b	r9,r8
			|| (uhc_dev_enum->dev_desc.bDescriptorType != USB_DT_DEVICE)) {
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
800161bc:	c0 a0       	breq	800161d0 <uhc_enumeration_step12+0x38>
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
			&req,
			(uint8_t *) uhc_dev_enum->conf_desc,
			sizeof(usb_conf_desc_t),
			NULL, uhc_enumeration_step13)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
800161be:	30 3c       	mov	r12,3
800161c0:	ce ce       	rcall	80015f98 <uhc_enumeration_error>
		return;
	}
}
800161c2:	2f ed       	sub	sp,-8
800161c4:	e3 cd 80 80 	ldm	sp++,r7,pc
	uint8_t conf_num;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_dev_desc_t))
			|| (uhc_dev_enum->dev_desc.bDescriptorType != USB_DT_DEVICE)) {
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
800161c8:	58 1b       	cp.w	r11,1
800161ca:	cf a1       	brne	800161be <uhc_enumeration_step12+0x26>
800161cc:	30 7c       	mov	r12,7
800161ce:	cf 9b       	rjmp	800161c0 <uhc_enumeration_step12+0x28>
		conf_num = UHC_DEVICE_CONF(uhc_dev_enum);
	} else {
		conf_num = 1;
	}

	uhc_dev_enum->conf_desc = malloc(sizeof(usb_conf_desc_t));
800161d0:	30 9c       	mov	r12,9
800161d2:	e0 a0 55 df 	rcall	80020d90 <malloc>
800161d6:	8f 6c       	st.w	r7[0x18],r12
	if (uhc_dev_enum->conf_desc == NULL) {
800161d8:	c1 c0       	breq	80016210 <uhc_enumeration_step12+0x78>
		Assert(false);
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
	// Send USB device descriptor request
	req.bmRequestType = USB_REQ_RECIP_DEVICE|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_IN;
800161da:	38 08       	mov	r8,-128
800161dc:	ba 88       	st.b	sp[0x0],r8
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
800161de:	30 68       	mov	r8,6
800161e0:	ba 98       	st.b	sp[0x1],r8
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
800161e2:	e0 68 02 00 	mov	r8,512
800161e6:	ba 18       	st.h	sp[0x2],r8
	req.wIndex = 0;
800161e8:	30 08       	mov	r8,0
800161ea:	ba 28       	st.h	sp[0x4],r8
	req.wLength = sizeof(usb_conf_desc_t);
800161ec:	30 98       	mov	r8,9
800161ee:	ba 38       	st.h	sp[0x6],r8
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
800161f0:	fe c8 ff d8 	sub	r8,pc,-40
800161f4:	18 9a       	mov	r10,r12
800161f6:	1a d8       	st.w	--sp,r8
800161f8:	30 99       	mov	r9,9
800161fa:	fa cb ff fc 	sub	r11,sp,-4
800161fe:	30 08       	mov	r8,0
80016200:	30 1c       	mov	r12,1
80016202:	fe b0 f3 f9 	rcall	800149f4 <uhd_setup_request>
80016206:	2f fd       	sub	sp,-4
80016208:	58 0c       	cp.w	r12,0
			&req,
			(uint8_t *) uhc_dev_enum->conf_desc,
			sizeof(usb_conf_desc_t),
			NULL, uhc_enumeration_step13)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
8001620a:	cd c1       	brne	800161c2 <uhc_enumeration_step12+0x2a>
8001620c:	30 6c       	mov	r12,6
	}

	uhc_dev_enum->conf_desc = malloc(sizeof(usb_conf_desc_t));
	if (uhc_dev_enum->conf_desc == NULL) {
		Assert(false);
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
8001620e:	cd 9b       	rjmp	800161c0 <uhc_enumeration_step12+0x28>
80016210:	30 6c       	mov	r12,6
80016212:	cc 3e       	rcall	80015f98 <uhc_enumeration_error>
		return;
80016214:	cd 7b       	rjmp	800161c2 <uhc_enumeration_step12+0x2a>
80016216:	d7 03       	nop

80016218 <uhc_enumeration_step13>:
80016218:	eb cd 40 e0 	pushm	r5-r7,lr
8001621c:	20 2d       	sub	sp,8
8001621e:	30 99       	mov	r9,9
80016220:	58 0b       	cp.w	r11,0
80016222:	5f 18       	srne	r8
80016224:	f2 0a 19 00 	cp.h	r10,r9
80016228:	5f 19       	srne	r9
8001622a:	f3 e8 10 08 	or	r8,r9,r8
	uint8_t conf_num, conf_size;
	uint16_t bus_power = 0;
	usb_setup_req_t req;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_conf_desc_t))
8001622e:	c0 e1       	brne	8001624a <uhc_enumeration_step13+0x32>
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)) {
80016230:	e0 67 07 f0 	mov	r7,2032
80016234:	30 29       	mov	r9,2
	uint8_t conf_num, conf_size;
	uint16_t bus_power = 0;
	usb_setup_req_t req;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_conf_desc_t))
80016236:	6e 68       	ld.w	r8,r7[0x18]
80016238:	11 9a       	ld.ub	r10,r8[0x1]
8001623a:	f2 0a 18 00 	cp.b	r10,r9
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)) {
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
8001623e:	c0 a0       	breq	80016252 <uhc_enumeration_step13+0x3a>
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
			&req,
			(uint8_t *) uhc_dev_enum->conf_desc,
			conf_size,
			NULL, uhc_enumeration_step14)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
80016240:	30 3c       	mov	r12,3
80016242:	ca be       	rcall	80015f98 <uhc_enumeration_error>
		return;
	}
}
80016244:	2f ed       	sub	sp,-8
80016246:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
	usb_setup_req_t req;
	UNUSED(add);

	if ((status != UHD_TRANS_NOERROR) || (payload_trans != sizeof(usb_conf_desc_t))
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)) {
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
8001624a:	58 1b       	cp.w	r11,1
8001624c:	cf a1       	brne	80016240 <uhc_enumeration_step13+0x28>
8001624e:	30 7c       	mov	r12,7
80016250:	cf 9b       	rjmp	80016242 <uhc_enumeration_step13+0x2a>
		}
		// Go to USB HUB parent
		dev = dev->hub;
	}
#else
	if (!(uhc_dev_enum->conf_desc->bmAttributes
80016252:	11 f9       	ld.ub	r9,r8[0x7]
80016254:	ed b9 00 06 	bld	r9,0x6
80016258:	c1 10       	breq	8001627a <uhc_enumeration_step13+0x62>
			&USB_CONFIG_ATTR_SELF_POWERED)) {
		bus_power = uhc_dev_enum->conf_desc->bMaxPower * 2;
8001625a:	f1 3a 00 08 	ld.ub	r10,r8[8]
8001625e:	e0 69 01 f4 	mov	r9,500
80016262:	a1 7a       	lsl	r10,0x1
80016264:	f2 0a 19 00 	cp.h	r10,r9
80016268:	e0 88 00 09 	brls	8001627a <uhc_enumeration_step13+0x62>
	}
#endif
	if ((bus_power + uhc_power_running) > USB_HOST_POWER_MAX) {
		// USB interfaces consumption too high
		UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_OVERCURRENT);
8001626c:	0e 9c       	mov	r12,r7
8001626e:	30 2b       	mov	r11,2
80016270:	e0 a0 18 9c 	rcall	800193a8 <usb_enum>
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
80016274:	fe b0 f0 70 	rcall	80014354 <uhd_suspend>
80016278:	ce 6b       	rjmp	80016244 <uhc_enumeration_step13+0x2c>
	uhc_dev_enum->power = bus_power;
	uhc_power_running += bus_power;
#endif

	// Save information about USB configuration descriptor size
	conf_size = le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength);
8001627a:	11 a6       	ld.ub	r6,r8[0x2]
	conf_num = uhc_dev_enum->conf_desc->bConfigurationValue;
8001627c:	6e 68       	ld.w	r8,r7[0x18]
	Assert(conf_num);
	// Re alloc USB configuration descriptor
	free(uhc_dev_enum->conf_desc);
8001627e:	10 9c       	mov	r12,r8
	uhc_power_running += bus_power;
#endif

	// Save information about USB configuration descriptor size
	conf_size = le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength);
	conf_num = uhc_dev_enum->conf_desc->bConfigurationValue;
80016280:	11 d5       	ld.ub	r5,r8[0x5]
	Assert(conf_num);
	// Re alloc USB configuration descriptor
	free(uhc_dev_enum->conf_desc);
80016282:	e0 a0 55 7f 	rcall	80020d80 <free>
	uhc_dev_enum->conf_desc = malloc(conf_size);
80016286:	0c 9c       	mov	r12,r6
80016288:	e0 a0 55 84 	rcall	80020d90 <malloc>
8001628c:	8f 6c       	st.w	r7[0x18],r12
	if (uhc_dev_enum->conf_desc == NULL) {
8001628e:	c1 b0       	breq	800162c4 <uhc_enumeration_step13+0xac>
		Assert(false);
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
		return;
	}
	// Send USB device descriptor request
	req.bmRequestType =
80016290:	38 08       	mov	r8,-128
80016292:	ba 88       	st.b	sp[0x0],r8
			USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
			USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
80016294:	30 68       	mov	r8,6
80016296:	ba 98       	st.b	sp[0x1],r8
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
	req.wIndex = 0;
80016298:	30 08       	mov	r8,0
8001629a:	ba 28       	st.h	sp[0x4],r8
	req.wLength = conf_size;
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
8001629c:	fe c8 ff 60 	sub	r8,pc,-160
800162a0:	ba 36       	st.h	sp[0x6],r6
	// Send USB device descriptor request
	req.bmRequestType =
			USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
			USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
800162a2:	18 9a       	mov	r10,r12
	req.wIndex = 0;
	req.wLength = conf_size;
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
800162a4:	20 15       	sub	r5,1
	// Send USB device descriptor request
	req.bmRequestType =
			USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
			USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
800162a6:	0c 99       	mov	r9,r6
	req.wIndex = 0;
	req.wLength = conf_size;
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
800162a8:	a9 b5       	sbr	r5,0x9
	// Send USB device descriptor request
	req.bmRequestType =
			USB_REQ_RECIP_DEVICE | USB_REQ_TYPE_STANDARD |
			USB_REQ_DIR_IN;
	req.bRequest = USB_REQ_GET_DESCRIPTOR;
	req.wValue = (USB_DT_CONFIGURATION << 8) | (conf_num - 1);
800162aa:	30 1c       	mov	r12,1
	req.wIndex = 0;
	req.wLength = conf_size;
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
800162ac:	ba 15       	st.h	sp[0x2],r5
800162ae:	1a d8       	st.w	--sp,r8
800162b0:	30 08       	mov	r8,0
800162b2:	fa cb ff fc 	sub	r11,sp,-4
800162b6:	fe b0 f3 9f 	rcall	800149f4 <uhd_setup_request>
800162ba:	2f fd       	sub	sp,-4
800162bc:	58 0c       	cp.w	r12,0
			&req,
			(uint8_t *) uhc_dev_enum->conf_desc,
			conf_size,
			NULL, uhc_enumeration_step14)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
800162be:	cc 31       	brne	80016244 <uhc_enumeration_step13+0x2c>
800162c0:	30 6c       	mov	r12,6
	// Re alloc USB configuration descriptor
	free(uhc_dev_enum->conf_desc);
	uhc_dev_enum->conf_desc = malloc(conf_size);
	if (uhc_dev_enum->conf_desc == NULL) {
		Assert(false);
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
800162c2:	cc 0b       	rjmp	80016242 <uhc_enumeration_step13+0x2a>
800162c4:	30 6c       	mov	r12,6
800162c6:	c6 9e       	rcall	80015f98 <uhc_enumeration_error>
		return;
800162c8:	cb eb       	rjmp	80016244 <uhc_enumeration_step13+0x2c>
800162ca:	d7 03       	nop

800162cc <uhc_enumeration_step15>:
800162cc:	eb cd 40 c0 	pushm	r6-r7,lr
800162d0:	20 1d       	sub	sp,4
800162d2:	30 08       	mov	r8,0
800162d4:	58 0b       	cp.w	r11,0
800162d6:	5f 19       	srne	r9
800162d8:	f0 0a 19 00 	cp.h	r10,r8
800162dc:	5f 17       	srne	r7
800162de:	12 47       	or	r7,r9
800162e0:	f0 07 18 00 	cp.b	r7,r8
800162e4:	c1 50       	breq	8001630e <uhc_enumeration_step15+0x42>
800162e6:	49 57       	lddpc	r7,80016338 <uhc_enumeration_step15+0x6c>
800162e8:	50 0b       	stdsp	sp[0x0],r11
800162ea:	6e 28       	ld.w	r8,r7[0x8]
		uint16_t payload_trans)
{
	UNUSED(add);
	if ((status!=UHD_TRANS_NOERROR) || (payload_trans!=0)) {
		for(uint8_t i = 0; i < UHC_NB_UHI; i++) {
			uhc_uhis[i].uninstall(uhc_dev_enum);
800162ec:	e0 6c 07 f0 	mov	r12,2032
800162f0:	5d 18       	icall	r8
800162f2:	6e 68       	ld.w	r8,r7[0x18]
800162f4:	e0 6c 07 f0 	mov	r12,2032
		}
		uhc_enumeration_error((status == UHD_TRANS_DISCONNECT)?
800162f8:	5d 18       	icall	r8
800162fa:	40 0b       	lddsp	r11,sp[0x0]
800162fc:	58 1b       	cp.w	r11,1
800162fe:	f9 bc 00 07 	moveq	r12,7
80016302:	f9 bc 01 03 	movne	r12,3
		uhc_uhis[i].enable(uhc_dev_enum);
	}
	uhc_enum_try = 0;
	
	UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_SUCCESS);
}
80016306:	c4 9e       	rcall	80015f98 <uhc_enumeration_error>
80016308:	2f fd       	sub	sp,-4
8001630a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		return;
	}

	// Enable all UHIs supported
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
		uhc_uhis[i].enable(uhc_dev_enum);
8001630e:	48 b6       	lddpc	r6,80016338 <uhc_enumeration_step15+0x6c>
80016310:	e0 6c 07 f0 	mov	r12,2032
80016314:	6c 18       	ld.w	r8,r6[0x4]
80016316:	5d 18       	icall	r8
80016318:	6c 58       	ld.w	r8,r6[0x14]
	}
	uhc_enum_try = 0;
8001631a:	e0 6c 07 f0 	mov	r12,2032
8001631e:	5d 18       	icall	r8
	
	UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_SUCCESS);
80016320:	e0 68 08 0c 	mov	r8,2060
80016324:	30 0b       	mov	r11,0
}
80016326:	b0 87       	st.b	r8[0x0],r7
80016328:	e0 6c 07 f0 	mov	r12,2032
8001632c:	e0 a0 18 3e 	rcall	800193a8 <usb_enum>
80016330:	2f fd       	sub	sp,-4
80016332:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016336:	d7 03       	nop
80016338:	80 02       	ld.sh	r2,r0[0x0]
8001633a:	1f 34       	ld.ub	r4,pc++

8001633c <uhc_enumeration_step14>:
8001633c:	eb cd 40 e0 	pushm	r5-r7,lr
 */
static void uhc_enumeration_step14(
		usb_add_t add,
		uhd_trans_status_t status,
		uint16_t payload_trans)
{
80016340:	20 2d       	sub	sp,8
	bool b_conf_supported = false;
	UNUSED(add);

	/////////////////////////////////
	///// TESTING
	print_dbg("\r\n received device descriptor. ");
80016342:	fe fc 02 2e 	ld.w	r12,pc[558]
 */
static void uhc_enumeration_step14(
		usb_add_t add,
		uhd_trans_status_t status,
		uint16_t payload_trans)
{
80016346:	16 97       	mov	r7,r11
80016348:	14 95       	mov	r5,r10
	bool b_conf_supported = false;
	UNUSED(add);

	/////////////////////////////////
	///// TESTING
	print_dbg("\r\n received device descriptor. ");
8001634a:	fe b0 e6 81 	rcall	8001304c <print_dbg>

	print_dbg("\r\n address: ");
8001634e:	fe fc 02 26 	ld.w	r12,pc[550]
80016352:	fe b0 e6 7d 	rcall	8001304c <print_dbg>
	print_dbg_hex(uhc_dev_enum -> address);
80016356:	e0 66 07 f0 	mov	r6,2032
8001635a:	ed 3c 00 12 	ld.ub	r12,r6[18]
8001635e:	fe b0 e6 1f 	rcall	80012f9c <print_dbg_hex>
	print_dbg("\r\n speed: ");
80016362:	fe fc 02 16 	ld.w	r12,pc[534]
80016366:	fe b0 e6 73 	rcall	8001304c <print_dbg>
	print_dbg_hex(uhc_dev_enum -> speed);
8001636a:	6c 5c       	ld.w	r12,r6[0x14]
8001636c:	fe b0 e6 18 	rcall	80012f9c <print_dbg_hex>
	print_dbg("\r\n\r\n");
80016370:	fe fc 02 0c 	ld.w	r12,pc[524]
80016374:	fe b0 e6 6c 	rcall	8001304c <print_dbg>

	print_dbg("\r\n dev desc -> bLength : ");
80016378:	fe fc 02 08 	ld.w	r12,pc[520]
8001637c:	fe b0 e6 68 	rcall	8001304c <print_dbg>
	print_dbg_hex(uhc_dev_enum->dev_desc.bLength);
80016380:	0d 8c       	ld.ub	r12,r6[0x0]
80016382:	fe b0 e6 0d 	rcall	80012f9c <print_dbg_hex>
	print_dbg("\r\n dev desc -> bDescriptorType : ");
80016386:	fe fc 01 fe 	ld.w	r12,pc[510]
8001638a:	fe b0 e6 61 	rcall	8001304c <print_dbg>
	print_dbg_hex(uhc_dev_enum->dev_desc.bDescriptorType);
8001638e:	0d 9c       	ld.ub	r12,r6[0x1]
80016390:	fe b0 e6 06 	rcall	80012f9c <print_dbg_hex>
	print_dbg("\r\n dev desc -> bcdUSB : ");
80016394:	4f dc       	lddpc	r12,80016588 <uhc_enumeration_step14+0x24c>
80016396:	fe b0 e6 5b 	rcall	8001304c <print_dbg>
	print_dbg_hex(uhc_dev_enum->dev_desc.bcdUSB);
8001639a:	8c 9c       	ld.uh	r12,r6[0x2]
8001639c:	fe b0 e6 00 	rcall	80012f9c <print_dbg_hex>
	print_dbg("\r\n dev desc -> bDeviceClass : ");
800163a0:	4f bc       	lddpc	r12,8001658c <uhc_enumeration_step14+0x250>
800163a2:	fe b0 e6 55 	rcall	8001304c <print_dbg>
	print_dbg_hex(uhc_dev_enum->dev_desc.bDeviceClass);
800163a6:	0d cc       	ld.ub	r12,r6[0x4]
800163a8:	fe b0 e5 fa 	rcall	80012f9c <print_dbg_hex>
	print_dbg("\r\n dev desc -> bDeviceSubClass : ");
800163ac:	4f 9c       	lddpc	r12,80016590 <uhc_enumeration_step14+0x254>
800163ae:	fe b0 e6 4f 	rcall	8001304c <print_dbg>
	print_dbg_hex(uhc_dev_enum->dev_desc.bDeviceSubClass);
800163b2:	0d dc       	ld.ub	r12,r6[0x5]
800163b4:	fe b0 e5 f4 	rcall	80012f9c <print_dbg_hex>
	print_dbg("\r\n dev desc -> bDeviceProtocol : ");
800163b8:	4f 7c       	lddpc	r12,80016594 <uhc_enumeration_step14+0x258>
800163ba:	fe b0 e6 49 	rcall	8001304c <print_dbg>
	print_dbg_hex(uhc_dev_enum->dev_desc.bDeviceProtocol);
800163be:	0d ec       	ld.ub	r12,r6[0x6]
800163c0:	fe b0 e5 ee 	rcall	80012f9c <print_dbg_hex>
	print_dbg("\r\n dev desc -> bMaxPacketSize0 : ");
800163c4:	4f 5c       	lddpc	r12,80016598 <uhc_enumeration_step14+0x25c>
800163c6:	fe b0 e6 43 	rcall	8001304c <print_dbg>
	print_dbg_hex(uhc_dev_enum->dev_desc.bMaxPacketSize0);
800163ca:	0d fc       	ld.ub	r12,r6[0x7]
800163cc:	fe b0 e5 e8 	rcall	80012f9c <print_dbg_hex>
	print_dbg("\r\n dev desc -> idVendor : ");
800163d0:	4f 3c       	lddpc	r12,8001659c <uhc_enumeration_step14+0x260>
800163d2:	fe b0 e6 3d 	rcall	8001304c <print_dbg>
	print_dbg_hex(uhc_dev_enum->dev_desc.idVendor);
800163d6:	8c cc       	ld.uh	r12,r6[0x8]
800163d8:	fe b0 e5 e2 	rcall	80012f9c <print_dbg_hex>
	print_dbg("\r\n dev desc -> idProduct : ");
800163dc:	4f 1c       	lddpc	r12,800165a0 <uhc_enumeration_step14+0x264>
800163de:	fe b0 e6 37 	rcall	8001304c <print_dbg>
	print_dbg_hex(uhc_dev_enum->dev_desc.idProduct);
800163e2:	8c dc       	ld.uh	r12,r6[0xa]
800163e4:	fe b0 e5 dc 	rcall	80012f9c <print_dbg_hex>
	print_dbg("\r\n dev desc -> bcdDevice : ");
800163e8:	4e fc       	lddpc	r12,800165a4 <uhc_enumeration_step14+0x268>
800163ea:	fe b0 e6 31 	rcall	8001304c <print_dbg>
	print_dbg_hex(uhc_dev_enum->dev_desc.bcdDevice);
800163ee:	8c ec       	ld.uh	r12,r6[0xc]
800163f0:	fe b0 e5 d6 	rcall	80012f9c <print_dbg_hex>
	print_dbg("\r\n dev desc -> iManufacturer : ");
800163f4:	4e dc       	lddpc	r12,800165a8 <uhc_enumeration_step14+0x26c>
800163f6:	fe b0 e6 2b 	rcall	8001304c <print_dbg>
	print_dbg_hex(uhc_dev_enum->dev_desc.iManufacturer);
800163fa:	ed 3c 00 0e 	ld.ub	r12,r6[14]
800163fe:	fe b0 e5 cf 	rcall	80012f9c <print_dbg_hex>
	print_dbg("\r\n dev desc -> iProduct : ");
80016402:	4e bc       	lddpc	r12,800165ac <uhc_enumeration_step14+0x270>
80016404:	fe b0 e6 24 	rcall	8001304c <print_dbg>
	print_dbg_hex(uhc_dev_enum->dev_desc.iProduct);
80016408:	ed 3c 00 0f 	ld.ub	r12,r6[15]
8001640c:	fe b0 e5 c8 	rcall	80012f9c <print_dbg_hex>
	print_dbg("\r\n dev desc -> iSerialNumber : ");
80016410:	4e 8c       	lddpc	r12,800165b0 <uhc_enumeration_step14+0x274>
80016412:	fe b0 e6 1d 	rcall	8001304c <print_dbg>
	print_dbg_hex(uhc_dev_enum->dev_desc.iSerialNumber);
80016416:	ed 3c 00 10 	ld.ub	r12,r6[16]
8001641a:	fe b0 e5 c1 	rcall	80012f9c <print_dbg_hex>
	print_dbg("\r\n dev desc -> bNumConfigurations : ");
8001641e:	4e 6c       	lddpc	r12,800165b4 <uhc_enumeration_step14+0x278>
80016420:	fe b0 e6 16 	rcall	8001304c <print_dbg>
	print_dbg_hex(uhc_dev_enum->dev_desc.bNumConfigurations);
80016424:	ed 3c 00 11 	ld.ub	r12,r6[17]
80016428:	fe b0 e5 ba 	rcall	80012f9c <print_dbg_hex>
	print_dbg("\r\n\r\n");
8001642c:	4d 4c       	lddpc	r12,8001657c <uhc_enumeration_step14+0x240>
8001642e:	fe b0 e6 0f 	rcall	8001304c <print_dbg>
	
	print_dbg("\r\n conf desc -> bLength : ");
80016432:	4e 2c       	lddpc	r12,800165b8 <uhc_enumeration_step14+0x27c>
80016434:	fe b0 e6 0c 	rcall	8001304c <print_dbg>
	print_dbg_hex(uhc_dev_enum->conf_desc->bLength);
80016438:	6c 68       	ld.w	r8,r6[0x18]
8001643a:	11 8c       	ld.ub	r12,r8[0x0]
8001643c:	fe b0 e5 b0 	rcall	80012f9c <print_dbg_hex>
	print_dbg("\r\n conf desc -> bDescriptorType : ");
80016440:	4d fc       	lddpc	r12,800165bc <uhc_enumeration_step14+0x280>
80016442:	fe b0 e6 05 	rcall	8001304c <print_dbg>
	print_dbg_hex(uhc_dev_enum->conf_desc->bDescriptorType);
80016446:	6c 68       	ld.w	r8,r6[0x18]
80016448:	11 9c       	ld.ub	r12,r8[0x1]
8001644a:	fe b0 e5 a9 	rcall	80012f9c <print_dbg_hex>
	print_dbg("\r\n conf desc -> wTotalLength : ");
8001644e:	4d dc       	lddpc	r12,800165c0 <uhc_enumeration_step14+0x284>
80016450:	fe b0 e5 fe 	rcall	8001304c <print_dbg>
	print_dbg_hex(uhc_dev_enum->conf_desc->wTotalLength);
80016454:	6c 68       	ld.w	r8,r6[0x18]
80016456:	11 b9       	ld.ub	r9,r8[0x3]
80016458:	11 ac       	ld.ub	r12,r8[0x2]
8001645a:	f3 ec 10 8c 	or	r12,r9,r12<<0x8
8001645e:	fe b0 e5 9f 	rcall	80012f9c <print_dbg_hex>
	print_dbg("\r\n conf desc -> bNumInterfaces : ");
80016462:	4d 9c       	lddpc	r12,800165c4 <uhc_enumeration_step14+0x288>
80016464:	fe b0 e5 f4 	rcall	8001304c <print_dbg>
	print_dbg_hex(uhc_dev_enum->conf_desc->bNumInterfaces);
80016468:	6c 68       	ld.w	r8,r6[0x18]
8001646a:	11 cc       	ld.ub	r12,r8[0x4]
8001646c:	fe b0 e5 98 	rcall	80012f9c <print_dbg_hex>
	print_dbg("\r\n conf desc -> bConfigurationValue : ");
80016470:	4d 6c       	lddpc	r12,800165c8 <uhc_enumeration_step14+0x28c>
80016472:	fe b0 e5 ed 	rcall	8001304c <print_dbg>
	print_dbg_hex(uhc_dev_enum->conf_desc->bConfigurationValue);
80016476:	6c 68       	ld.w	r8,r6[0x18]
80016478:	11 dc       	ld.ub	r12,r8[0x5]
8001647a:	fe b0 e5 91 	rcall	80012f9c <print_dbg_hex>
	print_dbg("\r\n conf desc -> iConfiguration : ");
8001647e:	4d 4c       	lddpc	r12,800165cc <uhc_enumeration_step14+0x290>
80016480:	fe b0 e5 e6 	rcall	8001304c <print_dbg>
	print_dbg_hex(uhc_dev_enum->conf_desc->iConfiguration);
80016484:	6c 68       	ld.w	r8,r6[0x18]
80016486:	11 ec       	ld.ub	r12,r8[0x6]
80016488:	fe b0 e5 8a 	rcall	80012f9c <print_dbg_hex>
	print_dbg("\r\n conf desc -> bmAttributes : ");
8001648c:	4d 1c       	lddpc	r12,800165d0 <uhc_enumeration_step14+0x294>
8001648e:	fe b0 e5 df 	rcall	8001304c <print_dbg>
	print_dbg_hex(uhc_dev_enum->conf_desc->bmAttributes);
80016492:	6c 68       	ld.w	r8,r6[0x18]
80016494:	11 fc       	ld.ub	r12,r8[0x7]
80016496:	fe b0 e5 83 	rcall	80012f9c <print_dbg_hex>
	print_dbg("\r\n conf desc -> bMaxPower : ");
8001649a:	4c fc       	lddpc	r12,800165d4 <uhc_enumeration_step14+0x298>
8001649c:	fe b0 e5 d8 	rcall	8001304c <print_dbg>
	print_dbg_hex(uhc_dev_enum->conf_desc->bMaxPower);
800164a0:	6c 68       	ld.w	r8,r6[0x18]
800164a2:	f1 3c 00 08 	ld.ub	r12,r8[8]
800164a6:	fe b0 e5 7b 	rcall	80012f9c <print_dbg_hex>

	/////////////////////////////////
	/////////////////////////////////

	if ((status != UHD_TRANS_NOERROR)
800164aa:	58 07       	cp.w	r7,0
800164ac:	5f 18       	srne	r8
800164ae:	30 89       	mov	r9,8
800164b0:	f2 05 19 00 	cp.h	r5,r9
800164b4:	5f 89       	srls	r9
800164b6:	f3 e8 10 08 	or	r8,r9,r8
800164ba:	c0 d1       	brne	800164d4 <uhc_enumeration_step14+0x198>
			|| (payload_trans < sizeof(usb_conf_desc_t))
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
800164bc:	6c 68       	ld.w	r8,r6[0x18]
	print_dbg_hex(uhc_dev_enum->conf_desc->bMaxPower);

	/////////////////////////////////
	/////////////////////////////////

	if ((status != UHD_TRANS_NOERROR)
800164be:	30 29       	mov	r9,2
800164c0:	11 9a       	ld.ub	r10,r8[0x1]
800164c2:	f2 0a 18 00 	cp.b	r10,r9
800164c6:	c0 b0       	breq	800164dc <uhc_enumeration_step14+0x1a0>
			|| (payload_trans < sizeof(usb_conf_desc_t))
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
			|| (payload_trans != le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength))) {
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
800164c8:	30 3c       	mov	r12,3
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
			&req,
			NULL,
			0,
			NULL, uhc_enumeration_step15)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
800164ca:	fe b0 fd 67 	rcall	80015f98 <uhc_enumeration_error>
		return;
	}
}
800164ce:	2f ed       	sub	sp,-8
800164d0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

	if ((status != UHD_TRANS_NOERROR)
			|| (payload_trans < sizeof(usb_conf_desc_t))
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
			|| (payload_trans != le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength))) {
		uhc_enumeration_error((status==UHD_TRANS_DISCONNECT)?
800164d4:	58 17       	cp.w	r7,1
800164d6:	cf 91       	brne	800164c8 <uhc_enumeration_step14+0x18c>
800164d8:	30 7c       	mov	r12,7
800164da:	cf 8b       	rjmp	800164ca <uhc_enumeration_step14+0x18e>
	/////////////////////////////////

	if ((status != UHD_TRANS_NOERROR)
			|| (payload_trans < sizeof(usb_conf_desc_t))
			|| (uhc_dev_enum->conf_desc->bDescriptorType != USB_DT_CONFIGURATION)
			|| (payload_trans != le16_to_cpu(uhc_dev_enum->conf_desc->wTotalLength))) {
800164dc:	11 b9       	ld.ub	r9,r8[0x3]
800164de:	11 a8       	ld.ub	r8,r8[0x2]
800164e0:	f3 e8 10 88 	or	r8,r9,r8<<0x8
800164e4:	5c c8       	swap.bh	r8
	print_dbg_hex(uhc_dev_enum->conf_desc->bMaxPower);

	/////////////////////////////////
	/////////////////////////////////

	if ((status != UHD_TRANS_NOERROR)
800164e6:	ea 08 19 00 	cp.h	r8,r5
800164ea:	ce f1       	brne	800164c8 <uhc_enumeration_step14+0x18c>
				UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
		return;
	}
	// Check if unless one USB interface is supported by UHIs
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
		switch (uhc_uhis[i].install(uhc_dev_enum)) {
800164ec:	4b b7       	lddpc	r7,800165d8 <uhc_enumeration_step14+0x29c>
800164ee:	0c 9c       	mov	r12,r6
800164f0:	6e 08       	ld.w	r8,r7[0x0]
800164f2:	5d 18       	icall	r8
800164f4:	c1 61       	brne	80016520 <uhc_enumeration_step14+0x1e4>
800164f6:	30 15       	mov	r5,1
800164f8:	6e 48       	ld.w	r8,r7[0x10]
800164fa:	e0 6c 07 f0 	mov	r12,2032
800164fe:	5d 18       	icall	r8
80016500:	c1 40       	breq	80016528 <uhc_enumeration_step14+0x1ec>
80016502:	58 1c       	cp.w	r12,1
			break;

		default:
			// USB host hardware limitation
			// Free all endpoints
			uhd_ep_free(UHC_DEVICE_ENUM_ADD,0xFF);
80016504:	c2 c0       	breq	8001655c <uhc_enumeration_step14+0x220>
80016506:	e0 6b 00 ff 	mov	r11,255
8001650a:	30 1c       	mov	r12,1
8001650c:	fe b0 f3 70 	rcall	80014bec <uhd_ep_free>
			UHC_ENUM_EVENT(uhc_dev_enum,UHC_ENUM_HARDWARE_LIMIT);
80016510:	30 4b       	mov	r11,4
80016512:	e0 6c 07 f0 	mov	r12,2032
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
80016516:	e0 a0 17 49 	rcall	800193a8 <usb_enum>
8001651a:	fe b0 ef 1d 	rcall	80014354 <uhd_suspend>
				UHC_ENUM_DISCONNECT:UHC_ENUM_FAIL);
		return;
	}
	// Check if unless one USB interface is supported by UHIs
	for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
		switch (uhc_uhis[i].install(uhc_dev_enum)) {
8001651e:	cd 8b       	rjmp	800164ce <uhc_enumeration_step14+0x192>
80016520:	58 1c       	cp.w	r12,1
80016522:	cf 21       	brne	80016506 <uhc_enumeration_step14+0x1ca>
	// Enable device configuration
	req.bmRequestType = USB_REQ_RECIP_DEVICE
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_CONFIGURATION;
	req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
	req.wIndex = 0;
80016524:	30 05       	mov	r5,0
		// Abort enumeration, set line in suspend mode
		uhc_enumeration_suspend();
		return;
	}
	// Enable device configuration
	req.bmRequestType = USB_REQ_RECIP_DEVICE
80016526:	ce 9b       	rjmp	800164f8 <uhc_enumeration_step14+0x1bc>
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_CONFIGURATION;
	req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
80016528:	30 09       	mov	r9,0
		// Abort enumeration, set line in suspend mode
		uhc_enumeration_suspend();
		return;
	}
	// Enable device configuration
	req.bmRequestType = USB_REQ_RECIP_DEVICE
8001652a:	30 0b       	mov	r11,0
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_CONFIGURATION;
8001652c:	6c 6a       	ld.w	r10,r6[0x18]
8001652e:	ba 8b       	st.b	sp[0x0],r11
	req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
80016530:	30 9b       	mov	r11,9
	req.wIndex = 0;
	req.wLength = 0;
80016532:	ba 9b       	st.b	sp[0x1],r11
	// Enable device configuration
	req.bmRequestType = USB_REQ_RECIP_DEVICE
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_CONFIGURATION;
	req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
	req.wIndex = 0;
80016534:	15 da       	ld.ub	r10,r10[0x5]
	req.wLength = 0;
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
80016536:	ba 39       	st.h	sp[0x6],r9
	}
	// Enable device configuration
	req.bmRequestType = USB_REQ_RECIP_DEVICE
			| USB_REQ_TYPE_STANDARD | USB_REQ_DIR_OUT;
	req.bRequest = USB_REQ_SET_CONFIGURATION;
	req.wValue = uhc_dev_enum->conf_desc->bConfigurationValue;
80016538:	ba 29       	st.h	sp[0x4],r9
	req.wIndex = 0;
	req.wLength = 0;
	if (!uhd_setup_request(UHC_DEVICE_ENUM_ADD,
8001653a:	fe c9 02 6e 	sub	r9,pc,622
8001653e:	ba 1a       	st.h	sp[0x2],r10
80016540:	30 08       	mov	r8,0
80016542:	1a d9       	st.w	--sp,r9
80016544:	10 9a       	mov	r10,r8
80016546:	fa cb ff fc 	sub	r11,sp,-4
8001654a:	10 99       	mov	r9,r8
8001654c:	30 1c       	mov	r12,1
8001654e:	fe b0 f2 53 	rcall	800149f4 <uhd_setup_request>
			&req,
			NULL,
			0,
			NULL, uhc_enumeration_step15)) {
		uhc_enumeration_error(UHC_ENUM_MEMORY_LIMIT);
80016552:	2f fd       	sub	sp,-4
80016554:	58 0c       	cp.w	r12,0
			// Abort enumeration, set line in suspend mode
			uhc_enumeration_suspend();
			return;
		}
	}
	if (!b_conf_supported) {
80016556:	cb c1       	brne	800164ce <uhc_enumeration_step14+0x192>
80016558:	30 6c       	mov	r12,6
		// No USB interface supported
		UHC_ENUM_EVENT(uhc_dev_enum, UHC_ENUM_UNSUPPORTED);
8001655a:	cb 8b       	rjmp	800164ca <uhc_enumeration_step14+0x18e>
8001655c:	58 05       	cp.w	r5,0
8001655e:	ce 51       	brne	80016528 <uhc_enumeration_step14+0x1ec>
80016560:	18 9b       	mov	r11,r12
		uhi_hub_suspend(uhc_dev_enum);
	} else
#endif
	{
		// Suspend USB line
		uhd_suspend();
80016562:	e0 6c 07 f0 	mov	r12,2032
80016566:	e0 a0 17 21 	rcall	800193a8 <usb_enum>
8001656a:	fe b0 ee f5 	rcall	80014354 <uhd_suspend>
8001656e:	cb 0b       	rjmp	800164ce <uhc_enumeration_step14+0x192>
80016570:	80 02       	ld.sh	r2,r0[0x0]
80016572:	1c 20       	rsub	r0,lr
80016574:	80 02       	ld.sh	r2,r0[0x0]
80016576:	1c 40       	or	r0,lr
80016578:	80 02       	ld.sh	r2,r0[0x0]
8001657a:	1c 50       	eor	r0,lr
8001657c:	80 02       	ld.sh	r2,r0[0x0]
8001657e:	1c 5c       	eor	r12,lr
80016580:	80 02       	ld.sh	r2,r0[0x0]
80016582:	1c 64       	and	r4,lr
80016584:	80 02       	ld.sh	r2,r0[0x0]
80016586:	1c 80       	andn	r0,lr
80016588:	80 02       	ld.sh	r2,r0[0x0]
8001658a:	1c a4       	st.w	lr++,r4
8001658c:	80 02       	ld.sh	r2,r0[0x0]
8001658e:	1c c0       	st.b	lr++,r0
80016590:	80 02       	ld.sh	r2,r0[0x0]
80016592:	1c e0       	st.h	--lr,r0
80016594:	80 02       	ld.sh	r2,r0[0x0]
80016596:	1d 04       	ld.w	r4,lr++
80016598:	80 02       	ld.sh	r2,r0[0x0]
8001659a:	1d 28       	ld.uh	r8,lr++
8001659c:	80 02       	ld.sh	r2,r0[0x0]
8001659e:	1d 4c       	ld.w	r12,--lr
800165a0:	80 02       	ld.sh	r2,r0[0x0]
800165a2:	1d 68       	ld.uh	r8,--lr
800165a4:	80 02       	ld.sh	r2,r0[0x0]
800165a6:	1d 84       	ld.ub	r4,lr[0x0]
800165a8:	80 02       	ld.sh	r2,r0[0x0]
800165aa:	1d a0       	ld.ub	r0,lr[0x2]
800165ac:	80 02       	ld.sh	r2,r0[0x0]
800165ae:	1d c0       	ld.ub	r0,lr[0x4]
800165b0:	80 02       	ld.sh	r2,r0[0x0]
800165b2:	1d dc       	ld.ub	r12,lr[0x5]
800165b4:	80 02       	ld.sh	r2,r0[0x0]
800165b6:	1d fc       	ld.ub	r12,lr[0x7]
800165b8:	80 02       	ld.sh	r2,r0[0x0]
800165ba:	1e 24       	rsub	r4,pc
800165bc:	80 02       	ld.sh	r2,r0[0x0]
800165be:	1e 40       	or	r0,pc
800165c0:	80 02       	ld.sh	r2,r0[0x0]
800165c2:	1e 64       	and	r4,pc
800165c4:	80 02       	ld.sh	r2,r0[0x0]
800165c6:	1e 84       	andn	r4,pc
800165c8:	80 02       	ld.sh	r2,r0[0x0]
800165ca:	1e a8       	st.w	pc++,r8
800165cc:	80 02       	ld.sh	r2,r0[0x0]
800165ce:	1e d0       	st.w	--pc,r0
800165d0:	80 02       	ld.sh	r2,r0[0x0]
800165d2:	1e f4       	st.b	--pc,r4
800165d4:	80 02       	ld.sh	r2,r0[0x0]
800165d6:	1f 14       	ld.sh	r4,pc++
800165d8:	80 02       	ld.sh	r2,r0[0x0]
800165da:	1f 34       	ld.ub	r4,pc++

800165dc <uhc_notify_connection>:
800165dc:	d4 21       	pushm	r4-r7,lr
800165de:	18 96       	mov	r6,r12
800165e0:	58 0c       	cp.w	r12,0
800165e2:	c2 31       	brne	80016628 <uhc_notify_connection+0x4c>
800165e4:	e0 67 07 f0 	mov	r7,2032
800165e8:	3f f5       	mov	r5,-1
800165ea:	ef 3c 00 12 	ld.ub	r12,r7[18]
800165ee:	ea 0c 18 00 	cp.b	r12,r5
800165f2:	c2 e0       	breq	8001664e <uhc_notify_connection+0x72>
800165f4:	e0 68 3b 76 	mov	r8,15222
		UHC_CONNECTION_EVENT(uhc_dev_enum, true);
		uhc_enumeration_step1();
	} else {
		if (uhc_dev_enum == dev) {
			// Eventually stop enumeration timeout on-going on this device
			uhc_sof_timeout = 0;
800165f8:	e0 6b 00 ff 	mov	r11,255
		}
		// Abort all transfers (endpoint control and other) and free pipe(s)
		uhd_ep_free(dev->address, 0xFF);
800165fc:	b0 86       	st.b	r8[0x0],r6

		// Disable all USB interfaces (this includes HUB interface)
		for (uint8_t i = 0; i < UHC_NB_UHI; i++) {
			uhc_uhis[i].uninstall(dev);
800165fe:	fe b0 f2 f7 	rcall	80014bec <uhd_ep_free>
80016602:	49 44       	lddpc	r4,80016650 <uhc_notify_connection+0x74>
80016604:	0e 9c       	mov	r12,r7
80016606:	68 28       	ld.w	r8,r4[0x8]
80016608:	5d 18       	icall	r8
8001660a:	68 68       	ld.w	r8,r4[0x18]
		}

		UHC_CONNECTION_EVENT(dev, false);
8001660c:	0e 9c       	mov	r12,r7
8001660e:	5d 18       	icall	r8
80016610:	0e 9c       	mov	r12,r7
80016612:	0c 9b       	mov	r11,r6
		dev->address = UHC_USB_ADD_NOT_VALID;
80016614:	e0 a0 16 c7 	rcall	800193a2 <usb_connection>
		// Free USB configuration descriptor buffer
		if (dev->conf_desc != NULL) {
80016618:	ef 65 00 12 	st.b	r7[18],r5
8001661c:	6e 6c       	ld.w	r12,r7[0x18]
			free(dev->conf_desc);
8001661e:	58 0c       	cp.w	r12,0
80016620:	c0 30       	breq	80016626 <uhc_notify_connection+0x4a>
80016622:	e0 a0 53 af 	rcall	80020d80 <free>
	if (b_plug) {
		uhc_enum_try = 1;
#ifdef USB_HOST_HUB_SUPPORT
		uhc_dev_enum = dev;
#endif
		uhc_dev_enum->conf_desc = NULL;
80016626:	d8 22       	popm	r4-r7,pc
		uhc_dev_enum->address = 0;
		UHC_CONNECTION_EVENT(uhc_dev_enum, true);
80016628:	e0 68 07 f0 	mov	r8,2032
		uhc_enum_try = 1;
#ifdef USB_HOST_HUB_SUPPORT
		uhc_dev_enum = dev;
#endif
		uhc_dev_enum->conf_desc = NULL;
		uhc_dev_enum->address = 0;
8001662c:	30 09       	mov	r9,0
	if (b_plug) {
		uhc_enum_try = 1;
#ifdef USB_HOST_HUB_SUPPORT
		uhc_dev_enum = dev;
#endif
		uhc_dev_enum->conf_desc = NULL;
8001662e:	10 9c       	mov	r12,r8
 * \param dev      Information about device connected or disconnected
 */
static void uhc_connection_tree(bool b_plug, uhc_device_t* dev)
{
	if (b_plug) {
		uhc_enum_try = 1;
80016630:	f1 69 00 12 	st.b	r8[18],r9
#ifdef USB_HOST_HUB_SUPPORT
		uhc_dev_enum = dev;
#endif
		uhc_dev_enum->conf_desc = NULL;
		uhc_dev_enum->address = 0;
		UHC_CONNECTION_EVENT(uhc_dev_enum, true);
80016634:	91 69       	st.w	r8[0x18],r9
 * \param dev      Information about device connected or disconnected
 */
static void uhc_connection_tree(bool b_plug, uhc_device_t* dev)
{
	if (b_plug) {
		uhc_enum_try = 1;
80016636:	30 19       	mov	r9,1
#ifdef USB_HOST_HUB_SUPPORT
		uhc_dev_enum = dev;
#endif
		uhc_dev_enum->conf_desc = NULL;
		uhc_dev_enum->address = 0;
		UHC_CONNECTION_EVENT(uhc_dev_enum, true);
80016638:	e0 68 08 0c 	mov	r8,2060
		// Device connected on USB hub
		uhi_hub_send_reset(uhc_dev_enum, callback);
	} else
#endif
	{
		uhd_send_reset(callback);
8001663c:	30 1b       	mov	r11,1
8001663e:	b0 89       	st.b	r8[0x0],r9
80016640:	e0 a0 16 b1 	rcall	800193a2 <usb_connection>
80016644:	fe cc 07 74 	sub	r12,pc,1908
80016648:	fe b0 ee 7c 	rcall	80014340 <uhd_send_reset>
8001664c:	d8 22       	popm	r4-r7,pc
8001664e:	d8 22       	popm	r4-r7,pc
80016650:	80 02       	ld.sh	r2,r0[0x0]
80016652:	1f 34       	ld.ub	r4,pc++

80016654 <uhc_notify_resume>:
80016654:	d4 01       	pushm	lr
80016656:	20 2d       	sub	sp,8
80016658:	e0 69 07 f0 	mov	r9,2032
8001665c:	72 68       	ld.w	r8,r9[0x18]
8001665e:	11 f8       	ld.ub	r8,r8[0x7]
80016660:	ed b8 00 05 	bld	r8,0x5
80016664:	c1 61       	brne	80016690 <uhc_notify_resume+0x3c>
80016666:	f3 3c 00 12 	ld.ub	r12,r9[18]
8001666a:	30 08       	mov	r8,0
			}
			req.bmRequestType = USB_REQ_RECIP_DEVICE
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
			req.wIndex = 0;
			req.wLength = 0;
8001666c:	30 09       	mov	r9,0
				req.bRequest = USB_REQ_CLEAR_FEATURE;
			}
			req.bmRequestType = USB_REQ_RECIP_DEVICE
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
			req.wIndex = 0;
8001666e:	ba 38       	st.h	sp[0x6],r8
			req.wLength = 0;
			uhd_setup_request(dev->address,&req,NULL,0,NULL,NULL);
80016670:	ba 28       	st.h	sp[0x4],r8
80016672:	1a d9       	st.w	--sp,r9
	while(1) {
		if (dev->conf_desc->bmAttributes & USB_CONFIG_ATTR_REMOTE_WAKEUP) {
			if (b_enable) {
				req.bRequest = USB_REQ_SET_FEATURE;
			} else {
				req.bRequest = USB_REQ_CLEAR_FEATURE;
80016674:	12 98       	mov	r8,r9
80016676:	30 19       	mov	r9,1
			}
			req.bmRequestType = USB_REQ_RECIP_DEVICE
80016678:	ba d9       	st.b	sp[0x5],r9
8001667a:	30 09       	mov	r9,0
					|USB_REQ_TYPE_STANDARD|USB_REQ_DIR_OUT;
			req.wValue = USB_DEV_FEATURE_REMOTE_WAKEUP;
8001667c:	ba c9       	st.b	sp[0x4],r9
			req.wIndex = 0;
			req.wLength = 0;
			uhd_setup_request(dev->address,&req,NULL,0,NULL,NULL);
8001667e:	30 19       	mov	r9,1
80016680:	fa cb ff fc 	sub	r11,sp,-4
80016684:	ba 39       	st.h	sp[0x6],r9
80016686:	10 9a       	mov	r10,r8
80016688:	10 99       	mov	r9,r8
8001668a:	fe b0 f1 b5 	rcall	800149f4 <uhd_setup_request>
}

void uhc_notify_resume(void)
{
	uhc_remotewakeup(false);
	UHC_WAKEUP_EVENT();
8001668e:	2f fd       	sub	sp,-4
80016690:	e0 a0 16 8a 	rcall	800193a4 <usb_wakeup>
}
80016694:	2f ed       	sub	sp,-8
80016696:	d8 02       	popm	pc

80016698 <init_adc>:

  //  cpu_irq_enable();
}

// setup ad7923
void init_adc(void) {
80016698:	eb cd 40 80 	pushm	r7,lr
  u16 cmd;

  //  cpu_irq_disable();

  // at powerup, the part wants a dummy conversion with DIN high
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
8001669c:	30 1b       	mov	r11,1
8001669e:	fe 7c 28 00 	mov	r12,-55296
800166a2:	fe b0 e2 2d 	rcall	80012afc <spi_selectChip>
  spi_write(ADC_SPI, 0xffff);
800166a6:	e0 6b ff ff 	mov	r11,65535
800166aa:	fe 7c 28 00 	mov	r12,-55296
800166ae:	fe b0 e2 bc 	rcall	80012c26 <spi_write>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
800166b2:	30 1b       	mov	r11,1
800166b4:	fe 7c 28 00 	mov	r12,-55296
800166b8:	fe b0 e2 4a 	rcall	80012b4c <spi_unselectChip>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800166bc:	e1 b7 00 42 	mfsr	r7,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800166c0:	ee 78 42 40 	mov	r8,1000000
800166c4:	30 09       	mov	r9,0
800166c6:	e0 6a a8 bf 	mov	r10,43199
800166ca:	ea 1a 13 ba 	orh	r10,0x13ba
800166ce:	30 0b       	mov	r11,0
800166d0:	e0 a0 52 0f 	rcall	80020aee <__avr32_udiv64>
800166d4:	ee 0a 00 0a 	add	r10,r7,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800166d8:	e1 b8 00 42 	mfsr	r8,0x108
800166dc:	14 37       	cp.w	r7,r10
800166de:	e0 8b 00 1b 	brhi	80016714 <init_adc+0x7c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800166e2:	10 37       	cp.w	r7,r8
800166e4:	e0 8b 00 04 	brhi	800166ec <init_adc+0x54>
800166e8:	10 3a       	cp.w	r10,r8
800166ea:	c1 b2       	brcc	80016720 <init_adc+0x88>
  // wait for powerup time (5us in datasheet)
  delay_us(5);
  
  // write base configuration
  cmd = AD7923_CMD_BASE << 4;
  spi_selectChip( ADC_SPI, ADC_SPI_NPCS );
800166ec:	30 1b       	mov	r11,1
800166ee:	fe 7c 28 00 	mov	r12,-55296
800166f2:	fe b0 e2 05 	rcall	80012afc <spi_selectChip>
  spi_write( ADC_SPI, cmd );
800166f6:	e0 6b 83 10 	mov	r11,33552
800166fa:	fe 7c 28 00 	mov	r12,-55296
800166fe:	fe b0 e2 94 	rcall	80012c26 <spi_write>
  spi_unselectChip( ADC_SPI, ADC_SPI_NPCS );
80016702:	30 1b       	mov	r11,1
80016704:	fe 7c 28 00 	mov	r12,-55296
80016708:	fe b0 e2 22 	rcall	80012b4c <spi_unselectChip>

  //  cpu_irq_enable();
}
8001670c:	e3 cd 80 80 	ldm	sp++,r7,pc
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80016710:	e1 b8 00 42 	mfsr	r8,0x108
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80016714:	10 37       	cp.w	r7,r8
80016716:	fe 98 ff fd 	brls	80016710 <init_adc+0x78>
8001671a:	10 3a       	cp.w	r10,r8
8001671c:	cf a2       	brcc	80016710 <init_adc+0x78>
8001671e:	ce 7b       	rjmp	800166ec <init_adc+0x54>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80016720:	e1 b8 00 42 	mfsr	r8,0x108
80016724:	cd fb       	rjmp	800166e2 <init_adc+0x4a>
80016726:	d7 03       	nop

80016728 <adc_poll>:
80016728:	eb cd 40 c0 	pushm	r6-r7,lr
8001672c:	20 1d       	sub	sp,4
8001672e:	30 1b       	mov	r11,1
80016730:	fe 7c 28 00 	mov	r12,-55296
80016734:	fe b0 e1 e4 	rcall	80012afc <spi_selectChip>

  // data into AD7923 is a left-justified 12-bit value in a 16-bit word
  // so, always lshift the command before sending
  cmd = ( AD7923_CMD_BASE ) << 4;
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
  spi_write(ADC_SPI, cmd);
80016738:	e0 6b 83 10 	mov	r11,33552
8001673c:	fe 7c 28 00 	mov	r12,-55296
80016740:	fe b0 e2 73 	rcall	80012c26 <spi_write>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
80016744:	30 1b       	mov	r11,1
80016746:	fe 7c 28 00 	mov	r12,-55296
8001674a:	fe b0 e2 01 	rcall	80012b4c <spi_unselectChip>

  // get channel 0, setup channel 1
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD0 ) << 4;
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
8001674e:	30 1b       	mov	r11,1
80016750:	fe 7c 28 00 	mov	r12,-55296
80016754:	fe b0 e1 d4 	rcall	80012afc <spi_selectChip>
  spi_write(ADC_SPI, cmd);
80016758:	e0 6b 87 10 	mov	r11,34576
8001675c:	fe 7c 28 00 	mov	r12,-55296
80016760:	fe b0 e2 63 	rcall	80012c26 <spi_write>
  spi_read(ADC_SPI, &val);
80016764:	fa c6 ff fe 	sub	r6,sp,-2
80016768:	fe 7c 28 00 	mov	r12,-55296
8001676c:	0c 9b       	mov	r11,r6
8001676e:	fe b0 e2 6a 	rcall	80012c42 <spi_read>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
80016772:	30 1b       	mov	r11,1
80016774:	fe 7c 28 00 	mov	r12,-55296
80016778:	fe b0 e1 ea 	rcall	80012b4c <spi_unselectChip>
  (*dst)[0] = val & 0xfff; 
8001677c:	9a 18       	ld.sh	r8,sp[0x2]
8001677e:	f1 d8 c0 0c 	bfextu	r8,r8,0x0,0xc
80016782:	e0 67 08 14 	mov	r7,2068
80016786:	30 1b       	mov	r11,1

  // get channel 1, setup channel 2
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD1 ) << 4;
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
80016788:	ae 08       	st.h	r7[0x0],r8
8001678a:	fe 7c 28 00 	mov	r12,-55296
8001678e:	fe b0 e1 b7 	rcall	80012afc <spi_selectChip>
  spi_write(ADC_SPI, cmd);
80016792:	e0 6b 8b 10 	mov	r11,35600
80016796:	fe 7c 28 00 	mov	r12,-55296
8001679a:	fe b0 e2 46 	rcall	80012c26 <spi_write>
  spi_read(ADC_SPI, &val);
8001679e:	0c 9b       	mov	r11,r6
800167a0:	fe 7c 28 00 	mov	r12,-55296
800167a4:	fe b0 e2 4f 	rcall	80012c42 <spi_read>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
800167a8:	30 1b       	mov	r11,1
800167aa:	fe 7c 28 00 	mov	r12,-55296
800167ae:	fe b0 e1 cf 	rcall	80012b4c <spi_unselectChip>
  (*dst)[1] = val & 0xfff;
800167b2:	9a 18       	ld.sh	r8,sp[0x2]
800167b4:	f1 d8 c0 0c 	bfextu	r8,r8,0x0,0xc
800167b8:	30 1b       	mov	r11,1

  // get channel 2, setup channel 3
  cmd = ( AD7923_CMD_BASE | AD7923_CTL_ADD1 | AD7923_CTL_ADD0 ) << 4;
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
800167ba:	ae 18       	st.h	r7[0x2],r8
800167bc:	fe 7c 28 00 	mov	r12,-55296
800167c0:	fe b0 e1 9e 	rcall	80012afc <spi_selectChip>
  spi_write(ADC_SPI, cmd);
800167c4:	e0 6b 8f 10 	mov	r11,36624
800167c8:	fe 7c 28 00 	mov	r12,-55296
800167cc:	fe b0 e2 2d 	rcall	80012c26 <spi_write>
  spi_read(ADC_SPI, &val);
800167d0:	0c 9b       	mov	r11,r6
800167d2:	fe 7c 28 00 	mov	r12,-55296
800167d6:	fe b0 e2 36 	rcall	80012c42 <spi_read>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
800167da:	30 1b       	mov	r11,1
800167dc:	fe 7c 28 00 	mov	r12,-55296
800167e0:	fe b0 e1 b6 	rcall	80012b4c <spi_unselectChip>
  (*dst)[2] = val & 0xfff;
800167e4:	9a 18       	ld.sh	r8,sp[0x2]
800167e6:	f1 d8 c0 0c 	bfextu	r8,r8,0x0,0xc
800167ea:	30 1b       	mov	r11,1

  // get channel 3, dummy write
  cmd = ( AD7923_CMD_BASE ) << 4;
  spi_selectChip(ADC_SPI, ADC_SPI_NPCS);
800167ec:	ae 28       	st.h	r7[0x4],r8
800167ee:	fe 7c 28 00 	mov	r12,-55296
800167f2:	fe b0 e1 85 	rcall	80012afc <spi_selectChip>
  spi_write(ADC_SPI, cmd);
800167f6:	e0 6b 83 10 	mov	r11,33552
800167fa:	fe 7c 28 00 	mov	r12,-55296
800167fe:	fe b0 e2 14 	rcall	80012c26 <spi_write>
  spi_read(ADC_SPI, &val);
80016802:	0c 9b       	mov	r11,r6
80016804:	fe 7c 28 00 	mov	r12,-55296
80016808:	fe b0 e2 1d 	rcall	80012c42 <spi_read>
  spi_unselectChip(ADC_SPI, ADC_SPI_NPCS);
8001680c:	30 1b       	mov	r11,1
8001680e:	fe 7c 28 00 	mov	r12,-55296
80016812:	fe b0 e1 9d 	rcall	80012b4c <spi_unselectChip>
  (*dst)[3] = val & 0xfff;
80016816:	9a 18       	ld.sh	r8,sp[0x2]
80016818:	f1 d8 c0 0c 	bfextu	r8,r8,0x0,0xc
  for(i=0; i<4; i++) {        
    // TODO:
    /// probably want more filtering before posting events
    //    if(adcVal[i] != adcOldVal[i]) {
    /// this is a dirty way! but the two lower bits are pretty noisy.
    if( (adcVal[i] & 0xffc) != ( adcOldVal[i] & 0xffc) ) {
8001681c:	ae 38       	st.h	r7[0x6],r8
8001681e:	8e 09       	ld.sh	r9,r7[0x0]
80016820:	e0 66 08 1c 	mov	r6,2076
80016824:	8c 88       	ld.uh	r8,r6[0x0]
80016826:	f3 e8 20 08 	eor	r8,r9,r8
8001682a:	e2 18 0f fc 	andl	r8,0xffc,COH
8001682e:	c1 91       	brne	80016860 <adc_poll+0x138>
80016830:	8e 19       	ld.sh	r9,r7[0x2]
80016832:	8c 98       	ld.uh	r8,r6[0x2]
80016834:	f3 e8 20 08 	eor	r8,r9,r8
80016838:	e2 18 0f fc 	andl	r8,0xffc,COH
8001683c:	c3 61       	brne	800168a8 <adc_poll+0x180>
8001683e:	8e 29       	ld.sh	r9,r7[0x4]
80016840:	8c a8       	ld.uh	r8,r6[0x4]
80016842:	f3 e8 20 08 	eor	r8,r9,r8
80016846:	e2 18 0f fc 	andl	r8,0xffc,COH
8001684a:	c2 31       	brne	80016890 <adc_poll+0x168>
8001684c:	8e 39       	ld.sh	r9,r7[0x6]
8001684e:	8c b8       	ld.uh	r8,r6[0x6]
80016850:	f3 e8 20 08 	eor	r8,r9,r8
80016854:	e2 18 0f fc 	andl	r8,0xffc,COH
      e.type = adctypes[i];
      e.data = (S16)(adcVal[i]);
      event_post(&e);
    }
  }
}
80016858:	c0 e1       	brne	80016874 <adc_poll+0x14c>
8001685a:	2f fd       	sub	sp,-4
    /// probably want more filtering before posting events
    //    if(adcVal[i] != adcOldVal[i]) {
    /// this is a dirty way! but the two lower bits are pretty noisy.
    if( (adcVal[i] & 0xffc) != ( adcOldVal[i] & 0xffc) ) {
      adcOldVal[i] = adcVal[i];
      e.type = adctypes[i];
8001685c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
      e.data = (S16)(adcVal[i]);
80016860:	e0 68 08 24 	mov	r8,2084
      event_post(&e);
80016864:	ac 09       	st.h	r6[0x0],r9
    /// probably want more filtering before posting events
    //    if(adcVal[i] != adcOldVal[i]) {
    /// this is a dirty way! but the two lower bits are pretty noisy.
    if( (adcVal[i] & 0xffc) != ( adcOldVal[i] & 0xffc) ) {
      adcOldVal[i] = adcVal[i];
      e.type = adctypes[i];
80016866:	91 19       	st.w	r8[0x4],r9
      e.data = (S16)(adcVal[i]);
      event_post(&e);
80016868:	30 09       	mov	r9,0
8001686a:	10 9c       	mov	r12,r8
8001686c:	91 09       	st.w	r8[0x0],r9
    // TODO:
    /// probably want more filtering before posting events
    //    if(adcVal[i] != adcOldVal[i]) {
    /// this is a dirty way! but the two lower bits are pretty noisy.
    if( (adcVal[i] & 0xffc) != ( adcOldVal[i] & 0xffc) ) {
      adcOldVal[i] = adcVal[i];
8001686e:	e0 a0 05 ef 	rcall	8001744c <event_post>
      e.type = adctypes[i];
80016872:	cd fb       	rjmp	80016830 <adc_poll+0x108>
      e.data = (S16)(adcVal[i]);
80016874:	e0 68 08 1c 	mov	r8,2076
      event_post(&e);
80016878:	b0 39       	st.h	r8[0x6],r9
    /// probably want more filtering before posting events
    //    if(adcVal[i] != adcOldVal[i]) {
    /// this is a dirty way! but the two lower bits are pretty noisy.
    if( (adcVal[i] & 0xffc) != ( adcOldVal[i] & 0xffc) ) {
      adcOldVal[i] = adcVal[i];
      e.type = adctypes[i];
8001687a:	e0 68 08 24 	mov	r8,2084
      e.data = (S16)(adcVal[i]);
      event_post(&e);
8001687e:	91 19       	st.w	r8[0x4],r9
    }
  }
}
80016880:	30 39       	mov	r9,3
80016882:	10 9c       	mov	r12,r8
80016884:	91 09       	st.w	r8[0x0],r9
    // TODO:
    /// probably want more filtering before posting events
    //    if(adcVal[i] != adcOldVal[i]) {
    /// this is a dirty way! but the two lower bits are pretty noisy.
    if( (adcVal[i] & 0xffc) != ( adcOldVal[i] & 0xffc) ) {
      adcOldVal[i] = adcVal[i];
80016886:	e0 a0 05 e3 	rcall	8001744c <event_post>
      e.type = adctypes[i];
8001688a:	2f fd       	sub	sp,-4
      e.data = (S16)(adcVal[i]);
8001688c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
      event_post(&e);
80016890:	e0 68 08 1c 	mov	r8,2076
80016894:	b0 29       	st.h	r8[0x4],r9
80016896:	e0 68 08 24 	mov	r8,2084
    // TODO:
    /// probably want more filtering before posting events
    //    if(adcVal[i] != adcOldVal[i]) {
    /// this is a dirty way! but the two lower bits are pretty noisy.
    if( (adcVal[i] & 0xffc) != ( adcOldVal[i] & 0xffc) ) {
      adcOldVal[i] = adcVal[i];
8001689a:	91 19       	st.w	r8[0x4],r9
8001689c:	30 29       	mov	r9,2
      e.type = adctypes[i];
8001689e:	10 9c       	mov	r12,r8
      e.data = (S16)(adcVal[i]);
800168a0:	91 09       	st.w	r8[0x0],r9
    /// probably want more filtering before posting events
    //    if(adcVal[i] != adcOldVal[i]) {
    /// this is a dirty way! but the two lower bits are pretty noisy.
    if( (adcVal[i] & 0xffc) != ( adcOldVal[i] & 0xffc) ) {
      adcOldVal[i] = adcVal[i];
      e.type = adctypes[i];
800168a2:	e0 a0 05 d5 	rcall	8001744c <event_post>
800168a6:	cd 3b       	rjmp	8001684c <adc_poll+0x124>
      e.data = (S16)(adcVal[i]);
      event_post(&e);
800168a8:	e0 68 08 1c 	mov	r8,2076
800168ac:	b0 19       	st.h	r8[0x2],r9
800168ae:	e0 68 08 24 	mov	r8,2084
800168b2:	91 19       	st.w	r8[0x4],r9
800168b4:	30 19       	mov	r9,1
800168b6:	10 9c       	mov	r12,r8
800168b8:	91 09       	st.w	r8[0x0],r9
800168ba:	e0 a0 05 c9 	rcall	8001744c <event_post>
800168be:	cc 0b       	rjmp	8001683e <adc_poll+0x116>

800168c0 <init_app_timers>:
static void adc_timer_callback(int tag) {
  adc_poll();
}

//====== external
void init_app_timers(void) {
800168c0:	d4 01       	pushm	lr
  set_timer(&screenTimer, eScreenTimerTag, 30,   &screen_timer_callback, 1);
800168c2:	30 18       	mov	r8,1
800168c4:	fe c9 ff c0 	sub	r9,pc,-64
800168c8:	31 ea       	mov	r10,30
800168ca:	30 0b       	mov	r11,0
800168cc:	e0 6c 08 44 	mov	r12,2116
  set_timer(&encTimer,    eEncTimerTag,    20,    &enc_timer_callback,    1);
800168d0:	e0 a0 13 32 	rcall	80018f34 <set_timer>
800168d4:	30 18       	mov	r8,1
800168d6:	fe c9 ff ae 	sub	r9,pc,-82
800168da:	10 9b       	mov	r11,r8
800168dc:	31 4a       	mov	r10,20
  set_timer(&adcTimer,    eAdcTimerTag,    5,    &adc_timer_callback,    1);
800168de:	e0 6c 08 58 	mov	r12,2136
800168e2:	e0 a0 13 29 	rcall	80018f34 <set_timer>
800168e6:	30 18       	mov	r8,1
800168e8:	fe c9 ff ec 	sub	r9,pc,-20
}
800168ec:	30 5a       	mov	r10,5
800168ee:	30 3b       	mov	r11,3
800168f0:	e0 6c 08 30 	mov	r12,2096
800168f4:	e0 a0 13 20 	rcall	80018f34 <set_timer>
800168f8:	d8 02       	popm	pc
800168fa:	d7 03       	nop

800168fc <adc_timer_callback>:
800168fc:	d4 01       	pushm	lr
800168fe:	c1 5f       	rcall	80016728 <adc_poll>
80016900:	d8 02       	popm	pc
80016902:	d7 03       	nop

80016904 <screen_timer_callback>:
80016904:	eb cd 40 80 	pushm	r7,lr
80016908:	e0 67 19 a0 	mov	r7,6560
  cyclesNow = Get_system_register(AVR32_COUNT);
  print_dbg(" \lcycles:"); print_dbg_ulong(cyclesNow - cycles);
  cycles = cyclesNow;
  */

  if(refresh) {
8001690c:	0f 88       	ld.ub	r8,r7[0x0]
8001690e:	58 08       	cp.w	r8,0
    e.type = kEventRefresh;
80016910:	c0 a0       	breq	80016924 <screen_timer_callback+0x20>
80016912:	e0 68 08 6c 	mov	r8,2156
80016916:	30 49       	mov	r9,4
    event_post(&e);
80016918:	10 9c       	mov	r12,r8
8001691a:	91 09       	st.w	r8[0x0],r9
    refresh = 0;
8001691c:	e0 a0 05 98 	rcall	8001744c <event_post>
80016920:	30 08       	mov	r8,0
80016922:	ae 88       	st.b	r7[0x0],r8
80016924:	e3 cd 80 80 	ldm	sp++,r7,pc

80016928 <enc_timer_callback>:
80016928:	eb cd 40 fc 	pushm	r2-r7,lr
8001692c:	30 08       	mov	r8,0
8001692e:	30 0a       	mov	r10,0

// encoder accumulator polling callback
//// FIXME optimize
static void enc_timer_callback(int tag) {
  static s16 val;
  for(i=0; i<NUM_ENC; i++) {
80016930:	e0 66 08 2c 	mov	r6,2092
80016934:	e0 67 3b 78 	mov	r7,15224
80016938:	ac 88       	st.b	r6[0x0],r8
    val = enc[i].val;
    if ( (val > enc[i].thresh) || (val < (enc[i].thresh * -1)) ) {
    //  if( (val > ENC_THRESH) || (val < ENC_NEG_THRESH) ) {
      e.type = enc[i].event;
8001693a:	e0 65 08 74 	mov	r5,2164

// encoder accumulator polling callback
//// FIXME optimize
static void enc_timer_callback(int tag) {
  static s16 val;
  for(i=0; i<NUM_ENC; i++) {
8001693e:	14 98       	mov	r8,r10
80016940:	e0 64 08 6c 	mov	r4,2156
    val = enc[i].val;
80016944:	14 92       	mov	r2,r10
80016946:	30 33       	mov	r3,3
    if ( (val > enc[i].thresh) || (val < (enc[i].thresh * -1)) ) {
    //  if( (val > ENC_THRESH) || (val < ENC_NEG_THRESH) ) {
      e.type = enc[i].event;
      e.data = val;
      enc[i].val = 0;
80016948:	c0 28       	rjmp	8001694c <enc_timer_callback+0x24>
8001694a:	10 9a       	mov	r10,r8
// encoder accumulator polling callback
//// FIXME optimize
static void enc_timer_callback(int tag) {
  static s16 val;
  for(i=0; i<NUM_ENC; i++) {
    val = enc[i].val;
8001694c:	f0 08 00 18 	add	r8,r8,r8<<0x1
80016950:	f0 cb ff ff 	sub	r11,r8,-1
    if ( (val > enc[i].thresh) || (val < (enc[i].thresh * -1)) ) {
    //  if( (val > ENC_THRESH) || (val < ENC_NEG_THRESH) ) {
      e.type = enc[i].event;
80016954:	ee 0b 04 29 	ld.sh	r9,r7[r11<<0x2]
//// FIXME optimize
static void enc_timer_callback(int tag) {
  static s16 val;
  for(i=0; i<NUM_ENC; i++) {
    val = enc[i].val;
    if ( (val > enc[i].thresh) || (val < (enc[i].thresh * -1)) ) {
80016958:	aa 09       	st.h	r5[0x0],r9
8001695a:	ee 08 00 2e 	add	lr,r7,r8<<0x2
8001695e:	e0 6c 08 6c 	mov	r12,2156
80016962:	ee 0b 00 28 	add	r8,r7,r11<<0x2
80016966:	90 18       	ld.sh	r8,r8[0x2]
80016968:	f0 09 19 00 	cp.h	r9,r8
    //  if( (val > ENC_THRESH) || (val < ENC_NEG_THRESH) ) {
      e.type = enc[i].event;
      e.data = val;
8001696c:	e0 89 00 05 	brgt	80016976 <enc_timer_callback+0x4e>
      enc[i].val = 0;
80016970:	5c 38       	neg	r8
80016972:	10 39       	cp.w	r9,r8
  static s16 val;
  for(i=0; i<NUM_ENC; i++) {
    val = enc[i].val;
    if ( (val > enc[i].thresh) || (val < (enc[i].thresh * -1)) ) {
    //  if( (val > ENC_THRESH) || (val < ENC_NEG_THRESH) ) {
      e.type = enc[i].event;
80016974:	c1 54       	brge	8001699e <enc_timer_callback+0x76>
      e.data = val;
      enc[i].val = 0;
      event_post(&e);
80016976:	89 19       	st.w	r4[0x4],r9
80016978:	7c 28       	ld.w	r8,lr[0x8]
      print_dbg("\r\n posting encoder event, num: ");
8001697a:	ee 0b 0a 22 	st.h	r7[r11<<0x2],r2
8001697e:	89 08       	st.w	r4[0x0],r8
      print_dbg_ulong(i);
80016980:	e0 a0 05 66 	rcall	8001744c <event_post>
80016984:	48 cc       	lddpc	r12,800169b4 <enc_timer_callback+0x8c>
      print_dbg(" , val: ");
80016986:	fe b0 e3 63 	rcall	8001304c <print_dbg>
8001698a:	0d 8c       	ld.ub	r12,r6[0x0]
      print_dbg_ulong(val);
8001698c:	fe b0 e3 3e 	rcall	80013008 <print_dbg_ulong>
80016990:	48 ac       	lddpc	r12,800169b8 <enc_timer_callback+0x90>
80016992:	fe b0 e3 5d 	rcall	8001304c <print_dbg>

// encoder accumulator polling callback
//// FIXME optimize
static void enc_timer_callback(int tag) {
  static s16 val;
  for(i=0; i<NUM_ENC; i++) {
80016996:	8a 0c       	ld.sh	r12,r5[0x0]
80016998:	fe b0 e3 38 	rcall	80013008 <print_dbg_ulong>
8001699c:	0d 8a       	ld.ub	r10,r6[0x0]
8001699e:	f4 c8 ff ff 	sub	r8,r10,-1
800169a2:	5c 58       	castu.b	r8
800169a4:	ac 88       	st.b	r6[0x0],r8
800169a6:	e6 08 18 00 	cp.b	r8,r3
800169aa:	fe 98 ff d0 	brls	8001694a <enc_timer_callback+0x22>
800169ae:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
800169b2:	d7 03       	nop
800169b4:	80 02       	ld.sh	r2,r0[0x0]
800169b6:	1f 54       	ld.sh	r4,--pc
800169b8:	80 02       	ld.sh	r2,r0[0x0]
800169ba:	1f 74       	ld.ub	r4,--pc

800169bc <bfin_set_param>:
/*   bfin_end_transfer(); */
/* } */


//void bfin_set_param(u8 idx, f32 x ) {
void bfin_set_param(u8 idx, fix16_t x ) {
800169bc:	eb cd 40 e0 	pushm	r5-r7,lr

  static ParamValue pval;
  pval.asInt = (s32)x;
800169c0:	f6 08 16 18 	lsr	r8,r11,0x18
800169c4:	e0 66 08 76 	mov	r6,2166
800169c8:	ac bb       	st.b	r6[0x3],r11
800169ca:	ac 88       	st.b	r6[0x0],r8
800169cc:	f1 db c2 08 	bfextu	r8,r11,0x10,0x8
800169d0:	f7 db c1 08 	bfextu	r11,r11,0x8,0x8
800169d4:	30 07       	mov	r7,0
/*   bfin_end_transfer(); */
/* } */


//void bfin_set_param(u8 idx, f32 x ) {
void bfin_set_param(u8 idx, fix16_t x ) {
800169d6:	ac 98       	st.b	r6[0x1],r8

  static ParamValue pval;
  pval.asInt = (s32)x;
800169d8:	18 95       	mov	r5,r12

  // command
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
800169da:	ac ab       	st.b	r6[0x2],r11
800169dc:	fe 7c 24 00 	mov	r12,-56320
800169e0:	0e 9b       	mov	r11,r7
800169e2:	fe b0 e0 8d 	rcall	80012afc <spi_selectChip>
  spi_write(BFIN_SPI, MSG_SET_PARAM_COM);
800169e6:	0e 9b       	mov	r11,r7
800169e8:	fe 7c 24 00 	mov	r12,-56320
800169ec:	fe b0 e1 1d 	rcall	80012c26 <spi_write>
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
800169f0:	0e 9b       	mov	r11,r7
800169f2:	fe 7c 24 00 	mov	r12,-56320
800169f6:	fe b0 e0 ab 	rcall	80012b4c <spi_unselectChip>
  //idx
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
800169fa:	0e 9b       	mov	r11,r7
800169fc:	fe 7c 24 00 	mov	r12,-56320
80016a00:	fe b0 e0 7e 	rcall	80012afc <spi_selectChip>
  spi_write(BFIN_SPI, idx);
80016a04:	0a 9b       	mov	r11,r5
80016a06:	fe 7c 24 00 	mov	r12,-56320
80016a0a:	fe b0 e1 0e 	rcall	80012c26 <spi_write>
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016a0e:	0e 9b       	mov	r11,r7
80016a10:	fe 7c 24 00 	mov	r12,-56320
80016a14:	fe b0 e0 9c 	rcall	80012b4c <spi_unselectChip>
  //val0
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016a18:	0e 9b       	mov	r11,r7
80016a1a:	fe 7c 24 00 	mov	r12,-56320
80016a1e:	fe b0 e0 6f 	rcall	80012afc <spi_selectChip>
  spi_write(BFIN_SPI, pval.asByte[0]);
80016a22:	0d 8b       	ld.ub	r11,r6[0x0]
80016a24:	fe 7c 24 00 	mov	r12,-56320
80016a28:	fe b0 e0 ff 	rcall	80012c26 <spi_write>
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016a2c:	0e 9b       	mov	r11,r7
80016a2e:	fe 7c 24 00 	mov	r12,-56320
80016a32:	fe b0 e0 8d 	rcall	80012b4c <spi_unselectChip>
  // val1
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016a36:	0e 9b       	mov	r11,r7
80016a38:	fe 7c 24 00 	mov	r12,-56320
80016a3c:	fe b0 e0 60 	rcall	80012afc <spi_selectChip>
  spi_write(BFIN_SPI, pval.asByte[1]);
80016a40:	0d 9b       	ld.ub	r11,r6[0x1]
80016a42:	fe 7c 24 00 	mov	r12,-56320
80016a46:	fe b0 e0 f0 	rcall	80012c26 <spi_write>
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016a4a:	0e 9b       	mov	r11,r7
80016a4c:	fe 7c 24 00 	mov	r12,-56320
80016a50:	fe b0 e0 7e 	rcall	80012b4c <spi_unselectChip>
  //val2
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016a54:	0e 9b       	mov	r11,r7
80016a56:	fe 7c 24 00 	mov	r12,-56320
80016a5a:	fe b0 e0 51 	rcall	80012afc <spi_selectChip>
  spi_write(BFIN_SPI, pval.asByte[2]);
80016a5e:	0d ab       	ld.ub	r11,r6[0x2]
80016a60:	fe 7c 24 00 	mov	r12,-56320
80016a64:	fe b0 e0 e1 	rcall	80012c26 <spi_write>
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016a68:	0e 9b       	mov	r11,r7
80016a6a:	fe 7c 24 00 	mov	r12,-56320
80016a6e:	fe b0 e0 6f 	rcall	80012b4c <spi_unselectChip>
  //val3
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016a72:	0e 9b       	mov	r11,r7
80016a74:	fe 7c 24 00 	mov	r12,-56320
80016a78:	fe b0 e0 42 	rcall	80012afc <spi_selectChip>
  spi_write(BFIN_SPI, pval.asByte[3]);
80016a7c:	0d bb       	ld.ub	r11,r6[0x3]
80016a7e:	fe 7c 24 00 	mov	r12,-56320
80016a82:	fe b0 e0 d2 	rcall	80012c26 <spi_write>
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016a86:	0e 9b       	mov	r11,r7
80016a88:	fe 7c 24 00 	mov	r12,-56320
80016a8c:	fe b0 e0 60 	rcall	80012b4c <spi_unselectChip>
}
80016a90:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80016a94 <bfin_get_param_desc>:
80016a94:	eb cd 40 e0 	pushm	r5-r7,lr
80016a98:	20 2d       	sub	sp,8
80016a9a:	16 97       	mov	r7,r11
80016a9c:	18 96       	mov	r6,r12
80016a9e:	30 0b       	mov	r11,0
80016aa0:	fe 7c 24 00 	mov	r12,-56320
void bfin_get_param_desc(u16 paramIdx, volatile ParamDesc* pDesc) {
  ParamValue pval;
  u16 x; // u16 for spi_read()
  u8 i;
  // command 
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016aa4:	fe b0 e0 2c 	rcall	80012afc <spi_selectChip>
  spi_write(BFIN_SPI, MSG_GET_PARAM_DESC_COM);
80016aa8:	30 3b       	mov	r11,3
80016aaa:	fe 7c 24 00 	mov	r12,-56320
80016aae:	fe b0 e0 bc 	rcall	80012c26 <spi_write>
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016ab2:	30 0b       	mov	r11,0
80016ab4:	fe 7c 24 00 	mov	r12,-56320
80016ab8:	fe b0 e0 4a 	rcall	80012b4c <spi_unselectChip>
  // idx
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016abc:	30 0b       	mov	r11,0
80016abe:	fe 7c 24 00 	mov	r12,-56320
80016ac2:	fe b0 e0 1d 	rcall	80012afc <spi_selectChip>
  spi_write(BFIN_SPI, paramIdx);
80016ac6:	f7 d6 c0 10 	bfextu	r11,r6,0x0,0x10
80016aca:	fe 7c 24 00 	mov	r12,-56320
80016ace:	fe b0 e0 ac 	rcall	80012c26 <spi_write>
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016ad2:	30 0b       	mov	r11,0
80016ad4:	fe 7c 24 00 	mov	r12,-56320
80016ad8:	fe b0 e0 3a 	rcall	80012b4c <spi_unselectChip>
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016adc:	30 0b       	mov	r11,0
80016ade:	fe 7c 24 00 	mov	r12,-56320
80016ae2:	fe b0 e0 0d 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
80016ae6:	30 0b       	mov	r11,0
80016ae8:	fe 7c 24 00 	mov	r12,-56320
80016aec:	fe b0 e0 9d 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
80016af0:	fa c6 ff fa 	sub	r6,sp,-6
80016af4:	fe 7c 24 00 	mov	r12,-56320
80016af8:	0c 9b       	mov	r11,r6
80016afa:	fe b0 e0 a4 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016afe:	30 0b       	mov	r11,0
80016b00:	fe 7c 24 00 	mov	r12,-56320
80016b04:	fe b0 e0 24 	rcall	80012b4c <spi_unselectChip>
    pDesc->label[i] = (char)(x & 0xff);
80016b08:	1b f8       	ld.ub	r8,sp[0x7]
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016b0a:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016b0c:	ae 88       	st.b	r7[0x0],r8
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016b0e:	fe 7c 24 00 	mov	r12,-56320
80016b12:	fe b0 df f5 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
80016b16:	30 0b       	mov	r11,0
80016b18:	fe 7c 24 00 	mov	r12,-56320
80016b1c:	fe b0 e0 85 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
80016b20:	0c 9b       	mov	r11,r6
80016b22:	fe 7c 24 00 	mov	r12,-56320
80016b26:	fe b0 e0 8e 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016b2a:	30 0b       	mov	r11,0
80016b2c:	fe 7c 24 00 	mov	r12,-56320
80016b30:	fe b0 e0 0e 	rcall	80012b4c <spi_unselectChip>
    pDesc->label[i] = (char)(x & 0xff);
80016b34:	1b f8       	ld.ub	r8,sp[0x7]
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016b36:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016b38:	ae 98       	st.b	r7[0x1],r8
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016b3a:	fe 7c 24 00 	mov	r12,-56320
80016b3e:	fe b0 df df 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
80016b42:	30 0b       	mov	r11,0
80016b44:	fe 7c 24 00 	mov	r12,-56320
80016b48:	fe b0 e0 6f 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
80016b4c:	0c 9b       	mov	r11,r6
80016b4e:	fe 7c 24 00 	mov	r12,-56320
80016b52:	fe b0 e0 78 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016b56:	30 0b       	mov	r11,0
80016b58:	fe 7c 24 00 	mov	r12,-56320
80016b5c:	fe b0 df f8 	rcall	80012b4c <spi_unselectChip>
    pDesc->label[i] = (char)(x & 0xff);
80016b60:	1b f8       	ld.ub	r8,sp[0x7]
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016b62:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016b64:	ae a8       	st.b	r7[0x2],r8
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016b66:	fe 7c 24 00 	mov	r12,-56320
80016b6a:	fe b0 df c9 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
80016b6e:	30 0b       	mov	r11,0
80016b70:	fe 7c 24 00 	mov	r12,-56320
80016b74:	fe b0 e0 59 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
80016b78:	0c 9b       	mov	r11,r6
80016b7a:	fe 7c 24 00 	mov	r12,-56320
80016b7e:	fe b0 e0 62 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016b82:	30 0b       	mov	r11,0
80016b84:	fe 7c 24 00 	mov	r12,-56320
80016b88:	fe b0 df e2 	rcall	80012b4c <spi_unselectChip>
    pDesc->label[i] = (char)(x & 0xff);
80016b8c:	1b f8       	ld.ub	r8,sp[0x7]
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016b8e:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016b90:	ae b8       	st.b	r7[0x3],r8
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016b92:	fe 7c 24 00 	mov	r12,-56320
80016b96:	fe b0 df b3 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
80016b9a:	30 0b       	mov	r11,0
80016b9c:	fe 7c 24 00 	mov	r12,-56320
80016ba0:	fe b0 e0 43 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
80016ba4:	0c 9b       	mov	r11,r6
80016ba6:	fe 7c 24 00 	mov	r12,-56320
80016baa:	fe b0 e0 4c 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016bae:	30 0b       	mov	r11,0
80016bb0:	fe 7c 24 00 	mov	r12,-56320
80016bb4:	fe b0 df cc 	rcall	80012b4c <spi_unselectChip>
    pDesc->label[i] = (char)(x & 0xff);
80016bb8:	1b f8       	ld.ub	r8,sp[0x7]
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016bba:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016bbc:	ae c8       	st.b	r7[0x4],r8
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016bbe:	fe 7c 24 00 	mov	r12,-56320
80016bc2:	fe b0 df 9d 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
80016bc6:	30 0b       	mov	r11,0
80016bc8:	fe 7c 24 00 	mov	r12,-56320
80016bcc:	fe b0 e0 2d 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
80016bd0:	0c 9b       	mov	r11,r6
80016bd2:	fe 7c 24 00 	mov	r12,-56320
80016bd6:	fe b0 e0 36 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016bda:	30 0b       	mov	r11,0
80016bdc:	fe 7c 24 00 	mov	r12,-56320
80016be0:	fe b0 df b6 	rcall	80012b4c <spi_unselectChip>
    pDesc->label[i] = (char)(x & 0xff);
80016be4:	1b f8       	ld.ub	r8,sp[0x7]
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016be6:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016be8:	ae d8       	st.b	r7[0x5],r8
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016bea:	fe 7c 24 00 	mov	r12,-56320
80016bee:	fe b0 df 87 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
80016bf2:	30 0b       	mov	r11,0
80016bf4:	fe 7c 24 00 	mov	r12,-56320
80016bf8:	fe b0 e0 17 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
80016bfc:	0c 9b       	mov	r11,r6
80016bfe:	fe 7c 24 00 	mov	r12,-56320
80016c02:	fe b0 e0 20 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016c06:	30 0b       	mov	r11,0
80016c08:	fe 7c 24 00 	mov	r12,-56320
80016c0c:	fe b0 df a0 	rcall	80012b4c <spi_unselectChip>
    pDesc->label[i] = (char)(x & 0xff);
80016c10:	1b f8       	ld.ub	r8,sp[0x7]
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016c12:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016c14:	ae e8       	st.b	r7[0x6],r8
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016c16:	fe 7c 24 00 	mov	r12,-56320
80016c1a:	fe b0 df 71 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
80016c1e:	30 0b       	mov	r11,0
80016c20:	fe 7c 24 00 	mov	r12,-56320
80016c24:	fe b0 e0 01 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
80016c28:	0c 9b       	mov	r11,r6
80016c2a:	fe 7c 24 00 	mov	r12,-56320
80016c2e:	fe b0 e0 0a 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016c32:	30 0b       	mov	r11,0
80016c34:	fe 7c 24 00 	mov	r12,-56320
80016c38:	fe b0 df 8a 	rcall	80012b4c <spi_unselectChip>
    pDesc->label[i] = (char)(x & 0xff);
80016c3c:	1b f8       	ld.ub	r8,sp[0x7]
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016c3e:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016c40:	ae f8       	st.b	r7[0x7],r8
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016c42:	fe 7c 24 00 	mov	r12,-56320
80016c46:	fe b0 df 5b 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
80016c4a:	30 0b       	mov	r11,0
80016c4c:	fe 7c 24 00 	mov	r12,-56320
80016c50:	fe b0 df eb 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
80016c54:	0c 9b       	mov	r11,r6
80016c56:	fe 7c 24 00 	mov	r12,-56320
80016c5a:	fe b0 df f4 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016c5e:	30 0b       	mov	r11,0
80016c60:	fe 7c 24 00 	mov	r12,-56320
80016c64:	fe b0 df 74 	rcall	80012b4c <spi_unselectChip>
    pDesc->label[i] = (char)(x & 0xff);
80016c68:	1b f8       	ld.ub	r8,sp[0x7]
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016c6a:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016c6c:	ef 68 00 08 	st.b	r7[8],r8
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016c70:	fe 7c 24 00 	mov	r12,-56320
80016c74:	fe b0 df 44 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
80016c78:	30 0b       	mov	r11,0
80016c7a:	fe 7c 24 00 	mov	r12,-56320
80016c7e:	fe b0 df d4 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
80016c82:	0c 9b       	mov	r11,r6
80016c84:	fe 7c 24 00 	mov	r12,-56320
80016c88:	fe b0 df dd 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016c8c:	30 0b       	mov	r11,0
80016c8e:	fe 7c 24 00 	mov	r12,-56320
80016c92:	fe b0 df 5d 	rcall	80012b4c <spi_unselectChip>
    pDesc->label[i] = (char)(x & 0xff);
80016c96:	1b f8       	ld.ub	r8,sp[0x7]
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016c98:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016c9a:	ef 68 00 09 	st.b	r7[9],r8
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016c9e:	fe 7c 24 00 	mov	r12,-56320
80016ca2:	fe b0 df 2d 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
80016ca6:	30 0b       	mov	r11,0
80016ca8:	fe 7c 24 00 	mov	r12,-56320
80016cac:	fe b0 df bd 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
80016cb0:	0c 9b       	mov	r11,r6
80016cb2:	fe 7c 24 00 	mov	r12,-56320
80016cb6:	fe b0 df c6 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016cba:	30 0b       	mov	r11,0
80016cbc:	fe 7c 24 00 	mov	r12,-56320
80016cc0:	fe b0 df 46 	rcall	80012b4c <spi_unselectChip>
    pDesc->label[i] = (char)(x & 0xff);
80016cc4:	1b f8       	ld.ub	r8,sp[0x7]
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016cc6:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016cc8:	ef 68 00 0a 	st.b	r7[10],r8
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016ccc:	fe 7c 24 00 	mov	r12,-56320
80016cd0:	fe b0 df 16 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
80016cd4:	30 0b       	mov	r11,0
80016cd6:	fe 7c 24 00 	mov	r12,-56320
80016cda:	fe b0 df a6 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
80016cde:	0c 9b       	mov	r11,r6
80016ce0:	fe 7c 24 00 	mov	r12,-56320
80016ce4:	fe b0 df af 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016ce8:	30 0b       	mov	r11,0
80016cea:	fe 7c 24 00 	mov	r12,-56320
80016cee:	fe b0 df 2f 	rcall	80012b4c <spi_unselectChip>
    pDesc->label[i] = (char)(x & 0xff);
80016cf2:	1b f8       	ld.ub	r8,sp[0x7]
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016cf4:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016cf6:	ef 68 00 0b 	st.b	r7[11],r8
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016cfa:	fe 7c 24 00 	mov	r12,-56320
80016cfe:	fe b0 de ff 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
80016d02:	30 0b       	mov	r11,0
80016d04:	fe 7c 24 00 	mov	r12,-56320
80016d08:	fe b0 df 8f 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
80016d0c:	0c 9b       	mov	r11,r6
80016d0e:	fe 7c 24 00 	mov	r12,-56320
80016d12:	fe b0 df 98 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016d16:	30 0b       	mov	r11,0
80016d18:	fe 7c 24 00 	mov	r12,-56320
80016d1c:	fe b0 df 18 	rcall	80012b4c <spi_unselectChip>
    pDesc->label[i] = (char)(x & 0xff);
80016d20:	1b f8       	ld.ub	r8,sp[0x7]
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016d22:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016d24:	ef 68 00 0c 	st.b	r7[12],r8
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016d28:	fe 7c 24 00 	mov	r12,-56320
80016d2c:	fe b0 de e8 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
80016d30:	30 0b       	mov	r11,0
80016d32:	fe 7c 24 00 	mov	r12,-56320
80016d36:	fe b0 df 78 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
80016d3a:	0c 9b       	mov	r11,r6
80016d3c:	fe 7c 24 00 	mov	r12,-56320
80016d40:	fe b0 df 81 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016d44:	30 0b       	mov	r11,0
80016d46:	fe 7c 24 00 	mov	r12,-56320
80016d4a:	fe b0 df 01 	rcall	80012b4c <spi_unselectChip>
    pDesc->label[i] = (char)(x & 0xff);
80016d4e:	1b f8       	ld.ub	r8,sp[0x7]
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016d50:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016d52:	ef 68 00 0d 	st.b	r7[13],r8
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016d56:	fe 7c 24 00 	mov	r12,-56320
80016d5a:	fe b0 de d1 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
80016d5e:	30 0b       	mov	r11,0
80016d60:	fe 7c 24 00 	mov	r12,-56320
80016d64:	fe b0 df 61 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
80016d68:	0c 9b       	mov	r11,r6
80016d6a:	fe 7c 24 00 	mov	r12,-56320
80016d6e:	fe b0 df 6a 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016d72:	30 0b       	mov	r11,0
80016d74:	fe 7c 24 00 	mov	r12,-56320
80016d78:	fe b0 de ea 	rcall	80012b4c <spi_unselectChip>
    pDesc->label[i] = (char)(x & 0xff);
80016d7c:	1b f8       	ld.ub	r8,sp[0x7]
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016d7e:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016d80:	ef 68 00 0e 	st.b	r7[14],r8
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, paramIdx);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  // read label
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016d84:	fe 7c 24 00 	mov	r12,-56320
80016d88:	fe b0 de ba 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
80016d8c:	30 0b       	mov	r11,0
80016d8e:	fe 7c 24 00 	mov	r12,-56320
80016d92:	fe b0 df 4a 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
80016d96:	0c 9b       	mov	r11,r6
80016d98:	fe 7c 24 00 	mov	r12,-56320
80016d9c:	fe b0 df 53 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016da0:	30 0b       	mov	r11,0
80016da2:	fe 7c 24 00 	mov	r12,-56320
80016da6:	fe b0 de d3 	rcall	80012b4c <spi_unselectChip>
    pDesc->label[i] = (char)(x & 0xff);
80016daa:	1b f8       	ld.ub	r8,sp[0x7]
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016dac:	30 0b       	mov	r11,0
  for(i=0; i<PARAM_LABEL_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
80016dae:	ef 68 00 0f 	st.b	r7[15],r8
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016db2:	fe 7c 24 00 	mov	r12,-56320
80016db6:	fe b0 de a3 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
80016dba:	30 0b       	mov	r11,0
80016dbc:	fe 7c 24 00 	mov	r12,-56320
80016dc0:	fe b0 df 33 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
80016dc4:	0c 9b       	mov	r11,r6
80016dc6:	fe 7c 24 00 	mov	r12,-56320
80016dca:	fe b0 df 3c 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016dce:	30 0b       	mov	r11,0
80016dd0:	fe 7c 24 00 	mov	r12,-56320
80016dd4:	fe b0 de bc 	rcall	80012b4c <spi_unselectChip>
    pDesc->unit[i] = (char)(x & 0xff);
80016dd8:	1b f8       	ld.ub	r8,sp[0x7]
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016dda:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->unit[i] = (char)(x & 0xff);
80016ddc:	ef 68 00 10 	st.b	r7[16],r8
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016de0:	fe 7c 24 00 	mov	r12,-56320
80016de4:	fe b0 de 8c 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
80016de8:	30 0b       	mov	r11,0
80016dea:	fe 7c 24 00 	mov	r12,-56320
80016dee:	fe b0 df 1c 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
80016df2:	0c 9b       	mov	r11,r6
80016df4:	fe 7c 24 00 	mov	r12,-56320
80016df8:	fe b0 df 25 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016dfc:	30 0b       	mov	r11,0
80016dfe:	fe 7c 24 00 	mov	r12,-56320
80016e02:	fe b0 de a5 	rcall	80012b4c <spi_unselectChip>
    pDesc->unit[i] = (char)(x & 0xff);
80016e06:	1b f8       	ld.ub	r8,sp[0x7]
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016e08:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->unit[i] = (char)(x & 0xff);
80016e0a:	ef 68 00 11 	st.b	r7[17],r8
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016e0e:	fe 7c 24 00 	mov	r12,-56320
80016e12:	fe b0 de 75 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
80016e16:	30 0b       	mov	r11,0
80016e18:	fe 7c 24 00 	mov	r12,-56320
80016e1c:	fe b0 df 05 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
80016e20:	0c 9b       	mov	r11,r6
80016e22:	fe 7c 24 00 	mov	r12,-56320
80016e26:	fe b0 df 0e 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016e2a:	30 0b       	mov	r11,0
80016e2c:	fe 7c 24 00 	mov	r12,-56320
80016e30:	fe b0 de 8e 	rcall	80012b4c <spi_unselectChip>
    pDesc->unit[i] = (char)(x & 0xff);
80016e34:	1b f8       	ld.ub	r8,sp[0x7]
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016e36:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->unit[i] = (char)(x & 0xff);
80016e38:	ef 68 00 12 	st.b	r7[18],r8
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016e3c:	fe 7c 24 00 	mov	r12,-56320
80016e40:	fe b0 de 5e 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
80016e44:	30 0b       	mov	r11,0
80016e46:	fe 7c 24 00 	mov	r12,-56320
80016e4a:	fe b0 de ee 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
80016e4e:	0c 9b       	mov	r11,r6
80016e50:	fe 7c 24 00 	mov	r12,-56320
80016e54:	fe b0 de f7 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016e58:	30 0b       	mov	r11,0
80016e5a:	fe 7c 24 00 	mov	r12,-56320
80016e5e:	fe b0 de 77 	rcall	80012b4c <spi_unselectChip>
    pDesc->unit[i] = (char)(x & 0xff);
80016e62:	1b f8       	ld.ub	r8,sp[0x7]
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016e64:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->unit[i] = (char)(x & 0xff);
80016e66:	ef 68 00 13 	st.b	r7[19],r8
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016e6a:	fe 7c 24 00 	mov	r12,-56320
80016e6e:	fe b0 de 47 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
80016e72:	30 0b       	mov	r11,0
80016e74:	fe 7c 24 00 	mov	r12,-56320
80016e78:	fe b0 de d7 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
80016e7c:	0c 9b       	mov	r11,r6
80016e7e:	fe 7c 24 00 	mov	r12,-56320
80016e82:	fe b0 de e0 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016e86:	30 0b       	mov	r11,0
80016e88:	fe 7c 24 00 	mov	r12,-56320
80016e8c:	fe b0 de 60 	rcall	80012b4c <spi_unselectChip>
    pDesc->unit[i] = (char)(x & 0xff);
80016e90:	1b f8       	ld.ub	r8,sp[0x7]
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016e92:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->unit[i] = (char)(x & 0xff);
80016e94:	ef 68 00 14 	st.b	r7[20],r8
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016e98:	fe 7c 24 00 	mov	r12,-56320
80016e9c:	fe b0 de 30 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
80016ea0:	30 0b       	mov	r11,0
80016ea2:	fe 7c 24 00 	mov	r12,-56320
80016ea6:	fe b0 de c0 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
80016eaa:	0c 9b       	mov	r11,r6
80016eac:	fe 7c 24 00 	mov	r12,-56320
80016eb0:	fe b0 de c9 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016eb4:	30 0b       	mov	r11,0
80016eb6:	fe 7c 24 00 	mov	r12,-56320
80016eba:	fe b0 de 49 	rcall	80012b4c <spi_unselectChip>
    pDesc->unit[i] = (char)(x & 0xff);
80016ebe:	1b f8       	ld.ub	r8,sp[0x7]
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016ec0:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->unit[i] = (char)(x & 0xff);
80016ec2:	ef 68 00 15 	st.b	r7[21],r8
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016ec6:	fe 7c 24 00 	mov	r12,-56320
80016eca:	fe b0 de 19 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
80016ece:	30 0b       	mov	r11,0
80016ed0:	fe 7c 24 00 	mov	r12,-56320
80016ed4:	fe b0 de a9 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
80016ed8:	0c 9b       	mov	r11,r6
80016eda:	fe 7c 24 00 	mov	r12,-56320
80016ede:	fe b0 de b2 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016ee2:	30 0b       	mov	r11,0
80016ee4:	fe 7c 24 00 	mov	r12,-56320
80016ee8:	fe b0 de 32 	rcall	80012b4c <spi_unselectChip>
    pDesc->unit[i] = (char)(x & 0xff);
80016eec:	1b f8       	ld.ub	r8,sp[0x7]
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016eee:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->unit[i] = (char)(x & 0xff);
80016ef0:	ef 68 00 16 	st.b	r7[22],r8
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->label[i] = (char)(x & 0xff);
  }
  // read unit
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016ef4:	fe 7c 24 00 	mov	r12,-56320
80016ef8:	fe b0 de 02 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
80016efc:	30 0b       	mov	r11,0
80016efe:	fe 7c 24 00 	mov	r12,-56320
80016f02:	fe b0 de 92 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
80016f06:	0c 9b       	mov	r11,r6
80016f08:	fe 7c 24 00 	mov	r12,-56320
80016f0c:	fe b0 de 9b 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016f10:	30 0b       	mov	r11,0
80016f12:	fe 7c 24 00 	mov	r12,-56320
80016f16:	fe b0 de 1b 	rcall	80012b4c <spi_unselectChip>
    pDesc->unit[i] = (char)(x & 0xff);
80016f1a:	1b f8       	ld.ub	r8,sp[0x7]
  }
  // read type
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016f1c:	30 0b       	mov	r11,0
  for(i=0; i<PARAM_UNIT_LEN; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pDesc->unit[i] = (char)(x & 0xff);
80016f1e:	ef 68 00 17 	st.b	r7[23],r8
  }
  // read type
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016f22:	fe 7c 24 00 	mov	r12,-56320
80016f26:	fe b0 dd eb 	rcall	80012afc <spi_selectChip>
  spi_write(BFIN_SPI, 0); //dont care
80016f2a:	30 0b       	mov	r11,0
80016f2c:	fe 7c 24 00 	mov	r12,-56320
80016f30:	fe b0 de 7b 	rcall	80012c26 <spi_write>
  spi_read(BFIN_SPI, &x);
80016f34:	0c 9b       	mov	r11,r6
80016f36:	fe 7c 24 00 	mov	r12,-56320
80016f3a:	fe b0 de 84 	rcall	80012c42 <spi_read>
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016f3e:	30 0b       	mov	r11,0
80016f40:	fe 7c 24 00 	mov	r12,-56320
80016f44:	fe b0 de 04 	rcall	80012b4c <spi_unselectChip>
  pDesc->type = (U8)(x & 0xff);
80016f48:	1b f8       	ld.ub	r8,sp[0x7]
  // read min
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016f4a:	30 0b       	mov	r11,0
  // read type
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, 0); //dont care
  spi_read(BFIN_SPI, &x);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  pDesc->type = (U8)(x & 0xff);
80016f4c:	ef 68 00 18 	st.b	r7[24],r8
  // read min
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016f50:	fe 7c 24 00 	mov	r12,-56320
80016f54:	fe b0 dd d4 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
80016f58:	30 0b       	mov	r11,0
80016f5a:	fe 7c 24 00 	mov	r12,-56320
80016f5e:	fe b0 de 64 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
80016f62:	0c 9b       	mov	r11,r6
80016f64:	fe 7c 24 00 	mov	r12,-56320
80016f68:	fe b0 de 6d 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016f6c:	30 0b       	mov	r11,0
80016f6e:	fe 7c 24 00 	mov	r12,-56320
80016f72:	fe b0 dd ed 	rcall	80012b4c <spi_unselectChip>
    pval.asByte[i] = (u8)(x & 0xff);
80016f76:	9a 38       	ld.sh	r8,sp[0x6]
  spi_read(BFIN_SPI, &x);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  pDesc->type = (U8)(x & 0xff);
  // read min
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016f78:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pval.asByte[i] = (u8)(x & 0xff);
80016f7a:	ba a8       	st.b	sp[0x2],r8
  spi_read(BFIN_SPI, &x);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  pDesc->type = (U8)(x & 0xff);
  // read min
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016f7c:	fe 7c 24 00 	mov	r12,-56320
80016f80:	fe b0 dd be 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
80016f84:	30 0b       	mov	r11,0
80016f86:	fe 7c 24 00 	mov	r12,-56320
80016f8a:	fe b0 de 4e 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
80016f8e:	0c 9b       	mov	r11,r6
80016f90:	fe 7c 24 00 	mov	r12,-56320
80016f94:	fe b0 de 57 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016f98:	30 0b       	mov	r11,0
80016f9a:	fe 7c 24 00 	mov	r12,-56320
80016f9e:	fe b0 dd d7 	rcall	80012b4c <spi_unselectChip>
    pval.asByte[i] = (u8)(x & 0xff);
80016fa2:	9a 38       	ld.sh	r8,sp[0x6]
  spi_read(BFIN_SPI, &x);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  pDesc->type = (U8)(x & 0xff);
  // read min
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016fa4:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pval.asByte[i] = (u8)(x & 0xff);
80016fa6:	ba b8       	st.b	sp[0x3],r8
  spi_read(BFIN_SPI, &x);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  pDesc->type = (U8)(x & 0xff);
  // read min
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016fa8:	fe 7c 24 00 	mov	r12,-56320
80016fac:	fe b0 dd a8 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
80016fb0:	30 0b       	mov	r11,0
80016fb2:	fe 7c 24 00 	mov	r12,-56320
80016fb6:	fe b0 de 38 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
80016fba:	0c 9b       	mov	r11,r6
80016fbc:	fe 7c 24 00 	mov	r12,-56320
80016fc0:	fe b0 de 41 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016fc4:	30 0b       	mov	r11,0
80016fc6:	fe 7c 24 00 	mov	r12,-56320
80016fca:	fe b0 dd c1 	rcall	80012b4c <spi_unselectChip>
    pval.asByte[i] = (u8)(x & 0xff);
80016fce:	9a 38       	ld.sh	r8,sp[0x6]
  spi_read(BFIN_SPI, &x);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  pDesc->type = (U8)(x & 0xff);
  // read min
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016fd0:	30 0b       	mov	r11,0
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pval.asByte[i] = (u8)(x & 0xff);
80016fd2:	ba c8       	st.b	sp[0x4],r8
  spi_read(BFIN_SPI, &x);
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
  pDesc->type = (U8)(x & 0xff);
  // read min
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016fd4:	fe 7c 24 00 	mov	r12,-56320
80016fd8:	fe b0 dd 92 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
80016fdc:	30 0b       	mov	r11,0
80016fde:	fe 7c 24 00 	mov	r12,-56320
80016fe2:	fe b0 de 22 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
80016fe6:	0c 9b       	mov	r11,r6
80016fe8:	fe 7c 24 00 	mov	r12,-56320
80016fec:	fe b0 de 2b 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80016ff0:	30 0b       	mov	r11,0
80016ff2:	fe 7c 24 00 	mov	r12,-56320
80016ff6:	fe b0 dd ab 	rcall	80012b4c <spi_unselectChip>
    pval.asByte[i] = (u8)(x & 0xff);
80016ffa:	9a 38       	ld.sh	r8,sp[0x6]
80016ffc:	ba d8       	st.b	sp[0x5],r8
  }
  pDesc->min = pval.asFloat;
80016ffe:	9a a8       	ld.uh	r8,sp[0x4]
80017000:	9a 9c       	ld.uh	r12,sp[0x2]
80017002:	f1 ec 11 0c 	or	r12,r8,r12<<0x10
80017006:	e0 a0 4d 65 	rcall	80020ad0 <__avr32_f32_to_s32>
8001700a:	ef 38 00 19 	ld.ub	r8,r7[25]
8001700e:	f8 08 16 18 	lsr	r8,r12,0x18
80017012:	ef 68 00 19 	st.b	r7[25],r8
80017016:	ef 38 00 1a 	ld.ub	r8,r7[26]
8001701a:	f1 dc c2 08 	bfextu	r8,r12,0x10,0x8
8001701e:	ef 68 00 1a 	st.b	r7[26],r8
80017022:	ef 38 00 1b 	ld.ub	r8,r7[27]
80017026:	f1 dc c1 08 	bfextu	r8,r12,0x8,0x8
8001702a:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8
8001702e:	ef 68 00 1b 	st.b	r7[27],r8
80017032:	ef 38 00 1c 	ld.ub	r8,r7[28]
80017036:	30 05       	mov	r5,0
80017038:	ef 6c 00 1c 	st.b	r7[28],r12
  // read max
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
8001703c:	0a 9b       	mov	r11,r5
8001703e:	fe 7c 24 00 	mov	r12,-56320
80017042:	fe b0 dd 5d 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
80017046:	0a 9b       	mov	r11,r5
80017048:	fe 7c 24 00 	mov	r12,-56320
8001704c:	fe b0 dd ed 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
80017050:	0c 9b       	mov	r11,r6
80017052:	fe 7c 24 00 	mov	r12,-56320
80017056:	fe b0 dd f6 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
8001705a:	0a 9b       	mov	r11,r5
8001705c:	fe 7c 24 00 	mov	r12,-56320
80017060:	fe b0 dd 76 	rcall	80012b4c <spi_unselectChip>
    pval.asByte[i] = (u8)(x & 0xff);
80017064:	9a 38       	ld.sh	r8,sp[0x6]
    pval.asByte[i] = (u8)(x & 0xff);
  }
  pDesc->min = pval.asFloat;
  // read max
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80017066:	0a 9b       	mov	r11,r5
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pval.asByte[i] = (u8)(x & 0xff);
80017068:	ba a8       	st.b	sp[0x2],r8
    pval.asByte[i] = (u8)(x & 0xff);
  }
  pDesc->min = pval.asFloat;
  // read max
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
8001706a:	fe 7c 24 00 	mov	r12,-56320
8001706e:	fe b0 dd 47 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
80017072:	0a 9b       	mov	r11,r5
80017074:	fe 7c 24 00 	mov	r12,-56320
80017078:	fe b0 dd d7 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
8001707c:	0c 9b       	mov	r11,r6
8001707e:	fe 7c 24 00 	mov	r12,-56320
80017082:	fe b0 dd e0 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80017086:	0a 9b       	mov	r11,r5
80017088:	fe 7c 24 00 	mov	r12,-56320
8001708c:	fe b0 dd 60 	rcall	80012b4c <spi_unselectChip>
    pval.asByte[i] = (u8)(x & 0xff);
80017090:	9a 38       	ld.sh	r8,sp[0x6]
    pval.asByte[i] = (u8)(x & 0xff);
  }
  pDesc->min = pval.asFloat;
  // read max
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80017092:	0a 9b       	mov	r11,r5
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pval.asByte[i] = (u8)(x & 0xff);
80017094:	ba b8       	st.b	sp[0x3],r8
    pval.asByte[i] = (u8)(x & 0xff);
  }
  pDesc->min = pval.asFloat;
  // read max
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80017096:	fe 7c 24 00 	mov	r12,-56320
8001709a:	fe b0 dd 31 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
8001709e:	0a 9b       	mov	r11,r5
800170a0:	fe 7c 24 00 	mov	r12,-56320
800170a4:	fe b0 dd c1 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
800170a8:	0c 9b       	mov	r11,r6
800170aa:	fe 7c 24 00 	mov	r12,-56320
800170ae:	fe b0 dd ca 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
800170b2:	0a 9b       	mov	r11,r5
800170b4:	fe 7c 24 00 	mov	r12,-56320
800170b8:	fe b0 dd 4a 	rcall	80012b4c <spi_unselectChip>
    pval.asByte[i] = (u8)(x & 0xff);
800170bc:	9a 38       	ld.sh	r8,sp[0x6]
    pval.asByte[i] = (u8)(x & 0xff);
  }
  pDesc->min = pval.asFloat;
  // read max
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
800170be:	0a 9b       	mov	r11,r5
    spi_write(BFIN_SPI, 0); //dont care
    spi_read(BFIN_SPI, &x);
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
    pval.asByte[i] = (u8)(x & 0xff);
800170c0:	ba c8       	st.b	sp[0x4],r8
    pval.asByte[i] = (u8)(x & 0xff);
  }
  pDesc->min = pval.asFloat;
  // read max
  for(i=0; i<4; i++) {
    spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
800170c2:	fe 7c 24 00 	mov	r12,-56320
800170c6:	fe b0 dd 1b 	rcall	80012afc <spi_selectChip>
    spi_write(BFIN_SPI, 0); //dont care
800170ca:	0a 9b       	mov	r11,r5
800170cc:	fe 7c 24 00 	mov	r12,-56320
800170d0:	fe b0 dd ab 	rcall	80012c26 <spi_write>
    spi_read(BFIN_SPI, &x);
800170d4:	0c 9b       	mov	r11,r6
800170d6:	fe 7c 24 00 	mov	r12,-56320
800170da:	fe b0 dd b4 	rcall	80012c42 <spi_read>
    spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
800170de:	0a 9b       	mov	r11,r5
800170e0:	fe 7c 24 00 	mov	r12,-56320
800170e4:	fe b0 dd 34 	rcall	80012b4c <spi_unselectChip>
    pval.asByte[i] = (u8)(x & 0xff);
800170e8:	9a 38       	ld.sh	r8,sp[0x6]
800170ea:	ba d8       	st.b	sp[0x5],r8
  }
  pDesc->max = pval.asFloat;
800170ec:	9a a8       	ld.uh	r8,sp[0x4]
800170ee:	9a 9c       	ld.uh	r12,sp[0x2]
800170f0:	f1 ec 11 0c 	or	r12,r8,r12<<0x10
800170f4:	e0 a0 4c ee 	rcall	80020ad0 <__avr32_f32_to_s32>
800170f8:	ef 38 00 1d 	ld.ub	r8,r7[29]
800170fc:	f8 08 16 18 	lsr	r8,r12,0x18
80017100:	ef 68 00 1d 	st.b	r7[29],r8
80017104:	ef 38 00 1e 	ld.ub	r8,r7[30]
80017108:	f1 dc c2 08 	bfextu	r8,r12,0x10,0x8
8001710c:	ef 68 00 1e 	st.b	r7[30],r8
80017110:	ef 38 00 1f 	ld.ub	r8,r7[31]
80017114:	f1 dc c1 08 	bfextu	r8,r12,0x8,0x8
80017118:	ef 68 00 1f 	st.b	r7[31],r8
8001711c:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8
80017120:	ef 38 00 20 	ld.ub	r8,r7[32]
80017124:	ef 6c 00 20 	st.b	r7[32],r12
}
80017128:	2f ed       	sub	sp,-8
8001712a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001712e:	d7 03       	nop

80017130 <bfin_get_num_params>:
80017130:	eb cd 40 80 	pushm	r7,lr
80017134:	20 1d       	sub	sp,4
80017136:	30 0b       	mov	r11,0
80017138:	18 97       	mov	r7,r12
8001713a:	fe 7c 24 00 	mov	r12,-56320
8001713e:	fe b0 dc df 	rcall	80012afc <spi_selectChip>
80017142:	30 2b       	mov	r11,2

void bfin_get_num_params(volatile u32* num) {
  u16 x;
  // command 
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
  spi_write(BFIN_SPI, MSG_GET_NUM_PARAMS_COM);
80017144:	fe 7c 24 00 	mov	r12,-56320
80017148:	fe b0 dd 6f 	rcall	80012c26 <spi_write>
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
8001714c:	30 0b       	mov	r11,0
8001714e:	fe 7c 24 00 	mov	r12,-56320
80017152:	fe b0 dc fd 	rcall	80012b4c <spi_unselectChip>
  // read num
  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
80017156:	30 0b       	mov	r11,0
80017158:	fe 7c 24 00 	mov	r12,-56320
8001715c:	fe b0 dc d0 	rcall	80012afc <spi_selectChip>
  spi_write(BFIN_SPI, 0); //dont care
80017160:	30 0b       	mov	r11,0
80017162:	fe 7c 24 00 	mov	r12,-56320
80017166:	fe b0 dd 60 	rcall	80012c26 <spi_write>
  spi_read(BFIN_SPI, &x);
8001716a:	fa cb ff fe 	sub	r11,sp,-2
8001716e:	fe 7c 24 00 	mov	r12,-56320
80017172:	fe b0 dd 68 	rcall	80012c42 <spi_read>
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
80017176:	30 0b       	mov	r11,0
80017178:	fe 7c 24 00 	mov	r12,-56320
8001717c:	fe b0 dc e8 	rcall	80012b4c <spi_unselectChip>
  *num = (u8)(x & 0xff);
80017180:	1b b8       	ld.ub	r8,sp[0x3]
80017182:	8f 08       	st.w	r7[0x0],r8
}
80017184:	2f fd       	sub	sp,-4
80017186:	e3 cd 80 80 	ldm	sp++,r7,pc
8001718a:	d7 03       	nop

8001718c <bfin_report_params>:
8001718c:	eb cd 40 e0 	pushm	r5-r7,lr
80017190:	20 ad       	sub	sp,40
80017192:	fa cc ff dc 	sub	r12,sp,-36
80017196:	cc df       	rcall	80017130 <bfin_get_num_params>
80017198:	49 6c       	lddpc	r12,800171f0 <bfin_report_params+0x64>
8001719a:	fe b0 df 59 	rcall	8001304c <print_dbg>
  volatile ParamDesc pdesc;
  u32 numParams;
  u8 i;

  bfin_get_num_params(&numParams);
  print_dbg("\r\nnumparams: ");
8001719e:	40 9c       	lddsp	r12,sp[0x24]
  print_dbg_ulong(numParams);
800171a0:	fe b0 df 34 	rcall	80013008 <print_dbg_ulong>
800171a4:	40 98       	lddsp	r8,sp[0x24]

  if(numParams > 0) {
800171a6:	58 08       	cp.w	r8,0
800171a8:	c0 41       	brne	800171b0 <bfin_report_params+0x24>
800171aa:	2f 6d       	sub	sp,-40

      print_dbg("\r\n got pdesc : ");
      print_dbg((const char* )pdesc.label);
    }
  }
}
800171ac:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800171b0:	e0 a0 3b 26 	rcall	8001e7fc <net_clear_params>
  bfin_get_num_params(&numParams);
  print_dbg("\r\nnumparams: ");
  print_dbg_ulong(numParams);

  if(numParams > 0) {
    net_clear_params();
800171b4:	40 98       	lddsp	r8,sp[0x24]
    for(i=0; i<numParams; i++) {
800171b6:	58 08       	cp.w	r8,0
800171b8:	cf 90       	breq	800171aa <bfin_report_params+0x1e>
800171ba:	30 05       	mov	r5,0
800171bc:	fa c6 ff fd 	sub	r6,sp,-3
800171c0:	0a 97       	mov	r7,r5
800171c2:	0e 9c       	mov	r12,r7
      bfin_get_param_desc(i, &pdesc);
800171c4:	0c 9b       	mov	r11,r6
800171c6:	fe b0 fc 67 	rcall	80016a94 <bfin_get_param_desc>
800171ca:	0c 9b       	mov	r11,r6

      net_add_param(i, &pdesc);
800171cc:	0a 9c       	mov	r12,r5
800171ce:	e0 a0 3b 21 	rcall	8001e810 <net_add_param>
800171d2:	48 9c       	lddpc	r12,800171f4 <bfin_report_params+0x68>

      print_dbg("\r\n got pdesc : ");
800171d4:	fe b0 df 3c 	rcall	8001304c <print_dbg>
800171d8:	0c 9c       	mov	r12,r6
      print_dbg((const char* )pdesc.label);
800171da:	fe b0 df 39 	rcall	8001304c <print_dbg>
800171de:	40 98       	lddsp	r8,sp[0x24]
  print_dbg("\r\nnumparams: ");
  print_dbg_ulong(numParams);

  if(numParams > 0) {
    net_clear_params();
    for(i=0; i<numParams; i++) {
800171e0:	2f f7       	sub	r7,-1
800171e2:	5c 57       	castu.b	r7
800171e4:	0e 95       	mov	r5,r7
800171e6:	10 37       	cp.w	r7,r8
800171e8:	ce d3       	brcs	800171c2 <bfin_report_params+0x36>
800171ea:	2f 6d       	sub	sp,-40

      print_dbg("\r\n got pdesc : ");
      print_dbg((const char* )pdesc.label);
    }
  }
}
800171ec:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800171f0:	80 02       	ld.sh	r2,r0[0x0]
800171f2:	1f 80       	ld.ub	r0,pc[0x0]
800171f4:	80 02       	ld.sh	r2,r0[0x0]
800171f6:	1f 90       	ld.ub	r0,pc[0x1]

800171f8 <bfin_load_buf>:
800171f8:	d4 31       	pushm	r0-r7,lr
800171fa:	20 2d       	sub	sp,8
800171fc:	e0 66 19 9c 	mov	r6,6556
80017200:	6c 08       	ld.w	r8,r6[0x0]
80017202:	e0 58 00 00 	cp.w	r8,65536
80017206:	e0 8b 00 fe 	brhi	80017402 <bfin_load_buf+0x20a>
8001720a:	fe fc 02 0a 	ld.w	r12,pc[522]
8001720e:	fe b0 df 1f 	rcall	8001304c <print_dbg>
80017212:	6c 0c       	ld.w	r12,r6[0x0]
    print_dbg("\r\n bfin load error: size : "); print_dbg_hex(bfinLdrSize);
    return;
  }

  print_dbg("\r\n\r\n bfin_load_buf; \r\n size: ");
  print_dbg_hex(bfinLdrSize);
80017214:	fe b0 de c4 	rcall	80012f9c <print_dbg_hex>
  print_dbg("\r\n data: ");
80017218:	fe fc 02 00 	ld.w	r12,pc[512]
8001721c:	fe b0 df 18 	rcall	8001304c <print_dbg>
  
  print_dbg_hex( (bfinLdrData[0] << 3) | (bfinLdrData[1] << 2) | (bfinLdrData[2]<<1) | bfinLdrData[3]); 
80017220:	e0 61 3f b4 	mov	r1,16308
80017224:	62 09       	ld.w	r9,r1[0x0]
80017226:	12 98       	mov	r8,r9
80017228:	11 3b       	ld.ub	r11,r8++
8001722a:	f2 c7 ff fd 	sub	r7,r9,-3
8001722e:	11 8a       	ld.ub	r10,r8[0x0]
80017230:	2f e9       	sub	r9,-2
80017232:	13 8c       	ld.ub	r12,r9[0x0]
80017234:	0f 88       	ld.ub	r8,r7[0x0]
80017236:	f1 eb 10 38 	or	r8,r8,r11<<0x3
8001723a:	f1 ea 10 28 	or	r8,r8,r10<<0x2
8001723e:	f1 ec 10 1c 	or	r12,r8,r12<<0x1
80017242:	fe b0 de ad 	rcall	80012f9c <print_dbg_hex>
  print_dbg("\r\n");
80017246:	4f 6c       	lddpc	r12,8001741c <bfin_load_buf+0x224>
80017248:	fe b0 df 02 	rcall	8001304c <print_dbg>
  print_dbg_hex( (bfinLdrData[4] << 7) | (bfinLdrData[5] << 6) | (bfinLdrData[6]<<5) | bfinLdrData[7]); 
8001724c:	62 08       	ld.w	r8,r1[0x0]
8001724e:	f0 c9 ff fc 	sub	r9,r8,-4
80017252:	f0 ca ff f9 	sub	r10,r8,-7
80017256:	13 8b       	ld.ub	r11,r9[0x0]
80017258:	f0 c9 ff fb 	sub	r9,r8,-5
8001725c:	2f a8       	sub	r8,-6
8001725e:	13 89       	ld.ub	r9,r9[0x0]
80017260:	11 8c       	ld.ub	r12,r8[0x0]
80017262:	a7 69       	lsl	r9,0x6
80017264:	15 88       	ld.ub	r8,r10[0x0]
80017266:	f3 eb 10 79 	or	r9,r9,r11<<0x7
8001726a:	f3 e8 10 08 	or	r8,r9,r8
8001726e:	f1 ec 10 5c 	or	r12,r8,r12<<0x5
80017272:	fe b0 de 95 	rcall	80012f9c <print_dbg_hex>
  print_dbg("\r\n");
80017276:	4e ac       	lddpc	r12,8001741c <bfin_load_buf+0x224>
80017278:	fe b0 de ea 	rcall	8001304c <print_dbg>
  print_dbg_hex( (bfinLdrData[8] << 11) | (bfinLdrData[9] << 2) | (bfinLdrData[10]<<1) | bfinLdrData[11]); 
8001727c:	62 08       	ld.w	r8,r1[0x0]
8001727e:	f0 c9 ff f8 	sub	r9,r8,-8
80017282:	f0 ca ff f5 	sub	r10,r8,-11
80017286:	13 8b       	ld.ub	r11,r9[0x0]
80017288:	f0 c9 ff f7 	sub	r9,r8,-9
8001728c:	2f 68       	sub	r8,-10
8001728e:	13 89       	ld.ub	r9,r9[0x0]
80017290:	11 8c       	ld.ub	r12,r8[0x0]
80017292:	a3 69       	lsl	r9,0x2
80017294:	15 88       	ld.ub	r8,r10[0x0]
80017296:	f3 eb 10 b9 	or	r9,r9,r11<<0xb
8001729a:	f3 e8 10 08 	or	r8,r9,r8
8001729e:	f1 ec 10 1c 	or	r12,r8,r12<<0x1
800172a2:	fe b0 de 7d 	rcall	80012f9c <print_dbg_hex>
  print_dbg("\r\n");
800172a6:	4d ec       	lddpc	r12,8001741c <bfin_load_buf+0x224>
800172a8:	fe b0 de d2 	rcall	8001304c <print_dbg>
  print_dbg_hex( (bfinLdrData[12] << 15) | (bfinLdrData[13] << 14) | (bfinLdrData[14]<<13) | bfinLdrData[15]); 
800172ac:	62 08       	ld.w	r8,r1[0x0]
800172ae:	f0 c9 ff f4 	sub	r9,r8,-12
800172b2:	f0 ca ff f1 	sub	r10,r8,-15
800172b6:	13 8b       	ld.ub	r11,r9[0x0]
800172b8:	f0 c9 ff f3 	sub	r9,r8,-13
800172bc:	2f 28       	sub	r8,-14
800172be:	13 89       	ld.ub	r9,r9[0x0]
800172c0:	11 8c       	ld.ub	r12,r8[0x0]
800172c2:	af 69       	lsl	r9,0xe
800172c4:	15 88       	ld.ub	r8,r10[0x0]
800172c6:	f3 eb 10 f9 	or	r9,r9,r11<<0xf
800172ca:	f3 e8 10 08 	or	r8,r9,r8
800172ce:	f1 ec 10 dc 	or	r12,r8,r12<<0xd
800172d2:	fe b0 de 65 	rcall	80012f9c <print_dbg_hex>
  print_dbg("\r\n");
800172d6:	4d 2c       	lddpc	r12,8001741c <bfin_load_buf+0x224>
800172d8:	fe b0 de ba 	rcall	8001304c <print_dbg>
}

void bfin_start_transfer(void) {
  // FIXME
  volatile u64 delay;
  gpio_set_gpio_pin(BFIN_RESET_PIN);  
800172dc:	30 6c       	mov	r12,6
800172de:	fe b0 da 10 	rcall	800126fe <gpio_set_gpio_pin>
  delay = 30; while (--delay > 0) {;;}
800172e2:	31 e8       	mov	r8,30
800172e4:	30 09       	mov	r9,0
800172e6:	3f fa       	mov	r10,-1
800172e8:	fa e9 00 00 	st.d	sp[0],r8
800172ec:	3f fb       	mov	r11,-1
800172ee:	fa e8 00 00 	ld.d	r8,sp[0]
800172f2:	14 08       	add	r8,r10
800172f4:	f2 0b 00 49 	adc	r9,r9,r11
800172f8:	fa e9 00 00 	st.d	sp[0],r8
800172fc:	fa e8 00 00 	ld.d	r8,sp[0]
80017300:	58 08       	cp.w	r8,0
80017302:	5c 29       	cpc	r9
80017304:	cf 51       	brne	800172ee <bfin_load_buf+0xf6>
  gpio_clr_gpio_pin(BFIN_RESET_PIN);
80017306:	30 6c       	mov	r12,6
80017308:	fe b0 da 08 	rcall	80012718 <gpio_clr_gpio_pin>
  delay = 30; while (--delay > 0) {;;}
8001730c:	31 e8       	mov	r8,30
8001730e:	30 09       	mov	r9,0
80017310:	3f fa       	mov	r10,-1
80017312:	fa e9 00 00 	st.d	sp[0],r8
80017316:	3f fb       	mov	r11,-1
80017318:	fa e8 00 00 	ld.d	r8,sp[0]
8001731c:	14 08       	add	r8,r10
8001731e:	f2 0b 00 49 	adc	r9,r9,r11
80017322:	fa e9 00 00 	st.d	sp[0],r8
80017326:	fa e8 00 00 	ld.d	r8,sp[0]
8001732a:	58 08       	cp.w	r8,0
8001732c:	5c 29       	cpc	r9
8001732e:	cf 51       	brne	80017318 <bfin_load_buf+0x120>
  gpio_set_gpio_pin(BFIN_RESET_PIN);  
80017330:	30 6c       	mov	r12,6
80017332:	fe b0 d9 e6 	rcall	800126fe <gpio_set_gpio_pin>
  delay = 3000; while (--delay > 0) {;;}
80017336:	e0 68 0b b8 	mov	r8,3000
8001733a:	30 09       	mov	r9,0
8001733c:	3f fa       	mov	r10,-1
8001733e:	fa e9 00 00 	st.d	sp[0],r8
80017342:	3f fb       	mov	r11,-1
80017344:	fa e8 00 00 	ld.d	r8,sp[0]
80017348:	14 08       	add	r8,r10
8001734a:	f2 0b 00 49 	adc	r9,r9,r11
8001734e:	fa e9 00 00 	st.d	sp[0],r8
80017352:	fa e4 00 00 	ld.d	r4,sp[0]
80017356:	58 04       	cp.w	r4,0
80017358:	5c 25       	cpc	r5
8001735a:	cf 51       	brne	80017344 <bfin_load_buf+0x14c>

  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
8001735c:	30 0b       	mov	r11,0
8001735e:	fe 7c 24 00 	mov	r12,-56320
80017362:	fe b0 db cd 	rcall	80012afc <spi_selectChip>



  bfin_start_transfer();

  for(i=0; i<bfinLdrSize; i++) {
80017366:	6c 08       	ld.w	r8,r6[0x0]
80017368:	58 08       	cp.w	r8,0
8001736a:	c1 f0       	breq	800173a8 <bfin_load_buf+0x1b0>
    //    data = fl_fgetc(fp);
    bfin_transfer_byte(bfinLdrData[i]);
8001736c:	62 08       	ld.w	r8,r1[0x0]
8001736e:	08 08       	add	r8,r4
80017370:	11 80       	ld.ub	r0,r8[0x0]
80017372:	c0 48       	rjmp	8001737a <bfin_load_buf+0x182>
static void bfin_end_transfer(void); 
static void bfin_transfer_byte(u8 data);

static void bfin_transfer_byte(u8 data) {
    while (gpio_get_pin_value(BFIN_HWAIT_PIN) > 0) { 
      print_dbg("\r\n HWAIT asserted..."); 
80017374:	4a bc       	lddpc	r12,80017420 <bfin_load_buf+0x228>
80017376:	fe b0 de 6b 	rcall	8001304c <print_dbg>
static void bfin_start_transfer(void);
static void bfin_end_transfer(void); 
static void bfin_transfer_byte(u8 data);

static void bfin_transfer_byte(u8 data) {
    while (gpio_get_pin_value(BFIN_HWAIT_PIN) > 0) { 
8001737a:	30 5c       	mov	r12,5
8001737c:	fe b0 d9 b6 	rcall	800126e8 <gpio_get_pin_value>
80017380:	18 97       	mov	r7,r12
80017382:	cf 91       	brne	80017374 <bfin_load_buf+0x17c>
      print_dbg("\r\n HWAIT asserted..."); 
    }
    spi_write(BFIN_SPI, data);
80017384:	00 9b       	mov	r11,r0
80017386:	fe 7c 24 00 	mov	r12,-56320
8001738a:	fe b0 dc 4e 	rcall	80012c26 <spi_write>



  bfin_start_transfer();

  for(i=0; i<bfinLdrSize; i++) {
8001738e:	6c 08       	ld.w	r8,r6[0x0]
80017390:	30 1a       	mov	r10,1
80017392:	30 0b       	mov	r11,0
80017394:	10 92       	mov	r2,r8
80017396:	14 04       	add	r4,r10
80017398:	ea 0b 00 45 	adc	r5,r5,r11
8001739c:	0e 93       	mov	r3,r7
8001739e:	08 32       	cp.w	r2,r4
800173a0:	ea 03 13 00 	cpc	r3,r5
800173a4:	fe 9b ff e4 	brhi	8001736c <bfin_load_buf+0x174>

  spi_selectChip(BFIN_SPI, BFIN_SPI_NPCS);
}

void bfin_end_transfer(void) {
  spi_unselectChip(BFIN_SPI, BFIN_SPI_NPCS);
800173a8:	30 0b       	mov	r11,0
800173aa:	fe 7c 24 00 	mov	r12,-56320
800173ae:	fe b0 db cf 	rcall	80012b4c <spi_unselectChip>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800173b2:	30 09       	mov	r9,0
800173b4:	e0 68 03 e8 	mov	r8,1000
800173b8:	e0 6a 07 e7 	mov	r10,2023
800173bc:	ea 1a 12 c8 	orh	r10,0x12c8
800173c0:	30 3b       	mov	r11,3
800173c2:	e0 a0 4b 96 	rcall	80020aee <__avr32_udiv64>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800173c6:	e1 b9 00 42 	mfsr	r9,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800173ca:	f2 0a 00 0a 	add	r10,r9,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800173ce:	e1 b8 00 42 	mfsr	r8,0x108
800173d2:	14 39       	cp.w	r9,r10
800173d4:	e0 8b 00 0c 	brhi	800173ec <bfin_load_buf+0x1f4>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800173d8:	10 39       	cp.w	r9,r8
800173da:	e0 8b 00 04 	brhi	800173e2 <bfin_load_buf+0x1ea>
800173de:	10 3a       	cp.w	r10,r8
800173e0:	c0 e2       	brcc	800173fc <bfin_load_buf+0x204>
  //  print_dbg("\r\n done loading; waiting... ");
  delay_ms(200);
  //  print_dbg("\r\n done waiting; reporting... ");
  bfin_report_params();
800173e2:	cd 5e       	rcall	8001718c <bfin_report_params>
800173e4:	2f ed       	sub	sp,-8
    bfin_transfer_byte(bfinLdrData[i]);
    //    delay = 0; while(delay < 0x80) { delay++; }
  }

  bfin_end_transfer();
}
800173e6:	d8 32       	popm	r0-r7,pc
800173e8:	e1 b8 00 42 	mfsr	r8,0x108
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800173ec:	12 38       	cp.w	r8,r9
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800173ee:	cf d2       	brcc	800173e8 <bfin_load_buf+0x1f0>
800173f0:	14 38       	cp.w	r8,r10
800173f2:	fe 9b ff f8 	brhi	800173e2 <bfin_load_buf+0x1ea>
800173f6:	e1 b8 00 42 	mfsr	r8,0x108
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800173fa:	cf 9b       	rjmp	800173ec <bfin_load_buf+0x1f4>
800173fc:	e1 b8 00 42 	mfsr	r8,0x108
80017400:	ce cb       	rjmp	800173d8 <bfin_load_buf+0x1e0>
80017402:	48 9c       	lddpc	r12,80017424 <bfin_load_buf+0x22c>
  u64 i; /// byte index in .ldr
  //  u8 data;
  //  volatile u64 delay;

  if(bfinLdrSize > BFIN_LDR_MAX_BYTES) {
    print_dbg("\r\n bfin load error: size : "); print_dbg_hex(bfinLdrSize);
80017404:	fe b0 de 24 	rcall	8001304c <print_dbg>
80017408:	6c 0c       	ld.w	r12,r6[0x0]
8001740a:	fe b0 dd c9 	rcall	80012f9c <print_dbg_hex>
8001740e:	2f ed       	sub	sp,-8
    bfin_transfer_byte(bfinLdrData[i]);
    //    delay = 0; while(delay < 0x80) { delay++; }
  }

  bfin_end_transfer();
}
80017410:	d8 32       	popm	r0-r7,pc
80017412:	d7 03       	nop
80017414:	80 02       	ld.sh	r2,r0[0x0]
80017416:	1f bc       	ld.ub	r12,pc[0x3]
80017418:	80 02       	ld.sh	r2,r0[0x0]
8001741a:	1f dc       	ld.ub	r12,pc[0x5]
8001741c:	80 02       	ld.sh	r2,r0[0x0]
8001741e:	20 60       	sub	r0,6
80017420:	80 02       	ld.sh	r2,r0[0x0]
80017422:	1f e8       	ld.ub	r8,pc[0x6]
80017424:	80 02       	ld.sh	r2,r0[0x0]
80017426:	1f a0       	ld.ub	r0,pc[0x2]

80017428 <init_events>:
// initializes (or re-initializes)  the system event queue.
void init_events( void ) {
  int k;
  
  // set queue (circular list) to empty
  putIdx = 0;
80017428:	e0 6a 08 7c 	mov	r10,2172
8001742c:	30 08       	mov	r8,0
  getIdx = 0;
8001742e:	95 08       	st.w	r10[0x0],r8

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
    sysEvents[ k ].type = 0;
80017430:	e0 6a 08 80 	mov	r10,2176
void init_events( void ) {
  int k;
  
  // set queue (circular list) to empty
  putIdx = 0;
  getIdx = 0;
80017434:	10 99       	mov	r9,r8

// The system event queue is a circular array of event records.
static event_t sysEvents[ MAX_EVENTS ];

// initializes (or re-initializes)  the system event queue.
void init_events( void ) {
80017436:	95 08       	st.w	r10[0x0],r8
80017438:	e0 68 08 84 	mov	r8,2180
  getIdx = 0;

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
    sysEvents[ k ].type = 0;
    sysEvents[ k ].data = 0;
8001743c:	f0 ca ff 00 	sub	r10,r8,-256
  // set queue (circular list) to empty
  putIdx = 0;
  getIdx = 0;

  // zero out the event records
  for ( k = 0; k < MAX_EVENTS; k++ ) {
80017440:	91 09       	st.w	r8[0x0],r9
80017442:	91 19       	st.w	r8[0x4],r9
    sysEvents[ k ].type = 0;
    sysEvents[ k ].data = 0;
  }
}
80017444:	2f 88       	sub	r8,-8
80017446:	14 38       	cp.w	r8,r10
80017448:	cf c1       	brne	80017440 <init_events+0x18>
8001744a:	5e fc       	retal	r12

8001744c <event_post>:
8001744c:	d4 01       	pushm	lr
8001744e:	d3 33       	ssrf	0x13
80017450:	e0 69 08 7c 	mov	r9,2172
  //  Disable_interrupt_level( TIMER_INT_LEVEL );
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
  
  // increment write idx, posbily wrapping
  saveIndex = putIdx;
  INCR_EVENT_INDEX( putIdx );
80017454:	72 0a       	ld.w	r10,r9[0x0]
80017456:	f4 c8 ff ff 	sub	r8,r10,-1
8001745a:	93 08       	st.w	r9[0x0],r8
8001745c:	e0 48 00 20 	cp.w	r8,32
80017460:	f9 b8 00 00 	moveq	r8,0
80017464:	f3 f8 0a 00 	st.weq	r9[0x0],r8
  if ( putIdx != getIdx  ) {
80017468:	e0 6b 08 80 	mov	r11,2176
8001746c:	76 0b       	ld.w	r11,r11[0x0]
    sysEvents[ putIdx ].type = e->type;
8001746e:	10 3b       	cp.w	r11,r8
80017470:	c0 d0       	breq	8001748a <event_post+0x3e>
80017472:	78 0a       	ld.w	r10,r12[0x0]
80017474:	e0 69 08 84 	mov	r9,2180
    sysEvents[ putIdx ].data = e->data;
80017478:	f2 08 09 3a 	st.w	r9[r8<<0x3],r10
8001747c:	f2 08 00 38 	add	r8,r9,r8<<0x3
    // idx wrapped, so queue is full, restore idx
    putIdx = saveIndex;
    print_dbg("\r\n event queue full!");
  } 

  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
80017480:	78 19       	ld.w	r9,r12[0x4]
  //  if (fReenableInterrupts) {
  //    Enable_interrupt_level( TIMER_INT_LEVEL );
  //  }

  return status;
}
80017482:	30 1c       	mov	r12,1
    sysEvents[ putIdx ].type = e->type;
    sysEvents[ putIdx ].data = e->data;
    status = true;
  } else {
    // idx wrapped, so queue is full, restore idx
    putIdx = saveIndex;
80017484:	91 19       	st.w	r8[0x4],r9
    print_dbg("\r\n event queue full!");
80017486:	d5 33       	csrf	0x13
80017488:	d8 02       	popm	pc
8001748a:	93 0a       	st.w	r9[0x0],r10
8001748c:	48 3c       	lddpc	r12,80017498 <event_post+0x4c>
  } 

  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
8001748e:	fe b0 dd df 	rcall	8001304c <print_dbg>
  //  if (fReenableInterrupts) {
  //    Enable_interrupt_level( TIMER_INT_LEVEL );
  //  }

  return status;
}
80017492:	30 0c       	mov	r12,0
80017494:	d5 33       	csrf	0x13
80017496:	d8 02       	popm	pc
80017498:	80 02       	ld.sh	r2,r0[0x0]
8001749a:	20 00       	sub	r0,0

8001749c <get_next_event>:
8001749c:	18 99       	mov	r9,r12
8001749e:	d3 33       	ssrf	0x13
800174a0:	e0 68 08 7c 	mov	r8,2172
800174a4:	e0 6a 08 80 	mov	r10,2176
  //  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
  //  Disable_interrupt_level( TIMER_INT_LEVEL );
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
  
  // if pointers are equal, the queue is empty... don't allow idx's to wrap!
  if ( getIdx != putIdx ) {
800174a8:	70 0b       	ld.w	r11,r8[0x0]
800174aa:	74 08       	ld.w	r8,r10[0x0]
    INCR_EVENT_INDEX( getIdx );
800174ac:	16 38       	cp.w	r8,r11
800174ae:	c1 50       	breq	800174d8 <get_next_event+0x3c>
800174b0:	2f f8       	sub	r8,-1
800174b2:	95 08       	st.w	r10[0x0],r8
800174b4:	e0 48 00 20 	cp.w	r8,32
800174b8:	f9 b8 00 00 	moveq	r8,0
    e->type = sysEvents[ getIdx ].type;
800174bc:	f5 f8 0a 00 	st.weq	r10[0x0],r8
    e->data = sysEvents[ getIdx ].data;
800174c0:	e0 6a 08 84 	mov	r10,2180
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
  
  // if pointers are equal, the queue is empty... don't allow idx's to wrap!
  if ( getIdx != putIdx ) {
    INCR_EVENT_INDEX( getIdx );
    e->type = sysEvents[ getIdx ].type;
800174c4:	f4 08 00 3b 	add	r11,r10,r8<<0x3
    e->data = sysEvents[ getIdx ].data;
800174c8:	f4 08 03 38 	ld.w	r8,r10[r8<<0x3]
800174cc:	99 08       	st.w	r12[0x0],r8
    e->type  = 0xff;
    e->data = 0;
    status = false;
  }

  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
800174ce:	76 18       	ld.w	r8,r11[0x4]
  //  if (fReenableInterrupts) {
    //    Enable_interrupt_level( TIMER_INT_LEVEL );
  //  }
  return status;
}
800174d0:	99 18       	st.w	r12[0x4],r8
    e->type = sysEvents[ getIdx ].type;
    e->data = sysEvents[ getIdx ].data;
    status = true;
  } else {
    e->type  = 0xff;
    e->data = 0;
800174d2:	30 1c       	mov	r12,1
    INCR_EVENT_INDEX( getIdx );
    e->type = sysEvents[ getIdx ].type;
    e->data = sysEvents[ getIdx ].data;
    status = true;
  } else {
    e->type  = 0xff;
800174d4:	d5 33       	csrf	0x13
800174d6:	5e fc       	retal	r12
    e->data = 0;
800174d8:	30 0c       	mov	r12,0
    INCR_EVENT_INDEX( getIdx );
    e->type = sysEvents[ getIdx ].type;
    e->data = sysEvents[ getIdx ].data;
    status = true;
  } else {
    e->type  = 0xff;
800174da:	e0 68 00 ff 	mov	r8,255
  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
  //  if (fReenableInterrupts) {
    //    Enable_interrupt_level( TIMER_INT_LEVEL );
  //  }
  return status;
}
800174de:	93 1c       	st.w	r9[0x4],r12
800174e0:	93 08       	st.w	r9[0x0],r8
800174e2:	d5 33       	csrf	0x13
800174e4:	5e fc       	retal	r12
800174e6:	d7 03       	nop

800174e8 <set_enc_thresh>:
    enc[idx].pos = pos;
  }
}
  
void set_enc_thresh( const u8 idx, const u8 v ) {
  enc[idx].thresh = v;
800174e8:	f8 0c 00 1c 	add	r12,r12,r12<<0x1
800174ec:	e0 68 3b 78 	mov	r8,15224
800174f0:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
}
800174f4:	b8 3b       	st.h	r12[0x6],r11
800174f6:	5e fc       	retal	r12

800174f8 <process_enc>:
800174f8:	eb cd 40 f8 	pushm	r3-r7,lr

// apply pin mapping to deteremine movement
void process_enc( const U8 idx) {
  U8 pos;
  
  pos = gpio_get_pin_value(enc[idx].pin[0]) + (gpio_get_pin_value(enc[idx].pin[1]) << 1);
800174fc:	e0 65 3b 78 	mov	r5,15224
80017500:	f8 0c 00 14 	add	r4,r12,r12<<0x1
80017504:	ea 04 00 26 	add	r6,r5,r4<<0x2
80017508:	0c 97       	mov	r7,r6
8001750a:	0f 3c       	ld.ub	r12,r7++
8001750c:	fe b0 d8 ee 	rcall	800126e8 <gpio_get_pin_value>
80017510:	18 93       	mov	r3,r12
80017512:	0f 8c       	ld.ub	r12,r7[0x0]
80017514:	fe b0 d8 ea 	rcall	800126e8 <gpio_get_pin_value>
80017518:	0d a8       	ld.ub	r8,r6[0x2]
8001751a:	e6 0c 00 13 	add	r3,r3,r12<<0x1
  
  if (pos != enc[idx].pos) {
8001751e:	5c 53       	castu.b	r3
80017520:	e6 08 18 00 	cp.b	r8,r3
    enc[idx].val -= enc_map[enc[idx].pos][pos];
80017524:	c0 d0       	breq	8001753e <process_enc+0x46>
80017526:	2f f4       	sub	r4,-1
80017528:	e6 08 00 28 	add	r8,r3,r8<<0x2
8001752c:	ea 04 04 29 	ld.sh	r9,r5[r4<<0x2]
80017530:	48 5a       	lddpc	r10,80017544 <process_enc+0x4c>
80017532:	f4 08 06 08 	ld.sb	r8,r10[r8]
80017536:	10 19       	sub	r9,r8
80017538:	ea 04 0a 29 	st.h	r5[r4<<0x2],r9
    enc[idx].pos = pos;
8001753c:	ac a3       	st.b	r6[0x2],r3
8001753e:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80017542:	d7 03       	nop
80017544:	80 02       	ld.sh	r2,r0[0x0]
80017546:	20 15       	sub	r5,1

80017548 <init_encoders>:
80017548:	eb cd 40 e0 	pushm	r5-r7,lr

// initialize encoder positions
void init_encoders(void) {
  U8 i;
  // constant data
  enc[0].pin[0] = ENC0_S0_PIN;
8001754c:	32 28       	mov	r8,34
8001754e:	e0 67 3b 78 	mov	r7,15224
  enc[0].pin[1] = ENC0_S1_PIN;
80017552:	ae 88       	st.b	r7[0x0],r8
80017554:	32 38       	mov	r8,35
  enc[0].event = kEventEncoder0;
80017556:	ae 98       	st.b	r7[0x1],r8
80017558:	30 58       	mov	r8,5
  enc[1].pin[0] = ENC1_S0_PIN;
8001755a:	8f 28       	st.w	r7[0x8],r8
8001755c:	32 48       	mov	r8,36
8001755e:	ef 68 00 0c 	st.b	r7[12],r8
  enc[1].pin[1] = ENC1_S1_PIN;
80017562:	32 58       	mov	r8,37
80017564:	ef 68 00 0d 	st.b	r7[13],r8
  enc[1].event = kEventEncoder1;
80017568:	30 68       	mov	r8,6
  enc[2].pin[0] = ENC2_S0_PIN;
8001756a:	8f 58       	st.w	r7[0x14],r8
8001756c:	32 68       	mov	r8,38
8001756e:	ef 68 00 18 	st.b	r7[24],r8
  enc[2].pin[1] = ENC2_S1_PIN;
80017572:	32 78       	mov	r8,39
80017574:	ef 68 00 19 	st.b	r7[25],r8
  enc[2].event = kEventEncoder2;
80017578:	30 78       	mov	r8,7
  enc[3].pin[0] = ENC3_S0_PIN;
8001757a:	8f 88       	st.w	r7[0x20],r8
8001757c:	32 88       	mov	r8,40
8001757e:	ef 68 00 24 	st.b	r7[36],r8
  enc[3].pin[1] = ENC3_S1_PIN;
80017582:	32 98       	mov	r8,41
80017584:	ef 68 00 25 	st.b	r7[37],r8
  enc[3].event = kEventEncoder3;
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
80017588:	30 88       	mov	r8,8
  enc[2].pin[0] = ENC2_S0_PIN;
  enc[2].pin[1] = ENC2_S1_PIN;
  enc[2].event = kEventEncoder2;
  enc[3].pin[0] = ENC3_S0_PIN;
  enc[3].pin[1] = ENC3_S1_PIN;
  enc[3].event = kEventEncoder3;
8001758a:	32 2c       	mov	r12,34
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
8001758c:	8f b8       	st.w	r7[0x2c],r8
8001758e:	fe b0 d8 ad 	rcall	800126e8 <gpio_get_pin_value>
80017592:	18 96       	mov	r6,r12
80017594:	0f 9c       	ld.ub	r12,r7[0x1]
80017596:	fe b0 d8 a9 	rcall	800126e8 <gpio_get_pin_value>
8001759a:	ec 0c 00 1c 	add	r12,r6,r12<<0x1
8001759e:	30 06       	mov	r6,0
    enc[i].thresh = ENC_THRESH_DEFAULT;
800175a0:	ae ac       	st.b	r7[0x2],r12
  enc[3].pin[1] = ENC3_S1_PIN;
  enc[3].event = kEventEncoder3;
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
800175a2:	ae 36       	st.h	r7[0x6],r6
800175a4:	ef 3c 00 0c 	ld.ub	r12,r7[12]
800175a8:	fe b0 d8 a0 	rcall	800126e8 <gpio_get_pin_value>
800175ac:	18 95       	mov	r5,r12
800175ae:	ef 3c 00 0d 	ld.ub	r12,r7[13]
800175b2:	fe b0 d8 9b 	rcall	800126e8 <gpio_get_pin_value>
800175b6:	ea 0c 00 1c 	add	r12,r5,r12<<0x1
    enc[i].thresh = ENC_THRESH_DEFAULT;
800175ba:	ef 56 00 12 	st.h	r7[18],r6
  enc[3].pin[1] = ENC3_S1_PIN;
  enc[3].event = kEventEncoder3;
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
800175be:	ef 6c 00 0e 	st.b	r7[14],r12
800175c2:	ef 3c 00 18 	ld.ub	r12,r7[24]
800175c6:	fe b0 d8 91 	rcall	800126e8 <gpio_get_pin_value>
800175ca:	18 95       	mov	r5,r12
800175cc:	ef 3c 00 19 	ld.ub	r12,r7[25]
800175d0:	fe b0 d8 8c 	rcall	800126e8 <gpio_get_pin_value>
800175d4:	ea 0c 00 1c 	add	r12,r5,r12<<0x1
    enc[i].thresh = ENC_THRESH_DEFAULT;
800175d8:	ef 56 00 1e 	st.h	r7[30],r6
  enc[3].pin[1] = ENC3_S1_PIN;
  enc[3].event = kEventEncoder3;
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
800175dc:	ef 6c 00 1a 	st.b	r7[26],r12
800175e0:	ef 3c 00 24 	ld.ub	r12,r7[36]
800175e4:	fe b0 d8 82 	rcall	800126e8 <gpio_get_pin_value>
800175e8:	18 95       	mov	r5,r12
800175ea:	ef 3c 00 25 	ld.ub	r12,r7[37]
800175ee:	fe b0 d8 7d 	rcall	800126e8 <gpio_get_pin_value>
    enc[i].thresh = ENC_THRESH_DEFAULT;
800175f2:	ef 56 00 2a 	st.h	r7[42],r6
  enc[3].pin[1] = ENC3_S1_PIN;
  enc[3].event = kEventEncoder3;
  
  // realtime initial pin values
  for(i=0; i<NUM_ENC; i++) {
    enc[i].pos = gpio_get_pin_value(enc[i].pin[0]) + (gpio_get_pin_value(enc[i].pin[1]) << 1);
800175f6:	ea 0c 00 1c 	add	r12,r5,r12<<0x1
800175fa:	ef 6c 00 26 	st.b	r7[38],r12
    enc[i].thresh = ENC_THRESH_DEFAULT;
  }
}
800175fe:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80017602:	d7 03       	nop

80017604 <files_get_dsp_name>:


//----- dsp management

// return filename for DSP given index in list
const volatile char* files_get_dsp_name(u8 idx) {
80017604:	a7 6c       	lsl	r12,0x6
80017606:	e0 68 11 90 	mov	r8,4496
  return list_get_name(&dspList, idx);
}
8001760a:	2f 88       	sub	r8,-8
8001760c:	f0 0c 00 0c 	add	r12,r8,r12
80017610:	5e fc       	retal	r12
80017612:	d7 03       	nop

80017614 <files_get_dsp_count>:
  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
  cpu_irq_enable_level(UI_IRQ_PRIORITY);
}

// return count of dsp files
u8 files_get_dsp_count(void) {
80017614:	e0 68 11 90 	mov	r8,4496
  return dspList.num;
}
80017618:	f1 3c 08 0b 	ld.ub	r12,r8[2059]
8001761c:	5e fc       	retal	r12
8001761e:	d7 03       	nop

80017620 <files_store_scene>:
void files_store_scene(u8 idx) {
  // fill the scene RAM buffer from current state of system
  //  scene__buf();
  // write it to sdcard

}
80017620:	5e fc       	retal	r12
80017622:	d7 03       	nop

80017624 <files_get_scene_count>:
  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
  cpu_irq_enable_level(UI_IRQ_PRIORITY);
}

// return count of dsp files
u8 files_get_scene_count(void) {
80017624:	e0 68 11 90 	mov	r8,4496
  return dspList.num;
}
80017628:	f1 3c 08 0b 	ld.ub	r12,r8[2059]
8001762c:	5e fc       	retal	r12
8001762e:	d7 03       	nop

80017630 <list_scan>:

const char* list_get_name(dirList_t* list, u8 idx) {
  return (const char*) ( list->nameBuf + (idx * DIR_LIST_NAME_LEN) );
}

void list_scan(dirList_t* list, const char* path) {
80017630:	d4 21       	pushm	r4-r7,lr
80017632:	fa cd 01 1c 	sub	sp,sp,284
  FL_DIR dirstat;
  struct fs_dir_ent dirent;
  list->num = 0;
80017636:	30 08       	mov	r8,0

const char* list_get_name(dirList_t* list, u8 idx) {
  return (const char*) ( list->nameBuf + (idx * DIR_LIST_NAME_LEN) );
}

void list_scan(dirList_t* list, const char* path) {
80017638:	16 97       	mov	r7,r11
8001763a:	18 95       	mov	r5,r12
  FL_DIR dirstat;
  struct fs_dir_ent dirent;
  list->num = 0;
8001763c:	f9 48 08 08 	st.w	r12[2056],r8
  strcpy(list->path, path);
80017640:	e0 a0 4e da 	rcall	800213f4 <strcpy>
  if( fl_opendir(path, &dirstat) ) {      
80017644:	fa c6 fe f0 	sub	r6,sp,-272
80017648:	0e 9c       	mov	r12,r7
8001764a:	0c 9b       	mov	r11,r6
8001764c:	e0 a0 1b 1c 	rcall	8001ac84 <fl_opendir>
80017650:	c1 c0       	breq	80017688 <list_scan+0x58>
80017652:	1a 97       	mov	r7,sp
    while (fl_readdir(&dirstat, &dirent) == 0) {
      if( !(dirent.is_dir) ) {
	strcpy((char*)list->nameBuf + (list->num * DIR_LIST_NAME_LEN), dirent.filename);
80017654:	ea c4 ff f8 	sub	r4,r5,-8
  FL_DIR dirstat;
  struct fs_dir_ent dirent;
  list->num = 0;
  strcpy(list->path, path);
  if( fl_opendir(path, &dirstat) ) {      
    while (fl_readdir(&dirstat, &dirent) == 0) {
80017658:	1a 9b       	mov	r11,sp
8001765a:	0c 9c       	mov	r12,r6
8001765c:	e0 a0 1a d6 	rcall	8001ac08 <fl_readdir>
80017660:	c1 41       	brne	80017688 <list_scan+0x58>
      if( !(dirent.is_dir) ) {
80017662:	fb 38 01 04 	ld.ub	r8,sp[260]
80017666:	f8 08 18 00 	cp.b	r8,r12
8001766a:	cf 71       	brne	80017658 <list_scan+0x28>
	strcpy((char*)list->nameBuf + (list->num * DIR_LIST_NAME_LEN), dirent.filename);
8001766c:	ea fc 08 08 	ld.w	r12,r5[2056]
80017670:	1a 9b       	mov	r11,sp
80017672:	a7 6c       	lsl	r12,0x6
80017674:	e8 0c 00 0c 	add	r12,r4,r12
80017678:	e0 a0 4e be 	rcall	800213f4 <strcpy>
	list->num++;
8001767c:	ea f8 08 08 	ld.w	r8,r5[2056]
80017680:	2f f8       	sub	r8,-1
80017682:	eb 48 08 08 	st.w	r5[2056],r8
80017686:	ce 9b       	rjmp	80017658 <list_scan+0x28>
      }
    }
  }
}
80017688:	2b 9d       	sub	sp,-284
8001768a:	d8 22       	popm	r4-r7,pc

8001768c <init_files>:
8001768c:	d4 01       	pushm	lr
8001768e:	cd 7c       	rcall	8001783c <fat_init>
80017690:	48 5b       	lddpc	r11,800176a4 <init_files+0x18>
80017692:	e0 6c 11 90 	mov	r12,4496
80017696:	cc df       	rcall	80017630 <list_scan>

void init_files(void) {
  // init FAT lib
  fat_init();
  // scan directories
  list_scan(&dspList, "/dsp/");
80017698:	48 4b       	lddpc	r11,800176a8 <init_files+0x1c>
  list_scan(&sceneList, "/scenes/");
8001769a:	e0 6c 09 84 	mov	r12,2436
8001769e:	cc 9f       	rcall	80017630 <list_scan>
800176a0:	d8 02       	popm	pc
}
800176a2:	d7 03       	nop
800176a4:	80 02       	ld.sh	r2,r0[0x0]
800176a6:	20 28       	sub	r8,2
800176a8:	80 02       	ld.sh	r2,r0[0x0]
800176aa:	20 30       	sub	r0,3

800176ac <T.49>:
800176ac:	eb cd 40 fc 	pushm	r2-r7,lr
800176b0:	fa cd 01 5c 	sub	sp,sp,348
800176b4:	16 97       	mov	r7,r11
800176b6:	fa c6 fe f0 	sub	r6,sp,-272
800176ba:	e0 6b 11 90 	mov	r11,4496
  struct fs_dir_ent dirent;
  char path[64];
  void* fp;

  //  name = list_get_name(lista, idx);
  strcpy(path, list->path);
800176be:	18 92       	mov	r2,r12
800176c0:	0c 9c       	mov	r12,r6
800176c2:	e0 a0 4e 99 	rcall	800213f4 <strcpy>

  print_dbg("\r\n attempting to open file at path: \r\n");
800176c6:	49 fc       	lddpc	r12,80017740 <T.49+0x94>
800176c8:	fe b0 dc c2 	rcall	8001304c <print_dbg>
  print_dbg(path);
800176cc:	0c 9c       	mov	r12,r6
800176ce:	fe b0 dc bf 	rcall	8001304c <print_dbg>

  if(fl_opendir(path, &dirstat)) {
800176d2:	fa c3 fe b0 	sub	r3,sp,-336
800176d6:	0c 9c       	mov	r12,r6
800176d8:	06 9b       	mov	r11,r3
800176da:	e0 a0 1a d5 	rcall	8001ac84 <fl_opendir>
800176de:	c2 c0       	breq	80017736 <T.49+0x8a>
800176e0:	1a 94       	mov	r4,sp
    while (fl_readdir(&dirstat, &dirent) == 0) {
      if (strcmp(dirent.filename, name) == 0) {
800176e2:	c0 78       	rjmp	800176f0 <T.49+0x44>
800176e4:	04 9b       	mov	r11,r2
800176e6:	1a 9c       	mov	r12,sp
800176e8:	e0 a0 4e 32 	rcall	8002134c <strcmp>

	fp = fl_fopen(path, mode);
	*size = dirent.size;
	break;
      } else { // no match
	*size = 0;
800176ec:	c0 b0       	breq	80017702 <T.49+0x56>

  print_dbg("\r\n attempting to open file at path: \r\n");
  print_dbg(path);

  if(fl_opendir(path, &dirstat)) {
    while (fl_readdir(&dirstat, &dirent) == 0) {
800176ee:	8f 05       	st.w	r7[0x0],r5
800176f0:	1a 9b       	mov	r11,sp
800176f2:	06 9c       	mov	r12,r3
800176f4:	e0 a0 1a 8a 	rcall	8001ac08 <fl_readdir>
800176f8:	18 95       	mov	r5,r12
800176fa:	cf 50       	breq	800176e4 <T.49+0x38>
800176fc:	2a 9d       	sub	sp,-348
800176fe:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
      if (strcmp(dirent.filename, name) == 0) {
	strncat(path, dirent.filename, 58);
80017702:	1a 9b       	mov	r11,sp
80017704:	33 aa       	mov	r10,58
80017706:	0c 9c       	mov	r12,r6
80017708:	e0 a0 4e 8a 	rcall	8002141c <strncat>
	
	print_dbg("\r\n attempting to open file at path: \r\n");
8001770c:	48 dc       	lddpc	r12,80017740 <T.49+0x94>
8001770e:	fe b0 dc 9f 	rcall	8001304c <print_dbg>
	print_dbg(path);
80017712:	0c 9c       	mov	r12,r6
80017714:	fe b0 dc 9c 	rcall	8001304c <print_dbg>
	
	print_dbg("\r\n name: \r\n");
80017718:	48 bc       	lddpc	r12,80017744 <T.49+0x98>
8001771a:	fe b0 dc 99 	rcall	8001304c <print_dbg>
	print_dbg(path);
8001771e:	0c 9c       	mov	r12,r6
80017720:	fe b0 dc 96 	rcall	8001304c <print_dbg>

	fp = fl_fopen(path, mode);
80017724:	0c 9c       	mov	r12,r6
80017726:	48 9b       	lddpc	r11,80017748 <T.49+0x9c>
80017728:	e0 a0 1d c2 	rcall	8001b2ac <fl_fopen>
	*size = dirent.size;
8001772c:	44 38       	lddsp	r8,sp[0x10c]
  } else { // dir error
    *size = 0;
    fp = NULL;
  }
  return fp;
}
8001772e:	8f 08       	st.w	r7[0x0],r8
80017730:	2a 9d       	sub	sp,-348
80017732:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80017736:	8f 0c       	st.w	r7[0x0],r12
80017738:	2a 9d       	sub	sp,-348
8001773a:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
8001773e:	d7 03       	nop
80017740:	80 02       	ld.sh	r2,r0[0x0]
80017742:	20 3c       	sub	r12,3
80017744:	80 02       	ld.sh	r2,r0[0x0]
80017746:	20 64       	sub	r4,6
80017748:	80 02       	ld.sh	r2,r0[0x0]
8001774a:	20 70       	sub	r0,7

8001774c <files_load_dsp_name>:
8001774c:	eb cd 40 f8 	pushm	r3-r7,lr
80017750:	20 1d       	sub	sp,4
80017752:	30 06       	mov	r6,0
80017754:	fa cb ff fc 	sub	r11,sp,-4
80017758:	18 95       	mov	r5,r12
8001775a:	16 d6       	st.w	--r11,r6
8001775c:	d3 33       	ssrf	0x13
8001775e:	d3 33       	ssrf	0x13
80017760:	1a 9b       	mov	r11,sp
80017762:	ca 5f       	rcall	800176ac <T.49>
80017764:	18 97       	mov	r7,r12
80017766:	c3 10       	breq	800177c8 <files_load_dsp_name+0x7c>
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
  cpu_irq_disable_level(UI_IRQ_PRIORITY);

  fp = list_open_file_name(&dspList, name, "r", &size);

  if( fp != NULL) {	  
80017768:	49 cc       	lddpc	r12,800177d8 <files_load_dsp_name+0x8c>
    print_dbg("\r\n found file, loading dsp ");
8001776a:	fe b0 dc 71 	rcall	8001304c <print_dbg>
8001776e:	0a 9c       	mov	r12,r5
    print_dbg(name);
80017770:	fe b0 dc 6e 	rcall	8001304c <print_dbg>
80017774:	49 ac       	lddpc	r12,800177dc <files_load_dsp_name+0x90>
    /// FIXME:
    /// arrg, why is fl_fread intermittently broken?
    /// check our media access functions against fat_filelib.c, i guess
    //    bytesRead = fl_fread((void*)bfinLdrData, 1, size, fp);

    print_dbg("\r\n bfinLdrData : @0x");
80017776:	fe b0 dc 6b 	rcall	8001304c <print_dbg>
8001777a:	e0 65 3f b4 	mov	r5,16308
    print_dbg_hex( (u32)bfinLdrData );
8001777e:	6a 0c       	ld.w	r12,r5[0x0]
80017780:	fe b0 dc 0e 	rcall	80012f9c <print_dbg_hex>


    fake_fread(bfinLdrData, size, fp);
80017784:	6a 03       	ld.w	r3,r5[0x0]
80017786:	40 04       	lddsp	r4,sp[0x0]
/*   }  */
/* } */
// fread: no size arg
static void fake_fread(volatile u8* dst, u32 size, void* fp) {
  u32 n = 0;
  while(n < size) {
80017788:	58 04       	cp.w	r4,0
8001778a:	c0 b0       	breq	800177a0 <files_load_dsp_name+0x54>
void files_load_dsp(u8 idx) {  
  files_load_dsp_name((const char*)files_get_dsp_name(idx));
}

// search for specified dsp file and load it
void files_load_dsp_name(const char* name) {
8001778c:	e6 06 00 05 	add	r5,r3,r6
/* } */
// fread: no size arg
static void fake_fread(volatile u8* dst, u32 size, void* fp) {
  u32 n = 0;
  while(n < size) {
    *dst = fl_fgetc(fp);
80017790:	0e 9c       	mov	r12,r7
80017792:	e0 a0 1b 81 	rcall	8001ae94 <fl_fgetc>
80017796:	aa 8c       	st.b	r5[0x0],r12
    n++;
80017798:	2f f6       	sub	r6,-1
/*   }  */
/* } */
// fread: no size arg
static void fake_fread(volatile u8* dst, u32 size, void* fp) {
  u32 n = 0;
  while(n < size) {
8001779a:	0c 34       	cp.w	r4,r6
8001779c:	fe 9b ff f8 	brhi	8001778c <files_load_dsp_name+0x40>
    print_dbg_hex( (u32)bfinLdrData );


    fake_fread(bfinLdrData, size, fp);
    // print_dbg("\r\n finished fakefread");
    fl_fclose(fp);
800177a0:	0e 9c       	mov	r12,r7
800177a2:	e0 a0 1b 87 	rcall	8001aeb0 <fl_fclose>
    bfinLdrSize = size;
800177a6:	e0 68 19 9c 	mov	r8,6556
    print_dbg("\r\n loading bfin from buf");
800177aa:	40 09       	lddsp	r9,sp[0x0]


    fake_fread(bfinLdrData, size, fp);
    // print_dbg("\r\n finished fakefread");
    fl_fclose(fp);
    bfinLdrSize = size;
800177ac:	48 dc       	lddpc	r12,800177e0 <files_load_dsp_name+0x94>
    print_dbg("\r\n loading bfin from buf");
800177ae:	91 09       	st.w	r8[0x0],r9
800177b0:	fe b0 dc 4e 	rcall	8001304c <print_dbg>
    bfin_load_buf();
800177b4:	fe b0 fd 22 	rcall	800171f8 <bfin_load_buf>
    print_dbg("\r\n finished load");
800177b8:	48 bc       	lddpc	r12,800177e4 <files_load_dsp_name+0x98>
800177ba:	fe b0 dc 49 	rcall	8001304c <print_dbg>
    print_dbg("\r\n error: fp was null in files_load_dsp_name \r\n");
  }


  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
  cpu_irq_enable_level(UI_IRQ_PRIORITY);
800177be:	d5 33       	csrf	0x13
}
800177c0:	d5 33       	csrf	0x13
800177c2:	2f fd       	sub	sp,-4
800177c4:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
    bfinLdrSize = size;
    print_dbg("\r\n loading bfin from buf");
    bfin_load_buf();
    print_dbg("\r\n finished load");
  } else {
    print_dbg("\r\n error: fp was null in files_load_dsp_name \r\n");
800177c8:	48 8c       	lddpc	r12,800177e8 <files_load_dsp_name+0x9c>
800177ca:	fe b0 dc 41 	rcall	8001304c <print_dbg>
  }


  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
  cpu_irq_enable_level(UI_IRQ_PRIORITY);
800177ce:	d5 33       	csrf	0x13
}
800177d0:	d5 33       	csrf	0x13
800177d2:	2f fd       	sub	sp,-4
800177d4:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800177d8:	80 02       	ld.sh	r2,r0[0x0]
800177da:	20 74       	sub	r4,7
800177dc:	80 02       	ld.sh	r2,r0[0x0]
800177de:	20 90       	sub	r0,9
800177e0:	80 02       	ld.sh	r2,r0[0x0]
800177e2:	20 a8       	sub	r8,10
800177e4:	80 02       	ld.sh	r2,r0[0x0]
800177e6:	20 c4       	sub	r4,12
800177e8:	80 02       	ld.sh	r2,r0[0x0]
800177ea:	20 d8       	sub	r8,13

800177ec <files_load_dsp>:
800177ec:	d4 01       	pushm	lr
800177ee:	e0 68 11 90 	mov	r8,4496
800177f2:	2f 88       	sub	r8,-8
800177f4:	a7 6c       	lsl	r12,0x6
800177f6:	f0 0c 00 0c 	add	r12,r8,r12
800177fa:	ca 9f       	rcall	8001774c <files_load_dsp_name>
800177fc:	d8 02       	popm	pc
800177fe:	d7 03       	nop

80017800 <files_load_scene>:
80017800:	d4 01       	pushm	lr
80017802:	20 1d       	sub	sp,4
80017804:	30 08       	mov	r8,0
80017806:	fa cb ff fc 	sub	r11,sp,-4
8001780a:	16 d8       	st.w	--r11,r8
void files_load_scene_name(const char* name) {
  void* fp;
  //  u32 bytesRead;
  u32 size = 0;

  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
8001780c:	d3 33       	ssrf	0x13
  cpu_irq_disable_level(UI_IRQ_PRIORITY);
8001780e:	d3 33       	ssrf	0x13

  fp = list_open_file_name(&dspList, name, "r", &size);
80017810:	e0 68 09 84 	mov	r8,2436
80017814:	2f 88       	sub	r8,-8
80017816:	a7 6c       	lsl	r12,0x6
80017818:	1a 9b       	mov	r11,sp
8001781a:	f0 0c 00 0c 	add	r12,r8,r12
8001781e:	c4 7f       	rcall	800176ac <T.49>

  if( fp != NULL) {	  
80017820:	c0 50       	breq	8001782a <files_load_scene+0x2a>

  } else {
    print_dbg("\r\n error: fp was null in files_load_scene_name \r\n");
  }
 
  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
80017822:	d5 33       	csrf	0x13
  cpu_irq_enable_level(UI_IRQ_PRIORITY);
80017824:	d5 33       	csrf	0x13
// return filename for scene given index in list

// load scene by index */
void files_load_scene(u8 idx) {  
  files_load_scene_name((const char*)files_get_scene_name(idx));
}
80017826:	2f fd       	sub	sp,-4
80017828:	d8 02       	popm	pc
    /* fl_fclose(fp); */
    /* bfinLdrSize = size; */
    /* bfin_load_buf(); */

  } else {
    print_dbg("\r\n error: fp was null in files_load_scene_name \r\n");
8001782a:	48 4c       	lddpc	r12,80017838 <files_load_scene+0x38>
8001782c:	fe b0 dc 10 	rcall	8001304c <print_dbg>
  }
 
  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
80017830:	d5 33       	csrf	0x13
  cpu_irq_enable_level(UI_IRQ_PRIORITY);
80017832:	d5 33       	csrf	0x13
// return filename for scene given index in list

// load scene by index */
void files_load_scene(u8 idx) {  
  files_load_scene_name((const char*)files_get_scene_name(idx));
}
80017834:	2f fd       	sub	sp,-4
80017836:	d8 02       	popm	pc
80017838:	80 02       	ld.sh	r2,r0[0x0]
8001783a:	21 84       	sub	r4,24

8001783c <fat_init>:


//=========
// extern

int fat_init(void) {
8001783c:	eb cd 40 80 	pushm	r7,lr
  // Initialise File IO Library
  print_dbg("\r\n beginning FAT library init.");
80017840:	48 ec       	lddpc	r12,80017878 <fat_init+0x3c>
80017842:	fe b0 dc 05 	rcall	8001304c <print_dbg>
  fl_init();
80017846:	e0 a0 17 93 	rcall	8001a76c <fl_init>
  print_dbg("\r\n finished FAT library init.");
8001784a:	48 dc       	lddpc	r12,8001787c <fat_init+0x40>
8001784c:	fe b0 dc 00 	rcall	8001304c <print_dbg>
  // Attach media access functions to library
  if ( fl_attach_media((fn_diskio_read)media_read, (fn_diskio_write)media_write) != FAT_INIT_OK ) {
80017850:	fe cb ff c8 	sub	r11,pc,-56
80017854:	fe cc ff 64 	sub	r12,pc,-156
80017858:	e0 a0 1b bc 	rcall	8001afd0 <fl_attach_media>
    print_dbg("\r\n failed to attach media access functions to fat_io_lib \r\n");
    return 1;
  } else {
    print_dbg("\r\n attached media access functions to fat_io_lib");
8001785c:	18 97       	mov	r7,r12
8001785e:	c0 71       	brne	8001786c <fat_init+0x30>
80017860:	48 8c       	lddpc	r12,80017880 <fat_init+0x44>
80017862:	fe b0 db f5 	rcall	8001304c <print_dbg>
    return 0;
  }
}
80017866:	0e 9c       	mov	r12,r7
  print_dbg("\r\n beginning FAT library init.");
  fl_init();
  print_dbg("\r\n finished FAT library init.");
  // Attach media access functions to library
  if ( fl_attach_media((fn_diskio_read)media_read, (fn_diskio_write)media_write) != FAT_INIT_OK ) {
    print_dbg("\r\n failed to attach media access functions to fat_io_lib \r\n");
80017868:	e3 cd 80 80 	ldm	sp++,r7,pc
8001786c:	48 6c       	lddpc	r12,80017884 <fat_init+0x48>
8001786e:	fe b0 db ef 	rcall	8001304c <print_dbg>
80017872:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
80017876:	d7 03       	nop
80017878:	80 02       	ld.sh	r2,r0[0x0]
8001787a:	22 10       	sub	r0,33
8001787c:	80 02       	ld.sh	r2,r0[0x0]
8001787e:	22 30       	sub	r0,35
80017880:	80 02       	ld.sh	r2,r0[0x0]
80017882:	22 8c       	sub	r12,40
80017884:	80 02       	ld.sh	r2,r0[0x0]
80017886:	22 50       	sub	r0,37

80017888 <media_write>:
80017888:	eb cd 40 f8 	pushm	r3-r7,lr
8001788c:	16 97       	mov	r7,r11
8001788e:	14 94       	mov	r4,r10
80017890:	18 93       	mov	r3,r12
80017892:	fe b0 dc c3 	rcall	80013218 <sd_mmc_spi_write_open>
80017896:	18 96       	mov	r6,r12
  // PDCA write isn't implemented in ASF... 
  // for the moment use slower blocking write.

  status = sd_mmc_spi_write_open(sector);

  if(status == false) {
80017898:	c1 e0       	breq	800178d4 <media_write+0x4c>
    print_dbg("\r\n error opening sd_mmc_spi, sector: ");
    print_dbg_hex(sector);
    return 0;
  }

  for (i=0;i<sector_count;i++) {
8001789a:	58 04       	cp.w	r4,0
8001789c:	c1 80       	breq	800178cc <media_write+0x44>
  status = sd_mmc_spi_write_open(sector);

  if(status == false) {
    print_dbg("\r\n error opening sd_mmc_spi, sector: ");
    print_dbg_hex(sector);
    return 0;
8001789e:	30 06       	mov	r6,0
800178a0:	c0 48       	rjmp	800178a8 <media_write+0x20>
  }

  for (i=0;i<sector_count;i++) {
800178a2:	0c 34       	cp.w	r4,r6
800178a4:	e0 88 00 14 	brls	800178cc <media_write+0x44>
  status = sd_mmc_spi_write_open(sector);

  if(status == false) {
    print_dbg("\r\n error opening sd_mmc_spi, sector: ");
    print_dbg_hex(sector);
    return 0;
800178a8:	ec 03 00 05 	add	r5,r6,r3
  }

  for (i=0;i<sector_count;i++) {
    status = sd_mmc_spi_write_sector_from_ram(buffer);
800178ac:	0e 9c       	mov	r12,r7
    print_dbg("\r\n error opening sd_mmc_spi, sector: ");
    print_dbg_hex(sector);
    return 0;
  }

  for (i=0;i<sector_count;i++) {
800178ae:	2f f6       	sub	r6,-1
      print_dbg("\r\n error writing sd_mmc_spi, sector: ");
      print_dbg_hex(sector);
    }
    //////////////
    sector++;
    buffer += 512;
800178b0:	ee c7 fe 00 	sub	r7,r7,-512
    print_dbg_hex(sector);
    return 0;
  }

  for (i=0;i<sector_count;i++) {
    status = sd_mmc_spi_write_sector_from_ram(buffer);
800178b4:	fe b0 de cc 	rcall	8001364c <sd_mmc_spi_write_sector_from_ram>
    /////////// dbg
    if(status == false) {
800178b8:	cf 51       	brne	800178a2 <media_write+0x1a>
      print_dbg("\r\n error writing sd_mmc_spi, sector: ");
800178ba:	48 cc       	lddpc	r12,800178e8 <media_write+0x60>
800178bc:	fe b0 db c8 	rcall	8001304c <print_dbg>
      print_dbg_hex(sector);
800178c0:	0a 9c       	mov	r12,r5
800178c2:	fe b0 db 6d 	rcall	80012f9c <print_dbg_hex>
    print_dbg("\r\n error opening sd_mmc_spi, sector: ");
    print_dbg_hex(sector);
    return 0;
  }

  for (i=0;i<sector_count;i++) {
800178c6:	0c 34       	cp.w	r4,r6
800178c8:	fe 9b ff f0 	brhi	800178a8 <media_write+0x20>
    }
    //////////////
    sector++;
    buffer += 512;
  }
  sd_mmc_spi_write_close();
800178cc:	fe b0 dc 50 	rcall	8001316c <sd_mmc_spi_write_close>
800178d0:	e3 cf 90 f8 	ldm	sp++,r3-r7,pc,r12=1
  // for the moment use slower blocking write.

  status = sd_mmc_spi_write_open(sector);

  if(status == false) {
    print_dbg("\r\n error opening sd_mmc_spi, sector: ");
800178d4:	48 6c       	lddpc	r12,800178ec <media_write+0x64>
800178d6:	fe b0 db bb 	rcall	8001304c <print_dbg>
    print_dbg_hex(sector);
800178da:	06 9c       	mov	r12,r3
800178dc:	fe b0 db 60 	rcall	80012f9c <print_dbg_hex>
800178e0:	0c 9c       	mov	r12,r6
    return 0;
800178e2:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800178e6:	d7 03       	nop
800178e8:	80 02       	ld.sh	r2,r0[0x0]
800178ea:	22 e8       	sub	r8,46
800178ec:	80 02       	ld.sh	r2,r0[0x0]
800178ee:	22 c0       	sub	r0,44

800178f0 <media_read>:
800178f0:	d4 31       	pushm	r0-r7,lr
800178f2:	18 94       	mov	r4,r12
800178f4:	16 97       	mov	r7,r11
800178f6:	14 91       	mov	r1,r10
800178f8:	58 0a       	cp.w	r10,0
800178fa:	c5 30       	breq	800179a0 <media_read+0xb0>
800178fc:	30 03       	mov	r3,0
800178fe:	e0 66 3d b4 	mov	r6,15796
80017902:	e0 65 3b ac 	mov	r5,15276
int media_read(unsigned long sector, unsigned char *buffer, unsigned long sector_count);
int media_read(unsigned long sector, unsigned char *buffer, unsigned long sector_count) {
  unsigned long i;

  for (i=0;i<sector_count;i++) {
    pdca_load_channel( AVR32_PDCA_CHANNEL_SPI_RX,
80017906:	30 10       	mov	r0,1
80017908:	06 92       	mov	r2,r3
8001790a:	e0 6a 02 00 	mov	r10,512
8001790e:	e0 6b 3d b4 	mov	r11,15796
		       &pdcaRxBuf,
		       FS_BUF_SIZE);
    
    pdca_load_channel( AVR32_PDCA_CHANNEL_SPI_TX,
80017912:	30 0c       	mov	r12,0
80017914:	fe b0 d8 55 	rcall	800129be <pdca_load_channel>
80017918:	30 1c       	mov	r12,1
8001791a:	e0 6a 02 00 	mov	r10,512
		       (void *)&pdcaTxBuf,
		       FS_BUF_SIZE); //send dummy to activate the clock
    
    fsEndTransfer = false;
    
    if(sd_mmc_spi_read_open_PDCA (sector)) {
8001791e:	e0 6b 3b b4 	mov	r11,15284
80017922:	fe b0 d8 4e 	rcall	800129be <pdca_load_channel>
80017926:	08 9c       	mov	r12,r4

      spi_write(SD_MMC_SPI,0xFF); // dummy byte synchronizes transfer
80017928:	aa 82       	st.b	r5[0x0],r2
8001792a:	fe b0 dd cb 	rcall	800134c0 <sd_mmc_spi_read_open_PDCA>
8001792e:	c2 f0       	breq	8001798c <media_read+0x9c>
80017930:	e0 6b 00 ff 	mov	r11,255

      pdca_enable_interrupt_transfer_complete(AVR32_PDCA_CHANNEL_SPI_RX);
80017934:	fe 7c 28 00 	mov	r12,-55296
80017938:	fe b0 d9 77 	rcall	80012c26 <spi_write>
      pdcaRxChan =(volatile avr32_pdca_channel_t*) pdca_get_handler(AVR32_PDCA_CHANNEL_SPI_RX);
8001793c:	30 0c       	mov	r12,0
8001793e:	fe b0 d8 1c 	rcall	80012976 <pdca_enable_interrupt_transfer_complete>
80017942:	30 0c       	mov	r12,0
      pdcaTxChan =(volatile avr32_pdca_channel_t*) pdca_get_handler(AVR32_PDCA_CHANNEL_SPI_TX);
80017944:	fe b0 d8 00 	rcall	80012944 <pdca_get_handler>
80017948:	e0 63 3b a8 	mov	r3,15272
8001794c:	87 0c       	st.w	r3[0x0],r12
      pdcaRxChan->cr = AVR32_PDCA_TEN_MASK; // Enable RX PDCA transfer first
8001794e:	30 1c       	mov	r12,1
80017950:	fe b0 d7 fa 	rcall	80012944 <pdca_get_handler>
      pdcaTxChan->cr = AVR32_PDCA_TEN_MASK; // and TX PDCA transfer
80017954:	e0 68 3b b0 	mov	r8,15280
      // wait for signal from ISR
      while(!fsEndTransfer) { ;; }
80017958:	91 0c       	st.w	r8[0x0],r12
8001795a:	66 09       	ld.w	r9,r3[0x0]
8001795c:	93 50       	st.w	r9[0x14],r0
      // copy FIXME: could optimize
      for(i=0; i<FS_BUF_SIZE; i++) {
	buffer[i] = pdcaRxBuf[i];
8001795e:	70 08       	ld.w	r8,r8[0x0]
80017960:	91 50       	st.w	r8[0x14],r0
80017962:	0b 88       	ld.ub	r8,r5[0x0]
80017964:	58 08       	cp.w	r8,0
      pdcaRxChan->cr = AVR32_PDCA_TEN_MASK; // Enable RX PDCA transfer first
      pdcaTxChan->cr = AVR32_PDCA_TEN_MASK; // and TX PDCA transfer
      // wait for signal from ISR
      while(!fsEndTransfer) { ;; }
      // copy FIXME: could optimize
      for(i=0; i<FS_BUF_SIZE; i++) {
80017966:	cf e0       	breq	80017962 <media_read+0x72>
80017968:	30 08       	mov	r8,0
8001796a:	ec 08 07 09 	ld.ub	r9,r6[r8]
8001796e:	ee 08 0b 09 	st.b	r7[r8],r9
//---- low level i/o
int media_read(unsigned long sector, unsigned char *buffer, unsigned long sector_count);
int media_read(unsigned long sector, unsigned char *buffer, unsigned long sector_count) {
  unsigned long i;

  for (i=0;i<sector_count;i++) {
80017972:	2f f8       	sub	r8,-1
80017974:	e0 48 02 00 	cp.w	r8,512
      }
    } else {
      print_dbg("\r\n error opening PDCA at sector "); 
      print_dbg_ulong(sector);
    }
    sector ++;
80017978:	cf 91       	brne	8001796a <media_read+0x7a>
    buffer += FS_BUF_SIZE;
8001797a:	e0 63 02 01 	mov	r3,513
8001797e:	06 31       	cp.w	r1,r3
      // copy FIXME: could optimize
      for(i=0; i<FS_BUF_SIZE; i++) {
	buffer[i] = pdcaRxBuf[i];
      }
    } else {
      print_dbg("\r\n error opening PDCA at sector "); 
80017980:	e0 88 00 10 	brls	800179a0 <media_read+0xb0>
80017984:	2f f4       	sub	r4,-1
      print_dbg_ulong(sector);
80017986:	ee c7 fe 00 	sub	r7,r7,-512
8001798a:	cc 0b       	rjmp	8001790a <media_read+0x1a>
8001798c:	48 6c       	lddpc	r12,800179a4 <media_read+0xb4>
//---- low level i/o
int media_read(unsigned long sector, unsigned char *buffer, unsigned long sector_count);
int media_read(unsigned long sector, unsigned char *buffer, unsigned long sector_count) {
  unsigned long i;

  for (i=0;i<sector_count;i++) {
8001798e:	fe b0 db 5f 	rcall	8001304c <print_dbg>
80017992:	2f f3       	sub	r3,-1
    }
    sector ++;
    buffer += FS_BUF_SIZE;
  }
  return 1;
}
80017994:	08 9c       	mov	r12,r4
80017996:	fe b0 db 39 	rcall	80013008 <print_dbg_ulong>
8001799a:	06 31       	cp.w	r1,r3
8001799c:	fe 9b ff f4 	brhi	80017984 <media_read+0x94>
800179a0:	da 3a       	popm	r0-r7,pc,r12=1
800179a2:	d7 03       	nop
800179a4:	80 02       	ld.sh	r2,r0[0x0]
800179a6:	23 10       	sub	r0,49

800179a8 <flash_read_scene>:
  } return 0;
  return 0;
}

// read default scene data to pointer
void flash_read_scene(sceneData_t* sceneData) {
800179a8:	d4 01       	pushm	lr
  memcpy((void*)sceneData, (void*)&(flash_nvram_data.sceneData), sizeof(sceneData_t)); 
800179aa:	48 5b       	lddpc	r11,800179bc <flash_read_scene+0x14>
800179ac:	e0 7a 26 40 	mov	r10,75328
800179b0:	fe 2b ff f8 	sub	r11,-65544
800179b4:	e0 a0 4c 0e 	rcall	800211d0 <memcpy>
  //  scene_read_buf();
}
800179b8:	d8 02       	popm	pc
800179ba:	d7 03       	nop
800179bc:	80 04       	ld.sh	r4,r0[0x0]
	...

800179c0 <flash_write_scene>:
800179c0:	d4 01       	pushm	lr
800179c2:	30 19       	mov	r9,1

// write default scene data from pointer
void flash_write_scene(sceneData_t* sceneData) {
  //  scene_write_buf();
  flashc_memcpy( (void*)(&(flash_nvram_data.sceneData)), (void*)sceneData, sizeof(sceneData_t), true);
800179c4:	18 9b       	mov	r11,r12
800179c6:	e0 7a 26 40 	mov	r10,75328
800179ca:	48 4c       	lddpc	r12,800179d8 <flash_write_scene+0x18>
800179cc:	fe 2c ff f8 	sub	r12,-65544
800179d0:	fe b0 d3 96 	rcall	800120fc <flashc_memcpy>
}
800179d4:	d8 02       	popm	pc
800179d6:	d7 03       	nop
800179d8:	80 04       	ld.sh	r4,r0[0x0]
	...

800179dc <init_flash>:
800179dc:	eb cd 40 80 	pushm	r7,lr

// intiailize (alloc mem, check/set firstrun bytes)
u8 init_flash() {
  u32 i;

  print_dbg("\r\n init flash... ");
800179e0:	49 bc       	lddpc	r12,80017a4c <init_flash+0x70>
800179e2:	fe b0 db 35 	rcall	8001304c <print_dbg>

  // allocate bfin loader buf
  bfinLdrData = alloc_mem(BFIN_LDR_MAX_BYTES);
800179e6:	e0 7c 00 00 	mov	r12,65536
800179ea:	e0 a0 02 bd 	rcall	80017f64 <alloc_mem>
800179ee:	e0 67 3f b4 	mov	r7,16308
  
  print_dbg("\r\n bfinLdrData : @0x");
800179f2:	8f 0c       	st.w	r7[0x0],r12
800179f4:	49 7c       	lddpc	r12,80017a50 <init_flash+0x74>
800179f6:	fe b0 db 2b 	rcall	8001304c <print_dbg>
  print_dbg_hex( (u32)bfinLdrData );
800179fa:	6e 0c       	ld.w	r12,r7[0x0]
800179fc:	fe b0 da d0 	rcall	80012f9c <print_dbg_hex>

  // why?
  for(i=0; i<BFIN_LDR_MAX_BYTES; i++) {
    bfinLdrData[i] = 0;
80017a00:	30 08       	mov	r8,0
80017a02:	10 9a       	mov	r10,r8
80017a04:	6e 09       	ld.w	r9,r7[0x0]
80017a06:	10 09       	add	r9,r8
  
  print_dbg("\r\n bfinLdrData : @0x");
  print_dbg_hex( (u32)bfinLdrData );

  // why?
  for(i=0; i<BFIN_LDR_MAX_BYTES; i++) {
80017a08:	b2 8a       	st.b	r9[0x0],r10
80017a0a:	2f f8       	sub	r8,-1
80017a0c:	e0 58 00 00 	cp.w	r8,65536
    bfinLdrData[i] = 0;
  }

  if(flash_nvram_data.firstRun != FIRSTRUN_INIT) {
80017a10:	cf a1       	brne	80017a04 <init_flash+0x28>
80017a12:	49 17       	lddpc	r7,80017a54 <init_flash+0x78>
80017a14:	e0 69 32 10 	mov	r9,12816
80017a18:	ea 19 76 54 	orh	r9,0x7654
80017a1c:	6e 08       	ld.w	r8,r7[0x0]
80017a1e:	12 38       	cp.w	r8,r9
    print_dbg("\r\n writing firstrun, no bfin load");
80017a20:	c1 30       	breq	80017a46 <init_flash+0x6a>
80017a22:	48 ec       	lddpc	r12,80017a58 <init_flash+0x7c>
80017a24:	fe b0 db 14 	rcall	8001304c <print_dbg>
    bfinLdrSize = 0;
80017a28:	e0 68 19 9c 	mov	r8,6556
80017a2c:	30 09       	mov	r9,0
    flashc_memset32((void*)&(flash_nvram_data.firstRun), FIRSTRUN_INIT, 4, true);
80017a2e:	0e 9c       	mov	r12,r7
80017a30:	91 09       	st.w	r8[0x0],r9
80017a32:	30 4a       	mov	r10,4
80017a34:	30 19       	mov	r9,1
80017a36:	e0 6b 32 10 	mov	r11,12816
80017a3a:	ea 1b 76 54 	orh	r11,0x7654
80017a3e:	fe b0 d6 3d 	rcall	800126b8 <flashc_memset32>
  // why?
  for(i=0; i<BFIN_LDR_MAX_BYTES; i++) {
    bfinLdrData[i] = 0;
  }

  if(flash_nvram_data.firstRun != FIRSTRUN_INIT) {
80017a42:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
80017a46:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80017a4a:	d7 03       	nop
80017a4c:	80 02       	ld.sh	r2,r0[0x0]
80017a4e:	23 34       	sub	r4,51
80017a50:	80 02       	ld.sh	r2,r0[0x0]
80017a52:	20 90       	sub	r0,9
80017a54:	80 04       	ld.sh	r4,r0[0x0]
80017a56:	00 00       	add	r0,r0
80017a58:	80 02       	ld.sh	r2,r0[0x0]
80017a5a:	23 48       	sub	r8,52

80017a5c <init_usb_host>:
  gpio_enable_module(TWI_GPIO_MAP, sizeof(TWI_GPIO_MAP) / sizeof(TWI_GPIO_MAP[0]));
}


// initialize USB host stack
void init_usb_host (void) {
80017a5c:	d4 01       	pushm	lr
  //  pm_configure_usb_clock();
  uhc_start();
80017a5e:	fe b0 f2 73 	rcall	80015f44 <uhc_start>
}
80017a62:	d8 02       	popm	pc

80017a64 <init_bfin_resources>:
80017a64:	eb cd 40 80 	pushm	r7,lr
  // Init PDCA Reception channel
  pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_RX, &pdca_options_SPI_RX);
}

// intialize resources for bf533 communication: SPI, GPIO
void init_bfin_resources(void) {
80017a68:	20 4d       	sub	sp,16
    //    .trans_delay  = 0,
    .trans_delay = 20,
    .stay_act     = 1,
    .spi_mode     = 1,
    .modfdis      = 1
  };
80017a6a:	49 78       	lddpc	r8,80017ac4 <init_bfin_resources+0x60>
80017a6c:	f0 ea 00 08 	ld.d	r10,r8[8]
80017a70:	fa eb 00 08 	st.d	sp[8],r10
80017a74:	f0 e8 00 00 	ld.d	r8,r8[0]
80017a78:	1a 97       	mov	r7,sp
80017a7a:	fa e9 00 00 	st.d	sp[0],r8

  // assign pins to SPI.
  gpio_enable_module(BFIN_SPI_GPIO_MAP,
80017a7e:	30 4b       	mov	r11,4
80017a80:	49 2c       	lddpc	r12,80017ac8 <init_bfin_resources+0x64>
80017a82:	fe b0 d6 9d 	rcall	800127bc <gpio_enable_module>
		     sizeof(BFIN_SPI_GPIO_MAP) / sizeof(BFIN_SPI_GPIO_MAP[0]));

  // intialize as master
  spi_initMaster(BFIN_SPI, &spiOptions);
80017a86:	1a 9b       	mov	r11,sp
80017a88:	fe 7c 24 00 	mov	r12,-56320
80017a8c:	fe b0 d8 04 	rcall	80012a94 <spi_initMaster>

  // set selection mode: variable_ps, pcs_decode, delay.
  spi_selectionMode(BFIN_SPI, 0, 0, 0);
80017a90:	30 09       	mov	r9,0
80017a92:	fe 7c 24 00 	mov	r12,-56320
80017a96:	12 9a       	mov	r10,r9
80017a98:	12 9b       	mov	r11,r9
80017a9a:	fe b0 d8 1c 	rcall	80012ad2 <spi_selectionMode>

  // enable SPI.
  spi_enable(BFIN_SPI);
80017a9e:	fe 7c 24 00 	mov	r12,-56320
80017aa2:	fe b0 d8 bf 	rcall	80012c20 <spi_enable>

  // intialize the chip register
  spi_setupChipReg(BFIN_SPI, &spiOptions, FPBA_HZ);
80017aa6:	1a 9b       	mov	r11,sp
80017aa8:	e0 6a 14 80 	mov	r10,5248
80017aac:	ea 1a 03 ef 	orh	r10,0x3ef
80017ab0:	fe 7c 24 00 	mov	r12,-56320
80017ab4:	fe b0 d8 60 	rcall	80012b74 <spi_setupChipReg>
  // enable pulldown on bfin HWAIT line
  //// shit! not implemented... 
  // gpio_enable_pin_pull_down(BFIN_HWAIT_PIN);
  
  // enable pullup on bfin RESET line
  gpio_enable_pin_pull_up(BFIN_RESET_PIN);
80017ab8:	30 6c       	mov	r12,6
80017aba:	fe b0 d6 0d 	rcall	800126d4 <gpio_enable_pin_pull_up>
}
80017abe:	2f cd       	sub	sp,-16
80017ac0:	e3 cd 80 80 	ldm	sp++,r7,pc
80017ac4:	80 02       	ld.sh	r2,r0[0x0]
80017ac6:	27 04       	sub	r4,112
80017ac8:	80 02       	ld.sh	r2,r0[0x0]
80017aca:	26 d4       	sub	r4,109

80017acc <init_local_pdca>:
80017acc:	eb cd 40 b0 	pushm	r4-r5,r7,lr
80017ad0:	20 cd       	sub	sp,48
80017ad2:	49 4a       	lddpc	r10,80017b20 <init_local_pdca+0x54>
80017ad4:	f4 e4 00 10 	ld.d	r4,r10[16]
80017ad8:	fa c7 ff e8 	sub	r7,sp,-24
80017adc:	49 29       	lddpc	r9,80017b24 <init_local_pdca+0x58>
80017ade:	ee e5 00 10 	st.d	r7[16],r4
80017ae2:	f2 e4 00 10 	ld.d	r4,r9[16]
    .size = FS_BUF_SIZE,                      // transfer size
    .r_addr = NULL,                           // next memory address after 1st transfer complete
    .r_size = 0,                              // next transfer counter not used here
    .pid = AVR32_PDCA_CHANNEL_USED_TX,        // select peripheral ID - SPI1 TX
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
  };
80017ae6:	fa e5 00 10 	st.d	sp[16],r4
    .size = FS_BUF_SIZE,                      // transfer size
    .r_addr = NULL,                           // next memory address after 1st transfer complete
    .r_size = 0,                              // next transfer counter not used here
    .pid = AVR32_PDCA_CHANNEL_USED_RX,        // select peripheral ID - SPI1 RX
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
  };
80017aea:	f4 e4 00 00 	ld.d	r4,r10[0]
80017aee:	ee e5 00 00 	st.d	r7[0],r4
80017af2:	f4 e4 00 08 	ld.d	r4,r10[8]
80017af6:	ee e5 00 08 	st.d	r7[8],r4
    .size = FS_BUF_SIZE,                      // transfer size
    .r_addr = NULL,                           // next memory address after 1st transfer complete
    .r_size = 0,                              // next transfer counter not used here
    .pid = AVR32_PDCA_CHANNEL_USED_TX,        // select peripheral ID - SPI1 TX
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
  };
80017afa:	f2 e4 00 00 	ld.d	r4,r9[0]

  // Init PDCA transmission channel
  pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_TX, &pdca_options_SPI_TX);
80017afe:	1a 9b       	mov	r11,sp
    .size = FS_BUF_SIZE,                      // transfer size
    .r_addr = NULL,                           // next memory address after 1st transfer complete
    .r_size = 0,                              // next transfer counter not used here
    .pid = AVR32_PDCA_CHANNEL_USED_TX,        // select peripheral ID - SPI1 TX
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
  };
80017b00:	fa e5 00 00 	st.d	sp[0],r4

  // Init PDCA transmission channel
  pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_TX, &pdca_options_SPI_TX);
80017b04:	30 1c       	mov	r12,1
    .size = FS_BUF_SIZE,                      // transfer size
    .r_addr = NULL,                           // next memory address after 1st transfer complete
    .r_size = 0,                              // next transfer counter not used here
    .pid = AVR32_PDCA_CHANNEL_USED_TX,        // select peripheral ID - SPI1 TX
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
  };
80017b06:	f2 e4 00 08 	ld.d	r4,r9[8]
80017b0a:	fa e5 00 08 	st.d	sp[8],r4

  // Init PDCA transmission channel
  pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_TX, &pdca_options_SPI_TX);
80017b0e:	fe b0 d7 70 	rcall	800129ee <pdca_init_channel>

  // Init PDCA Reception channel
  pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_RX, &pdca_options_SPI_RX);
80017b12:	0e 9b       	mov	r11,r7
80017b14:	30 0c       	mov	r12,0
80017b16:	fe b0 d7 6c 	rcall	800129ee <pdca_init_channel>
}
80017b1a:	2f 4d       	sub	sp,-48
80017b1c:	e3 cd 80 b0 	ldm	sp++,r4-r5,r7,pc
80017b20:	80 02       	ld.sh	r2,r0[0x0]
80017b22:	27 14       	sub	r4,113
80017b24:	80 02       	ld.sh	r2,r0[0x0]
80017b26:	26 bc       	sub	r12,107

80017b28 <init_spi1>:
80017b28:	d4 21       	pushm	r4-r7,lr
80017b2a:	20 4d       	sub	sp,16
    .trans_delay = 0,
    .spck_delay = 0,
    .stay_act = 1,
    .spi_mode = 3,
    .modfdis = 1
  };
80017b2c:	4b 68       	lddpc	r8,80017c04 <init_spi1+0xdc>
80017b2e:	f0 ea 00 08 	ld.d	r10,r8[8]
80017b32:	fa eb 00 08 	st.d	sp[8],r10
80017b36:	f0 e8 00 00 	ld.d	r8,r8[0]
80017b3a:	1a 97       	mov	r7,sp
80017b3c:	fa e9 00 00 	st.d	sp[0],r8

  // Assign GPIO to SPI.
  gpio_enable_module(OLED_SPI_GPIO_MAP,
80017b40:	30 6b       	mov	r11,6
80017b42:	4b 2c       	lddpc	r12,80017c08 <init_spi1+0xe0>
80017b44:	fe b0 d6 3c 	rcall	800127bc <gpio_enable_module>
		     sizeof(OLED_SPI_GPIO_MAP) / sizeof(OLED_SPI_GPIO_MAP[0]));
  // Initialize as master.
  spi_initMaster(OLED_SPI, &spiOptions);
80017b48:	1a 9b       	mov	r11,sp
80017b4a:	fe 7c 28 00 	mov	r12,-55296
80017b4e:	fe b0 d7 a3 	rcall	80012a94 <spi_initMaster>
  // Set SPI selection mode: variable_ps, pcs_decode, delay.
  spi_selectionMode(OLED_SPI, 0, 0, 0);
80017b52:	30 09       	mov	r9,0
80017b54:	fe 7c 28 00 	mov	r12,-55296
80017b58:	12 9a       	mov	r10,r9
80017b5a:	12 9b       	mov	r11,r9
80017b5c:	fe b0 d7 bb 	rcall	80012ad2 <spi_selectionMode>
  // Enable SPI module.
  spi_enable(OLED_SPI);
80017b60:	fe 7c 28 00 	mov	r12,-55296
80017b64:	fe b0 d8 5e 	rcall	80012c20 <spi_enable>

  // setup chip register for OLED
  spi_setupChipReg( OLED_SPI, &spiOptions, FPBA_HZ );
80017b68:	1a 9b       	mov	r11,sp
80017b6a:	e0 6a 14 80 	mov	r10,5248
80017b6e:	ea 1a 03 ef 	orh	r10,0x3ef
80017b72:	fe 7c 28 00 	mov	r12,-55296
80017b76:	fe b0 d7 ff 	rcall	80012b74 <spi_setupChipReg>

  // add ADC chip register
  spiOptions.reg          = ADC_SPI_NPCS;
  spiOptions.baudrate     = 20000000;
80017b7a:	e0 68 2d 00 	mov	r8,11520
80017b7e:	ea 18 01 31 	orh	r8,0x131
80017b82:	50 18       	stdsp	sp[0x4],r8
  spiOptions.bits         = 16;
80017b84:	31 08       	mov	r8,16
80017b86:	fb 68 00 08 	st.b	sp[8],r8
  spiOptions.spi_mode     = 2;
  spiOptions.spck_delay   = 0;
  spiOptions.trans_delay  = 5;
80017b8a:	30 58       	mov	r8,5
  // add ADC chip register
  spiOptions.reg          = ADC_SPI_NPCS;
  spiOptions.baudrate     = 20000000;
  spiOptions.bits         = 16;
  spiOptions.spi_mode     = 2;
  spiOptions.spck_delay   = 0;
80017b8c:	30 06       	mov	r6,0

  // setup chip register for OLED
  spi_setupChipReg( OLED_SPI, &spiOptions, FPBA_HZ );

  // add ADC chip register
  spiOptions.reg          = ADC_SPI_NPCS;
80017b8e:	30 15       	mov	r5,1
  spiOptions.spck_delay   = 0;
  spiOptions.trans_delay  = 5;
  spiOptions.stay_act     = 0;
  spiOptions.modfdis      = 0;

  spi_setupChipReg( ADC_SPI, &spiOptions, FPBA_HZ );
80017b90:	1a 9b       	mov	r11,sp
  spiOptions.reg          = ADC_SPI_NPCS;
  spiOptions.baudrate     = 20000000;
  spiOptions.bits         = 16;
  spiOptions.spi_mode     = 2;
  spiOptions.spck_delay   = 0;
  spiOptions.trans_delay  = 5;
80017b92:	fb 68 00 0a 	st.b	sp[10],r8
  // add ADC chip register
  spiOptions.reg          = ADC_SPI_NPCS;
  spiOptions.baudrate     = 20000000;
  spiOptions.bits         = 16;
  spiOptions.spi_mode     = 2;
  spiOptions.spck_delay   = 0;
80017b96:	fb 66 00 09 	st.b	sp[9],r6
  spiOptions.trans_delay  = 5;
  spiOptions.stay_act     = 0;
80017b9a:	fb 66 00 0b 	st.b	sp[11],r6
  spiOptions.modfdis      = 0;
80017b9e:	fb 66 00 0d 	st.b	sp[13],r6

  // setup chip register for OLED
  spi_setupChipReg( OLED_SPI, &spiOptions, FPBA_HZ );

  // add ADC chip register
  spiOptions.reg          = ADC_SPI_NPCS;
80017ba2:	ba 85       	st.b	sp[0x0],r5
  spiOptions.baudrate     = 20000000;
  spiOptions.bits         = 16;
  spiOptions.spi_mode     = 2;
80017ba4:	30 24       	mov	r4,2
  spiOptions.spck_delay   = 0;
  spiOptions.trans_delay  = 5;
  spiOptions.stay_act     = 0;
  spiOptions.modfdis      = 0;

  spi_setupChipReg( ADC_SPI, &spiOptions, FPBA_HZ );
80017ba6:	e0 6a 14 80 	mov	r10,5248
80017baa:	ea 1a 03 ef 	orh	r10,0x3ef

  // add ADC chip register
  spiOptions.reg          = ADC_SPI_NPCS;
  spiOptions.baudrate     = 20000000;
  spiOptions.bits         = 16;
  spiOptions.spi_mode     = 2;
80017bae:	fb 64 00 0c 	st.b	sp[12],r4
  spiOptions.spck_delay   = 0;
  spiOptions.trans_delay  = 5;
  spiOptions.stay_act     = 0;
  spiOptions.modfdis      = 0;

  spi_setupChipReg( ADC_SPI, &spiOptions, FPBA_HZ );
80017bb2:	fe 7c 28 00 	mov	r12,-55296
80017bb6:	fe b0 d7 df 	rcall	80012b74 <spi_setupChipReg>

  // add SD/MMC chip register
  spiOptions.reg         = SD_MMC_SPI_NPCS;
  spiOptions.baudrate    = SD_MMC_SPI_MASTER_SPEED; // Defined in conf_sd_mmc_spi.h;
80017bba:	e0 68 1b 00 	mov	r8,6912
80017bbe:	ea 18 00 b7 	orh	r8,0xb7
  spiOptions.modfdis      = 0;

  spi_setupChipReg( ADC_SPI, &spiOptions, FPBA_HZ );

  // add SD/MMC chip register
  spiOptions.reg         = SD_MMC_SPI_NPCS;
80017bc2:	ba 84       	st.b	sp[0x0],r4
  spiOptions.baudrate    = SD_MMC_SPI_MASTER_SPEED; // Defined in conf_sd_mmc_spi.h;
  spiOptions.bits        = SD_MMC_SPI_BITS; // Defined in conf_sd_mmc_spi.h;
  spiOptions.spck_delay  = 0;
  spiOptions.trans_delay = 0;
  spiOptions.stay_act    = 1;
  spiOptions.spi_mode    = 0;
80017bc4:	fb 66 00 0c 	st.b	sp[12],r6
  spiOptions.modfdis     = 1;
80017bc8:	fb 65 00 0d 	st.b	sp[13],r5

  // Initialize SD/MMC driver with SPI clock (PBA).
  sd_mmc_spi_init(spiOptions, FPBA_HZ);
80017bcc:	20 4d       	sub	sp,16

  spi_setupChipReg( ADC_SPI, &spiOptions, FPBA_HZ );

  // add SD/MMC chip register
  spiOptions.reg         = SD_MMC_SPI_NPCS;
  spiOptions.baudrate    = SD_MMC_SPI_MASTER_SPEED; // Defined in conf_sd_mmc_spi.h;
80017bce:	50 58       	stdsp	sp[0x14],r8
  spiOptions.bits        = SD_MMC_SPI_BITS; // Defined in conf_sd_mmc_spi.h;
80017bd0:	30 88       	mov	r8,8
  spiOptions.spck_delay  = 0;
80017bd2:	fb 66 00 19 	st.b	sp[25],r6
  spiOptions.trans_delay = 0;
80017bd6:	fb 66 00 1a 	st.b	sp[26],r6
  spiOptions.stay_act    = 1;
80017bda:	fb 65 00 1b 	st.b	sp[27],r5
  spi_setupChipReg( ADC_SPI, &spiOptions, FPBA_HZ );

  // add SD/MMC chip register
  spiOptions.reg         = SD_MMC_SPI_NPCS;
  spiOptions.baudrate    = SD_MMC_SPI_MASTER_SPEED; // Defined in conf_sd_mmc_spi.h;
  spiOptions.bits        = SD_MMC_SPI_BITS; // Defined in conf_sd_mmc_spi.h;
80017bde:	fb 68 00 18 	st.b	sp[24],r8
  spiOptions.stay_act    = 1;
  spiOptions.spi_mode    = 0;
  spiOptions.modfdis     = 1;

  // Initialize SD/MMC driver with SPI clock (PBA).
  sd_mmc_spi_init(spiOptions, FPBA_HZ);
80017be2:	ee e8 00 08 	ld.d	r8,r7[8]
80017be6:	fa e9 00 08 	st.d	sp[8],r8
80017bea:	ee e8 00 00 	ld.d	r8,r7[0]
80017bee:	e0 6c 14 80 	mov	r12,5248
80017bf2:	ea 1c 03 ef 	orh	r12,0x3ef
80017bf6:	fa e9 00 00 	st.d	sp[0],r8
80017bfa:	fe b0 e2 27 	rcall	80014048 <sd_mmc_spi_init>
80017bfe:	2f cd       	sub	sp,-16
}
80017c00:	2f cd       	sub	sp,-16
80017c02:	d8 22       	popm	r4-r7,pc
80017c04:	80 02       	ld.sh	r2,r0[0x0]
80017c06:	26 f4       	sub	r4,111
80017c08:	80 02       	ld.sh	r2,r0[0x0]
80017c0a:	26 84       	sub	r4,104

80017c0c <init_ftdi_usart>:
80017c0c:	d4 01       	pushm	lr
80017c0e:	30 2b       	mov	r11,2
80017c10:	48 7c       	lddpc	r12,80017c2c <init_ftdi_usart+0x20>
80017c12:	fe b0 d5 d5 	rcall	800127bc <gpio_enable_module>
80017c16:	e0 6a 14 80 	mov	r10,5248
80017c1a:	ea 1a 03 ef 	orh	r10,0x3ef
80017c1e:	48 5b       	lddpc	r11,80017c30 <init_ftdi_usart+0x24>
80017c20:	fe 7c 14 00 	mov	r12,-60416
  // Set up GPIO for FTDI_USART
  gpio_enable_module(FTDI_USART_GPIO_MAP,
                     sizeof(FTDI_USART_GPIO_MAP) / sizeof(FTDI_USART_GPIO_MAP[0]));

  // Initialize in RS232 mode.
  usart_init_rs232(FTDI_USART, &FTDI_USART_OPTIONS, FPBA_HZ);
80017c24:	fe b0 d9 4a 	rcall	80012eb8 <usart_init_rs232>
}
80017c28:	d8 02       	popm	pc
80017c2a:	d7 03       	nop
80017c2c:	80 02       	ld.sh	r2,r0[0x0]
80017c2e:	26 74       	sub	r4,103
80017c30:	80 02       	ld.sh	r2,r0[0x0]
80017c32:	26 68       	sub	r8,102

80017c34 <init_tc>:
80017c34:	eb cd 40 80 	pushm	r7,lr
80017c38:	48 bb       	lddpc	r11,80017c64 <init_tc+0x30>
80017c3a:	18 97       	mov	r7,r12
    .cpas  = 0,
    .lovrs = 0,
    .covfs = 0
  };
  // Initialize the timer/counter.
  tc_init_waveform(tc, &waveform_opt);
80017c3c:	fe b0 d8 14 	rcall	80012c64 <tc_init_waveform>

  // set timer compare trigger.
  // we want it to overflow and generate an interrupt every 1 ms
  // so (1 / fPBA / 128) * RC = 0.001
  // so RC = fPBA / 128 / 1000
  tc_write_rc(tc, APP_TC_CHANNEL, (FPBA_HZ / 128 / 1000));
80017c40:	e0 6a 02 03 	mov	r10,515
80017c44:	30 0b       	mov	r11,0
80017c46:	0e 9c       	mov	r12,r7
80017c48:	fe b0 d8 6f 	rcall	80012d26 <tc_write_rc>
  // configure the timer interrupt
  tc_configure_interrupts(tc, APP_TC_CHANNEL, &tc_interrupt);
80017c4c:	30 0b       	mov	r11,0
80017c4e:	48 7a       	lddpc	r10,80017c68 <init_tc+0x34>
80017c50:	0e 9c       	mov	r12,r7
80017c52:	fe b0 d8 86 	rcall	80012d5e <tc_configure_interrupts>
  // Start the timer/counter.
  tc_start(tc, APP_TC_CHANNEL);
80017c56:	0e 9c       	mov	r12,r7
80017c58:	30 0b       	mov	r11,0
80017c5a:	fe b0 d8 54 	rcall	80012d02 <tc_start>
}
80017c5e:	e3 cd 80 80 	ldm	sp++,r7,pc
80017c62:	d7 03       	nop
80017c64:	80 02       	ld.sh	r2,r0[0x0]
80017c66:	26 b4       	sub	r4,107
80017c68:	80 02       	ld.sh	r2,r0[0x0]
80017c6a:	26 64       	sub	r4,102

80017c6c <init_gpio>:
80017c6c:	d4 01       	pushm	lr
80017c6e:	32 2c       	mov	r12,34
80017c70:	fe b0 d5 32 	rcall	800126d4 <gpio_enable_pin_pull_up>
80017c74:	32 3c       	mov	r12,35
80017c76:	fe b0 d5 2f 	rcall	800126d4 <gpio_enable_pin_pull_up>
80017c7a:	32 4c       	mov	r12,36
// initialize non-peripheral GPIO
void init_gpio(void) {
  
  gpio_enable_pin_pull_up(ENC0_S0_PIN);
  gpio_enable_pin_pull_up(ENC0_S1_PIN);
  gpio_enable_pin_pull_up(ENC1_S0_PIN);
80017c7c:	fe b0 d5 2c 	rcall	800126d4 <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(ENC1_S1_PIN);
80017c80:	32 5c       	mov	r12,37
80017c82:	fe b0 d5 29 	rcall	800126d4 <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(ENC2_S0_PIN);
80017c86:	32 6c       	mov	r12,38
80017c88:	fe b0 d5 26 	rcall	800126d4 <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(ENC2_S1_PIN);
80017c8c:	32 7c       	mov	r12,39
80017c8e:	fe b0 d5 23 	rcall	800126d4 <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(ENC3_S0_PIN);
80017c92:	32 8c       	mov	r12,40
80017c94:	fe b0 d5 20 	rcall	800126d4 <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(ENC3_S1_PIN);
80017c98:	32 9c       	mov	r12,41
80017c9a:	fe b0 d5 1d 	rcall	800126d4 <gpio_enable_pin_pull_up>
  gpio_enable_pin_pull_up(SW2_PIN);
  gpio_enable_pin_pull_up(SW3_PIN);
  gpio_enable_pin_pull_up(SW_MODE_PIN);
#endif

  gpio_enable_pin_pull_up(SW_POWER_PIN);
80017c9e:	33 0c       	mov	r12,48
80017ca0:	fe b0 d5 1a 	rcall	800126d4 <gpio_enable_pin_pull_up>
  /// trying this...
  /* gpio_enable_pin_glitch_filter(SW0_PIN); */
  /* gpio_enable_pin_glitch_filter(SW1_PIN); */
  /* gpio_enable_pin_glitch_filter(SW2_PIN); */
  /* gpio_enable_pin_glitch_filter(SW3_PIN); */
  gpio_enable_pin_glitch_filter(SW_MODE_PIN); 
80017ca4:	31 8c       	mov	r12,24
80017ca6:	fe b0 d5 46 	rcall	80012732 <gpio_enable_pin_glitch_filter>
}
80017caa:	d8 02       	popm	pc

80017cac <register_interrupts>:

  //-----------------------------
  //---- external function definitions

  // register interrupts
  void register_interrupts(void) {
80017cac:	d4 01       	pushm	lr
    // enable interrupts on GPIO inputs

    // BFIN_HWAIT
    // gpio_enable_pin_interrupt( BFIN_HWAIT_PIN, GPIO_PIN_CHANGE);
    gpio_enable_pin_interrupt( BFIN_HWAIT_PIN, GPIO_RISING_EDGE);
80017cae:	30 1b       	mov	r11,1
80017cb0:	30 5c       	mov	r12,5
80017cb2:	fe b0 d5 4a 	rcall	80012746 <gpio_enable_pin_interrupt>

    // encoders
    gpio_enable_pin_interrupt( ENC0_S0_PIN,	GPIO_PIN_CHANGE);
80017cb6:	30 0b       	mov	r11,0
80017cb8:	32 2c       	mov	r12,34
80017cba:	fe b0 d5 46 	rcall	80012746 <gpio_enable_pin_interrupt>
    gpio_enable_pin_interrupt( ENC0_S1_PIN,	GPIO_PIN_CHANGE);
80017cbe:	30 0b       	mov	r11,0
80017cc0:	32 3c       	mov	r12,35
80017cc2:	fe b0 d5 42 	rcall	80012746 <gpio_enable_pin_interrupt>
    gpio_enable_pin_interrupt( ENC1_S0_PIN,	GPIO_PIN_CHANGE);
80017cc6:	30 0b       	mov	r11,0
80017cc8:	32 4c       	mov	r12,36
80017cca:	fe b0 d5 3e 	rcall	80012746 <gpio_enable_pin_interrupt>
    gpio_enable_pin_interrupt( ENC1_S1_PIN,	GPIO_PIN_CHANGE);
80017cce:	30 0b       	mov	r11,0
80017cd0:	32 5c       	mov	r12,37
80017cd2:	fe b0 d5 3a 	rcall	80012746 <gpio_enable_pin_interrupt>
    gpio_enable_pin_interrupt( ENC2_S0_PIN,	GPIO_PIN_CHANGE);
80017cd6:	30 0b       	mov	r11,0
80017cd8:	32 6c       	mov	r12,38
80017cda:	fe b0 d5 36 	rcall	80012746 <gpio_enable_pin_interrupt>
    gpio_enable_pin_interrupt( ENC2_S1_PIN,	GPIO_PIN_CHANGE);
80017cde:	30 0b       	mov	r11,0
80017ce0:	32 7c       	mov	r12,39
80017ce2:	fe b0 d5 32 	rcall	80012746 <gpio_enable_pin_interrupt>
    gpio_enable_pin_interrupt( ENC3_S0_PIN,	GPIO_PIN_CHANGE);
80017ce6:	30 0b       	mov	r11,0
80017ce8:	32 8c       	mov	r12,40
80017cea:	fe b0 d5 2e 	rcall	80012746 <gpio_enable_pin_interrupt>
    gpio_enable_pin_interrupt( ENC3_S1_PIN,	GPIO_PIN_CHANGE);
80017cee:	30 0b       	mov	r11,0
80017cf0:	32 9c       	mov	r12,41
80017cf2:	fe b0 d5 2a 	rcall	80012746 <gpio_enable_pin_interrupt>

    // switches
    gpio_enable_pin_interrupt( SW0_PIN,	        GPIO_PIN_CHANGE);
80017cf6:	30 0b       	mov	r11,0
80017cf8:	31 9c       	mov	r12,25
80017cfa:	fe b0 d5 26 	rcall	80012746 <gpio_enable_pin_interrupt>
    gpio_enable_pin_interrupt( SW1_PIN,	        GPIO_PIN_CHANGE);
80017cfe:	30 0b       	mov	r11,0
80017d00:	31 ac       	mov	r12,26
80017d02:	fe b0 d5 22 	rcall	80012746 <gpio_enable_pin_interrupt>
    gpio_enable_pin_interrupt( SW2_PIN,	        GPIO_PIN_CHANGE);
80017d06:	30 0b       	mov	r11,0
80017d08:	31 bc       	mov	r12,27
80017d0a:	fe b0 d5 1e 	rcall	80012746 <gpio_enable_pin_interrupt>
    gpio_enable_pin_interrupt( SW3_PIN,	        GPIO_PIN_CHANGE);
80017d0e:	30 0b       	mov	r11,0
80017d10:	31 cc       	mov	r12,28
80017d12:	fe b0 d5 1a 	rcall	80012746 <gpio_enable_pin_interrupt>

    gpio_enable_pin_interrupt( FS0_PIN,	GPIO_PIN_CHANGE);
80017d16:	30 0b       	mov	r11,0
80017d18:	33 ec       	mov	r12,62
80017d1a:	fe b0 d5 16 	rcall	80012746 <gpio_enable_pin_interrupt>
    gpio_enable_pin_interrupt( FS1_PIN,	GPIO_PIN_CHANGE);
80017d1e:	30 0b       	mov	r11,0
80017d20:	33 fc       	mov	r12,63
80017d22:	fe b0 d5 12 	rcall	80012746 <gpio_enable_pin_interrupt>

    gpio_enable_pin_interrupt( SW_MODE_PIN,	GPIO_PIN_CHANGE);
80017d26:	30 0b       	mov	r11,0
80017d28:	31 8c       	mov	r12,24
80017d2a:	fe b0 d5 0e 	rcall	80012746 <gpio_enable_pin_interrupt>
    //  gpio_enable_pin_interrupt( SW_POWER_PIN,	GPIO_PIN_CHANGE);
 
    // PA24 - PA31
    INTC_register_interrupt( &irq_port0_line3, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PA24 / 8), UI_IRQ_PRIORITY);
80017d2e:	30 2a       	mov	r10,2
80017d30:	34 3b       	mov	r11,67
80017d32:	fe cc fe fa 	sub	r12,pc,-262
80017d36:	fe b0 d5 81 	rcall	80012838 <INTC_register_interrupt>

    // PB00 - PB07
    INTC_register_interrupt( &irq_port1_line0, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PB00 / 8), UI_IRQ_PRIORITY );
80017d3a:	30 2a       	mov	r10,2
80017d3c:	34 4b       	mov	r11,68
80017d3e:	fe cc fe 62 	sub	r12,pc,-414

    // PB08 - PB15
    INTC_register_interrupt( &irq_port1_line1, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PB08 / 8), UI_IRQ_PRIORITY);
80017d42:	fe b0 d5 7b 	rcall	80012838 <INTC_register_interrupt>
80017d46:	30 2a       	mov	r10,2
80017d48:	34 5b       	mov	r11,69
80017d4a:	fe cc fe 9e 	sub	r12,pc,-354

    // PB16 - PB23
    //  INTC_register_interrupt( &irq_port1_line2, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PB16 / 8), UI_IRQ_PRIORITY);

    // PB24 - PB31
    INTC_register_interrupt( &irq_port1_line3, AVR32_GPIO_IRQ_0 + (AVR32_PIN_PB24 / 8), UI_IRQ_PRIORITY);
80017d4e:	fe b0 d5 75 	rcall	80012838 <INTC_register_interrupt>
80017d52:	30 2a       	mov	r10,2
80017d54:	34 7b       	mov	r11,71


    // register IRQ for PDCA transfer
    INTC_register_interrupt(&irq_pdca, AVR32_PDCA_IRQ_0, SYS_IRQ_PRIORITY);
80017d56:	fe cc ff 4e 	sub	r12,pc,-178
80017d5a:	fe b0 d5 6f 	rcall	80012838 <INTC_register_interrupt>
80017d5e:	30 1a       	mov	r10,1

    // register TC interrupt
    INTC_register_interrupt(&irq_tc, APP_TC_IRQ, APP_TC_IRQ_PRIORITY);
80017d60:	36 0b       	mov	r11,96
80017d62:	fe cc ff 82 	sub	r12,pc,-126
80017d66:	fe b0 d5 69 	rcall	80012838 <INTC_register_interrupt>
80017d6a:	30 2a       	mov	r10,2
  }
80017d6c:	e0 6b 01 c0 	mov	r11,448
80017d70:	fe cc ff f4 	sub	r12,pc,-12
80017d74:	fe b0 d5 62 	rcall	80012838 <INTC_register_interrupt>
80017d78:	d8 02       	popm	pc
80017d7a:	d7 03       	nop

80017d7c <irq_tc>:
80017d7c:	eb cd 40 c0 	pushm	r6-r7,lr
80017d80:	e0 68 19 a4 	mov	r8,6564
80017d84:	30 1a       	mov	r10,1
80017d86:	f0 e6 00 00 	ld.d	r6,r8[0]
80017d8a:	30 0b       	mov	r11,0
80017d8c:	ec 0a 00 0a 	add	r10,r6,r10
}

// timer irq
__attribute__((__interrupt__))
static void irq_tc(void) {
  tcTicks++;
80017d90:	ee 0b 00 4b 	adc	r11,r7,r11
80017d94:	f0 eb 00 00 	st.d	r8[0],r10
  // overflow control
  if(tcTicks > tcMax) { 
80017d98:	e0 66 ff ff 	mov	r6,65535
80017d9c:	ea 16 7f ff 	orh	r6,0x7fff
80017da0:	f0 ea 00 00 	ld.d	r10,r8[0]
80017da4:	30 07       	mov	r7,0
80017da6:	0c 3a       	cp.w	r10,r6
80017da8:	ee 0b 13 00 	cpc	r11,r7
80017dac:	e0 8b 00 10 	brhi	80017dcc <irq_tc+0x50>
    tcTicks = 0;
    tcOverflow = 1;
  } else {
    tcOverflow = 0;
80017db0:	30 09       	mov	r9,0
80017db2:	e0 68 19 a1 	mov	r8,6561
  }
  process_timers();
80017db6:	b0 89       	st.b	r8[0x0],r9
  // clear interrupt flag by reading timer SR
  tc_read_sr(APP_TC, APP_TC_CHANNEL);
80017db8:	e0 a0 07 f8 	rcall	80018da8 <process_timers>
80017dbc:	30 0b       	mov	r11,0
80017dbe:	fe 7c 38 00 	mov	r12,-51200
}
80017dc2:	fe b0 d7 a9 	rcall	80012d14 <tc_read_sr>
80017dc6:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
__attribute__((__interrupt__))
static void irq_tc(void) {
  tcTicks++;
  // overflow control
  if(tcTicks > tcMax) { 
    tcTicks = 0;
80017dca:	d6 03       	rete
80017dcc:	30 0a       	mov	r10,0
80017dce:	30 0b       	mov	r11,0
    tcOverflow = 1;
80017dd0:	f0 eb 00 00 	st.d	r8[0],r10
80017dd4:	30 19       	mov	r9,1
80017dd6:	e0 68 19 a1 	mov	r8,6561
80017dda:	b0 89       	st.b	r8[0x0],r9
80017ddc:	ce eb       	rjmp	80017db8 <irq_tc+0x3c>
80017dde:	d7 03       	nop

80017de0 <irq_pdca>:
80017de0:	d4 01       	pushm	lr
80017de2:	d3 03       	ssrf	0x10
80017de4:	30 0c       	mov	r12,0
80017de6:	fe b0 d5 d7 	rcall	80012994 <pdca_disable_interrupt_transfer_complete>
  // Disable all interrupts.
  Disable_global_interrupt();
  // Disable interrupt channel.
  pdca_disable_interrupt_transfer_complete(AVR32_PDCA_CHANNEL_SPI_RX);
  //unselects the SD/MMC memory.
  sd_mmc_spi_read_close_PDCA();
80017dea:	fe b0 d9 c3 	rcall	80013170 <sd_mmc_spi_read_close_PDCA>
  //.... example has a 5000 clock gimpy delay here.
  // doesn't seem to need it , but if that changes use delay_us instead
  // Disable unnecessary channel
  pdca_disable(AVR32_PDCA_CHANNEL_SPI_TX);
80017dee:	30 1c       	mov	r12,1
80017df0:	fe b0 d5 b4 	rcall	80012958 <pdca_disable>
  pdca_disable(AVR32_PDCA_CHANNEL_SPI_RX);
80017df4:	30 0c       	mov	r12,0
80017df6:	fe b0 d5 b1 	rcall	80012958 <pdca_disable>
  // Enable all interrupts.
  Enable_global_interrupt();
80017dfa:	d5 03       	csrf	0x10
  //  print_dbg("\r\n handled PDCA interrupt. \r\n");
  fsEndTransfer = true;
80017dfc:	30 19       	mov	r9,1
80017dfe:	e0 68 3b ac 	mov	r8,15276
}
80017e02:	b0 89       	st.b	r8[0x0],r9
80017e04:	d4 02       	popm	lr
80017e06:	d6 03       	rete

80017e08 <irq_port1_line3>:
80017e08:	d4 01       	pushm	lr
80017e0a:	33 ec       	mov	r12,62
80017e0c:	fe b0 d4 c2 	rcall	80012790 <gpio_get_pin_interrupt_flag>
80017e10:	c0 d1       	brne	80017e2a <irq_port1_line3+0x22>
80017e12:	33 fc       	mov	r12,63
80017e14:	fe b0 d4 be 	rcall	80012790 <gpio_get_pin_interrupt_flag>
  //  print_dbg("\r\n irq_port1_line3");
  if(gpio_get_pin_interrupt_flag(FS0_PIN)) {
    gpio_clear_pin_interrupt_flag(FS0_PIN);
    process_sw(6);
  }
  if(gpio_get_pin_interrupt_flag(FS1_PIN)) {
80017e18:	c0 70       	breq	80017e26 <irq_port1_line3+0x1e>
    gpio_clear_pin_interrupt_flag(FS1_PIN);
80017e1a:	33 fc       	mov	r12,63
80017e1c:	fe b0 d4 c6 	rcall	800127a8 <gpio_clear_pin_interrupt_flag>
    process_sw(7);
80017e20:	30 7c       	mov	r12,7
80017e22:	e0 a0 07 a1 	rcall	80018d64 <process_sw>
  }
}
80017e26:	d4 02       	popm	lr
80017e28:	d6 03       	rete
// interrupt handler for PB24-PB31
__attribute__((__interrupt__))
static void irq_port1_line3(void) {
  //  print_dbg("\r\n irq_port1_line3");
  if(gpio_get_pin_interrupt_flag(FS0_PIN)) {
    gpio_clear_pin_interrupt_flag(FS0_PIN);
80017e2a:	33 ec       	mov	r12,62
80017e2c:	fe b0 d4 be 	rcall	800127a8 <gpio_clear_pin_interrupt_flag>
    process_sw(6);
80017e30:	30 6c       	mov	r12,6
80017e32:	e0 a0 07 99 	rcall	80018d64 <process_sw>
80017e36:	ce eb       	rjmp	80017e12 <irq_port1_line3+0xa>

80017e38 <irq_port0_line3>:
80017e38:	d4 01       	pushm	lr
80017e3a:	31 9c       	mov	r12,25
80017e3c:	fe b0 d4 aa 	rcall	80012790 <gpio_get_pin_interrupt_flag>
80017e40:	c2 e1       	brne	80017e9c <irq_port0_line3+0x64>
80017e42:	31 ac       	mov	r12,26
    /// this might be problematic if we were expecting faster interrupts from switches,
    /// but hardware pre-filtering should preclude this.
    process_sw(0);
  }
  // SW_F1
  if(gpio_get_pin_interrupt_flag(SW1_PIN)) {
80017e44:	fe b0 d4 a6 	rcall	80012790 <gpio_get_pin_interrupt_flag>
80017e48:	c2 31       	brne	80017e8e <irq_port0_line3+0x56>
    gpio_clear_pin_interrupt_flag(SW1_PIN);
    process_sw(1);
  }
  // SW_F2
  if(gpio_get_pin_interrupt_flag(SW2_PIN)) {
80017e4a:	31 bc       	mov	r12,27
80017e4c:	fe b0 d4 a2 	rcall	80012790 <gpio_get_pin_interrupt_flag>
80017e50:	c1 81       	brne	80017e80 <irq_port0_line3+0x48>
    gpio_clear_pin_interrupt_flag(SW2_PIN);
    process_sw(2);
  }
 
  // SW_F3
  if(gpio_get_pin_interrupt_flag(SW3_PIN)) {
80017e52:	31 cc       	mov	r12,28
80017e54:	fe b0 d4 9e 	rcall	80012790 <gpio_get_pin_interrupt_flag>
80017e58:	c0 d1       	brne	80017e72 <irq_port0_line3+0x3a>
    gpio_clear_pin_interrupt_flag(SW3_PIN);
    process_sw(3);
  }
  // SW_MODE
  if(gpio_get_pin_interrupt_flag(SW_MODE_PIN)) {
80017e5a:	31 8c       	mov	r12,24
80017e5c:	fe b0 d4 9a 	rcall	80012790 <gpio_get_pin_interrupt_flag>
80017e60:	c0 70       	breq	80017e6e <irq_port0_line3+0x36>
    gpio_clear_pin_interrupt_flag(SW_MODE_PIN);
80017e62:	31 8c       	mov	r12,24
80017e64:	fe b0 d4 a2 	rcall	800127a8 <gpio_clear_pin_interrupt_flag>
    process_sw(4);
80017e68:	30 4c       	mov	r12,4
80017e6a:	e0 a0 07 7d 	rcall	80018d64 <process_sw>
  }
}
80017e6e:	d4 02       	popm	lr
80017e70:	d6 03       	rete
    process_sw(2);
  }
 
  // SW_F3
  if(gpio_get_pin_interrupt_flag(SW3_PIN)) {
    gpio_clear_pin_interrupt_flag(SW3_PIN);
80017e72:	31 cc       	mov	r12,28
80017e74:	fe b0 d4 9a 	rcall	800127a8 <gpio_clear_pin_interrupt_flag>
    process_sw(3);
80017e78:	30 3c       	mov	r12,3
80017e7a:	e0 a0 07 75 	rcall	80018d64 <process_sw>
80017e7e:	ce eb       	rjmp	80017e5a <irq_port0_line3+0x22>
    gpio_clear_pin_interrupt_flag(SW1_PIN);
    process_sw(1);
  }
  // SW_F2
  if(gpio_get_pin_interrupt_flag(SW2_PIN)) {
    gpio_clear_pin_interrupt_flag(SW2_PIN);
80017e80:	31 bc       	mov	r12,27
80017e82:	fe b0 d4 93 	rcall	800127a8 <gpio_clear_pin_interrupt_flag>
    process_sw(2);
80017e86:	30 2c       	mov	r12,2
80017e88:	e0 a0 07 6e 	rcall	80018d64 <process_sw>
80017e8c:	ce 3b       	rjmp	80017e52 <irq_port0_line3+0x1a>
    /// but hardware pre-filtering should preclude this.
    process_sw(0);
  }
  // SW_F1
  if(gpio_get_pin_interrupt_flag(SW1_PIN)) {
    gpio_clear_pin_interrupt_flag(SW1_PIN);
80017e8e:	31 ac       	mov	r12,26
80017e90:	fe b0 d4 8c 	rcall	800127a8 <gpio_clear_pin_interrupt_flag>
    process_sw(1);
80017e94:	30 1c       	mov	r12,1
80017e96:	e0 a0 07 67 	rcall	80018d64 <process_sw>
80017e9a:	cd 8b       	rjmp	80017e4a <irq_port0_line3+0x12>
__attribute__((__interrupt__))
static void irq_port0_line3(void) {
  //  print_dbg("\r\n interrupt on port0_line3");
  //SW_F0
  if(gpio_get_pin_interrupt_flag(SW0_PIN)) {
    gpio_clear_pin_interrupt_flag(SW0_PIN);
80017e9c:	31 9c       	mov	r12,25
80017e9e:	fe b0 d4 85 	rcall	800127a8 <gpio_clear_pin_interrupt_flag>
    /// process_sw() will post an event, which calls cpu_irq_disable().
    /// apparently, this also clears the GPIO interrupt flags (!?)
    /// so clear the flag first to avoid triggering an infinite series of interrupts.
    /// this might be problematic if we were expecting faster interrupts from switches,
    /// but hardware pre-filtering should preclude this.
    process_sw(0);
80017ea2:	30 0c       	mov	r12,0
80017ea4:	e0 a0 07 60 	rcall	80018d64 <process_sw>
80017ea8:	cc db       	rjmp	80017e42 <irq_port0_line3+0xa>
80017eaa:	d7 03       	nop

80017eac <irq_port1_line1>:
80017eac:	d4 01       	pushm	lr
80017eae:	32 8c       	mov	r12,40
80017eb0:	fe b0 d4 70 	rcall	80012790 <gpio_get_pin_interrupt_flag>
80017eb4:	c0 d1       	brne	80017ece <irq_port1_line1+0x22>
80017eb6:	32 9c       	mov	r12,41
  if(gpio_get_pin_interrupt_flag(ENC3_S0_PIN)) {
    process_enc(3);
    gpio_clear_pin_interrupt_flag(ENC3_S0_PIN);
  }  
  // ENC3_1
  if(gpio_get_pin_interrupt_flag(ENC3_S1_PIN)) {
80017eb8:	fe b0 d4 6c 	rcall	80012790 <gpio_get_pin_interrupt_flag>
80017ebc:	c0 70       	breq	80017eca <irq_port1_line1+0x1e>
    process_enc(3);
80017ebe:	30 3c       	mov	r12,3
80017ec0:	fe b0 fb 1c 	rcall	800174f8 <process_enc>
    gpio_clear_pin_interrupt_flag(ENC3_S1_PIN);
80017ec4:	32 9c       	mov	r12,41
80017ec6:	fe b0 d4 71 	rcall	800127a8 <gpio_clear_pin_interrupt_flag>
  }

}
80017eca:	d4 02       	popm	lr
80017ecc:	d6 03       	rete
__attribute__((__interrupt__))
static void irq_port1_line1(void) {
  //    print_dbg("\r\b\interrupt on PB08-PB15.");
  // ENC3_0
  if(gpio_get_pin_interrupt_flag(ENC3_S0_PIN)) {
    process_enc(3);
80017ece:	30 3c       	mov	r12,3
80017ed0:	fe b0 fb 14 	rcall	800174f8 <process_enc>
    gpio_clear_pin_interrupt_flag(ENC3_S0_PIN);
80017ed4:	32 8c       	mov	r12,40
80017ed6:	fe b0 d4 69 	rcall	800127a8 <gpio_clear_pin_interrupt_flag>
80017eda:	ce eb       	rjmp	80017eb6 <irq_port1_line1+0xa>

80017edc <irq_port1_line0>:
80017edc:	d4 01       	pushm	lr
80017ede:	32 2c       	mov	r12,34
80017ee0:	fe b0 d4 58 	rcall	80012790 <gpio_get_pin_interrupt_flag>
80017ee4:	c3 91       	brne	80017f56 <irq_port1_line0+0x7a>
80017ee6:	32 3c       	mov	r12,35
  if(gpio_get_pin_interrupt_flag(ENC0_S0_PIN)) {
    process_enc(0);
    gpio_clear_pin_interrupt_flag(ENC0_S0_PIN);
  }  
  // ENC0_1
  if(gpio_get_pin_interrupt_flag(ENC0_S1_PIN)) {
80017ee8:	fe b0 d4 54 	rcall	80012790 <gpio_get_pin_interrupt_flag>
80017eec:	c2 e1       	brne	80017f48 <irq_port1_line0+0x6c>
    process_enc(0);
    gpio_clear_pin_interrupt_flag(ENC0_S1_PIN);
  }
  // ENC1_0
  if(gpio_get_pin_interrupt_flag(ENC1_S0_PIN)) {
80017eee:	32 4c       	mov	r12,36
80017ef0:	fe b0 d4 50 	rcall	80012790 <gpio_get_pin_interrupt_flag>
80017ef4:	c2 31       	brne	80017f3a <irq_port1_line0+0x5e>
    process_enc(1);
    gpio_clear_pin_interrupt_flag(ENC1_S0_PIN);
  }  
  // ENC1_1
  if(gpio_get_pin_interrupt_flag(ENC1_S1_PIN)) {
80017ef6:	32 5c       	mov	r12,37
80017ef8:	fe b0 d4 4c 	rcall	80012790 <gpio_get_pin_interrupt_flag>
80017efc:	c1 81       	brne	80017f2c <irq_port1_line0+0x50>
    process_enc(1);
    gpio_clear_pin_interrupt_flag(ENC1_S1_PIN);
  }
  // ENC2_0
  if(gpio_get_pin_interrupt_flag(ENC2_S0_PIN)) {
80017efe:	32 6c       	mov	r12,38
80017f00:	fe b0 d4 48 	rcall	80012790 <gpio_get_pin_interrupt_flag>
80017f04:	c0 d1       	brne	80017f1e <irq_port1_line0+0x42>
    process_enc(2);
    gpio_clear_pin_interrupt_flag(ENC2_S0_PIN);
  }  
  // ENC2_1
  if(gpio_get_pin_interrupt_flag(ENC2_S1_PIN)) {
80017f06:	32 7c       	mov	r12,39
80017f08:	fe b0 d4 44 	rcall	80012790 <gpio_get_pin_interrupt_flag>
80017f0c:	c0 70       	breq	80017f1a <irq_port1_line0+0x3e>
    process_enc(2);
80017f0e:	30 2c       	mov	r12,2
80017f10:	fe b0 fa f4 	rcall	800174f8 <process_enc>
    gpio_clear_pin_interrupt_flag(ENC2_S1_PIN);
80017f14:	32 7c       	mov	r12,39
80017f16:	fe b0 d4 49 	rcall	800127a8 <gpio_clear_pin_interrupt_flag>
  }
}
80017f1a:	d4 02       	popm	lr
80017f1c:	d6 03       	rete
    process_enc(1);
    gpio_clear_pin_interrupt_flag(ENC1_S1_PIN);
  }
  // ENC2_0
  if(gpio_get_pin_interrupt_flag(ENC2_S0_PIN)) {
    process_enc(2);
80017f1e:	30 2c       	mov	r12,2
80017f20:	fe b0 fa ec 	rcall	800174f8 <process_enc>
    gpio_clear_pin_interrupt_flag(ENC2_S0_PIN);
80017f24:	32 6c       	mov	r12,38
80017f26:	fe b0 d4 41 	rcall	800127a8 <gpio_clear_pin_interrupt_flag>
80017f2a:	ce eb       	rjmp	80017f06 <irq_port1_line0+0x2a>
    process_enc(1);
    gpio_clear_pin_interrupt_flag(ENC1_S0_PIN);
  }  
  // ENC1_1
  if(gpio_get_pin_interrupt_flag(ENC1_S1_PIN)) {
    process_enc(1);
80017f2c:	30 1c       	mov	r12,1
80017f2e:	fe b0 fa e5 	rcall	800174f8 <process_enc>
    gpio_clear_pin_interrupt_flag(ENC1_S1_PIN);
80017f32:	32 5c       	mov	r12,37
80017f34:	fe b0 d4 3a 	rcall	800127a8 <gpio_clear_pin_interrupt_flag>
80017f38:	ce 3b       	rjmp	80017efe <irq_port1_line0+0x22>
    process_enc(0);
    gpio_clear_pin_interrupt_flag(ENC0_S1_PIN);
  }
  // ENC1_0
  if(gpio_get_pin_interrupt_flag(ENC1_S0_PIN)) {
    process_enc(1);
80017f3a:	30 1c       	mov	r12,1
80017f3c:	fe b0 fa de 	rcall	800174f8 <process_enc>
    gpio_clear_pin_interrupt_flag(ENC1_S0_PIN);
80017f40:	32 4c       	mov	r12,36
80017f42:	fe b0 d4 33 	rcall	800127a8 <gpio_clear_pin_interrupt_flag>
80017f46:	cd 8b       	rjmp	80017ef6 <irq_port1_line0+0x1a>
    process_enc(0);
    gpio_clear_pin_interrupt_flag(ENC0_S0_PIN);
  }  
  // ENC0_1
  if(gpio_get_pin_interrupt_flag(ENC0_S1_PIN)) {
    process_enc(0);
80017f48:	30 0c       	mov	r12,0
80017f4a:	fe b0 fa d7 	rcall	800174f8 <process_enc>
    gpio_clear_pin_interrupt_flag(ENC0_S1_PIN);
80017f4e:	32 3c       	mov	r12,35
80017f50:	fe b0 d4 2c 	rcall	800127a8 <gpio_clear_pin_interrupt_flag>
80017f54:	cc db       	rjmp	80017eee <irq_port1_line0+0x12>
__attribute__((__interrupt__))
static void irq_port1_line0(void) {
  // print_dbg("\r\b\interrupt on PB00-PB07.");
  // ENC0_0
  if(gpio_get_pin_interrupt_flag(ENC0_S0_PIN)) {
    process_enc(0);
80017f56:	30 0c       	mov	r12,0
80017f58:	fe b0 fa d0 	rcall	800174f8 <process_enc>
    gpio_clear_pin_interrupt_flag(ENC0_S0_PIN);
80017f5c:	32 2c       	mov	r12,34
80017f5e:	fe b0 d4 25 	rcall	800127a8 <gpio_clear_pin_interrupt_flag>
80017f62:	cc 2b       	rjmp	80017ee6 <irq_port1_line0+0xa>

80017f64 <alloc_mem>:
  pHeapEnd = (heap_t)((u32)pHeapStart + heapSize);
  heapOffset = 0;
}

// allocate and return pointer
heap_t alloc_mem(u32 bytes) {
80017f64:	eb cd 40 c0 	pushm	r6-r7,lr
80017f68:	18 96       	mov	r6,r12
  print_dbg("\r\n allocating memory, bytes: 0x");
80017f6a:	49 3c       	lddpc	r12,80017fb4 <alloc_mem+0x50>
80017f6c:	fe b0 d8 70 	rcall	8001304c <print_dbg>
  print_dbg_hex(bytes);
80017f70:	0c 9c       	mov	r12,r6
80017f72:	fe b0 d8 15 	rcall	80012f9c <print_dbg_hex>

  print_dbg("\r\n location: 0x");
80017f76:	49 1c       	lddpc	r12,80017fb8 <alloc_mem+0x54>
80017f78:	fe b0 d8 6a 	rcall	8001304c <print_dbg>
  print_dbg_hex(heapOffset);
80017f7c:	e0 67 19 b0 	mov	r7,6576
80017f80:	6e 0c       	ld.w	r12,r7[0x0]
80017f82:	fe b0 d8 0d 	rcall	80012f9c <print_dbg_hex>

  u32 tmp = heapOffset + bytes;
80017f86:	6e 08       	ld.w	r8,r7[0x0]
  u8 mtmp = tmp % 4;
80017f88:	10 06       	add	r6,r8
80017f8a:	f1 d6 c0 02 	bfextu	r8,r6,0x0,0x2
  heap_t ret;
  // align to 4 bytes
  if ( mtmp != 0) {
    tmp += ( 4 - mtmp );
80017f8e:	f7 b6 01 fc 	subne	r6,-4
80017f92:	ed d8 e1 16 	subne	r6,r6,r8
  }
  if (tmp < heapSize) {
80017f96:	e0 68 19 b4 	mov	r8,6580
80017f9a:	70 08       	ld.w	r8,r8[0x0]
    heapOffset = tmp;
    ret = pHeapStart + heapOffset;
80017f9c:	10 36       	cp.w	r6,r8
  // align to 4 bytes
  if ( mtmp != 0) {
    tmp += ( 4 - mtmp );
  }
  if (tmp < heapSize) {
    heapOffset = tmp;
80017f9e:	c0 82       	brcc	80017fae <alloc_mem+0x4a>
    ret = pHeapStart + heapOffset;
80017fa0:	e0 68 19 ac 	mov	r8,6572
  } else {
    ret = (heap_t)ALLOC_FAIL;
  }
  return ret;
}
80017fa4:	8f 06       	st.w	r7[0x0],r6
80017fa6:	70 0c       	ld.w	r12,r8[0x0]
  heap_t ret;
  // align to 4 bytes
  if ( mtmp != 0) {
    tmp += ( 4 - mtmp );
  }
  if (tmp < heapSize) {
80017fa8:	0c 0c       	add	r12,r6
80017faa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017fae:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
80017fb2:	d7 03       	nop
80017fb4:	80 02       	ld.sh	r2,r0[0x0]
80017fb6:	27 2c       	sub	r12,114
80017fb8:	80 02       	ld.sh	r2,r0[0x0]
80017fba:	27 4c       	sub	r12,116

80017fbc <init_mem>:
80017fbc:	d4 01       	pushm	lr
80017fbe:	30 1c       	mov	r12,1
80017fc0:	fe b0 d0 24 	rcall	80012008 <smc_get_cs_size>
80017fc4:	fc 18 d0 00 	movh	r8,0xd000
static u32 heapSize;


// setup heap-ish
void init_mem(void) {
  heapSize = SRAM_SIZE;
80017fc8:	30 19       	mov	r9,1
80017fca:	f2 0c 09 49 	lsl	r9,r9,r12
80017fce:	e0 6b 19 b4 	mov	r11,6580
  pHeapStart = (heap_t)SRAM;
  pHeapEnd = (heap_t)((u32)pHeapStart + heapSize);
80017fd2:	f2 08 00 0a 	add	r10,r9,r8


// setup heap-ish
void init_mem(void) {
  heapSize = SRAM_SIZE;
  pHeapStart = (heap_t)SRAM;
80017fd6:	97 09       	st.w	r11[0x0],r9
80017fd8:	e0 69 19 ac 	mov	r9,6572
  pHeapEnd = (heap_t)((u32)pHeapStart + heapSize);
  heapOffset = 0;
80017fdc:	93 08       	st.w	r9[0x0],r8

// setup heap-ish
void init_mem(void) {
  heapSize = SRAM_SIZE;
  pHeapStart = (heap_t)SRAM;
  pHeapEnd = (heap_t)((u32)pHeapStart + heapSize);
80017fde:	e0 68 19 b8 	mov	r8,6584
  heapOffset = 0;
80017fe2:	30 09       	mov	r9,0
}
80017fe4:	91 0a       	st.w	r8[0x0],r10
80017fe6:	e0 68 19 b0 	mov	r8,6576
80017fea:	91 09       	st.w	r8[0x0],r9
80017fec:	d8 02       	popm	pc
80017fee:	d7 03       	nop

80017ff0 <screen_clear>:
  //  print_dbg(str);
  refresh = 1;
  return NCOLS;
}

void screen_clear(void) {
80017ff0:	e0 68 19 cc 	mov	r8,6604
80017ff4:	48 4a       	lddpc	r10,80018004 <screen_clear+0x14>
80017ff6:	f0 c9 f0 00 	sub	r9,r8,-4096
  u16 i;
 // clear OLED RAM and local screenbuffer
  for(i=0; i<GRAM_BYTES; i++) { 
    screen[i] = 0;
80017ffa:	10 aa       	st.w	r8++,r10
80017ffc:	12 38       	cp.w	r8,r9
    //    write_data(0);
  }
}
80017ffe:	cf e1       	brne	80017ffa <screen_clear+0xa>
80018000:	5e fc       	retal	r12
80018002:	d7 03       	nop
80018004:	00 00       	add	r0,r0
	...

80018008 <write_command>:
  spi_write(OLED_SPI, c);
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
80018008:	eb cd 40 80 	pushm	r7,lr
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
8001800c:	30 0b       	mov	r11,0
  spi_write(OLED_SPI, c);
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
8001800e:	18 97       	mov	r7,r12
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80018010:	fe 7c 28 00 	mov	r12,-55296
80018014:	fe b0 d5 74 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80018018:	30 9c       	mov	r12,9
8001801a:	fe b0 d3 7f 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
8001801e:	0e 9b       	mov	r11,r7
80018020:	fe 7c 28 00 	mov	r12,-55296
80018024:	fe b0 d6 01 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80018028:	30 0b       	mov	r11,0
8001802a:	fe 7c 28 00 	mov	r12,-55296
8001802e:	fe b0 d5 8f 	rcall	80012b4c <spi_unselectChip>
}
80018032:	e3 cd 80 80 	ldm	sp++,r7,pc
80018036:	d7 03       	nop

80018038 <screen_hl_line>:
80018038:	d4 31       	pushm	r0-r7,lr
8001803a:	20 2d       	sub	sp,8
8001803c:	4d 48       	lddpc	r8,8001818c <screen_hl_line+0x154>
8001803e:	5c 7b       	castu.h	r11
80018040:	e7 dc c0 08 	bfextu	r3,r12,0x0,0x8
80018044:	f0 0b 07 04 	ld.ub	r4,r8[r11]

// highlight a line
void screen_hl_line(U16 x, U16 l, U8 a) {
  U8 i, j;
  const u8 y = lines[l];
  for(i=x; i<NCOLS; i++) {
80018048:	30 08       	mov	r8,0
8001804a:	f0 03 18 00 	cp.b	r3,r8
8001804e:	c4 25       	brlt	800180d2 <screen_hl_line+0x9a>
  pos = (y << COLS_LSHIFT) + (x >> 1);

 // rotate: swap (and read backwards in refresh)
  if (x&1) {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80018050:	f7 da c0 04 	bfextu	r11,r10,0x0,0x4
  } else {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80018054:	a5 6a       	lsl	r10,0x4
80018056:	5c 5a       	castu.b	r10

// highlight a line
void screen_hl_line(U16 x, U16 l, U8 a) {
  U8 i, j;
  const u8 y = lines[l];
  for(i=x; i<NCOLS; i++) {
80018058:	18 92       	mov	r2,r12
  if (x&1) {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
  } else {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
8001805a:	50 0a       	stdsp	sp[0x0],r10
8001805c:	30 07       	mov	r7,0
8001805e:	e0 6c 19 cc 	mov	r12,6604

// highlight a line
void screen_hl_line(U16 x, U16 l, U8 a) {
  U8 i, j;
  const u8 y = lines[l];
  for(i=x; i<NCOLS; i++) {
80018062:	50 1b       	stdsp	sp[0x4],r11
80018064:	e8 ce ff f9 	sub	lr,r4,-7
U8 screen_get_pixel(U8 x, U8 y) {
  pos = (y << COLS_LSHIFT) + (x>>1);
  if (x&1) {
    return screen[pos] & 0x0f; 
   } else {
    return (screen[pos] & 0xf0) >> 4;
80018068:	18 96       	mov	r6,r12

// highlight a line
void screen_hl_line(U16 x, U16 l, U8 a) {
  U8 i, j;
  const u8 y = lines[l];
  for(i=x; i<NCOLS; i++) {
8001806a:	0e 9a       	mov	r10,r7
8001806c:	e6 07 00 0b 	add	r11,r3,r7
// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);

 // rotate: swap (and read backwards in refresh)
  if (x&1) {
80018070:	5c 5b       	castu.b	r11
80018072:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
  cpu_irq_enable();
}

// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);
80018076:	a1 9b       	lsr	r11,0x1

 // rotate: swap (and read backwards in refresh)
  if (x&1) {
80018078:	16 95       	mov	r5,r11
8001807a:	58 09       	cp.w	r9,0
8001807c:	c2 d0       	breq	800180d6 <screen_hl_line+0x9e>
8001807e:	c6 81       	brne	8001814e <screen_hl_line+0x116>
80018080:	08 91       	mov	r1,r4
80018082:	08 99       	mov	r9,r4
// highlight a line
void screen_hl_line(U16 x, U16 l, U8 a) {
  U8 i, j;
  const u8 y = lines[l];
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(y+FONT_CHARH); j++) {
80018084:	c0 48       	rjmp	8001808c <screen_hl_line+0x54>
80018086:	12 91       	mov	r1,r9
80018088:	12 3e       	cp.w	lr,r9
8001808a:	c1 b5       	brlt	800180c0 <screen_hl_line+0x88>
  }
}

// get value of pixel
U8 screen_get_pixel(U8 x, U8 y) {
  pos = (y << COLS_LSHIFT) + (x>>1);
8001808c:	2f f9       	sub	r9,-1
8001808e:	e2 08 15 06 	lsl	r8,r1,0x6
80018092:	5c 59       	castu.b	r9
  if (x&1) {
    return screen[pos] & 0x0f; 
80018094:	16 08       	add	r8,r11
80018096:	f8 08 07 00 	ld.ub	r0,r12[r8]
8001809a:	e1 d0 c0 04 	bfextu	r0,r0,0x0,0x4
8001809e:	f4 00 18 00 	cp.b	r0,r10
  cpu_irq_enable();
}

// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);
800180a2:	cf 21       	brne	80018086 <screen_hl_line+0x4e>
800180a4:	e2 08 15 06 	lsl	r8,r1,0x6
800180a8:	40 00       	lddsp	r0,sp[0x0]
  if (x&1) {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
  } else {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
800180aa:	0a 08       	add	r8,r5
800180ac:	ec 08 07 01 	ld.ub	r1,r6[r8]
800180b0:	e3 d1 c0 04 	bfextu	r1,r1,0x0,0x4
800180b4:	00 41       	or	r1,r0
800180b6:	ec 08 0b 01 	st.b	r6[r8],r1
// highlight a line
void screen_hl_line(U16 x, U16 l, U8 a) {
  U8 i, j;
  const u8 y = lines[l];
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(y+FONT_CHARH); j++) {
800180ba:	12 91       	mov	r1,r9
800180bc:	12 3e       	cp.w	lr,r9
800180be:	ce 74       	brge	8001808c <screen_hl_line+0x54>

// highlight a line
void screen_hl_line(U16 x, U16 l, U8 a) {
  U8 i, j;
  const u8 y = lines[l];
  for(i=x; i<NCOLS; i++) {
800180c0:	2f f7       	sub	r7,-1
800180c2:	e4 07 00 09 	add	r9,r2,r7
800180c6:	f4 09 18 00 	cp.b	r9,r10
    for(j=y; j<(y+FONT_CHARH); j++) {
800180ca:	cd 14       	brge	8001806c <screen_hl_line+0x34>
800180cc:	e0 69 19 c0 	mov	r9,6592
      if (screen_get_pixel(i, j) == 0) {
	screen_pixel(i, j, a);
      }
    }
  }
}
800180d0:	93 08       	st.w	r9[0x0],r8
// highlight a line
void screen_hl_line(U16 x, U16 l, U8 a) {
  U8 i, j;
  const u8 y = lines[l];
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(y+FONT_CHARH); j++) {
800180d2:	2f ed       	sub	sp,-8
800180d4:	d8 32       	popm	r0-r7,pc
800180d6:	58 09       	cp.w	r9,0
800180d8:	c1 e1       	brne	80018114 <screen_hl_line+0xdc>
800180da:	08 91       	mov	r1,r4
800180dc:	08 99       	mov	r9,r4
800180de:	c0 48       	rjmp	800180e6 <screen_hl_line+0xae>
800180e0:	12 91       	mov	r1,r9
800180e2:	12 3e       	cp.w	lr,r9
  }
}

// get value of pixel
U8 screen_get_pixel(U8 x, U8 y) {
  pos = (y << COLS_LSHIFT) + (x>>1);
800180e4:	ce e5       	brlt	800180c0 <screen_hl_line+0x88>
800180e6:	2f f9       	sub	r9,-1
// highlight a line
void screen_hl_line(U16 x, U16 l, U8 a) {
  U8 i, j;
  const u8 y = lines[l];
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(y+FONT_CHARH); j++) {
800180e8:	e2 08 15 06 	lsl	r8,r1,0x6
U8 screen_get_pixel(U8 x, U8 y) {
  pos = (y << COLS_LSHIFT) + (x>>1);
  if (x&1) {
    return screen[pos] & 0x0f; 
   } else {
    return (screen[pos] & 0xf0) >> 4;
800180ec:	5c 59       	castu.b	r9
800180ee:	16 08       	add	r8,r11
800180f0:	f8 08 07 00 	ld.ub	r0,r12[r8]
800180f4:	a5 80       	lsr	r0,0x4
800180f6:	f4 00 18 00 	cp.b	r0,r10
  cpu_irq_enable();
}

// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);
800180fa:	cf 31       	brne	800180e0 <screen_hl_line+0xa8>
  if (x&1) {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
  } else {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
800180fc:	e2 08 15 06 	lsl	r8,r1,0x6
80018100:	40 00       	lddsp	r0,sp[0x0]
80018102:	0a 08       	add	r8,r5
80018104:	ec 08 07 01 	ld.ub	r1,r6[r8]
80018108:	e3 d1 c0 04 	bfextu	r1,r1,0x0,0x4
8001810c:	00 41       	or	r1,r0
8001810e:	ec 08 0b 01 	st.b	r6[r8],r1
// highlight a line
void screen_hl_line(U16 x, U16 l, U8 a) {
  U8 i, j;
  const u8 y = lines[l];
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(y+FONT_CHARH); j++) {
80018112:	ce 7b       	rjmp	800180e0 <screen_hl_line+0xa8>
80018114:	08 91       	mov	r1,r4
80018116:	08 99       	mov	r9,r4
80018118:	c0 48       	rjmp	80018120 <screen_hl_line+0xe8>
8001811a:	12 91       	mov	r1,r9
8001811c:	12 3e       	cp.w	lr,r9
  }
}

// get value of pixel
U8 screen_get_pixel(U8 x, U8 y) {
  pos = (y << COLS_LSHIFT) + (x>>1);
8001811e:	cd 15       	brlt	800180c0 <screen_hl_line+0x88>
80018120:	2f f9       	sub	r9,-1
// highlight a line
void screen_hl_line(U16 x, U16 l, U8 a) {
  U8 i, j;
  const u8 y = lines[l];
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(y+FONT_CHARH); j++) {
80018122:	e2 08 15 06 	lsl	r8,r1,0x6
U8 screen_get_pixel(U8 x, U8 y) {
  pos = (y << COLS_LSHIFT) + (x>>1);
  if (x&1) {
    return screen[pos] & 0x0f; 
   } else {
    return (screen[pos] & 0xf0) >> 4;
80018126:	5c 59       	castu.b	r9
80018128:	16 08       	add	r8,r11
8001812a:	f8 08 07 00 	ld.ub	r0,r12[r8]
8001812e:	a5 80       	lsr	r0,0x4
80018130:	f4 00 18 00 	cp.b	r0,r10
  cpu_irq_enable();
}

// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);
80018134:	cf 31       	brne	8001811a <screen_hl_line+0xe2>

 // rotate: swap (and read backwards in refresh)
  if (x&1) {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80018136:	e2 08 15 06 	lsl	r8,r1,0x6
8001813a:	40 10       	lddsp	r0,sp[0x4]
8001813c:	0a 08       	add	r8,r5
8001813e:	ec 08 07 01 	ld.ub	r1,r6[r8]
80018142:	e0 11 ff f0 	andl	r1,0xfff0
80018146:	00 41       	or	r1,r0
80018148:	ec 08 0b 01 	st.b	r6[r8],r1
  } else {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
8001814c:	ce 7b       	rjmp	8001811a <screen_hl_line+0xe2>
8001814e:	08 91       	mov	r1,r4
// highlight a line
void screen_hl_line(U16 x, U16 l, U8 a) {
  U8 i, j;
  const u8 y = lines[l];
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(y+FONT_CHARH); j++) {
80018150:	08 99       	mov	r9,r4
80018152:	c0 58       	rjmp	8001815c <screen_hl_line+0x124>
80018154:	12 91       	mov	r1,r9
80018156:	1c 39       	cp.w	r9,lr
80018158:	fe 99 ff b4 	brgt	800180c0 <screen_hl_line+0x88>
  }
}

// get value of pixel
U8 screen_get_pixel(U8 x, U8 y) {
  pos = (y << COLS_LSHIFT) + (x>>1);
8001815c:	2f f9       	sub	r9,-1
// highlight a line
void screen_hl_line(U16 x, U16 l, U8 a) {
  U8 i, j;
  const u8 y = lines[l];
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(y+FONT_CHARH); j++) {
8001815e:	e2 08 15 06 	lsl	r8,r1,0x6

// get value of pixel
U8 screen_get_pixel(U8 x, U8 y) {
  pos = (y << COLS_LSHIFT) + (x>>1);
  if (x&1) {
    return screen[pos] & 0x0f; 
80018162:	5c 59       	castu.b	r9
80018164:	16 08       	add	r8,r11
80018166:	f8 08 07 00 	ld.ub	r0,r12[r8]
8001816a:	e1 d0 c0 04 	bfextu	r0,r0,0x0,0x4
8001816e:	f4 00 18 00 	cp.b	r0,r10
  cpu_irq_enable();
}

// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);
80018172:	cf 11       	brne	80018154 <screen_hl_line+0x11c>

 // rotate: swap (and read backwards in refresh)
  if (x&1) {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80018174:	e2 08 15 06 	lsl	r8,r1,0x6
80018178:	40 10       	lddsp	r0,sp[0x4]
8001817a:	0a 08       	add	r8,r5
8001817c:	ec 08 07 01 	ld.ub	r1,r6[r8]
80018180:	e0 11 ff f0 	andl	r1,0xfff0
80018184:	00 41       	or	r1,r0
80018186:	ec 08 0b 01 	st.b	r6[r8],r1
8001818a:	ce 5b       	rjmp	80018154 <screen_hl_line+0x11c>
8001818c:	80 02       	ld.sh	r2,r0[0x0]
8001818e:	27 5c       	sub	r12,117

80018190 <screen_blank_line>:
80018190:	eb cd 40 f8 	pushm	r3-r7,lr
}

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 l) {
  U8 i, j;
  const u8 y = lines[l];
80018194:	4a 68       	lddpc	r8,8001822c <screen_blank_line+0x9c>
80018196:	5c 7b       	castu.h	r11
  for(i=x; i<NCOLS; i++) {
80018198:	e9 dc c0 08 	bfextu	r4,r12,0x0,0x8
}

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 l) {
  U8 i, j;
  const u8 y = lines[l];
8001819c:	f0 0b 07 05 	ld.ub	r5,r8[r11]
  for(i=x; i<NCOLS; i++) {
800181a0:	30 08       	mov	r8,0
800181a2:	f0 04 18 00 	cp.b	r4,r8
800181a6:	c2 85       	brlt	800181f6 <screen_blank_line+0x66>
800181a8:	30 06       	mov	r6,0
800181aa:	ea c7 ff f9 	sub	r7,r5,-7
800181ae:	e0 6a 19 cc 	mov	r10,6604
800181b2:	0c 93       	mov	r3,r6
800181b4:	08 9e       	mov	lr,r4
800181b6:	0c 0e       	add	lr,r6
800181b8:	5c 5e       	castu.b	lr
800181ba:	f1 de c0 01 	bfextu	r8,lr,0x0,0x1
800181be:	a1 9e       	lsr	lr,0x1
800181c0:	58 08       	cp.w	r8,0
800181c2:	c1 c1       	brne	800181fa <screen_blank_line+0x6a>
800181c4:	0a 9b       	mov	r11,r5
  cpu_irq_enable();
}

// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);
800181c6:	0a 99       	mov	r9,r5
800181c8:	f6 08 15 06 	lsl	r8,r11,0x6
  if (x&1) {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
  } else {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
800181cc:	1c 08       	add	r8,lr
800181ce:	f4 08 07 0b 	ld.ub	r11,r10[r8]
800181d2:	f7 db c0 04 	bfextu	r11,r11,0x0,0x4
800181d6:	f4 08 0b 0b 	st.b	r10[r8],r11
// fill a line with blank space to end
void screen_blank_line(U16 x, U16 l) {
  U8 i, j;
  const u8 y = lines[l];
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(FONT_CHARH + y); j++) {
800181da:	2f f9       	sub	r9,-1
800181dc:	5c 59       	castu.b	r9
800181de:	12 9b       	mov	r11,r9
800181e0:	12 37       	cp.w	r7,r9
800181e2:	cf 34       	brge	800181c8 <screen_blank_line+0x38>

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 l) {
  U8 i, j;
  const u8 y = lines[l];
  for(i=x; i<NCOLS; i++) {
800181e4:	2f f6       	sub	r6,-1
800181e6:	f8 06 00 09 	add	r9,r12,r6
800181ea:	e6 09 18 00 	cp.b	r9,r3
    for(j=y; j<(FONT_CHARH + y); j++) {
800181ee:	ce 34       	brge	800181b4 <screen_blank_line+0x24>
800181f0:	e0 69 19 c0 	mov	r9,6592
800181f4:	93 08       	st.w	r9[0x0],r8

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 l) {
  U8 i, j;
  const u8 y = lines[l];
  for(i=x; i<NCOLS; i++) {
800181f6:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
  cpu_irq_enable();
}

// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);
800181fa:	0a 9b       	mov	r11,r5
800181fc:	0a 99       	mov	r9,r5
800181fe:	f6 08 15 06 	lsl	r8,r11,0x6

 // rotate: swap (and read backwards in refresh)
  if (x&1) {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80018202:	1c 08       	add	r8,lr
80018204:	f4 08 07 0b 	ld.ub	r11,r10[r8]
80018208:	e0 1b ff f0 	andl	r11,0xfff0
// fill a line with blank space to end
void screen_blank_line(U16 x, U16 l) {
  U8 i, j;
  const u8 y = lines[l];
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(FONT_CHARH + y); j++) {
8001820c:	f4 08 0b 0b 	st.b	r10[r8],r11
80018210:	2f f9       	sub	r9,-1
80018212:	5c 59       	castu.b	r9
80018214:	12 9b       	mov	r11,r9
80018216:	0e 39       	cp.w	r9,r7
80018218:	fe 9a ff f3 	brle	800181fe <screen_blank_line+0x6e>

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 l) {
  U8 i, j;
  const u8 y = lines[l];
  for(i=x; i<NCOLS; i++) {
8001821c:	2f f6       	sub	r6,-1
8001821e:	f8 06 00 09 	add	r9,r12,r6
80018222:	e6 09 18 00 	cp.b	r9,r3
80018226:	cc 74       	brge	800181b4 <screen_blank_line+0x24>
80018228:	ce 4b       	rjmp	800181f0 <screen_blank_line+0x60>
8001822a:	d7 03       	nop
8001822c:	80 02       	ld.sh	r2,r0[0x0]
8001822e:	27 5c       	sub	r12,117

80018230 <screen_string_squeeze>:
80018230:	d4 31       	pushm	r0-r7,lr
80018232:	20 ad       	sub	sp,40
}

// draw a string with proportional spacing
U8 screen_string_squeeze(U16 x, U16 l, char *str, U8 a) {
  //  static u8 y;
  y = lines[l];
80018234:	fe f8 02 c4 	ld.w	r8,pc[708]
80018238:	5c 7b       	castu.h	r11
  }
  return x;
}

// draw a string with proportional spacing
U8 screen_string_squeeze(U16 x, U16 l, char *str, U8 a) {
8001823a:	50 2a       	stdsp	sp[0x8],r10
  //  static u8 y;
  y = lines[l];
8001823c:	f0 0b 07 0b 	ld.ub	r11,r8[r11]
  }
  return x;
}

// draw a string with proportional spacing
U8 screen_string_squeeze(U16 x, U16 l, char *str, U8 a) {
80018240:	50 1c       	stdsp	sp[0x4],r12
  //  static u8 y;
  y = lines[l];
80018242:	e0 68 19 bf 	mov	r8,6591
80018246:	50 3b       	stdsp	sp[0xc],r11
80018248:	b0 8b       	st.b	r8[0x0],r11
  while(*str != 0) {
8001824a:	15 88       	ld.ub	r8,r10[0x0]
8001824c:	58 08       	cp.w	r8,0
8001824e:	e0 80 00 f1 	breq	80018430 <screen_string_squeeze+0x200>
  pos = (y << COLS_LSHIFT) + (x >> 1);

 // rotate: swap (and read backwards in refresh)
  if (x&1) {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80018252:	e3 d9 c0 04 	bfextu	r1,r9,0x0,0x4
  } else {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80018256:	a5 69       	lsl	r9,0x4
80018258:	e7 d9 c0 08 	bfextu	r3,r9,0x0,0x8
  cpu_irq_enable();
}

// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);
8001825c:	16 99       	mov	r9,r11
8001825e:	2f f9       	sub	r9,-1
80018260:	a7 69       	lsl	r9,0x6
80018262:	50 89       	stdsp	sp[0x20],r9
80018264:	16 99       	mov	r9,r11
80018266:	5c 7b       	castu.h	r11
80018268:	2f e9       	sub	r9,-2
8001826a:	50 4b       	stdsp	sp[0x10],r11
8001826c:	a7 69       	lsl	r9,0x6
8001826e:	40 3b       	lddsp	r11,sp[0xc]
80018270:	2f db       	sub	r11,-3
80018272:	50 99       	stdsp	sp[0x24],r9
80018274:	fb 5b 00 16 	st.h	sp[22],r11
80018278:	40 39       	lddsp	r9,sp[0xc]
8001827a:	40 3b       	lddsp	r11,sp[0xc]
8001827c:	2f c9       	sub	r9,-4
8001827e:	2f bb       	sub	r11,-5
80018280:	fb 59 00 18 	st.h	sp[24],r9
80018284:	fb 5b 00 1a 	st.h	sp[26],r11
80018288:	40 39       	lddsp	r9,sp[0xc]
8001828a:	40 3b       	lddsp	r11,sp[0xc]
8001828c:	2f a9       	sub	r9,-6
8001828e:	2f 9b       	sub	r11,-7
80018290:	e0 6a 19 cc 	mov	r10,6604
80018294:	fb 59 00 1c 	st.h	sp[28],r9
80018298:	fb 5b 00 1e 	st.h	sp[30],r11
// draw a single character glyph with proportional spacing
U8 screen_char_squeeze(U16 col, U16 row, char gl, U8 a) {
  //  static U8 x;
  static U8 xnum;
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
8001829c:	22 08       	sub	r8,32
8001829e:	fe f9 02 5e 	ld.w	r9,pc[606]
800182a2:	f2 08 00 36 	add	r6,r9,r8<<0x3
  xnum = FONT_CHARW - g->first - g->last;
800182a6:	0d 85       	ld.ub	r5,r6[0x0]
800182a8:	0d 98       	ld.ub	r8,r6[0x1]
800182aa:	ea 09 11 00 	rsub	r9,r5,0
800182ae:	f2 08 01 08 	sub	r8,r9,r8
800182b2:	40 32       	lddsp	r2,sp[0xc]
800182b4:	f0 cc ff fa 	sub	r12,r8,-6
800182b8:	30 04       	mov	r4,0
  //  print_dbg("\r\n char at row: ");
  //  print_dbg_ulong(row);
  for(j=0; j<FONT_CHARH; j++) {
    for(i=0; i<xnum; i++) {
800182ba:	40 18       	lddsp	r8,sp[0x4]
U8 screen_char_squeeze(U16 col, U16 row, char gl, U8 a) {
  //  static U8 x;
  static U8 xnum;
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
800182bc:	5c 5c       	castu.b	r12
  //  print_dbg("\r\n char at row: ");
  //  print_dbg_ulong(row);
  for(j=0; j<FONT_CHARH; j++) {
    for(i=0; i<xnum; i++) {
800182be:	5c 88       	casts.h	r8
800182c0:	50 08       	stdsp	sp[0x0],r8
800182c2:	58 0c       	cp.w	r12,0
800182c4:	c3 d0       	breq	8001833e <screen_string_squeeze+0x10e>
800182c6:	ef d2 c0 10 	bfextu	r7,r2,0x0,0x10
800182ca:	30 1b       	mov	r11,1
800182cc:	a7 67       	lsl	r7,0x6
800182ce:	f6 04 09 4e 	lsl	lr,r11,r4
800182d2:	40 09       	lddsp	r9,sp[0x0]
800182d4:	30 08       	mov	r8,0
800182d6:	c1 88       	rjmp	80018306 <screen_string_squeeze+0xd6>
  cpu_irq_enable();
}

// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);
800182d8:	f7 d9 c0 10 	bfextu	r11,r9,0x0,0x10

 // rotate: swap (and read backwards in refresh)
  if (x&1) {
800182dc:	e1 db c0 01 	bfextu	r0,r11,0x0,0x1
  cpu_irq_enable();
}

// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);
800182e0:	a1 9b       	lsr	r11,0x1
800182e2:	0e 0b       	add	r11,r7

 // rotate: swap (and read backwards in refresh)
  if (x&1) {
800182e4:	58 00       	cp.w	r0,0
800182e6:	e0 81 00 ad 	brne	80018440 <screen_string_squeeze+0x210>
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
  } else {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
800182ea:	f4 0b 07 00 	ld.ub	r0,r10[r11]
800182ee:	e1 d0 c0 04 	bfextu	r0,r0,0x0,0x4
800182f2:	06 40       	or	r0,r3
800182f4:	f4 0b 0b 00 	st.b	r10[r11],r0
800182f8:	2f f9       	sub	r9,-1
800182fa:	2f f8       	sub	r8,-1
800182fc:	5c 89       	casts.h	r9
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
  //  print_dbg("\r\n char at row: ");
  //  print_dbg_ulong(row);
  for(j=0; j<FONT_CHARH; j++) {
    for(i=0; i<xnum; i++) {
800182fe:	f0 0c 18 00 	cp.b	r12,r8
80018302:	e0 88 00 1e 	brls	8001833e <screen_string_squeeze+0x10e>
      if( (g->data[i + g->first] & (1 << j))) {
80018306:	ec 08 00 0b 	add	r11,r6,r8
8001830a:	0a 0b       	add	r11,r5
8001830c:	17 ab       	ld.ub	r11,r11[0x2]
8001830e:	1c 6b       	and	r11,lr
80018310:	ce 41       	brne	800182d8 <screen_string_squeeze+0xa8>
  cpu_irq_enable();
}

// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);
80018312:	f7 d9 c0 10 	bfextu	r11,r9,0x0,0x10

 // rotate: swap (and read backwards in refresh)
  if (x&1) {
80018316:	e1 db c0 01 	bfextu	r0,r11,0x0,0x1
  cpu_irq_enable();
}

// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);
8001831a:	a1 9b       	lsr	r11,0x1
8001831c:	0e 0b       	add	r11,r7

 // rotate: swap (and read backwards in refresh)
  if (x&1) {
8001831e:	58 00       	cp.w	r0,0
80018320:	e0 81 00 98 	brne	80018450 <screen_string_squeeze+0x220>
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
  } else {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80018324:	f4 0b 07 00 	ld.ub	r0,r10[r11]
80018328:	e1 d0 c0 04 	bfextu	r0,r0,0x0,0x4
8001832c:	f4 0b 0b 00 	st.b	r10[r11],r0
80018330:	2f f9       	sub	r9,-1
80018332:	2f f8       	sub	r8,-1
80018334:	5c 89       	casts.h	r9
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
  //  print_dbg("\r\n char at row: ");
  //  print_dbg_ulong(row);
  for(j=0; j<FONT_CHARH; j++) {
    for(i=0; i<xnum; i++) {
80018336:	f0 0c 18 00 	cp.b	r12,r8
8001833a:	fe 9b ff e6 	brhi	80018306 <screen_string_squeeze+0xd6>
8001833e:	2f f2       	sub	r2,-1
80018340:	2f f4       	sub	r4,-1
80018342:	5c 82       	casts.h	r2
  static const glyph_t * g;
  g = &(font_data[gl - FONT_ASCII_OFFSET]);
  xnum = FONT_CHARW - g->first - g->last;
  //  print_dbg("\r\n char at row: ");
  //  print_dbg_ulong(row);
  for(j=0; j<FONT_CHARH; j++) {
80018344:	58 84       	cp.w	r4,8
80018346:	cb e1       	brne	800182c2 <screen_string_squeeze+0x92>
// draw a string with proportional spacing
U8 screen_string_squeeze(U16 x, U16 l, char *str, U8 a) {
  //  static u8 y;
  y = lines[l];
  while(*str != 0) {
    x += screen_char_squeeze(x, y, *str, a);
80018348:	40 18       	lddsp	r8,sp[0x4]
8001834a:	18 08       	add	r8,r12
8001834c:	5c 88       	casts.h	r8
8001834e:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80018352:	f7 d9 c0 01 	bfextu	r11,r9,0x0,0x1
80018356:	a1 99       	lsr	r9,0x1
80018358:	58 0b       	cp.w	r11,0
8001835a:	e0 81 00 82 	brne	8001845e <screen_string_squeeze+0x22e>
  cpu_irq_enable();
}

// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);
8001835e:	40 4b       	lddsp	r11,sp[0x10]
80018360:	a7 6b       	lsl	r11,0x6
  if (x&1) {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
  } else {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80018362:	12 0b       	add	r11,r9
80018364:	f4 0b 07 0e 	ld.ub	lr,r10[r11]
80018368:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
8001836c:	f4 0b 0b 0e 	st.b	r10[r11],lr
  cpu_irq_enable();
}

// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);
80018370:	40 8b       	lddsp	r11,sp[0x20]
  if (x&1) {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
  } else {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80018372:	12 0b       	add	r11,r9
80018374:	f4 0b 07 0e 	ld.ub	lr,r10[r11]
80018378:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
8001837c:	f4 0b 0b 0e 	st.b	r10[r11],lr
  cpu_irq_enable();
}

// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);
80018380:	40 9b       	lddsp	r11,sp[0x24]
  if (x&1) {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
  } else {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80018382:	12 0b       	add	r11,r9
80018384:	f4 0b 07 0e 	ld.ub	lr,r10[r11]
80018388:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
8001838c:	f4 0b 0b 0e 	st.b	r10[r11],lr
  cpu_irq_enable();
}

// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);
80018390:	fb 1b 00 16 	ld.uh	r11,sp[22]
80018394:	a7 6b       	lsl	r11,0x6
  if (x&1) {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
  } else {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80018396:	12 0b       	add	r11,r9
80018398:	f4 0b 07 0e 	ld.ub	lr,r10[r11]
8001839c:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
800183a0:	f4 0b 0b 0e 	st.b	r10[r11],lr
  cpu_irq_enable();
}

// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);
800183a4:	fb 1b 00 18 	ld.uh	r11,sp[24]
800183a8:	a7 6b       	lsl	r11,0x6
  if (x&1) {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
  } else {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
800183aa:	12 0b       	add	r11,r9
800183ac:	f4 0b 07 0e 	ld.ub	lr,r10[r11]
800183b0:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
800183b4:	f4 0b 0b 0e 	st.b	r10[r11],lr
  cpu_irq_enable();
}

// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);
800183b8:	fb 1b 00 1a 	ld.uh	r11,sp[26]
800183bc:	a7 6b       	lsl	r11,0x6
  if (x&1) {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
  } else {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
800183be:	12 0b       	add	r11,r9
800183c0:	f4 0b 07 0e 	ld.ub	lr,r10[r11]
800183c4:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
800183c8:	f4 0b 0b 0e 	st.b	r10[r11],lr
  cpu_irq_enable();
}

// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);
800183cc:	fb 1b 00 1c 	ld.uh	r11,sp[28]
800183d0:	a7 6b       	lsl	r11,0x6
  if (x&1) {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
  } else {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
800183d2:	12 0b       	add	r11,r9
800183d4:	f4 0b 07 0e 	ld.ub	lr,r10[r11]
800183d8:	fd de c0 04 	bfextu	lr,lr,0x0,0x4
800183dc:	f4 0b 0b 0e 	st.b	r10[r11],lr
  cpu_irq_enable();
}

// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);
800183e0:	fb 1b 00 1e 	ld.uh	r11,sp[30]
800183e4:	a7 6b       	lsl	r11,0x6
800183e6:	f6 09 00 09 	add	r9,r11,r9
  if (x&1) {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
  } else {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
800183ea:	f4 09 07 0b 	ld.ub	r11,r10[r9]
800183ee:	f7 db c0 04 	bfextu	r11,r11,0x0,0x4
800183f2:	f4 09 0b 0b 	st.b	r10[r9],r11
  y = lines[l];
  while(*str != 0) {
    x += screen_char_squeeze(x, y, *str, a);
    zero_col(x, y);
    // extra pixel... TODO: maybe variable spacing here
    x++;
800183f6:	40 2b       	lddsp	r11,sp[0x8]
    str++;
800183f8:	2f f8       	sub	r8,-1
  y = lines[l];
  while(*str != 0) {
    x += screen_char_squeeze(x, y, *str, a);
    zero_col(x, y);
    // extra pixel... TODO: maybe variable spacing here
    x++;
800183fa:	2f fb       	sub	r11,-1
    str++;
800183fc:	5c 88       	casts.h	r8
  y = lines[l];
  while(*str != 0) {
    x += screen_char_squeeze(x, y, *str, a);
    zero_col(x, y);
    // extra pixel... TODO: maybe variable spacing here
    x++;
800183fe:	50 2b       	stdsp	sp[0x8],r11

// draw a string with proportional spacing
U8 screen_string_squeeze(U16 x, U16 l, char *str, U8 a) {
  //  static u8 y;
  y = lines[l];
  while(*str != 0) {
80018400:	50 18       	stdsp	sp[0x4],r8
80018402:	17 88       	ld.ub	r8,r11[0x0]
80018404:	58 08       	cp.w	r8,0
80018406:	fe 91 ff 4b 	brne	8001829c <screen_string_squeeze+0x6c>
8001840a:	e0 6a 19 c4 	mov	r10,6596
8001840e:	95 06       	st.w	r10[0x0],r6
80018410:	e0 6a 19 c8 	mov	r10,6600
80018414:	b4 8c       	st.b	r10[0x0],r12
80018416:	e0 6a 19 bd 	mov	r10,6589
8001841a:	30 88       	mov	r8,8
8001841c:	b4 88       	st.b	r10[0x0],r8
8001841e:	e0 6a 19 bc 	mov	r10,6588
    x++;
    str++;
  }
  refresh = 1;
  return x;
}
80018422:	b4 8c       	st.b	r10[0x0],r12
    zero_col(x, y);
    // extra pixel... TODO: maybe variable spacing here
    x++;
    str++;
  }
  refresh = 1;
80018424:	e0 6a 19 c0 	mov	r10,6592
  return x;
}
80018428:	95 09       	st.w	r10[0x0],r9
    zero_col(x, y);
    // extra pixel... TODO: maybe variable spacing here
    x++;
    str++;
  }
  refresh = 1;
8001842a:	e0 69 19 be 	mov	r9,6590
  return x;
}
8001842e:	b2 88       	st.b	r9[0x0],r8
  pos = (y << COLS_LSHIFT) + (x >> 1);

 // rotate: swap (and read backwards in refresh)
  if (x&1) {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80018430:	40 1c       	lddsp	r12,sp[0x4]
80018432:	30 19       	mov	r9,1
80018434:	e0 68 19 a0 	mov	r8,6560
80018438:	5c 5c       	castu.b	r12
8001843a:	b0 89       	st.b	r8[0x0],r9
8001843c:	2f 6d       	sub	sp,-40
8001843e:	d8 32       	popm	r0-r7,pc
80018440:	f4 0b 07 00 	ld.ub	r0,r10[r11]
80018444:	e0 10 ff f0 	andl	r0,0xfff0
80018448:	02 40       	or	r0,r1
8001844a:	f4 0b 0b 00 	st.b	r10[r11],r0
  cpu_irq_enable();
}

// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);
8001844e:	c5 5b       	rjmp	800182f8 <screen_string_squeeze+0xc8>
80018450:	f4 0b 07 00 	ld.ub	r0,r10[r11]

 // rotate: swap (and read backwards in refresh)
  if (x&1) {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80018454:	e0 10 ff f0 	andl	r0,0xfff0
80018458:	f4 0b 0b 00 	st.b	r10[r11],r0
8001845c:	c4 eb       	rjmp	800182f8 <screen_string_squeeze+0xc8>
8001845e:	40 4e       	lddsp	lr,sp[0x10]
  cpu_irq_enable();
}

// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);
80018460:	a7 6e       	lsl	lr,0x6
80018462:	12 0e       	add	lr,r9

 // rotate: swap (and read backwards in refresh)
  if (x&1) {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80018464:	f4 0e 07 0b 	ld.ub	r11,r10[lr]
80018468:	e0 1b ff f0 	andl	r11,0xfff0
8001846c:	f4 0e 0b 0b 	st.b	r10[lr],r11
  cpu_irq_enable();
}

// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);
80018470:	40 8e       	lddsp	lr,sp[0x20]
80018472:	12 0e       	add	lr,r9

 // rotate: swap (and read backwards in refresh)
  if (x&1) {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80018474:	f4 0e 07 0b 	ld.ub	r11,r10[lr]
80018478:	e0 1b ff f0 	andl	r11,0xfff0
8001847c:	f4 0e 0b 0b 	st.b	r10[lr],r11
  cpu_irq_enable();
}

// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);
80018480:	40 9e       	lddsp	lr,sp[0x24]
80018482:	12 0e       	add	lr,r9
80018484:	f4 0e 07 0b 	ld.ub	r11,r10[lr]

 // rotate: swap (and read backwards in refresh)
  if (x&1) {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80018488:	e0 1b ff f0 	andl	r11,0xfff0
8001848c:	f4 0e 0b 0b 	st.b	r10[lr],r11
80018490:	fb 1e 00 16 	ld.uh	lr,sp[22]
  cpu_irq_enable();
}

// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);
80018494:	a7 6e       	lsl	lr,0x6
80018496:	12 0e       	add	lr,r9
80018498:	f4 0e 07 0b 	ld.ub	r11,r10[lr]

 // rotate: swap (and read backwards in refresh)
  if (x&1) {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
8001849c:	e0 1b ff f0 	andl	r11,0xfff0
800184a0:	f4 0e 0b 0b 	st.b	r10[lr],r11
800184a4:	fb 1e 00 18 	ld.uh	lr,sp[24]
  cpu_irq_enable();
}

// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);
800184a8:	a7 6e       	lsl	lr,0x6
800184aa:	12 0e       	add	lr,r9
800184ac:	f4 0e 07 0b 	ld.ub	r11,r10[lr]

 // rotate: swap (and read backwards in refresh)
  if (x&1) {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
800184b0:	e0 1b ff f0 	andl	r11,0xfff0
800184b4:	f4 0e 0b 0b 	st.b	r10[lr],r11
800184b8:	fb 1e 00 1a 	ld.uh	lr,sp[26]
  cpu_irq_enable();
}

// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);
800184bc:	a7 6e       	lsl	lr,0x6
800184be:	12 0e       	add	lr,r9
800184c0:	f4 0e 07 0b 	ld.ub	r11,r10[lr]

 // rotate: swap (and read backwards in refresh)
  if (x&1) {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
800184c4:	e0 1b ff f0 	andl	r11,0xfff0
800184c8:	f4 0e 0b 0b 	st.b	r10[lr],r11
800184cc:	fb 1e 00 1c 	ld.uh	lr,sp[28]
  cpu_irq_enable();
}

// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);
800184d0:	a7 6e       	lsl	lr,0x6
800184d2:	12 0e       	add	lr,r9
800184d4:	f4 0e 07 0b 	ld.ub	r11,r10[lr]
800184d8:	e0 1b ff f0 	andl	r11,0xfff0

 // rotate: swap (and read backwards in refresh)
  if (x&1) {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
800184dc:	f4 0e 0b 0b 	st.b	r10[lr],r11
800184e0:	fb 1b 00 1e 	ld.uh	r11,sp[30]
800184e4:	a7 6b       	lsl	r11,0x6
800184e6:	f6 09 00 09 	add	r9,r11,r9
800184ea:	f4 09 07 0b 	ld.ub	r11,r10[r9]
800184ee:	e0 1b ff f0 	andl	r11,0xfff0
800184f2:	f4 09 0b 0b 	st.b	r10[r9],r11
800184f6:	c8 0b       	rjmp	800183f6 <screen_string_squeeze+0x1c6>
800184f8:	80 02       	ld.sh	r2,r0[0x0]
800184fa:	27 5c       	sub	r12,117
800184fc:	80 02       	ld.sh	r2,r0[0x0]
800184fe:	23 6a       	sub	r10,54

80018500 <screen_string>:
80018500:	d4 01       	pushm	lr
80018502:	5c 7b       	castu.h	r11
80018504:	5c 7c       	castu.h	r12
80018506:	c9 5e       	rcall	80018230 <screen_string_squeeze>
80018508:	d8 02       	popm	pc
8001850a:	d7 03       	nop

8001850c <screen_line>:
8001850c:	eb cd 40 e0 	pushm	r5-r7,lr
80018510:	ef db c0 10 	bfextu	r7,r11,0x0,0x10
  return x;
}

// draw a string (default) 
inline U8 screen_string(U16 x, U16 l, char *str, U8 a) {
  return screen_string_squeeze(x, l, str, a);
80018514:	5c 7c       	castu.h	r12
80018516:	0e 9b       	mov	r11,r7
80018518:	c8 ce       	rcall	80018230 <screen_string_squeeze>
8001851a:	4a 58       	lddpc	r8,800185ac <screen_line+0xa0>
}

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 l) {
  U8 i, j;
  const u8 y = lines[l];
8001851c:	30 05       	mov	r5,0
  for(i=x; i<NCOLS; i++) {
8001851e:	f0 07 07 06 	ld.ub	r6,r8[r7]
}

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 l) {
  U8 i, j;
  const u8 y = lines[l];
80018522:	ea 0c 18 00 	cp.b	r12,r5
  for(i=x; i<NCOLS; i++) {
80018526:	c2 45       	brlt	8001856e <screen_line+0x62>
80018528:	ec ce ff f9 	sub	lr,r6,-7
8001852c:	e0 6a 19 cc 	mov	r10,6604
80018530:	ef dc c0 10 	bfextu	r7,r12,0x0,0x10
80018534:	f1 d7 c0 01 	bfextu	r8,r7,0x0,0x1
80018538:	a1 97       	lsr	r7,0x1
8001853a:	58 08       	cp.w	r8,0
8001853c:	c2 11       	brne	8001857e <screen_line+0x72>
8001853e:	0c 9b       	mov	r11,r6
80018540:	0c 99       	mov	r9,r6
  cpu_irq_enable();
}

// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);
80018542:	f6 08 15 06 	lsl	r8,r11,0x6
80018546:	0e 08       	add	r8,r7
  if (x&1) {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
  } else {
    screen[pos] &= 0x0f;
    screen[pos] |= (a << 4);
80018548:	f4 08 07 0b 	ld.ub	r11,r10[r8]
8001854c:	f7 db c0 04 	bfextu	r11,r11,0x0,0x4
80018550:	f4 08 0b 0b 	st.b	r10[r8],r11
// fill a line with blank space to end
void screen_blank_line(U16 x, U16 l) {
  U8 i, j;
  const u8 y = lines[l];
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(FONT_CHARH + y); j++) {
80018554:	2f f9       	sub	r9,-1
80018556:	5c 59       	castu.b	r9
80018558:	12 9b       	mov	r11,r9
8001855a:	12 3e       	cp.w	lr,r9
8001855c:	cf 34       	brge	80018542 <screen_line+0x36>

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 l) {
  U8 i, j;
  const u8 y = lines[l];
  for(i=x; i<NCOLS; i++) {
8001855e:	2f fc       	sub	r12,-1
80018560:	5c 5c       	castu.b	r12
80018562:	ea 0c 18 00 	cp.b	r12,r5
80018566:	ce 54       	brge	80018530 <screen_line+0x24>
    for(j=y; j<(FONT_CHARH + y); j++) {
80018568:	e0 69 19 c0 	mov	r9,6592
  x = screen_string(x, l, str, hl);
  screen_blank_line(x, l);
  //// test
  //  print_dbg("\r\n");
  //  print_dbg(str);
  refresh = 1;
8001856c:	93 08       	st.w	r9[0x0],r8
8001856e:	30 19       	mov	r9,1
  return NCOLS;
}
80018570:	e0 68 19 a0 	mov	r8,6560
  x = screen_string(x, l, str, hl);
  screen_blank_line(x, l);
  //// test
  //  print_dbg("\r\n");
  //  print_dbg(str);
  refresh = 1;
80018574:	e0 6c 00 80 	mov	r12,128
  return NCOLS;
}
80018578:	b0 89       	st.b	r8[0x0],r9

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 l) {
  U8 i, j;
  const u8 y = lines[l];
  for(i=x; i<NCOLS; i++) {
8001857a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
  cpu_irq_enable();
}

// draw a single pixel
void screen_pixel(U16 x, U16 y, U8 a) {
  pos = (y << COLS_LSHIFT) + (x >> 1);
8001857e:	0c 9b       	mov	r11,r6
80018580:	0c 99       	mov	r9,r6
80018582:	f6 08 15 06 	lsl	r8,r11,0x6

 // rotate: swap (and read backwards in refresh)
  if (x&1) {
    screen[pos] &= 0xf0;
    screen[pos] |= (a & 0x0f);
80018586:	0e 08       	add	r8,r7
80018588:	f4 08 07 0b 	ld.ub	r11,r10[r8]
8001858c:	e0 1b ff f0 	andl	r11,0xfff0
// fill a line with blank space to end
void screen_blank_line(U16 x, U16 l) {
  U8 i, j;
  const u8 y = lines[l];
  for(i=x; i<NCOLS; i++) {
    for(j=y; j<(FONT_CHARH + y); j++) {
80018590:	f4 08 0b 0b 	st.b	r10[r8],r11
80018594:	2f f9       	sub	r9,-1
80018596:	5c 59       	castu.b	r9
80018598:	12 9b       	mov	r11,r9
8001859a:	1c 39       	cp.w	r9,lr

// fill a line with blank space to end
void screen_blank_line(U16 x, U16 l) {
  U8 i, j;
  const u8 y = lines[l];
  for(i=x; i<NCOLS; i++) {
8001859c:	fe 9a ff f3 	brle	80018582 <screen_line+0x76>
800185a0:	2f fc       	sub	r12,-1
800185a2:	5c 5c       	castu.b	r12
800185a4:	ea 0c 18 00 	cp.b	r12,r5
800185a8:	cc 44       	brge	80018530 <screen_line+0x24>
800185aa:	cd fb       	rjmp	80018568 <screen_line+0x5c>
800185ac:	80 02       	ld.sh	r2,r0[0x0]
800185ae:	27 5c       	sub	r12,117

800185b0 <screen_refresh>:
800185b0:	eb cd 40 c0 	pushm	r6-r7,lr
800185b4:	d3 03       	ssrf	0x10
800185b6:	30 0b       	mov	r11,0
800185b8:	fe 7c 28 00 	mov	r12,-55296
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
800185bc:	fe b0 d2 a0 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800185c0:	30 9c       	mov	r12,9
800185c2:	fe b0 d0 ab 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
800185c6:	31 5b       	mov	r11,21
800185c8:	fe 7c 28 00 	mov	r12,-55296
800185cc:	fe b0 d3 2d 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
800185d0:	30 0b       	mov	r11,0
800185d2:	fe 7c 28 00 	mov	r12,-55296
800185d6:	fe b0 d2 bb 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
800185da:	30 0b       	mov	r11,0
800185dc:	fe 7c 28 00 	mov	r12,-55296
800185e0:	fe b0 d2 8e 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800185e4:	30 9c       	mov	r12,9
800185e6:	fe b0 d0 99 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
800185ea:	30 0b       	mov	r11,0
800185ec:	fe 7c 28 00 	mov	r12,-55296
800185f0:	fe b0 d3 1b 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
800185f4:	30 0b       	mov	r11,0
800185f6:	fe 7c 28 00 	mov	r12,-55296
800185fa:	fe b0 d2 a9 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
800185fe:	30 0b       	mov	r11,0
80018600:	fe 7c 28 00 	mov	r12,-55296
80018604:	fe b0 d2 7c 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80018608:	30 9c       	mov	r12,9
8001860a:	fe b0 d0 87 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
8001860e:	33 fb       	mov	r11,63
80018610:	fe 7c 28 00 	mov	r12,-55296
80018614:	fe b0 d3 09 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80018618:	30 0b       	mov	r11,0
8001861a:	fe 7c 28 00 	mov	r12,-55296
8001861e:	fe b0 d2 97 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80018622:	30 0b       	mov	r11,0
80018624:	fe 7c 28 00 	mov	r12,-55296
80018628:	fe b0 d2 6a 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
8001862c:	30 9c       	mov	r12,9
8001862e:	fe b0 d0 75 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80018632:	37 5b       	mov	r11,117
80018634:	fe 7c 28 00 	mov	r12,-55296
80018638:	fe b0 d2 f7 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
8001863c:	30 0b       	mov	r11,0
8001863e:	fe 7c 28 00 	mov	r12,-55296
80018642:	fe b0 d2 85 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80018646:	30 0b       	mov	r11,0
80018648:	fe 7c 28 00 	mov	r12,-55296
8001864c:	fe b0 d2 58 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80018650:	30 9c       	mov	r12,9
80018652:	fe b0 d0 63 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80018656:	30 0b       	mov	r11,0
80018658:	fe 7c 28 00 	mov	r12,-55296
8001865c:	fe b0 d2 e5 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80018660:	30 0b       	mov	r11,0
80018662:	fe 7c 28 00 	mov	r12,-55296
80018666:	fe b0 d2 73 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
8001866a:	30 0b       	mov	r11,0
8001866c:	fe 7c 28 00 	mov	r12,-55296
80018670:	fe b0 d2 46 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80018674:	30 9c       	mov	r12,9
80018676:	fe b0 d0 51 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
8001867a:	33 fb       	mov	r11,63
8001867c:	fe 7c 28 00 	mov	r12,-55296
80018680:	fe b0 d2 d3 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80018684:	30 0b       	mov	r11,0
80018686:	fe 7c 28 00 	mov	r12,-55296
8001868a:	fe b0 d2 61 	rcall	80012b4c <spi_unselectChip>
  write_command(0x75);
  write_command(0);
  write_command(63);

  // pull register select high to write data
  gpio_set_gpio_pin(OLED_REGISTER_PIN);
8001868e:	30 9c       	mov	r12,9
80018690:	fe b0 d0 37 	rcall	800126fe <gpio_set_gpio_pin>
  Enable_global_interrupt();
}


// send screen buffer contents to OLED
void screen_refresh(void) {
80018694:	e0 66 19 cc 	mov	r6,6604
  write_command(0);
  write_command(63);

  // pull register select high to write data
  gpio_set_gpio_pin(OLED_REGISTER_PIN);
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80018698:	30 0b       	mov	r11,0
8001869a:	fe 7c 28 00 	mov	r12,-55296
8001869e:	fe b0 d2 2f 	rcall	80012afc <spi_selectChip>
  Enable_global_interrupt();
}


// send screen buffer contents to OLED
void screen_refresh(void) {
800186a2:	ec c7 f0 01 	sub	r7,r6,-4095
  gpio_set_gpio_pin(OLED_REGISTER_PIN);
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);

  pScreen=&(screen[GRAM_BYTES_1]);
  for(i=0; i<GRAM_BYTES; i++) {     
    spi_write(OLED_SPI, *pScreen);
800186a6:	20 16       	sub	r6,1
800186a8:	0f 8b       	ld.ub	r11,r7[0x0]
800186aa:	fe 7c 28 00 	mov	r12,-55296
800186ae:	20 17       	sub	r7,1
800186b0:	fe b0 d2 bb 	rcall	80012c26 <spi_write>
  // pull register select high to write data
  gpio_set_gpio_pin(OLED_REGISTER_PIN);
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);

  pScreen=&(screen[GRAM_BYTES_1]);
  for(i=0; i<GRAM_BYTES; i++) {     
800186b4:	0c 37       	cp.w	r7,r6
    spi_write(OLED_SPI, *pScreen);
    pScreen--;
  }
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
800186b6:	cf 91       	brne	800186a8 <screen_refresh+0xf8>
800186b8:	30 0b       	mov	r11,0
800186ba:	fe 7c 28 00 	mov	r12,-55296
800186be:	fe b0 d2 47 	rcall	80012b4c <spi_unselectChip>
  cpu_irq_enable();
}
800186c2:	d5 03       	csrf	0x10
800186c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

800186c8 <init_oled>:
800186c8:	eb cd 40 e0 	pushm	r5-r7,lr
800186cc:	20 2d       	sub	sp,8
800186ce:	d3 03       	ssrf	0x10
800186d0:	e0 68 fb c5 	mov	r8,64453
800186d4:	30 09       	mov	r9,0
800186d6:	fa e9 00 00 	st.d	sp[0],r8
800186da:	fa e8 00 00 	ld.d	r8,sp[0]
800186de:	58 08       	cp.w	r8,0
void init_oled(void) {
  U32 i;
  volatile u64 delay;
  //  cpu_irq_disable();
  Disable_global_interrupt();
  delay = FCPU_HZ >> 10 ; while(delay > 0) { delay--; }
800186e0:	5c 29       	cpc	r9
800186e2:	c0 f0       	breq	80018700 <init_oled+0x38>
800186e4:	3f fa       	mov	r10,-1
800186e6:	3f fb       	mov	r11,-1
800186e8:	fa e8 00 00 	ld.d	r8,sp[0]
800186ec:	14 08       	add	r8,r10
800186ee:	f2 0b 00 49 	adc	r9,r9,r11
800186f2:	fa e9 00 00 	st.d	sp[0],r8
800186f6:	fa e8 00 00 	ld.d	r8,sp[0]
800186fa:	58 08       	cp.w	r8,0
800186fc:	5c 29       	cpc	r9
800186fe:	cf 51       	brne	800186e8 <init_oled+0x20>
  // flip the reset pin
  gpio_set_gpio_pin(OLED_RESET_PIN);
80018700:	30 7c       	mov	r12,7
80018702:	fe b0 cf fe 	rcall	800126fe <gpio_set_gpio_pin>
  //  delay_ms(1);
  delay = FCPU_HZ >> 10 ; while(delay > 0) { delay--; }
80018706:	e0 68 fb c5 	mov	r8,64453
8001870a:	30 09       	mov	r9,0
8001870c:	fa e9 00 00 	st.d	sp[0],r8
80018710:	fa e8 00 00 	ld.d	r8,sp[0]
80018714:	58 08       	cp.w	r8,0
80018716:	5c 29       	cpc	r9
80018718:	c0 f0       	breq	80018736 <init_oled+0x6e>
8001871a:	3f fa       	mov	r10,-1
8001871c:	3f fb       	mov	r11,-1
8001871e:	fa e8 00 00 	ld.d	r8,sp[0]
80018722:	14 08       	add	r8,r10
80018724:	f2 0b 00 49 	adc	r9,r9,r11
80018728:	fa e9 00 00 	st.d	sp[0],r8
8001872c:	fa e8 00 00 	ld.d	r8,sp[0]
80018730:	58 08       	cp.w	r8,0
80018732:	5c 29       	cpc	r9
80018734:	cf 51       	brne	8001871e <init_oled+0x56>
  gpio_clr_gpio_pin(OLED_RESET_PIN);
80018736:	30 7c       	mov	r12,7
80018738:	fe b0 cf f0 	rcall	80012718 <gpio_clr_gpio_pin>
  // delay_ms(1);
  delay=FCPU_HZ >> 10; while(delay > 0) { delay--; }
8001873c:	e0 68 fb c5 	mov	r8,64453
80018740:	30 09       	mov	r9,0
80018742:	fa e9 00 00 	st.d	sp[0],r8
80018746:	fa e8 00 00 	ld.d	r8,sp[0]
8001874a:	58 08       	cp.w	r8,0
8001874c:	5c 29       	cpc	r9
8001874e:	c0 f0       	breq	8001876c <init_oled+0xa4>
80018750:	3f fa       	mov	r10,-1
80018752:	3f fb       	mov	r11,-1
80018754:	fa e8 00 00 	ld.d	r8,sp[0]
80018758:	14 08       	add	r8,r10
8001875a:	f2 0b 00 49 	adc	r9,r9,r11
8001875e:	fa e9 00 00 	st.d	sp[0],r8
80018762:	fa e8 00 00 	ld.d	r8,sp[0]
80018766:	58 08       	cp.w	r8,0
80018768:	5c 29       	cpc	r9
8001876a:	cf 51       	brne	80018754 <init_oled+0x8c>
  gpio_set_gpio_pin(OLED_RESET_PIN);
8001876c:	30 7c       	mov	r12,7
8001876e:	fe b0 cf c8 	rcall	800126fe <gpio_set_gpio_pin>
  //delay_ms(10);
  delay = FCPU_HZ >> 8; while(delay > 0) { delay--; }
80018772:	e2 78 ef 14 	mov	r8,257812
80018776:	30 09       	mov	r9,0
80018778:	fa e9 00 00 	st.d	sp[0],r8
8001877c:	fa e8 00 00 	ld.d	r8,sp[0]
80018780:	58 08       	cp.w	r8,0
80018782:	5c 29       	cpc	r9
80018784:	c0 f0       	breq	800187a2 <init_oled+0xda>
80018786:	3f fa       	mov	r10,-1
80018788:	3f fb       	mov	r11,-1
8001878a:	fa e8 00 00 	ld.d	r8,sp[0]
8001878e:	14 08       	add	r8,r10
80018790:	f2 0b 00 49 	adc	r9,r9,r11
80018794:	fa e9 00 00 	st.d	sp[0],r8
80018798:	fa e8 00 00 	ld.d	r8,sp[0]
8001879c:	58 08       	cp.w	r8,0
8001879e:	5c 29       	cpc	r9
800187a0:	cf 51       	brne	8001878a <init_oled+0xc2>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
800187a2:	30 0b       	mov	r11,0
800187a4:	fe 7c 28 00 	mov	r12,-55296
800187a8:	fe b0 d1 aa 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800187ac:	30 9c       	mov	r12,9
800187ae:	fe b0 cf b5 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
800187b2:	e0 6b 00 ae 	mov	r11,174
800187b6:	fe 7c 28 00 	mov	r12,-55296
800187ba:	fe b0 d2 36 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
800187be:	30 0b       	mov	r11,0
800187c0:	fe 7c 28 00 	mov	r12,-55296
800187c4:	fe b0 d1 c4 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
800187c8:	30 0b       	mov	r11,0
800187ca:	fe 7c 28 00 	mov	r12,-55296
800187ce:	fe b0 d1 97 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800187d2:	30 9c       	mov	r12,9
800187d4:	fe b0 cf a2 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
800187d8:	e0 6b 00 b3 	mov	r11,179
800187dc:	fe 7c 28 00 	mov	r12,-55296
800187e0:	fe b0 d2 23 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
800187e4:	30 0b       	mov	r11,0
800187e6:	fe 7c 28 00 	mov	r12,-55296
800187ea:	fe b0 d1 b1 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
800187ee:	30 0b       	mov	r11,0
800187f0:	fe 7c 28 00 	mov	r12,-55296
800187f4:	fe b0 d1 84 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800187f8:	30 9c       	mov	r12,9
800187fa:	fe b0 cf 8f 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
800187fe:	e0 6b 00 91 	mov	r11,145
80018802:	fe 7c 28 00 	mov	r12,-55296
80018806:	fe b0 d2 10 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
8001880a:	30 0b       	mov	r11,0
8001880c:	fe 7c 28 00 	mov	r12,-55296
80018810:	fe b0 d1 9e 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80018814:	30 0b       	mov	r11,0
80018816:	fe 7c 28 00 	mov	r12,-55296
8001881a:	fe b0 d1 71 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
8001881e:	30 9c       	mov	r12,9
80018820:	fe b0 cf 7c 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80018824:	e0 6b 00 a8 	mov	r11,168
80018828:	fe 7c 28 00 	mov	r12,-55296
8001882c:	fe b0 d1 fd 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80018830:	30 0b       	mov	r11,0
80018832:	fe 7c 28 00 	mov	r12,-55296
80018836:	fe b0 d1 8b 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
8001883a:	30 0b       	mov	r11,0
8001883c:	fe 7c 28 00 	mov	r12,-55296
80018840:	fe b0 d1 5e 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80018844:	30 9c       	mov	r12,9
80018846:	fe b0 cf 69 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
8001884a:	33 fb       	mov	r11,63
8001884c:	fe 7c 28 00 	mov	r12,-55296
80018850:	fe b0 d1 eb 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80018854:	30 0b       	mov	r11,0
80018856:	fe 7c 28 00 	mov	r12,-55296
8001885a:	fe b0 d1 79 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
8001885e:	30 0b       	mov	r11,0
80018860:	fe 7c 28 00 	mov	r12,-55296
80018864:	fe b0 d1 4c 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80018868:	30 9c       	mov	r12,9
8001886a:	fe b0 cf 57 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
8001886e:	e0 6b 00 86 	mov	r11,134
80018872:	fe 7c 28 00 	mov	r12,-55296
80018876:	fe b0 d1 d8 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
8001887a:	30 0b       	mov	r11,0
8001887c:	fe 7c 28 00 	mov	r12,-55296
80018880:	fe b0 d1 66 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80018884:	30 0b       	mov	r11,0
80018886:	fe 7c 28 00 	mov	r12,-55296
8001888a:	fe b0 d1 39 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
8001888e:	30 9c       	mov	r12,9
80018890:	fe b0 cf 44 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80018894:	e0 6b 00 81 	mov	r11,129
80018898:	fe 7c 28 00 	mov	r12,-55296
8001889c:	fe b0 d1 c5 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
800188a0:	30 0b       	mov	r11,0
800188a2:	fe 7c 28 00 	mov	r12,-55296
800188a6:	fe b0 d1 53 	rcall	80012b4c <spi_unselectChip>
  write_command(0x91);
  write_command(0xA8);	// multiplex
  write_command(0x3F);
  write_command(0x86);	// full current range
  write_command(0x81);	// contrast to full
  write_command(0x7F);
800188aa:	37 fc       	mov	r12,127
800188ac:	fe b0 fb ae 	rcall	80018008 <write_command>
  write_command(0xB2);	// frame freq
800188b0:	e0 6c 00 b2 	mov	r12,178
800188b4:	fe b0 fb aa 	rcall	80018008 <write_command>
  write_command(0x51);
800188b8:	35 1c       	mov	r12,81
800188ba:	fe b0 fb a7 	rcall	80018008 <write_command>
  write_command(0xA8);	// multiplex
800188be:	e0 6c 00 a8 	mov	r12,168
800188c2:	fe b0 fb a3 	rcall	80018008 <write_command>
  write_command(0x3F);
800188c6:	33 fc       	mov	r12,63
800188c8:	fe b0 fb a0 	rcall	80018008 <write_command>
  write_command(0xBC);	// precharge
800188cc:	e0 6c 00 bc 	mov	r12,188
800188d0:	fe b0 fb 9c 	rcall	80018008 <write_command>
  write_command(0x10);
800188d4:	31 0c       	mov	r12,16
800188d6:	fe b0 fb 99 	rcall	80018008 <write_command>
  write_command(0xBE);	// voltage
800188da:	e0 6c 00 be 	mov	r12,190
800188de:	fe b0 fb 95 	rcall	80018008 <write_command>
  write_command(0x1C);
800188e2:	31 cc       	mov	r12,28
800188e4:	fe b0 fb 92 	rcall	80018008 <write_command>
  write_command(0xAD);	// dcdc
800188e8:	e0 6c 00 ad 	mov	r12,173
800188ec:	fe b0 fb 8e 	rcall	80018008 <write_command>
  write_command(0x02);
800188f0:	30 2c       	mov	r12,2
800188f2:	fe b0 fb 8b 	rcall	80018008 <write_command>
  write_command(0xA0);	// remap
800188f6:	e0 6c 00 a0 	mov	r12,160
800188fa:	fe b0 fb 87 	rcall	80018008 <write_command>
  write_command(0x50);
800188fe:	35 0c       	mov	r12,80
80018900:	fe b0 fb 84 	rcall	80018008 <write_command>
  write_command(0xA1);	// start
80018904:	e0 6c 00 a1 	mov	r12,161
80018908:	fe b0 fb 80 	rcall	80018008 <write_command>
  write_command(0x0);
8001890c:	30 0c       	mov	r12,0
8001890e:	fe b0 fb 7d 	rcall	80018008 <write_command>
  write_command(0xA2);	// offset
80018912:	e0 6c 00 a2 	mov	r12,162
80018916:	fe b0 fb 79 	rcall	80018008 <write_command>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
8001891a:	30 0b       	mov	r11,0
8001891c:	fe 7c 28 00 	mov	r12,-55296
80018920:	fe b0 d0 ee 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80018924:	30 9c       	mov	r12,9
80018926:	fe b0 ce f9 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
8001892a:	34 cb       	mov	r11,76
8001892c:	fe 7c 28 00 	mov	r12,-55296
80018930:	fe b0 d1 7b 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80018934:	30 0b       	mov	r11,0
80018936:	fe 7c 28 00 	mov	r12,-55296
8001893a:	fe b0 d1 09 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
8001893e:	30 0b       	mov	r11,0
80018940:	fe 7c 28 00 	mov	r12,-55296
80018944:	fe b0 d0 dc 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80018948:	30 9c       	mov	r12,9
8001894a:	fe b0 ce e7 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
8001894e:	e0 6b 00 b1 	mov	r11,177
80018952:	fe 7c 28 00 	mov	r12,-55296
80018956:	fe b0 d1 68 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
8001895a:	30 0b       	mov	r11,0
8001895c:	fe 7c 28 00 	mov	r12,-55296
80018960:	fe b0 d0 f6 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80018964:	30 0b       	mov	r11,0
80018966:	fe 7c 28 00 	mov	r12,-55296
8001896a:	fe b0 d0 c9 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
8001896e:	30 9c       	mov	r12,9
80018970:	fe b0 ce d4 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80018974:	35 5b       	mov	r11,85
80018976:	fe 7c 28 00 	mov	r12,-55296
8001897a:	fe b0 d1 56 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
8001897e:	30 0b       	mov	r11,0
80018980:	fe 7c 28 00 	mov	r12,-55296
80018984:	fe b0 d0 e4 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80018988:	30 0b       	mov	r11,0
8001898a:	fe 7c 28 00 	mov	r12,-55296
8001898e:	fe b0 d0 b7 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80018992:	30 9c       	mov	r12,9
80018994:	fe b0 ce c2 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80018998:	e0 6b 00 b4 	mov	r11,180
8001899c:	fe 7c 28 00 	mov	r12,-55296
800189a0:	fe b0 d1 43 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
800189a4:	30 0b       	mov	r11,0
800189a6:	fe 7c 28 00 	mov	r12,-55296
800189aa:	fe b0 d0 d1 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
800189ae:	30 0b       	mov	r11,0
800189b0:	fe 7c 28 00 	mov	r12,-55296
800189b4:	fe b0 d0 a4 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800189b8:	30 9c       	mov	r12,9
800189ba:	fe b0 ce af 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
800189be:	30 2b       	mov	r11,2
800189c0:	fe 7c 28 00 	mov	r12,-55296
800189c4:	fe b0 d1 31 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
800189c8:	30 0b       	mov	r11,0
800189ca:	fe 7c 28 00 	mov	r12,-55296
800189ce:	fe b0 d0 bf 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
800189d2:	30 0b       	mov	r11,0
800189d4:	fe 7c 28 00 	mov	r12,-55296
800189d8:	fe b0 d0 92 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
800189dc:	30 9c       	mov	r12,9
800189de:	fe b0 ce 9d 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
800189e2:	e0 6b 00 b0 	mov	r11,176
800189e6:	fe 7c 28 00 	mov	r12,-55296
800189ea:	fe b0 d1 1e 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
800189ee:	30 0b       	mov	r11,0
800189f0:	fe 7c 28 00 	mov	r12,-55296
800189f4:	fe b0 d0 ac 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
800189f8:	30 0b       	mov	r11,0
800189fa:	fe 7c 28 00 	mov	r12,-55296
800189fe:	fe b0 d0 7f 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80018a02:	30 9c       	mov	r12,9
80018a04:	fe b0 ce 8a 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80018a08:	32 8b       	mov	r11,40
80018a0a:	fe 7c 28 00 	mov	r12,-55296
80018a0e:	fe b0 d1 0c 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80018a12:	30 0b       	mov	r11,0
80018a14:	fe 7c 28 00 	mov	r12,-55296
80018a18:	fe b0 d0 9a 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80018a1c:	30 0b       	mov	r11,0
80018a1e:	fe 7c 28 00 	mov	r12,-55296
80018a22:	fe b0 d0 6d 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80018a26:	30 9c       	mov	r12,9
80018a28:	fe b0 ce 78 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80018a2c:	e0 6b 00 bf 	mov	r11,191
80018a30:	fe 7c 28 00 	mov	r12,-55296
80018a34:	fe b0 d0 f9 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80018a38:	30 0b       	mov	r11,0
80018a3a:	fe 7c 28 00 	mov	r12,-55296
80018a3e:	fe b0 d0 87 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80018a42:	30 0b       	mov	r11,0
80018a44:	fe 7c 28 00 	mov	r12,-55296
80018a48:	fe b0 d0 5a 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80018a4c:	30 9c       	mov	r12,9
80018a4e:	fe b0 ce 65 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80018a52:	30 fb       	mov	r11,15
80018a54:	fe 7c 28 00 	mov	r12,-55296
80018a58:	fe b0 d0 e7 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80018a5c:	30 0b       	mov	r11,0
80018a5e:	fe 7c 28 00 	mov	r12,-55296
80018a62:	fe b0 d0 75 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80018a66:	30 0b       	mov	r11,0
80018a68:	fe 7c 28 00 	mov	r12,-55296
80018a6c:	fe b0 d0 48 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80018a70:	30 9c       	mov	r12,9
80018a72:	fe b0 ce 53 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80018a76:	e0 6b 00 a4 	mov	r11,164
80018a7a:	fe 7c 28 00 	mov	r12,-55296
80018a7e:	fe b0 d0 d4 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80018a82:	30 0b       	mov	r11,0
80018a84:	fe 7c 28 00 	mov	r12,-55296
80018a88:	fe b0 d0 62 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80018a8c:	30 0b       	mov	r11,0
80018a8e:	fe 7c 28 00 	mov	r12,-55296
80018a92:	fe b0 d0 35 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80018a96:	30 9c       	mov	r12,9
80018a98:	fe b0 ce 40 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80018a9c:	e0 6b 00 b8 	mov	r11,184
80018aa0:	fe 7c 28 00 	mov	r12,-55296
80018aa4:	fe b0 d0 c1 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80018aa8:	30 0b       	mov	r11,0
80018aaa:	fe 7c 28 00 	mov	r12,-55296
80018aae:	fe b0 d0 4f 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80018ab2:	30 0b       	mov	r11,0
80018ab4:	fe 7c 28 00 	mov	r12,-55296
80018ab8:	fe b0 d0 22 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80018abc:	30 9c       	mov	r12,9
80018abe:	fe b0 ce 2d 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80018ac2:	30 1b       	mov	r11,1
80018ac4:	fe 7c 28 00 	mov	r12,-55296
80018ac8:	fe b0 d0 af 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80018acc:	30 0b       	mov	r11,0
80018ace:	fe 7c 28 00 	mov	r12,-55296
80018ad2:	fe b0 d0 3d 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80018ad6:	30 0b       	mov	r11,0
80018ad8:	fe 7c 28 00 	mov	r12,-55296
80018adc:	fe b0 d0 10 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80018ae0:	30 9c       	mov	r12,9
80018ae2:	fe b0 ce 1b 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80018ae6:	31 1b       	mov	r11,17
80018ae8:	fe 7c 28 00 	mov	r12,-55296
80018aec:	fe b0 d0 9d 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80018af0:	30 0b       	mov	r11,0
80018af2:	fe 7c 28 00 	mov	r12,-55296
80018af6:	fe b0 d0 2b 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80018afa:	30 0b       	mov	r11,0
80018afc:	fe 7c 28 00 	mov	r12,-55296
80018b00:	fe b0 cf fe 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80018b04:	30 9c       	mov	r12,9
80018b06:	fe b0 ce 09 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80018b0a:	32 2b       	mov	r11,34
80018b0c:	fe 7c 28 00 	mov	r12,-55296
80018b10:	fe b0 d0 8b 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80018b14:	30 0b       	mov	r11,0
80018b16:	fe 7c 28 00 	mov	r12,-55296
80018b1a:	fe b0 d0 19 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80018b1e:	30 0b       	mov	r11,0
80018b20:	fe 7c 28 00 	mov	r12,-55296
80018b24:	fe b0 cf ec 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80018b28:	30 9c       	mov	r12,9
80018b2a:	fe b0 cd f7 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80018b2e:	33 2b       	mov	r11,50
80018b30:	fe 7c 28 00 	mov	r12,-55296
80018b34:	fe b0 d0 79 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80018b38:	30 0b       	mov	r11,0
80018b3a:	fe 7c 28 00 	mov	r12,-55296
80018b3e:	fe b0 d0 07 	rcall	80012b4c <spi_unselectChip>
  write_command(0xB8);		// greyscale table
  write_command(0x01);
  write_command(0x11);
  write_command(0x22);
  write_command(0x32);
  write_command(0x43);
80018b42:	34 3c       	mov	r12,67
80018b44:	fe b0 fa 62 	rcall	80018008 <write_command>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80018b48:	30 0b       	mov	r11,0
80018b4a:	fe 7c 28 00 	mov	r12,-55296
80018b4e:	fe b0 cf d7 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80018b52:	30 9c       	mov	r12,9
80018b54:	fe b0 cd e2 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80018b58:	35 4b       	mov	r11,84
80018b5a:	fe 7c 28 00 	mov	r12,-55296
80018b5e:	fe b0 d0 64 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80018b62:	30 0b       	mov	r11,0
80018b64:	fe 7c 28 00 	mov	r12,-55296
80018b68:	fe b0 cf f2 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80018b6c:	30 0b       	mov	r11,0
80018b6e:	fe 7c 28 00 	mov	r12,-55296
80018b72:	fe b0 cf c5 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80018b76:	30 9c       	mov	r12,9
80018b78:	fe b0 cd d0 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80018b7c:	36 5b       	mov	r11,101
80018b7e:	fe 7c 28 00 	mov	r12,-55296
80018b82:	fe b0 d0 52 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80018b86:	30 0b       	mov	r11,0
80018b88:	fe 7c 28 00 	mov	r12,-55296
80018b8c:	fe b0 cf e0 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80018b90:	30 0b       	mov	r11,0
80018b92:	fe 7c 28 00 	mov	r12,-55296
80018b96:	fe b0 cf b3 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80018b9a:	30 9c       	mov	r12,9
80018b9c:	fe b0 cd be 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80018ba0:	37 6b       	mov	r11,118
80018ba2:	fe 7c 28 00 	mov	r12,-55296
80018ba6:	fe b0 d0 40 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80018baa:	30 0b       	mov	r11,0
80018bac:	fe 7c 28 00 	mov	r12,-55296
80018bb0:	fe b0 cf ce 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80018bb4:	30 0b       	mov	r11,0
80018bb6:	fe 7c 28 00 	mov	r12,-55296
80018bba:	fe b0 cf a1 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80018bbe:	30 9c       	mov	r12,9
80018bc0:	fe b0 cd ac 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80018bc4:	31 5b       	mov	r11,21
80018bc6:	fe 7c 28 00 	mov	r12,-55296
80018bca:	fe b0 d0 2e 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80018bce:	30 0b       	mov	r11,0
80018bd0:	fe 7c 28 00 	mov	r12,-55296
80018bd4:	fe b0 cf bc 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80018bd8:	30 0b       	mov	r11,0
80018bda:	fe 7c 28 00 	mov	r12,-55296
80018bde:	fe b0 cf 8f 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80018be2:	30 9c       	mov	r12,9
80018be4:	fe b0 cd 9a 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80018be8:	30 0b       	mov	r11,0
80018bea:	fe 7c 28 00 	mov	r12,-55296
80018bee:	fe b0 d0 1c 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80018bf2:	30 0b       	mov	r11,0
80018bf4:	fe 7c 28 00 	mov	r12,-55296
80018bf8:	fe b0 cf aa 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80018bfc:	30 0b       	mov	r11,0
80018bfe:	fe 7c 28 00 	mov	r12,-55296
80018c02:	fe b0 cf 7d 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80018c06:	30 9c       	mov	r12,9
80018c08:	fe b0 cd 88 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80018c0c:	33 fb       	mov	r11,63
80018c0e:	fe 7c 28 00 	mov	r12,-55296
80018c12:	fe b0 d0 0a 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80018c16:	30 0b       	mov	r11,0
80018c18:	fe 7c 28 00 	mov	r12,-55296
80018c1c:	fe b0 cf 98 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80018c20:	30 0b       	mov	r11,0
80018c22:	fe 7c 28 00 	mov	r12,-55296
80018c26:	fe b0 cf 6b 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80018c2a:	30 9c       	mov	r12,9
80018c2c:	fe b0 cd 76 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80018c30:	37 5b       	mov	r11,117
80018c32:	fe 7c 28 00 	mov	r12,-55296
80018c36:	fe b0 cf f8 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80018c3a:	30 0b       	mov	r11,0
80018c3c:	fe 7c 28 00 	mov	r12,-55296
80018c40:	fe b0 cf 86 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80018c44:	30 0b       	mov	r11,0
80018c46:	fe 7c 28 00 	mov	r12,-55296
80018c4a:	fe b0 cf 59 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80018c4e:	30 9c       	mov	r12,9
80018c50:	fe b0 cd 64 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80018c54:	30 0b       	mov	r11,0
80018c56:	fe 7c 28 00 	mov	r12,-55296
80018c5a:	fe b0 cf e6 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80018c5e:	30 0b       	mov	r11,0
80018c60:	fe 7c 28 00 	mov	r12,-55296
80018c64:	fe b0 cf 74 	rcall	80012b4c <spi_unselectChip>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80018c68:	30 0b       	mov	r11,0
80018c6a:	fe 7c 28 00 	mov	r12,-55296
80018c6e:	fe b0 cf 47 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80018c72:	30 9c       	mov	r12,9
80018c74:	fe b0 cd 52 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80018c78:	33 fb       	mov	r11,63
80018c7a:	fe 7c 28 00 	mov	r12,-55296
80018c7e:	fe b0 cf d4 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80018c82:	30 0b       	mov	r11,0
80018c84:	fe 7c 28 00 	mov	r12,-55296

  //  screen_clear();

 // clear OLED RAM and local screenbuffer
  for(i=0; i<GRAM_BYTES; i++) { 
    screen[i] = 0;
80018c88:	30 05       	mov	r5,0
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
  spi_write(OLED_SPI, c);
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80018c8a:	fe b0 cf 61 	rcall	80012b4c <spi_unselectChip>
80018c8e:	e0 67 19 cc 	mov	r7,6604
  }
}

//------------------
// external functions
void init_oled(void) {
80018c92:	ee c6 f0 00 	sub	r6,r7,-4096

//-----------------------------
//---- static functions
static void write_data(U8 c);
static void write_data(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80018c96:	0e c5       	st.b	r7++,r5
80018c98:	30 0b       	mov	r11,0
80018c9a:	fe 7c 28 00 	mov	r12,-55296
80018c9e:	fe b0 cf 2f 	rcall	80012afc <spi_selectChip>
  // pull register select high to write data
  gpio_set_gpio_pin(OLED_REGISTER_PIN);
80018ca2:	30 9c       	mov	r12,9
80018ca4:	fe b0 cd 2d 	rcall	800126fe <gpio_set_gpio_pin>
  spi_write(OLED_SPI, c);
80018ca8:	30 0b       	mov	r11,0
80018caa:	fe 7c 28 00 	mov	r12,-55296
80018cae:	fe b0 cf bc 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80018cb2:	30 0b       	mov	r11,0
80018cb4:	fe 7c 28 00 	mov	r12,-55296
80018cb8:	fe b0 cf 4a 	rcall	80012b4c <spi_unselectChip>
  write_command(63);

  //  screen_clear();

 // clear OLED RAM and local screenbuffer
  for(i=0; i<GRAM_BYTES; i++) { 
80018cbc:	0c 37       	cp.w	r7,r6
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
}

static void write_command(U8 c);
static void write_command(U8 c) {
  spi_selectChip(OLED_SPI, OLED_SPI_NPCS);
80018cbe:	ce c1       	brne	80018c96 <init_oled+0x5ce>
80018cc0:	30 0b       	mov	r11,0
80018cc2:	fe 7c 28 00 	mov	r12,-55296
80018cc6:	fe b0 cf 1b 	rcall	80012afc <spi_selectChip>
  // pull register select low to write a command
  gpio_clr_gpio_pin(OLED_REGISTER_PIN);
80018cca:	30 9c       	mov	r12,9
80018ccc:	fe b0 cd 26 	rcall	80012718 <gpio_clr_gpio_pin>
  spi_write(OLED_SPI, c);
80018cd0:	e0 6b 00 af 	mov	r11,175
80018cd4:	fe 7c 28 00 	mov	r12,-55296
80018cd8:	fe b0 cf a7 	rcall	80012c26 <spi_write>
  spi_unselectChip(OLED_SPI, OLED_SPI_NPCS);
80018cdc:	30 0b       	mov	r11,0
80018cde:	fe 7c 28 00 	mov	r12,-55296
80018ce2:	fe b0 cf 35 	rcall	80012b4c <spi_unselectChip>
  }
  
  write_command(0xAF);	// on

  //  delay_ms(10) 
  delay = FCPU_HZ >> 8; while(delay > 0) { delay--; }
80018ce6:	e2 78 ef 14 	mov	r8,257812
80018cea:	30 09       	mov	r9,0
80018cec:	fa e9 00 00 	st.d	sp[0],r8
80018cf0:	fa e8 00 00 	ld.d	r8,sp[0]
80018cf4:	58 08       	cp.w	r8,0
80018cf6:	5c 29       	cpc	r9
80018cf8:	c0 f0       	breq	80018d16 <init_oled+0x64e>
80018cfa:	3f fa       	mov	r10,-1
80018cfc:	3f fb       	mov	r11,-1
80018cfe:	fa e8 00 00 	ld.d	r8,sp[0]
80018d02:	14 08       	add	r8,r10
80018d04:	f2 0b 00 49 	adc	r9,r9,r11
80018d08:	fa e9 00 00 	st.d	sp[0],r8
80018d0c:	fa e8 00 00 	ld.d	r8,sp[0]
80018d10:	58 08       	cp.w	r8,0
80018d12:	5c 29       	cpc	r9
  //  cpu_irq_enable();
  Enable_global_interrupt();
80018d14:	cf 51       	brne	80018cfe <init_oled+0x636>
}
80018d16:	d5 03       	csrf	0x10
80018d18:	2f ed       	sub	sp,-8
80018d1a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80018d1e:	d7 03       	nop

80018d20 <str_copy>:
#define SMPSTR_MAX_LEN 128

// copy with length arg (-1 == until null terminator, no bounds check!)
void str_copy(const char* src, char * dst, s8 len) {
  u8 i=0;
  if(len < 0) {
80018d20:	30 08       	mov	r8,0
80018d22:	f0 0a 18 00 	cp.b	r10,r8
80018d26:	c0 d5       	brlt	80018d40 <str_copy+0x20>
      }
      dst[i] = src[i];
      i++;
    }
  } else {
    while(i < len) {
80018d28:	5c 6a       	casts.b	r10
80018d2a:	5e 0c       	reteq	r12

// copy with length arg (-1 == until null terminator, no bounds check!)
void str_copy(const char* src, char * dst, s8 len) {
  u8 i=0;
  if(len < 0) {
    while(i < SMPSTR_MAX_LEN) {
80018d2c:	30 08       	mov	r8,0
      dst[i] = src[i];
      i++;
    }
  } else {
    while(i < len) {
      dst[i] = src[i];
80018d2e:	f8 08 07 09 	ld.ub	r9,r12[r8]
80018d32:	f6 08 0b 09 	st.b	r11[r8],r9
      i++;
80018d36:	2f f8       	sub	r8,-1
80018d38:	5c 58       	castu.b	r8
      }
      dst[i] = src[i];
      i++;
    }
  } else {
    while(i < len) {
80018d3a:	14 38       	cp.w	r8,r10
80018d3c:	cf 95       	brlt	80018d2e <str_copy+0xe>
80018d3e:	5e fc       	retal	r12
// copy with length arg (-1 == until null terminator, no bounds check!)
void str_copy(const char* src, char * dst, s8 len) {
  u8 i=0;
  if(len < 0) {
    while(i < SMPSTR_MAX_LEN) {
      if(src[i] == 0) {
80018d40:	19 88       	ld.ub	r8,r12[0x0]
80018d42:	58 08       	cp.w	r8,0
80018d44:	5e 0c       	reteq	r12
	break;
      }
      dst[i] = src[i];
80018d46:	16 c8       	st.b	r11++,r8
80018d48:	2f fc       	sub	r12,-1
80018d4a:	30 18       	mov	r8,1

// copy with length arg (-1 == until null terminator, no bounds check!)
void str_copy(const char* src, char * dst, s8 len) {
  u8 i=0;
  if(len < 0) {
    while(i < SMPSTR_MAX_LEN) {
80018d4c:	38 0a       	mov	r10,-128
      if(src[i] == 0) {
	break;
      }
      dst[i] = src[i];
      i++;
80018d4e:	2f f8       	sub	r8,-1
// copy with length arg (-1 == until null terminator, no bounds check!)
void str_copy(const char* src, char * dst, s8 len) {
  u8 i=0;
  if(len < 0) {
    while(i < SMPSTR_MAX_LEN) {
      if(src[i] == 0) {
80018d50:	19 89       	ld.ub	r9,r12[0x0]
	break;
      }
      dst[i] = src[i];
      i++;
80018d52:	5c 58       	castu.b	r8
// copy with length arg (-1 == until null terminator, no bounds check!)
void str_copy(const char* src, char * dst, s8 len) {
  u8 i=0;
  if(len < 0) {
    while(i < SMPSTR_MAX_LEN) {
      if(src[i] == 0) {
80018d54:	58 09       	cp.w	r9,0
80018d56:	5e 0c       	reteq	r12
	break;
      }
      dst[i] = src[i];
80018d58:	16 c9       	st.b	r11++,r9
      i++;
80018d5a:	2f fc       	sub	r12,-1

// copy with length arg (-1 == until null terminator, no bounds check!)
void str_copy(const char* src, char * dst, s8 len) {
  u8 i=0;
  if(len < 0) {
    while(i < SMPSTR_MAX_LEN) {
80018d5c:	f4 08 18 00 	cp.b	r8,r10
80018d60:	cf 71       	brne	80018d4e <str_copy+0x2e>
80018d62:	5e fc       	retal	r12

80018d64 <process_sw>:
  { kEventSwitchDown7, kEventSwitchUp7 },
};


// generate events from switch interrupts
void process_sw( const U8 swIdx )  {
80018d64:	eb cd 40 c0 	pushm	r6-r7,lr
  static event_t e;   
    e.type = kSwitchEvents[swIdx][gpio_get_pin_value(kSwitchPins[swIdx])];
80018d68:	48 d8       	lddpc	r8,80018d9c <process_sw+0x38>
  { kEventSwitchDown7, kEventSwitchUp7 },
};


// generate events from switch interrupts
void process_sw( const U8 swIdx )  {
80018d6a:	18 97       	mov	r7,r12
  static event_t e;   
    e.type = kSwitchEvents[swIdx][gpio_get_pin_value(kSwitchPins[swIdx])];
80018d6c:	f0 0c 07 0c 	ld.ub	r12,r8[r12]
80018d70:	fe b0 cc bc 	rcall	800126e8 <gpio_get_pin_value>
80018d74:	48 b8       	lddpc	r8,80018da0 <process_sw+0x3c>
80018d76:	f8 07 00 1c 	add	r12,r12,r7<<0x1
80018d7a:	f0 0c 03 28 	ld.w	r8,r8[r12<<0x2]
80018d7e:	e0 66 29 cc 	mov	r6,10700
80018d82:	48 9c       	lddpc	r12,80018da4 <process_sw+0x40>
    print_dbg("\r\n post switch event, idx: ");
80018d84:	8d 08       	st.w	r6[0x0],r8
80018d86:	fe b0 d1 63 	rcall	8001304c <print_dbg>
    print_dbg_ulong(swIdx);
80018d8a:	0e 9c       	mov	r12,r7
80018d8c:	fe b0 d1 3e 	rcall	80013008 <print_dbg_ulong>
    event_post(&e);
80018d90:	0c 9c       	mov	r12,r6
80018d92:	fe b0 f3 5d 	rcall	8001744c <event_post>
}
80018d96:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018d9a:	d7 03       	nop
80018d9c:	80 02       	ld.sh	r2,r0[0x0]
80018d9e:	27 c0       	sub	r0,124
80018da0:	80 02       	ld.sh	r2,r0[0x0]
80018da2:	27 64       	sub	r4,118
80018da4:	80 02       	ld.sh	r2,r0[0x0]
80018da6:	27 a4       	sub	r4,122

80018da8 <process_timers>:
}


// process the list of timers.
// called by client at desired tick interval.
void process_timers( void ) {
80018da8:	eb cd 40 c0 	pushm	r6-r7,lr
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80018dac:	e0 67 29 d4 	mov	r7,10708
    if ( t == 0 ) { continue; }
80018db0:	6e 06       	ld.w	r6,r7[0x0]
80018db2:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80018db4:	c0 80       	breq	80018dc4 <process_timers+0x1c>
80018db6:	6c 28       	ld.w	r8,r6[0x8]
80018db8:	58 08       	cp.w	r8,0
80018dba:	e0 8a 00 05 	brle	80018dc4 <process_timers+0x1c>
      // time remaining, decrement tick counter
      t->timeout--;
80018dbe:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80018dc0:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80018dc2:	c5 50       	breq	80018e6c <process_timers+0xc4>
    if ( t == 0 ) { continue; }
80018dc4:	6e 16       	ld.w	r6,r7[0x4]
80018dc6:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80018dc8:	c0 80       	breq	80018dd8 <process_timers+0x30>
80018dca:	6c 28       	ld.w	r8,r6[0x8]
80018dcc:	58 08       	cp.w	r8,0
80018dce:	e0 8a 00 05 	brle	80018dd8 <process_timers+0x30>
      // time remaining, decrement tick counter
      t->timeout--;
80018dd2:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80018dd4:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80018dd6:	c5 90       	breq	80018e88 <process_timers+0xe0>
    if ( t == 0 ) { continue; }
80018dd8:	6e 26       	ld.w	r6,r7[0x8]
80018dda:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80018ddc:	c0 80       	breq	80018dec <process_timers+0x44>
80018dde:	6c 28       	ld.w	r8,r6[0x8]
80018de0:	58 08       	cp.w	r8,0
80018de2:	e0 8a 00 05 	brle	80018dec <process_timers+0x44>
      // time remaining, decrement tick counter
      t->timeout--;
80018de6:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80018de8:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80018dea:	c5 d0       	breq	80018ea4 <process_timers+0xfc>
    if ( t == 0 ) { continue; }
80018dec:	6e 36       	ld.w	r6,r7[0xc]
80018dee:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80018df0:	c0 80       	breq	80018e00 <process_timers+0x58>
80018df2:	6c 28       	ld.w	r8,r6[0x8]
80018df4:	58 08       	cp.w	r8,0
80018df6:	e0 8a 00 05 	brle	80018e00 <process_timers+0x58>
      // time remaining, decrement tick counter
      t->timeout--;
80018dfa:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80018dfc:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80018dfe:	c6 10       	breq	80018ec0 <process_timers+0x118>
    if ( t == 0 ) { continue; }
80018e00:	6e 46       	ld.w	r6,r7[0x10]
80018e02:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80018e04:	c0 80       	breq	80018e14 <process_timers+0x6c>
80018e06:	6c 28       	ld.w	r8,r6[0x8]
80018e08:	58 08       	cp.w	r8,0
80018e0a:	e0 8a 00 05 	brle	80018e14 <process_timers+0x6c>
      // time remaining, decrement tick counter
      t->timeout--;
80018e0e:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80018e10:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80018e12:	c6 50       	breq	80018edc <process_timers+0x134>
    if ( t == 0 ) { continue; }
80018e14:	6e 56       	ld.w	r6,r7[0x14]
80018e16:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80018e18:	c0 80       	breq	80018e28 <process_timers+0x80>
80018e1a:	6c 28       	ld.w	r8,r6[0x8]
80018e1c:	58 08       	cp.w	r8,0
80018e1e:	e0 8a 00 05 	brle	80018e28 <process_timers+0x80>
      // time remaining, decrement tick counter
      t->timeout--;
80018e22:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80018e24:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80018e26:	c6 90       	breq	80018ef8 <process_timers+0x150>
    if ( t == 0 ) { continue; }
80018e28:	6e 66       	ld.w	r6,r7[0x18]
80018e2a:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80018e2c:	c0 80       	breq	80018e3c <process_timers+0x94>
80018e2e:	6c 28       	ld.w	r8,r6[0x8]
80018e30:	58 08       	cp.w	r8,0
80018e32:	e0 8a 00 05 	brle	80018e3c <process_timers+0x94>
      // time remaining, decrement tick counter
      t->timeout--;
80018e36:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80018e38:	8d 28       	st.w	r6[0x8],r8
  swTimer_t* t;

  // Process the timer list 
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    // Skip unused timer slots...
    t = timers[k];
80018e3a:	c6 d0       	breq	80018f14 <process_timers+0x16c>
    if ( t == 0 ) { continue; }
80018e3c:	6e 76       	ld.w	r6,r7[0x1c]
80018e3e:	58 06       	cp.w	r6,0

    if ( t->timeout > 0 ) {
80018e40:	c0 80       	breq	80018e50 <process_timers+0xa8>
80018e42:	6c 28       	ld.w	r8,r6[0x8]
80018e44:	58 08       	cp.w	r8,0
80018e46:	e0 8a 00 05 	brle	80018e50 <process_timers+0xa8>
      // time remaining, decrement tick counter
      t->timeout--;
80018e4a:	20 18       	sub	r8,1

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
80018e4c:	8d 28       	st.w	r6[0x8],r8
80018e4e:	c0 30       	breq	80018e54 <process_timers+0xac>
80018e50:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
	if ( t->callback != 0 ) {
80018e54:	6c 48       	ld.w	r8,r6[0x10]
80018e56:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80018e58:	c0 30       	breq	80018e5e <process_timers+0xb6>
80018e5a:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80018e5c:	5d 18       	icall	r8
80018e5e:	6c 08       	ld.w	r8,r6[0x0]
80018e60:	58 08       	cp.w	r8,0
	  t->timeout = t->timeoutReload;
80018e62:	c6 70       	breq	80018f30 <process_timers+0x188>
80018e64:	6c 38       	ld.w	r8,r6[0xc]
80018e66:	8d 28       	st.w	r6[0x8],r8
80018e68:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
80018e6c:	6c 48       	ld.w	r8,r6[0x10]
80018e6e:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80018e70:	c0 30       	breq	80018e76 <process_timers+0xce>
80018e72:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80018e74:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
80018e76:	6c 08       	ld.w	r8,r6[0x0]
80018e78:	58 08       	cp.w	r8,0
80018e7a:	ef f8 0a 00 	st.weq	r7[0x0],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
80018e7e:	ed f8 10 03 	ld.wne	r8,r6[0xc]
80018e82:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
80018e86:	c9 fb       	rjmp	80018dc4 <process_timers+0x1c>
80018e88:	6c 48       	ld.w	r8,r6[0x10]
80018e8a:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80018e8c:	c0 30       	breq	80018e92 <process_timers+0xea>
80018e8e:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80018e90:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
80018e92:	6c 08       	ld.w	r8,r6[0x0]
80018e94:	58 08       	cp.w	r8,0
80018e96:	ef f8 0a 01 	st.weq	r7[0x4],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
80018e9a:	ed f8 10 03 	ld.wne	r8,r6[0xc]
80018e9e:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
80018ea2:	c9 bb       	rjmp	80018dd8 <process_timers+0x30>
80018ea4:	6c 48       	ld.w	r8,r6[0x10]
80018ea6:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80018ea8:	c0 30       	breq	80018eae <process_timers+0x106>
80018eaa:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80018eac:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
80018eae:	6c 08       	ld.w	r8,r6[0x0]
80018eb0:	58 08       	cp.w	r8,0
80018eb2:	ef f8 0a 02 	st.weq	r7[0x8],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
80018eb6:	ed f8 10 03 	ld.wne	r8,r6[0xc]
80018eba:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
80018ebe:	c9 7b       	rjmp	80018dec <process_timers+0x44>
80018ec0:	6c 48       	ld.w	r8,r6[0x10]
80018ec2:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80018ec4:	c0 30       	breq	80018eca <process_timers+0x122>
80018ec6:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80018ec8:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
80018eca:	6c 08       	ld.w	r8,r6[0x0]
80018ecc:	58 08       	cp.w	r8,0
80018ece:	ef f8 0a 03 	st.weq	r7[0xc],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
80018ed2:	ed f8 10 03 	ld.wne	r8,r6[0xc]
80018ed6:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
80018eda:	c9 3b       	rjmp	80018e00 <process_timers+0x58>
80018edc:	6c 48       	ld.w	r8,r6[0x10]
80018ede:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80018ee0:	c0 30       	breq	80018ee6 <process_timers+0x13e>
80018ee2:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80018ee4:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
80018ee6:	6c 08       	ld.w	r8,r6[0x0]
80018ee8:	58 08       	cp.w	r8,0
80018eea:	ef f8 0a 04 	st.weq	r7[0x10],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
80018eee:	ed f8 10 03 	ld.wne	r8,r6[0xc]
80018ef2:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
80018ef6:	c8 fb       	rjmp	80018e14 <process_timers+0x6c>
80018ef8:	6c 48       	ld.w	r8,r6[0x10]
80018efa:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80018efc:	c0 30       	breq	80018f02 <process_timers+0x15a>
80018efe:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80018f00:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
80018f02:	6c 08       	ld.w	r8,r6[0x0]
80018f04:	58 08       	cp.w	r8,0
80018f06:	ef f8 0a 05 	st.weq	r7[0x14],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
80018f0a:	ed f8 10 03 	ld.wne	r8,r6[0xc]
80018f0e:	ed f8 1a 02 	st.wne	r6[0x8],r8
      // time remaining, decrement tick counter
      t->timeout--;

      // if timer expired, call the callback function
      if ( t->timeout <= 0 ) {
	if ( t->callback != 0 ) {
80018f12:	c8 bb       	rjmp	80018e28 <process_timers+0x80>
80018f14:	6c 48       	ld.w	r8,r6[0x10]
80018f16:	58 08       	cp.w	r8,0
	  (*t->callback)( t->tag );
80018f18:	c0 30       	breq	80018f1e <process_timers+0x176>
80018f1a:	6c 1c       	ld.w	r12,r6[0x4]
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
80018f1c:	5d 18       	icall	r8
	  t->timeout = t->timeoutReload;
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
80018f1e:	6c 08       	ld.w	r8,r6[0x0]
80018f20:	58 08       	cp.w	r8,0
80018f22:	ef f8 0a 06 	st.weq	r7[0x18],r8
	  (*t->callback)( t->tag );
	}

	// if periodic, reload the timer
	if ( t->fperiodic ) {
	  t->timeout = t->timeoutReload;
80018f26:	ed f8 10 03 	ld.wne	r8,r6[0xc]
80018f2a:	ed f8 1a 02 	st.wne	r6[0x8],r8
	} else {
	  // delete non-periodic timerx
	  timers[k] = NULL;
80018f2e:	c8 7b       	rjmp	80018e3c <process_timers+0x94>
80018f30:	8f 78       	st.w	r7[0x1c],r8
80018f32:	c8 fb       	rjmp	80018e50 <process_timers+0xa8>

80018f34 <set_timer>:
80018f34:	eb cd 40 c0 	pushm	r6-r7,lr
}

// Add a callback timer to the list.
bool set_timer(  swTimer_t* t, int tag, int ticks, timerCallback callback,
		 bool fPeriodic ) {
  if ( callback == NULL ) {
80018f38:	58 09       	cp.w	r9,0
80018f3a:	c5 80       	breq	80018fea <set_timer+0xb6>
  int k;
  swTimer_t* t;

  //  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
  //  Disable_interrupt_level( TIMER_INT_LEVEL );
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
80018f3c:	d3 33       	ssrf	0x13

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
80018f3e:	e0 6e 29 d4 	mov	lr,10708
    if ( t == NULL ) {
80018f42:	7c 07       	ld.w	r7,lr[0x0]
80018f44:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
80018f46:	c0 40       	breq	80018f4e <set_timer+0x1a>
80018f48:	6e 16       	ld.w	r6,r7[0x4]
80018f4a:	0c 3b       	cp.w	r11,r6
  //  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
  //  Disable_interrupt_level( TIMER_INT_LEVEL );
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
80018f4c:	c5 20       	breq	80018ff0 <set_timer+0xbc>
    if ( t == NULL ) {
80018f4e:	7c 17       	ld.w	r7,lr[0x4]
80018f50:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
80018f52:	c0 40       	breq	80018f5a <set_timer+0x26>
80018f54:	6e 16       	ld.w	r6,r7[0x4]
80018f56:	0c 3b       	cp.w	r11,r6
  //  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
  //  Disable_interrupt_level( TIMER_INT_LEVEL );
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
80018f58:	c5 20       	breq	80018ffc <set_timer+0xc8>
    if ( t == NULL ) {
80018f5a:	7c 27       	ld.w	r7,lr[0x8]
80018f5c:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
80018f5e:	c0 40       	breq	80018f66 <set_timer+0x32>
80018f60:	6e 16       	ld.w	r6,r7[0x4]
80018f62:	0c 3b       	cp.w	r11,r6
  //  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
  //  Disable_interrupt_level( TIMER_INT_LEVEL );
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
80018f64:	c5 00       	breq	80019004 <set_timer+0xd0>
    if ( t == NULL ) {
80018f66:	7c 37       	ld.w	r7,lr[0xc]
80018f68:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
80018f6a:	c0 40       	breq	80018f72 <set_timer+0x3e>
80018f6c:	6e 16       	ld.w	r6,r7[0x4]
80018f6e:	0c 3b       	cp.w	r11,r6
  //  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
  //  Disable_interrupt_level( TIMER_INT_LEVEL );
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
80018f70:	c4 e0       	breq	8001900c <set_timer+0xd8>
    if ( t == NULL ) {
80018f72:	7c 47       	ld.w	r7,lr[0x10]
80018f74:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
80018f76:	c0 40       	breq	80018f7e <set_timer+0x4a>
80018f78:	6e 16       	ld.w	r6,r7[0x4]
80018f7a:	0c 3b       	cp.w	r11,r6
  //  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
  //  Disable_interrupt_level( TIMER_INT_LEVEL );
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
80018f7c:	c4 c0       	breq	80019014 <set_timer+0xe0>
    if ( t == NULL ) {
80018f7e:	7c 57       	ld.w	r7,lr[0x14]
80018f80:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
80018f82:	c0 40       	breq	80018f8a <set_timer+0x56>
80018f84:	6e 16       	ld.w	r6,r7[0x4]
80018f86:	0c 3b       	cp.w	r11,r6
  //  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
  //  Disable_interrupt_level( TIMER_INT_LEVEL );
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
80018f88:	c4 a0       	breq	8001901c <set_timer+0xe8>
    if ( t == NULL ) {
80018f8a:	7c 67       	ld.w	r7,lr[0x18]
80018f8c:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
80018f8e:	c0 40       	breq	80018f96 <set_timer+0x62>
80018f90:	6e 16       	ld.w	r6,r7[0x4]
80018f92:	0c 3b       	cp.w	r11,r6
  //  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
  //  Disable_interrupt_level( TIMER_INT_LEVEL );
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);

  for ( k = 0; k < MAX_TIMERS; k++ ) {
    t = timers[k];
80018f94:	c4 80       	breq	80019024 <set_timer+0xf0>
    if ( t == NULL ) {
80018f96:	7c 77       	ld.w	r7,lr[0x1c]
80018f98:	58 07       	cp.w	r7,0
      continue;
    }

    if ( t->tag == tag ) {
80018f9a:	c0 40       	breq	80018fa2 <set_timer+0x6e>
80018f9c:	6e 16       	ld.w	r6,r7[0x4]
80018f9e:	0c 3b       	cp.w	r11,r6
      return t;
	//      }
    }
  }

  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
80018fa0:	c4 60       	breq	8001902c <set_timer+0xf8>
   
  if ( find_timer( callback, tag ) != NULL ) {
    return false;
  }

  t->callback = callback;
80018fa2:	d5 33       	csrf	0x13
  t->tag = tag;
80018fa4:	99 49       	st.w	r12[0x10],r9
  t->timeout = ticks;
  t->fperiodic = fPeriodic;
80018fa6:	99 1b       	st.w	r12[0x4],r11
  t->timeoutReload = ticks;
80018fa8:	99 08       	st.w	r12[0x0],r8
    return false;
  }

  t->callback = callback;
  t->tag = tag;
  t->timeout = ticks;
80018faa:	99 3a       	st.w	r12[0xc],r10
// Add timer to pointer array. Finds first empty slot.
static bool add_timer( swTimer_t* newTimer) {
  int k;
  //  bool fReenableInterrupts = Is_interrupt_level_enabled( TIMER_INT_LEVEL );
  //  Disable_interrupt_level( TIMER_INT_LEVEL );
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
80018fac:	99 2a       	st.w	r12[0x8],r10
  
  // find empty slot
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    if ( timers[k] ==  NULL ) {
80018fae:	d3 33       	ssrf	0x13
80018fb0:	e0 68 29 d4 	mov	r8,10708
80018fb4:	7c 09       	ld.w	r9,lr[0x0]
80018fb6:	58 09       	cp.w	r9,0
80018fb8:	c3 f0       	breq	80019036 <set_timer+0x102>
80018fba:	70 19       	ld.w	r9,r8[0x4]
80018fbc:	58 09       	cp.w	r9,0
80018fbe:	c3 b0       	breq	80019034 <set_timer+0x100>
80018fc0:	70 29       	ld.w	r9,r8[0x8]
80018fc2:	58 09       	cp.w	r9,0
80018fc4:	c3 e0       	breq	80019040 <set_timer+0x10c>
80018fc6:	70 39       	ld.w	r9,r8[0xc]
80018fc8:	58 09       	cp.w	r9,0
80018fca:	c3 d0       	breq	80019044 <set_timer+0x110>
80018fcc:	70 49       	ld.w	r9,r8[0x10]
80018fce:	58 09       	cp.w	r9,0
80018fd0:	c3 c0       	breq	80019048 <set_timer+0x114>
80018fd2:	70 59       	ld.w	r9,r8[0x14]
80018fd4:	58 09       	cp.w	r9,0
80018fd6:	c3 b0       	breq	8001904c <set_timer+0x118>
80018fd8:	70 69       	ld.w	r9,r8[0x18]
80018fda:	58 09       	cp.w	r9,0
80018fdc:	c3 a0       	breq	80019050 <set_timer+0x11c>
80018fde:	70 78       	ld.w	r8,r8[0x1c]
      //      Enable_interrupt_level( TIMER_INT_LEVEL );
      return true;
    }
  }

  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
80018fe0:	58 08       	cp.w	r8,0
80018fe2:	c3 90       	breq	80019054 <set_timer+0x120>
80018fe4:	d5 33       	csrf	0x13
}

// Add a callback timer to the list.
bool set_timer(  swTimer_t* t, int tag, int ticks, timerCallback callback,
		 bool fPeriodic ) {
  if ( callback == NULL ) {
80018fe6:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80018fea:	12 9c       	mov	r12,r9
      continue;
    }

    if ( t->tag == tag ) {
      if ( callback != NULL ) {
	if ( t->callback == callback ) {
80018fec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018ff0:	6e 47       	ld.w	r7,r7[0x10]
	  // tag and callback both specified and matched
	  //	  if (fReenableInterrupts)
	  //	    Enable_interrupt_level( TIMER_INT_LEVEL );
	  cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
80018ff2:	0e 39       	cp.w	r9,r7
80018ff4:	ca d1       	brne	80018f4e <set_timer+0x1a>
80018ff6:	d5 33       	csrf	0x13
      continue;
    }

    if ( t->tag == tag ) {
      if ( callback != NULL ) {
	if ( t->callback == callback ) {
80018ff8:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80018ffc:	6e 47       	ld.w	r7,r7[0x10]
80018ffe:	0e 39       	cp.w	r9,r7
80019000:	ca d1       	brne	80018f5a <set_timer+0x26>
80019002:	cf ab       	rjmp	80018ff6 <set_timer+0xc2>
80019004:	6e 47       	ld.w	r7,r7[0x10]
80019006:	0e 39       	cp.w	r9,r7
80019008:	ca f1       	brne	80018f66 <set_timer+0x32>
8001900a:	cf 6b       	rjmp	80018ff6 <set_timer+0xc2>
8001900c:	6e 47       	ld.w	r7,r7[0x10]
8001900e:	0e 39       	cp.w	r9,r7
80019010:	cb 11       	brne	80018f72 <set_timer+0x3e>
80019012:	cf 2b       	rjmp	80018ff6 <set_timer+0xc2>
80019014:	6e 47       	ld.w	r7,r7[0x10]
80019016:	0e 39       	cp.w	r9,r7
80019018:	cb 31       	brne	80018f7e <set_timer+0x4a>
8001901a:	ce eb       	rjmp	80018ff6 <set_timer+0xc2>
8001901c:	6e 47       	ld.w	r7,r7[0x10]
8001901e:	0e 39       	cp.w	r9,r7
80019020:	cb 51       	brne	80018f8a <set_timer+0x56>
80019022:	ce ab       	rjmp	80018ff6 <set_timer+0xc2>
80019024:	6e 47       	ld.w	r7,r7[0x10]
80019026:	0e 39       	cp.w	r9,r7
80019028:	cb 71       	brne	80018f96 <set_timer+0x62>
8001902a:	ce 6b       	rjmp	80018ff6 <set_timer+0xc2>
8001902c:	6e 47       	ld.w	r7,r7[0x10]
8001902e:	0e 39       	cp.w	r9,r7
  //  Disable_interrupt_level( TIMER_INT_LEVEL );
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
  
  // find empty slot
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    if ( timers[k] ==  NULL ) {
80019030:	cb 91       	brne	80018fa2 <set_timer+0x6e>
      timers[k] = newTimer;
80019032:	ce 2b       	rjmp	80018ff6 <set_timer+0xc2>
80019034:	30 19       	mov	r9,1
      cpu_irq_enable_level(APP_TC_IRQ_PRIORITY);
80019036:	fc 09 09 2c 	st.w	lr[r9<<0x2],r12
8001903a:	d5 33       	csrf	0x13
  //  Disable_interrupt_level( TIMER_INT_LEVEL );
  cpu_irq_disable_level(APP_TC_IRQ_PRIORITY);
  
  // find empty slot
  for ( k = 0; k < MAX_TIMERS; k++ ) {
    if ( timers[k] ==  NULL ) {
8001903c:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
80019040:	30 29       	mov	r9,2
80019042:	cf ab       	rjmp	80019036 <set_timer+0x102>
80019044:	30 39       	mov	r9,3
80019046:	cf 8b       	rjmp	80019036 <set_timer+0x102>
80019048:	30 49       	mov	r9,4
8001904a:	cf 6b       	rjmp	80019036 <set_timer+0x102>
8001904c:	30 59       	mov	r9,5
8001904e:	cf 4b       	rjmp	80019036 <set_timer+0x102>
80019050:	30 69       	mov	r9,6
80019052:	cf 2b       	rjmp	80019036 <set_timer+0x102>
80019054:	30 79       	mov	r9,7
80019056:	cf 0b       	rjmp	80019036 <set_timer+0x102>

80019058 <main>:
  } // if !startup
}

//int main(void) {
////main function
int main (void) {
80019058:	eb cd 40 fc 	pushm	r2-r7,lr
// top-level peripheral init
static void init_avr32(void) {
  volatile avr32_tc_t *tc = APP_TC;
  // clocks
  // setup clocks
  sysclk_init();
8001905c:	fe b0 e6 fc 	rcall	80015e54 <sysclk_init>
  // why need here?
  sysclk_enable_pbb_module(SYSCLK_SMC_REGS);
80019060:	30 4c       	mov	r12,4
80019062:	fe b0 e6 61 	rcall	80015d24 <sysclk_enable_pbb_module>
  flashc_set_bus_freq(FCPU_HZ);
80019066:	e0 6c 14 80 	mov	r12,5248
8001906a:	ea 1c 03 ef 	orh	r12,0x3ef
8001906e:	fe b0 c8 26 	rcall	800120ba <flashc_set_bus_freq>
  flashc_set_wait_state(1);
80019072:	30 1c       	mov	r12,1
80019074:	fe b0 c8 1c 	rcall	800120ac <flashc_set_wait_state>

  /// interrupts
  irq_initialize_vectors();
80019078:	fe b0 cc 24 	rcall	800128c0 <INTC_init_interrupts>

  // disable all interrupts for now
  cpu_irq_disable();
8001907c:	d3 03       	ssrf	0x10
  // serial usb
  init_ftdi_usart();
8001907e:	fe b0 f5 c7 	rcall	80017c0c <init_ftdi_usart>
  // external sram
  smc_init(FHSB_HZ);
80019082:	e0 6c 14 80 	mov	r12,5248
80019086:	ea 1c 03 ef 	orh	r12,0x3ef
8001908a:	fe b0 c7 c5 	rcall	80012014 <smc_init>
  // initialize spi1: OLED, ADC, SD/MMC
  init_spi1();
8001908e:	fe b0 f5 4d 	rcall	80017b28 <init_spi1>
  // initialize PDCA controller
  init_local_pdca();
80019092:	fe b0 f5 1d 	rcall	80017acc <init_local_pdca>
  // initialize blackfin resources
  init_bfin_resources();
80019096:	fe b0 f4 e7 	rcall	80017a64 <init_bfin_resources>
  // initialize application timer
  init_tc(tc);
8001909a:	fe 7c 38 00 	mov	r12,-51200
8001909e:	fe b0 f5 cb 	rcall	80017c34 <init_tc>
  // initialize other GPIO
  init_gpio();
800190a2:	fe b0 f5 e5 	rcall	80017c6c <init_gpio>
  // register interrupts
  register_interrupts();
800190a6:	fe b0 f6 03 	rcall	80017cac <register_interrupts>
  // initialize the OLED screen
  init_oled();
800190aa:	fe b0 fb 0f 	rcall	800186c8 <init_oled>
  // enable interrupts
  cpu_irq_enable();
800190ae:	d5 03       	csrf	0x10

  // usb host controller
  init_usb_host();
800190b0:	fe b0 f4 d6 	rcall	80017a5c <init_usb_host>
  
  print_dbg("\r\n avr32 init done ");
800190b4:	fe fc 02 80 	ld.w	r12,pc[640]
800190b8:	fe b0 cf ca 	rcall	8001304c <print_dbg>

  // set up avr32 hardware and peripherals
  init_avr32();

  // wait for sd card
  screen_line(0, 0, "ALEPH", 0x3f);
800190bc:	30 0b       	mov	r11,0
800190be:	33 f9       	mov	r9,63
800190c0:	fe fa 02 78 	ld.w	r10,pc[632]
800190c4:	16 9c       	mov	r12,r11
800190c6:	fe b0 fa 23 	rcall	8001850c <screen_line>
  screen_line(0, 1, "waiting for SD card...", 0x3f);
800190ca:	33 f9       	mov	r9,63
800190cc:	fe fa 02 70 	ld.w	r10,pc[624]
800190d0:	30 1b       	mov	r11,1
800190d2:	30 0c       	mov	r12,0
800190d4:	fe b0 fa 1c 	rcall	8001850c <screen_line>
  screen_refresh();
800190d8:	fe b0 fa 6c 	rcall	800185b0 <screen_refresh>
  
  print_dbg("\r\n SD check... ");
800190dc:	fe fc 02 64 	ld.w	r12,pc[612]
800190e0:	fe b0 cf b6 	rcall	8001304c <print_dbg>
  while (!sd_mmc_spi_mem_check()) {
800190e4:	fe b0 d7 c8 	rcall	80014074 <sd_mmc_spi_mem_check>
800190e8:	cf e0       	breq	800190e4 <main+0x8c>
    waitForCard++;
  }
  print_dbg("\r\nfound SD card. ");
800190ea:	fe fc 02 5a 	ld.w	r12,pc[602]
800190ee:	fe b0 cf af 	rcall	8001304c <print_dbg>

  screen_blank_line(0, 0);
800190f2:	30 0b       	mov	r11,0
800190f4:	16 9c       	mov	r12,r11
800190f6:	fe b0 f8 4d 	rcall	80018190 <screen_blank_line>
  screen_blank_line(0, 1);
800190fa:	30 1b       	mov	r11,1
800190fc:	30 0c       	mov	r12,0
800190fe:	fe b0 f8 49 	rcall	80018190 <screen_blank_line>
  screen_line(0, 0, "SD card detected.", 0x3f);
80019102:	30 0b       	mov	r11,0
80019104:	33 f9       	mov	r9,63
80019106:	fe fa 02 42 	ld.w	r10,pc[578]
8001910a:	16 9c       	mov	r12,r11
8001910c:	fe b0 fa 00 	rcall	8001850c <screen_line>

  //memory manager
  init_mem();  
80019110:	fe b0 f7 56 	rcall	80017fbc <init_mem>
  print_dbg("\r\n init_mem");
80019114:	fe fc 02 38 	ld.w	r12,pc[568]
80019118:	fe b0 cf 9a 	rcall	8001304c <print_dbg>

  /// initialize filesystem
  init_files();
8001911c:	fe b0 f2 b8 	rcall	8001768c <init_files>
}

// control / network / logic init
static void init_ctl(void) {
  // disable interrupts
  cpu_irq_disable();
80019120:	d3 03       	ssrf	0x10

  // intialize the event queue
  init_events();
80019122:	fe b0 f1 83 	rcall	80017428 <init_events>
  print_dbg("\r\n init_events");
80019126:	fe fc 02 2a 	ld.w	r12,pc[554]
8001912a:	fe b0 cf 91 	rcall	8001304c <print_dbg>

  // intialize encoders
  init_encoders();
8001912e:	fe b0 f2 0d 	rcall	80017548 <init_encoders>
  print_dbg("\r\n init_encoders");
80019132:	fe fc 02 22 	ld.w	r12,pc[546]
80019136:	fe b0 cf 8b 	rcall	8001304c <print_dbg>


  // send ADC config
  init_adc();
8001913a:	fe b0 ea af 	rcall	80016698 <init_adc>
  print_dbg("\r\n init_adc");
8001913e:	fe fc 02 1a 	ld.w	r12,pc[538]
80019142:	fe b0 cf 85 	rcall	8001304c <print_dbg>

  // start application timers
  init_app_timers();
80019146:	fe b0 eb bd 	rcall	800168c0 <init_app_timers>
  print_dbg("\r\n init_timers");
8001914a:	fe fc 02 12 	ld.w	r12,pc[530]
8001914e:	fe b0 cf 7f 	rcall	8001304c <print_dbg>

  ///////////////
  ////////
  /// TODO: move to app subclass  
  //// BEES:
  net_init();
80019152:	e0 a0 2d 4b 	rcall	8001ebe8 <net_init>
  print_dbg("\r\n net_init");
80019156:	fe fc 02 0a 	ld.w	r12,pc[522]
8001915a:	fe b0 cf 79 	rcall	8001304c <print_dbg>

  preset_init();
8001915e:	e0 a0 2f f7 	rcall	8001f14c <preset_init>
  print_dbg("\r\n preset_init");
80019162:	fe fc 02 02 	ld.w	r12,pc[514]
80019166:	fe b0 cf 73 	rcall	8001304c <print_dbg>

  scene_init();
8001916a:	e0 a0 38 95 	rcall	80020294 <scene_init>
  print_dbg("\r\n scene_init");
8001916e:	4f fc       	lddpc	r12,80019368 <main+0x310>
80019170:	fe b0 cf 6e 	rcall	8001304c <print_dbg>
80019174:	e0 a0 29 a0 	rcall	8001e4b4 <menu_init>

  menu_init();
80019178:	4f dc       	lddpc	r12,8001936c <main+0x314>
  print_dbg("\r\n menu_init");
8001917a:	fe b0 cf 69 	rcall	8001304c <print_dbg>
8001917e:	d5 03       	csrf	0x10
80019180:	fe b0 f4 2e 	rcall	800179dc <init_flash>

  // setup control logic
  init_ctl();

  // initialize flash
  init_flash();
80019184:	fe b0 f7 36 	rcall	80017ff0 <screen_clear>

  /// boot default dsp
  screen_clear();
80019188:	33 f9       	mov	r9,63
8001918a:	4f aa       	lddpc	r10,80019370 <main+0x318>

  screen_line(0, 1, "loading default DSP...", 0x3f);
8001918c:	30 1b       	mov	r11,1
8001918e:	30 0c       	mov	r12,0
80019190:	fe b0 f9 be 	rcall	8001850c <screen_line>
80019194:	fe b0 fa 0e 	rcall	800185b0 <screen_refresh>
80019198:	4f 7c       	lddpc	r12,80019374 <main+0x31c>
  screen_refresh();
8001919a:	fe b0 f2 d9 	rcall	8001774c <files_load_dsp_name>
  files_load_dsp_name("default.ldr");
8001919e:	33 f9       	mov	r9,63
800191a0:	4f 6a       	lddpc	r10,80019378 <main+0x320>
800191a2:	30 1b       	mov	r11,1
800191a4:	30 0c       	mov	r12,0

  screen_line(0, 1, "press any key to continue...", 0x3f);
800191a6:	fe b0 f9 b3 	rcall	8001850c <screen_line>
800191aa:	fe b0 fa 03 	rcall	800185b0 <screen_refresh>
800191ae:	4f 4c       	lddpc	r12,8001937c <main+0x324>
800191b0:	e0 64 29 f4 	mov	r4,10740
  screen_refresh();
800191b4:	fe b0 cf 4c 	rcall	8001304c <print_dbg>

  print_dbg("\r\n starting event loop.\r\n");
800191b8:	30 c6       	mov	r6,12
800191ba:	4f 23       	lddpc	r3,80019380 <main+0x328>
800191bc:	e0 62 29 fc 	mov	r2,10748
800191c0:	08 95       	mov	r5,r4
800191c2:	30 07       	mov	r7,0
800191c4:	e0 6c 29 f4 	mov	r12,10740
800191c8:	fe b0 f1 6a 	rcall	8001749c <get_next_event>
800191cc:	cf c0       	breq	800191c4 <main+0x16c>
800191ce:	0d 88       	ld.ub	r8,r6[0x0]

// app event loop
static void check_events(void) {
  static event_t e;

  if( get_next_event(&e) ) {
800191d0:	ee 08 18 00 	cp.b	r8,r7
800191d4:	c1 50       	breq	800191fe <main+0x1a6>
800191d6:	6a 08       	ld.w	r8,r5[0x0]
800191d8:	58 b8       	cp.w	r8,11
800191da:	5f 0a       	sreq	r10
800191dc:	58 98       	cp.w	r8,9

    ////////////////////
    /////////////////////
    ///// TODO: move to app subclass

    if(startup) {
800191de:	5f 09       	sreq	r9
800191e0:	f5 e9 10 09 	or	r9,r10,r9
800191e4:	ee 09 18 00 	cp.b	r9,r7
      if( e.type == kEventSwitchDown0
800191e8:	c0 71       	brne	800191f6 <main+0x19e>
800191ea:	58 d8       	cp.w	r8,13
800191ec:	c0 50       	breq	800191f6 <main+0x19e>
800191ee:	58 f8       	cp.w	r8,15
800191f0:	c0 30       	breq	800191f6 <main+0x19e>
800191f2:	59 18       	cp.w	r8,17
800191f4:	ce 81       	brne	800191c4 <main+0x16c>
800191f6:	ac 87       	st.b	r6[0x0],r7
800191f8:	e0 a0 38 3e 	rcall	80020274 <scene_read_default>
800191fc:	ce 4b       	rjmp	800191c4 <main+0x16c>
800191fe:	6a 08       	ld.w	r8,r5[0x0]
80019200:	20 48       	sub	r8,4
80019202:	59 48       	cp.w	r8,20
80019204:	fe 9b ff e0 	brhi	800191c4 <main+0x16c>
  }
}


static void app_launch(void) {
  scene_read_default();
80019208:	e6 08 03 2f 	ld.w	pc,r3[r8<<0x2]
8001920c:	4d ec       	lddpc	r12,80019384 <main+0x32c>
	app_launch();
	return;
      }
    } else {
      
      switch(e.type) {
8001920e:	fe b0 cf 1f 	rcall	8001304c <print_dbg>
80019212:	cd 9b       	rjmp	800191c4 <main+0x16c>
80019214:	4d dc       	lddpc	r12,80019388 <main+0x330>
80019216:	fe b0 cf 1b 	rcall	8001304c <print_dbg>
8001921a:	cd 5b       	rjmp	800191c4 <main+0x16c>
	/// footswitches
      case kEventSwitchDown6:
	print_dbg("\r\n footswitch1 down");
	break;
      case kEventSwitchUp6:
	print_dbg("\r\n footswitch1 up");
8001921c:	4d cc       	lddpc	r12,8001938c <main+0x334>
8001921e:	fe b0 cf 17 	rcall	8001304c <print_dbg>
80019222:	cd 1b       	rjmp	800191c4 <main+0x16c>
80019224:	30 0b       	mov	r11,0
      case kEventSwitchUp3:
	menu_handleKey(eKeyFnUpD, e.data);
	break;
	/// footswitches
      case kEventSwitchDown6:
	print_dbg("\r\n footswitch1 down");
80019226:	33 f9       	mov	r9,63
80019228:	4d aa       	lddpc	r10,80019390 <main+0x338>
8001922a:	16 9c       	mov	r12,r11
8001922c:	fe b0 f9 70 	rcall	8001850c <screen_line>
	break;
      case kEventSwitchUp6:
	print_dbg("\r\n footswitch1 up");
	break;
      case kEventSwitchDown7:
	print_dbg("\r\n footswitch2 down");
80019230:	4d 9c       	lddpc	r12,80019394 <main+0x33c>
80019232:	fe b0 cf 0d 	rcall	8001304c <print_dbg>
80019236:	fe b0 f9 bd 	rcall	800185b0 <screen_refresh>
	break;
      case kEventSwitchUp4:
	break;
	// power switch
      case kEventSwitchDown5:
	screen_line(0, 0, "powering down!", 0x3f);
8001923a:	32 fc       	mov	r12,47
8001923c:	fe b0 ca 6e 	rcall	80012718 <gpio_clr_gpio_pin>
80019240:	cc 2b       	rjmp	800191c4 <main+0x16c>
80019242:	4d 6c       	lddpc	r12,80019398 <main+0x340>
80019244:	fe b0 cf 04 	rcall	8001304c <print_dbg>
	print_dbg("\r\n AVR32 received power down switch event");
80019248:	cb eb       	rjmp	800191c4 <main+0x16c>
8001924a:	05 88       	ld.ub	r8,r2[0x0]
8001924c:	ec 18 00 01 	eorl	r8,0x1
	screen_refresh();
80019250:	a4 88       	st.b	r2[0x0],r8
	gpio_clr_gpio_pin(POWER_CTL_PIN);
80019252:	c5 80       	breq	80019302 <main+0x2aa>
80019254:	31 7c       	mov	r12,23
80019256:	fe b0 ca 54 	rcall	800126fe <gpio_set_gpio_pin>
	break;
      case kEventSwitchDown7:
	print_dbg("\r\n footswitch2 down");
	break;
      case kEventSwitchUp7:
	print_dbg("\r\n footswitch2 up");
8001925a:	88 3b       	ld.sh	r11,r4[0x6]
8001925c:	30 0c       	mov	r12,0
8001925e:	e0 a0 28 ff 	rcall	8001e45c <menu_handleKey>
	break;
	// mode switch
      case kEventSwitchDown4:
	mode ^= 1;
80019262:	cb 1b       	rjmp	800191c4 <main+0x16c>
80019264:	88 3b       	ld.sh	r11,r4[0x6]
80019266:	30 8c       	mov	r12,8
80019268:	e0 a0 28 fa 	rcall	8001e45c <menu_handleKey>
	if(mode) { gpio_set_gpio_pin(LED_MODE_PIN); }
8001926c:	ca cb       	rjmp	800191c4 <main+0x16c>
8001926e:	88 3b       	ld.sh	r11,r4[0x6]
80019270:	30 7c       	mov	r12,7
	else { gpio_clr_gpio_pin(LED_MODE_PIN); }
	menu_handleKey(eKeyMode, e.data);
80019272:	e0 a0 28 f5 	rcall	8001e45c <menu_handleKey>
80019276:	ca 7b       	rjmp	800191c4 <main+0x16c>
80019278:	88 3b       	ld.sh	r11,r4[0x6]
8001927a:	30 6c       	mov	r12,6
	break;
      case kEventSwitchDown3:
	menu_handleKey(eKeyFnDownD, e.data);
	break;
      case kEventSwitchUp3:
	menu_handleKey(eKeyFnUpD, e.data);
8001927c:	e0 a0 28 f0 	rcall	8001e45c <menu_handleKey>
80019280:	ca 2b       	rjmp	800191c4 <main+0x16c>
80019282:	88 3b       	ld.sh	r11,r4[0x6]
80019284:	30 5c       	mov	r12,5
	break;
      case kEventSwitchUp2:
	menu_handleKey(eKeyFnUpC, e.data);
	break;
      case kEventSwitchDown3:
	menu_handleKey(eKeyFnDownD, e.data);
80019286:	e0 a0 28 eb 	rcall	8001e45c <menu_handleKey>
8001928a:	c9 db       	rjmp	800191c4 <main+0x16c>
8001928c:	88 3b       	ld.sh	r11,r4[0x6]
8001928e:	30 4c       	mov	r12,4
	break;
      case kEventSwitchDown2:
	menu_handleKey(eKeyFnDownC, e.data);
	break;
      case kEventSwitchUp2:
	menu_handleKey(eKeyFnUpC, e.data);
80019290:	e0 a0 28 e6 	rcall	8001e45c <menu_handleKey>
80019294:	c9 8b       	rjmp	800191c4 <main+0x16c>
80019296:	88 3b       	ld.sh	r11,r4[0x6]
80019298:	30 3c       	mov	r12,3
	break;
      case kEventSwitchUp1:
	menu_handleKey(eKeyFnUpB, e.data);
	break;
      case kEventSwitchDown2:
	menu_handleKey(eKeyFnDownC, e.data);
8001929a:	e0 a0 28 e1 	rcall	8001e45c <menu_handleKey>
8001929e:	c9 3b       	rjmp	800191c4 <main+0x16c>
800192a0:	88 3b       	ld.sh	r11,r4[0x6]
800192a2:	30 2c       	mov	r12,2
	break;
      case kEventSwitchDown1:
	menu_handleKey(eKeyFnDownB, e.data);
	break;
      case kEventSwitchUp1:
	menu_handleKey(eKeyFnUpB, e.data);
800192a4:	e0 a0 28 dc 	rcall	8001e45c <menu_handleKey>
800192a8:	c8 eb       	rjmp	800191c4 <main+0x16c>
800192aa:	88 3b       	ld.sh	r11,r4[0x6]
800192ac:	30 1c       	mov	r12,1
	break;
      case kEventSwitchUp0:
	menu_handleKey(eKeyFnUpA, e.data);
	break;
      case kEventSwitchDown1:
	menu_handleKey(eKeyFnDownB, e.data);
800192ae:	e0 a0 28 d7 	rcall	8001e45c <menu_handleKey>
800192b2:	c8 9b       	rjmp	800191c4 <main+0x16c>
800192b4:	68 1b       	ld.w	r11,r4[0x4]
800192b6:	58 0b       	cp.w	r11,0
	//----- function switches
      case kEventSwitchDown0:
	menu_handleKey(eKeyFnDownA, e.data);
	break;
      case kEventSwitchUp0:
	menu_handleKey(eKeyFnUpA, e.data);
800192b8:	e0 8a 00 29 	brle	8001930a <main+0x2b2>
800192bc:	5c 8b       	casts.h	r11
800192be:	30 9c       	mov	r12,9
800192c0:	e0 a0 28 ce 	rcall	8001e45c <menu_handleKey>
      case kEventRefresh:
	screen_refresh();
	break;
	//----- function switches
      case kEventSwitchDown0:
	menu_handleKey(eKeyFnDownA, e.data);
800192c4:	c8 0b       	rjmp	800191c4 <main+0x16c>
800192c6:	68 1b       	ld.w	r11,r4[0x4]
800192c8:	58 0b       	cp.w	r11,0
800192ca:	e0 8a 00 2a 	brle	8001931e <main+0x2c6>
	  menu_handleKey(eKeyEncDownB, e.data);
	}
	break;
      case kEventEncoder3:
	//	print_dbg("\r\n encoder 3");
	if(e.data > 0) {
800192ce:	5c 8b       	casts.h	r11
800192d0:	30 bc       	mov	r12,11
800192d2:	e0 a0 28 c5 	rcall	8001e45c <menu_handleKey>
	  menu_handleKey(eKeyEncUpA, e.data);
800192d6:	c7 7b       	rjmp	800191c4 <main+0x16c>
800192d8:	68 1b       	ld.w	r11,r4[0x4]
800192da:	58 0b       	cp.w	r11,0
800192dc:	e0 8a 00 1c 	brle	80019314 <main+0x2bc>
	  menu_handleKey(eKeyEncDownC, e.data);
	}
	break;
      case kEventEncoder2:
	//	print_dbg("\r\n encoder 2");
	if(e.data > 0) {
800192e0:	5c 8b       	casts.h	r11
800192e2:	30 fc       	mov	r12,15
800192e4:	e0 a0 28 bc 	rcall	8001e45c <menu_handleKey>
	  menu_handleKey(eKeyEncUpB, e.data);
800192e8:	c6 eb       	rjmp	800191c4 <main+0x16c>
800192ea:	68 1b       	ld.w	r11,r4[0x4]
800192ec:	58 0b       	cp.w	r11,0
800192ee:	e0 8a 00 1d 	brle	80019328 <main+0x2d0>
	break;
      case kEventSwitchUp5:
	break;
      case kEventEncoder0:
	//	 print_dbg("\r\n encoder 0");
      	if(e.data > 0) {
800192f2:	5c 8b       	casts.h	r11
800192f4:	30 dc       	mov	r12,13
800192f6:	e0 a0 28 b3 	rcall	8001e45c <menu_handleKey>
      	  menu_handleKey(eKeyEncUpD, e.data);
800192fa:	c6 5b       	rjmp	800191c4 <main+0x16c>
800192fc:	fe b0 f9 5a 	rcall	800185b0 <screen_refresh>
80019300:	c6 2b       	rjmp	800191c4 <main+0x16c>
      	  menu_handleKey(eKeyEncDownD, e.data);
      	}
      	break;
      case kEventEncoder1:
	//	print_dbg("\r\n encoder 1");
	if(e.data > 0) {
80019302:	31 7c       	mov	r12,23
80019304:	fe b0 ca 0a 	rcall	80012718 <gpio_clr_gpio_pin>
80019308:	ca 9b       	rjmp	8001925a <main+0x202>
	  menu_handleKey(eKeyEncUpC, e.data);
8001930a:	5c 8b       	casts.h	r11
8001930c:	30 ac       	mov	r12,10
8001930e:	e0 a0 28 a7 	rcall	8001e45c <menu_handleKey>
80019312:	c5 9b       	rjmp	800191c4 <main+0x16c>
    } else {
      
      switch(e.type) {

      case kEventRefresh:
	screen_refresh();
80019314:	5c 8b       	casts.h	r11
80019316:	31 0c       	mov	r12,16
80019318:	e0 a0 28 a2 	rcall	8001e45c <menu_handleKey>
	break;
	// mode switch
      case kEventSwitchDown4:
	mode ^= 1;
	if(mode) { gpio_set_gpio_pin(LED_MODE_PIN); }
	else { gpio_clr_gpio_pin(LED_MODE_PIN); }
8001931c:	c5 4b       	rjmp	800191c4 <main+0x16c>
8001931e:	5c 8b       	casts.h	r11
80019320:	30 cc       	mov	r12,12
      case kEventEncoder3:
	//	print_dbg("\r\n encoder 3");
	if(e.data > 0) {
	  menu_handleKey(eKeyEncUpA, e.data);
	} else {
	  menu_handleKey(eKeyEncDownA, e.data);
80019322:	e0 a0 28 9d 	rcall	8001e45c <menu_handleKey>
80019326:	c4 fb       	rjmp	800191c4 <main+0x16c>
80019328:	5c 8b       	casts.h	r11
8001932a:	30 ec       	mov	r12,14
      case kEventEncoder0:
	//	 print_dbg("\r\n encoder 0");
      	if(e.data > 0) {
      	  menu_handleKey(eKeyEncUpD, e.data);
      	} else {
      	  menu_handleKey(eKeyEncDownD, e.data);
8001932c:	e0 a0 28 98 	rcall	8001e45c <menu_handleKey>
80019330:	c4 ab       	rjmp	800191c4 <main+0x16c>
80019332:	d7 03       	nop
80019334:	80 02       	ld.sh	r2,r0[0x0]
      case kEventEncoder2:
	//	print_dbg("\r\n encoder 2");
	if(e.data > 0) {
	  menu_handleKey(eKeyEncUpB, e.data);
	} else {
	  menu_handleKey(eKeyEncDownB, e.data);
80019336:	28 1c       	sub	r12,-127
80019338:	80 02       	ld.sh	r2,r0[0x0]
8001933a:	28 30       	sub	r0,-125
8001933c:	80 02       	ld.sh	r2,r0[0x0]
8001933e:	28 38       	sub	r8,-125
      case kEventEncoder1:
	//	print_dbg("\r\n encoder 1");
	if(e.data > 0) {
	  menu_handleKey(eKeyEncUpC, e.data);
	} else {
	  menu_handleKey(eKeyEncDownC, e.data);
80019340:	80 02       	ld.sh	r2,r0[0x0]
80019342:	28 50       	sub	r0,-123
80019344:	80 02       	ld.sh	r2,r0[0x0]
80019346:	28 60       	sub	r0,-122
80019348:	80 02       	ld.sh	r2,r0[0x0]
8001934a:	28 74       	sub	r4,-121
8001934c:	80 02       	ld.sh	r2,r0[0x0]
8001934e:	28 88       	sub	r8,-120
80019350:	80 02       	ld.sh	r2,r0[0x0]
80019352:	28 94       	sub	r4,-119
80019354:	80 02       	ld.sh	r2,r0[0x0]
80019356:	28 a4       	sub	r4,-118
80019358:	80 02       	ld.sh	r2,r0[0x0]
8001935a:	28 b8       	sub	r8,-117
8001935c:	80 02       	ld.sh	r2,r0[0x0]
8001935e:	28 c4       	sub	r4,-116
80019360:	80 02       	ld.sh	r2,r0[0x0]
80019362:	28 d4       	sub	r4,-115
80019364:	80 02       	ld.sh	r2,r0[0x0]
80019366:	28 e0       	sub	r0,-114
80019368:	80 02       	ld.sh	r2,r0[0x0]
8001936a:	28 f0       	sub	r0,-113
8001936c:	80 02       	ld.sh	r2,r0[0x0]
8001936e:	29 00       	sub	r0,-112
80019370:	80 02       	ld.sh	r2,r0[0x0]
80019372:	29 10       	sub	r0,-111
80019374:	80 02       	ld.sh	r2,r0[0x0]
80019376:	29 28       	sub	r8,-110
80019378:	80 02       	ld.sh	r2,r0[0x0]
8001937a:	29 34       	sub	r4,-109
8001937c:	80 02       	ld.sh	r2,r0[0x0]
8001937e:	29 54       	sub	r4,-107
80019380:	80 02       	ld.sh	r2,r0[0x0]
80019382:	27 c8       	sub	r8,124
80019384:	80 02       	ld.sh	r2,r0[0x0]
80019386:	29 84       	sub	r4,-104
80019388:	80 02       	ld.sh	r2,r0[0x0]
8001938a:	29 70       	sub	r0,-105
8001938c:	80 02       	ld.sh	r2,r0[0x0]
8001938e:	29 98       	sub	r8,-103
80019390:	80 02       	ld.sh	r2,r0[0x0]
80019392:	29 c0       	sub	r0,-100
80019394:	80 02       	ld.sh	r2,r0[0x0]
80019396:	29 d0       	sub	r0,-99
80019398:	80 02       	ld.sh	r2,r0[0x0]
8001939a:	29 ac       	sub	r12,-102

8001939c <usb_mode_change>:
#include "usb.h"

// usb mode change callback
void usb_mode_change(bool b_host_mode) {
  // print_dbg("\r\n mode change (ignore) ");
}
8001939c:	5e fc       	retal	r12

8001939e <usb_vbus_change>:
 
// usb Vbus change callback
void usb_vbus_change(bool b_vbus_present) {
  // print_dbg("\r\n usb vbus change, new status: ");
  // print_dbg_ulong(b_vbus_present);
}
8001939e:	5e fc       	retal	r12

800193a0 <usb_vbus_error>:

// usb vbus error callback
void usb_vbus_error(void) {
  // print_dbg("\r\n usb vbus error: ");

}
800193a0:	5e fc       	retal	r12

800193a2 <usb_connection>:
void usb_connection(uhc_device_t *dev, bool b_present) {
    // print_dbg("\r\n usb device connection: ");
    // print_dbg_hex(dev);
    // print_dbg(" , ");
    // print_dbg_ulong(b_present);
}
800193a2:	5e fc       	retal	r12

800193a4 <usb_wakeup>:

// usb wakeup callback
void usb_wakeup(void) {
    // print_dbg("\r\n usb wakeup");
}
800193a4:	5e fc       	retal	r12

800193a6 <usb_sof>:

// usb start-of-frame callback
void usb_sof(void) {
  //    // print_dbg("\r\n usb sof");
}
800193a6:	5e fc       	retal	r12

800193a8 <usb_enum>:
  // print_dbg("\r\n usb enumerated: ");
  // print_dbg_hex(dev);
  // print_dbg(" , ");
  // print_dbg_hex(status);

}
800193a8:	5e fc       	retal	r12
800193aa:	d7 03       	nop

800193ac <hid_mouse_move>:
void hid_mouse_btn_middle(bool b_state) {
  print_dbg("\r\n usb mid mouse button: ");
  print_dbg_ulong(b_state);
}

void hid_mouse_move(int8_t x, int8_t y, int8_t scroll) {
800193ac:	eb cd 40 e0 	pushm	r5-r7,lr
800193b0:	16 97       	mov	r7,r11
800193b2:	14 96       	mov	r6,r10
800193b4:	18 95       	mov	r5,r12
  print_dbg("\r\n usb mouse move; x: ");
800193b6:	48 cc       	lddpc	r12,800193e4 <hid_mouse_move+0x38>
800193b8:	fe b0 ce 4a 	rcall	8001304c <print_dbg>
  print_dbg_hex(x);
800193bc:	f9 d5 b0 08 	bfexts	r12,r5,0x0,0x8
800193c0:	fe b0 cd ee 	rcall	80012f9c <print_dbg_hex>
  print_dbg(", y: ");
800193c4:	48 9c       	lddpc	r12,800193e8 <hid_mouse_move+0x3c>
800193c6:	fe b0 ce 43 	rcall	8001304c <print_dbg>
  print_dbg_hex(y);
800193ca:	0e 9c       	mov	r12,r7
800193cc:	5c 6c       	casts.b	r12
800193ce:	fe b0 cd e7 	rcall	80012f9c <print_dbg_hex>
  print_dbg(", scroll: ");
800193d2:	48 7c       	lddpc	r12,800193ec <hid_mouse_move+0x40>
800193d4:	fe b0 ce 3c 	rcall	8001304c <print_dbg>
  print_dbg_hex(scroll);
800193d8:	f9 d6 b0 08 	bfexts	r12,r6,0x0,0x8
800193dc:	fe b0 cd e0 	rcall	80012f9c <print_dbg_hex>
}
800193e0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800193e4:	80 02       	ld.sh	r2,r0[0x0]
800193e6:	29 fc       	sub	r12,-97
800193e8:	80 02       	ld.sh	r2,r0[0x0]
800193ea:	2a 14       	sub	r4,-95
800193ec:	80 02       	ld.sh	r2,r0[0x0]
800193ee:	2a 1c       	sub	r12,-95

800193f0 <hid_mouse_btn_middle>:
800193f0:	eb cd 40 80 	pushm	r7,lr
800193f4:	18 97       	mov	r7,r12
800193f6:	48 5c       	lddpc	r12,80019408 <hid_mouse_btn_middle+0x18>
  print_dbg("\r\n usb right mouse button: ");
  print_dbg_ulong(b_state);
}

void hid_mouse_btn_middle(bool b_state) {
  print_dbg("\r\n usb mid mouse button: ");
800193f8:	fe b0 ce 2a 	rcall	8001304c <print_dbg>
  print_dbg_ulong(b_state);
800193fc:	0e 9c       	mov	r12,r7
800193fe:	fe b0 ce 05 	rcall	80013008 <print_dbg_ulong>
}
80019402:	e3 cd 80 80 	ldm	sp++,r7,pc
80019406:	d7 03       	nop
80019408:	80 02       	ld.sh	r2,r0[0x0]
8001940a:	2a 28       	sub	r8,-94

8001940c <hid_mouse_btn_right>:
8001940c:	eb cd 40 80 	pushm	r7,lr
80019410:	18 97       	mov	r7,r12
80019412:	48 5c       	lddpc	r12,80019424 <hid_mouse_btn_right+0x18>
  
  //gpio_tgl_gpio_pin(LED_MODE_PIN);
}

void hid_mouse_btn_right(bool b_state) {
  print_dbg("\r\n usb right mouse button: ");
80019414:	fe b0 ce 1c 	rcall	8001304c <print_dbg>
  print_dbg_ulong(b_state);
80019418:	0e 9c       	mov	r12,r7
8001941a:	fe b0 cd f7 	rcall	80013008 <print_dbg_ulong>
}
8001941e:	e3 cd 80 80 	ldm	sp++,r7,pc
80019422:	d7 03       	nop
80019424:	80 02       	ld.sh	r2,r0[0x0]
80019426:	2a 44       	sub	r4,-92

80019428 <hid_mouse_btn_left>:
80019428:	eb cd 40 80 	pushm	r7,lr
8001942c:	18 97       	mov	r7,r12
8001942e:	48 5c       	lddpc	r12,80019440 <hid_mouse_btn_left+0x18>
#include "uhc.h"


// mouse event callbacks
void hid_mouse_btn_left(bool b_state) {
  print_dbg("\r\n usb left mouse button: ");
80019430:	fe b0 ce 0e 	rcall	8001304c <print_dbg>
  print_dbg_ulong(b_state);
80019434:	0e 9c       	mov	r12,r7
80019436:	fe b0 cd e9 	rcall	80013008 <print_dbg_ulong>
  
  //gpio_tgl_gpio_pin(LED_MODE_PIN);
}
8001943a:	e3 cd 80 80 	ldm	sp++,r7,pc
8001943e:	d7 03       	nop
80019440:	80 02       	ld.sh	r2,r0[0x0]
80019442:	2a 60       	sub	r0,-90

80019444 <uhi_hid_mouse_uninstall>:
	uhi_hid_mouse_start_trans_report(dev->address);
	UHI_HID_MOUSE_CHANGE(dev, true);
}

void uhi_hid_mouse_uninstall(uhc_device_t* dev)
{
80019444:	d4 01       	pushm	lr
	if (uhi_hid_mouse_dev.dev != dev) {
80019446:	e0 68 2a 00 	mov	r8,10752
8001944a:	70 09       	ld.w	r9,r8[0x0]
8001944c:	18 39       	cp.w	r9,r12
8001944e:	c0 20       	breq	80019452 <uhi_hid_mouse_uninstall+0xe>
		return; // Device not enabled in this interface
	}
	uhi_hid_mouse_dev.dev = NULL;
80019450:	d8 02       	popm	pc
	Assert(uhi_hid_mouse_dev.report!=NULL);
	free(uhi_hid_mouse_dev.report);
80019452:	30 09       	mov	r9,0
void uhi_hid_mouse_uninstall(uhc_device_t* dev)
{
	if (uhi_hid_mouse_dev.dev != dev) {
		return; // Device not enabled in this interface
	}
	uhi_hid_mouse_dev.dev = NULL;
80019454:	70 2c       	ld.w	r12,r8[0x8]
	Assert(uhi_hid_mouse_dev.report!=NULL);
	free(uhi_hid_mouse_dev.report);
80019456:	91 09       	st.w	r8[0x0],r9
80019458:	e0 a0 3c 94 	rcall	80020d80 <free>
8001945c:	d8 02       	popm	pc
8001945e:	d7 03       	nop

80019460 <uhi_hid_mouse_enable>:
80019460:	d4 01       	pushm	lr
80019462:	e0 69 2a 00 	mov	r9,10752
	return UHC_ENUM_UNSUPPORTED; // No interface supported
}

void uhi_hid_mouse_enable(uhc_device_t* dev)
{
	if (uhi_hid_mouse_dev.dev != dev) {
80019466:	72 08       	ld.w	r8,r9[0x0]
80019468:	18 38       	cp.w	r8,r12
8001946a:	c0 20       	breq	8001946e <uhi_hid_mouse_enable+0xe>
		return;  // No interface to enable
	}

	// Init value
	uhi_hid_mouse_dev.report_btn_prev = 0;
8001946c:	d8 02       	popm	pc
8001946e:	30 0a       	mov	r10,0
80019470:	f3 6a 00 0c 	st.b	r9[12],r10
 * \param add   USB address to use
 */
static void uhi_hid_mouse_start_trans_report(usb_add_t add)
{
	// Start transfer on interrupt endpoint IN
	uhd_ep_run(add, uhi_hid_mouse_dev.ep_in, true, uhi_hid_mouse_dev.report,
80019474:	fe ca ff e0 	sub	r10,pc,-32
80019478:	13 cb       	ld.ub	r11,r9[0x4]
8001947a:	1a da       	st.w	--sp,r10
8001947c:	30 0a       	mov	r10,0
8001947e:	1a da       	st.w	--sp,r10
80019480:	30 1a       	mov	r10,1
80019482:	f1 3c 00 12 	ld.ub	r12,r8[18]
80019486:	13 d8       	ld.ub	r8,r9[0x5]
80019488:	72 29       	ld.w	r9,r9[0x8]
8001948a:	fe b0 dd 2d 	rcall	80014ee4 <uhd_ep_run>
8001948e:	2f ed       	sub	sp,-8
80019490:	d8 02       	popm	pc
80019492:	d7 03       	nop

80019494 <uhi_hid_mouse_report_reception>:
80019494:	d4 21       	pushm	r4-r7,lr
80019496:	58 0a       	cp.w	r10,0
80019498:	5f 18       	srne	r8
8001949a:	58 39       	cp.w	r9,3
{
	uint8_t state_prev;
	uint8_t state_new;
	UNUSED(ep);

	if ((status != UHD_TRANS_NOERROR) || (nb_transfered < 4)) {
8001949c:	5f 89       	srls	r9
static void uhi_hid_mouse_report_reception(
		usb_add_t add,
		usb_ep_t ep,
		uhd_trans_status_t status,
		iram_size_t nb_transfered)
{
8001949e:	18 96       	mov	r6,r12
	uint8_t state_prev;
	uint8_t state_new;
	UNUSED(ep);

	if ((status != UHD_TRANS_NOERROR) || (nb_transfered < 4)) {
800194a0:	f3 e8 10 08 	or	r8,r9,r8
800194a4:	c2 d1       	brne	800194fe <uhi_hid_mouse_report_reception+0x6a>
		return; // HID mouse transfer aborted
	}

	// Decode buttons
	state_prev = uhi_hid_mouse_dev.report_btn_prev;
	state_new = uhi_hid_mouse_dev.report[UHI_HID_MOUSE_BTN];
800194a6:	e0 67 2a 00 	mov	r7,10752
	if ((state_prev & 0x01) != (state_new & 0x01)) {
800194aa:	6e 28       	ld.w	r8,r7[0x8]
800194ac:	ef 35 00 0c 	ld.ub	r5,r7[12]
800194b0:	11 84       	ld.ub	r4,r8[0x0]
800194b2:	e9 e5 20 05 	eor	r5,r4,r5
800194b6:	ed b5 00 00 	bld	r5,0x0
		UHI_HID_MOUSE_EVENT_BTN_LEFT((state_new & 0x01) ? true : false);
	}
	if ((state_prev & 0x02) != (state_new & 0x02)) {
800194ba:	c3 40       	breq	80019522 <uhi_hid_mouse_report_reception+0x8e>
800194bc:	ed b5 00 01 	bld	r5,0x1
		UHI_HID_MOUSE_EVENT_BTN_RIGHT((state_new & 0x02) ? true : false);
	}
	if ((state_prev & 0x04) != (state_new & 0x04)) {
800194c0:	c3 70       	breq	8001952e <uhi_hid_mouse_report_reception+0x9a>
800194c2:	e2 15 00 04 	andl	r5,0x4,COH
		UHI_HID_MOUSE_EVENT_BTN_MIDDLE((state_new & 0x04) ? true : false);
	}
	uhi_hid_mouse_dev.report_btn_prev = state_new;
800194c6:	c2 41       	brne	8001950e <uhi_hid_mouse_report_reception+0x7a>
800194c8:	ef 64 00 0c 	st.b	r7[12],r4

	// Decode moves
	if ((uhi_hid_mouse_dev.report[UHI_HID_MOUSE_MOV_X] != 0)
800194cc:	6e 29       	ld.w	r9,r7[0x8]
800194ce:	13 9c       	ld.ub	r12,r9[0x1]
800194d0:	58 0c       	cp.w	r12,0
			|| (uhi_hid_mouse_dev.report[UHI_HID_MOUSE_MOV_Y] != 0)
800194d2:	c1 b1       	brne	80019508 <uhi_hid_mouse_report_reception+0x74>
		UHI_HID_MOUSE_EVENT_BTN_MIDDLE((state_new & 0x04) ? true : false);
	}
	uhi_hid_mouse_dev.report_btn_prev = state_new;

	// Decode moves
	if ((uhi_hid_mouse_dev.report[UHI_HID_MOUSE_MOV_X] != 0)
800194d4:	13 ab       	ld.ub	r11,r9[0x2]
800194d6:	58 0b       	cp.w	r11,0
800194d8:	c1 40       	breq	80019500 <uhi_hid_mouse_report_reception+0x6c>
			|| (uhi_hid_mouse_dev.report[UHI_HID_MOUSE_MOV_Y] != 0)
			|| (uhi_hid_mouse_dev.report[UHI_HID_MOUSE_MOV_SCROLL] != 0)) {
		UHI_HID_MOUSE_EVENT_MOUVE(
800194da:	13 ba       	ld.ub	r10,r9[0x3]
800194dc:	5c 6a       	casts.b	r10
800194de:	5c 6b       	casts.b	r11
800194e0:	5c 6c       	casts.b	r12
800194e2:	c6 5f       	rcall	800193ac <hid_mouse_move>
800194e4:	6e 29       	ld.w	r9,r7[0x8]
 * \param add   USB address to use
 */
static void uhi_hid_mouse_start_trans_report(usb_add_t add)
{
	// Start transfer on interrupt endpoint IN
	uhd_ep_run(add, uhi_hid_mouse_dev.ep_in, true, uhi_hid_mouse_dev.report,
800194e6:	fe c8 00 52 	sub	r8,pc,82
800194ea:	0f cb       	ld.ub	r11,r7[0x4]
800194ec:	1a d8       	st.w	--sp,r8
800194ee:	30 08       	mov	r8,0
800194f0:	0c 9c       	mov	r12,r6
800194f2:	1a d8       	st.w	--sp,r8
800194f4:	30 1a       	mov	r10,1
800194f6:	0f d8       	ld.ub	r8,r7[0x5]
800194f8:	fe b0 dc f6 	rcall	80014ee4 <uhd_ep_run>
800194fc:	2f ed       	sub	sp,-8
	uhi_hid_mouse_dev.report_btn_prev = state_new;

	// Decode moves
	if ((uhi_hid_mouse_dev.report[UHI_HID_MOUSE_MOV_X] != 0)
			|| (uhi_hid_mouse_dev.report[UHI_HID_MOUSE_MOV_Y] != 0)
			|| (uhi_hid_mouse_dev.report[UHI_HID_MOUSE_MOV_SCROLL] != 0)) {
800194fe:	d8 22       	popm	r4-r7,pc
		UHI_HID_MOUSE_EVENT_BTN_MIDDLE((state_new & 0x04) ? true : false);
	}
	uhi_hid_mouse_dev.report_btn_prev = state_new;

	// Decode moves
	if ((uhi_hid_mouse_dev.report[UHI_HID_MOUSE_MOV_X] != 0)
80019500:	13 ba       	ld.ub	r10,r9[0x3]
80019502:	58 0a       	cp.w	r10,0
80019504:	cf 10       	breq	800194e6 <uhi_hid_mouse_report_reception+0x52>
80019506:	ce bb       	rjmp	800194dc <uhi_hid_mouse_report_reception+0x48>
80019508:	13 ba       	ld.ub	r10,r9[0x3]
8001950a:	13 ab       	ld.ub	r11,r9[0x2]
	}
	if ((state_prev & 0x02) != (state_new & 0x02)) {
		UHI_HID_MOUSE_EVENT_BTN_RIGHT((state_new & 0x02) ? true : false);
	}
	if ((state_prev & 0x04) != (state_new & 0x04)) {
		UHI_HID_MOUSE_EVENT_BTN_MIDDLE((state_new & 0x04) ? true : false);
8001950c:	ce 8b       	rjmp	800194dc <uhi_hid_mouse_report_reception+0x48>
8001950e:	f9 d4 c0 41 	bfextu	r12,r4,0x2,0x1
80019512:	c6 ff       	rcall	800193f0 <hid_mouse_btn_middle>
	}
	uhi_hid_mouse_dev.report_btn_prev = state_new;
80019514:	ef 64 00 0c 	st.b	r7[12],r4

	// Decode moves
	if ((uhi_hid_mouse_dev.report[UHI_HID_MOUSE_MOV_X] != 0)
80019518:	6e 29       	ld.w	r9,r7[0x8]
8001951a:	13 9c       	ld.ub	r12,r9[0x1]
8001951c:	58 0c       	cp.w	r12,0
8001951e:	cd b0       	breq	800194d4 <uhi_hid_mouse_report_reception+0x40>
80019520:	cf 4b       	rjmp	80019508 <uhi_hid_mouse_report_reception+0x74>

	// Decode buttons
	state_prev = uhi_hid_mouse_dev.report_btn_prev;
	state_new = uhi_hid_mouse_dev.report[UHI_HID_MOUSE_BTN];
	if ((state_prev & 0x01) != (state_new & 0x01)) {
		UHI_HID_MOUSE_EVENT_BTN_LEFT((state_new & 0x01) ? true : false);
80019522:	f9 d4 c0 01 	bfextu	r12,r4,0x0,0x1
80019526:	c8 1f       	rcall	80019428 <hid_mouse_btn_left>
80019528:	ed b5 00 01 	bld	r5,0x1
	}
	if ((state_prev & 0x02) != (state_new & 0x02)) {
8001952c:	cc b1       	brne	800194c2 <uhi_hid_mouse_report_reception+0x2e>
8001952e:	f9 d4 c0 21 	bfextu	r12,r4,0x1,0x1
		UHI_HID_MOUSE_EVENT_BTN_RIGHT((state_new & 0x02) ? true : false);
80019532:	e2 15 00 04 	andl	r5,0x4,COH
	}
	if ((state_prev & 0x04) != (state_new & 0x04)) {
80019536:	c6 bf       	rcall	8001940c <hid_mouse_btn_right>
	state_new = uhi_hid_mouse_dev.report[UHI_HID_MOUSE_BTN];
	if ((state_prev & 0x01) != (state_new & 0x01)) {
		UHI_HID_MOUSE_EVENT_BTN_LEFT((state_new & 0x01) ? true : false);
	}
	if ((state_prev & 0x02) != (state_new & 0x02)) {
		UHI_HID_MOUSE_EVENT_BTN_RIGHT((state_new & 0x02) ? true : false);
80019538:	58 05       	cp.w	r5,0
8001953a:	cc 70       	breq	800194c8 <uhi_hid_mouse_report_reception+0x34>
	}
	if ((state_prev & 0x04) != (state_new & 0x04)) {
8001953c:	ce 9b       	rjmp	8001950e <uhi_hid_mouse_report_reception+0x7a>
8001953e:	d7 03       	nop

80019540 <uhi_hid_mouse_install>:
80019540:	d4 21       	pushm	r4-r7,lr
80019542:	e0 66 2a 00 	mov	r6,10752
80019546:	18 95       	mov	r5,r12
80019548:	6c 09       	ld.w	r9,r6[0x0]
8001954a:	58 09       	cp.w	r9,0
8001954c:	c0 30       	breq	80019552 <uhi_hid_mouse_install+0x12>
8001954e:	30 5c       	mov	r12,5
80019550:	d8 22       	popm	r4-r7,pc
80019552:	78 67       	ld.w	r7,r12[0x18]
80019554:	0f aa       	ld.ub	r10,r7[0x2]
80019556:	0f b8       	ld.ub	r8,r7[0x3]
80019558:	f1 ea 10 88 	or	r8,r8,r10<<0x8
8001955c:	5c c8       	swap.bh	r8
8001955e:	5c 88       	casts.h	r8

	if (uhi_hid_mouse_dev.dev != NULL) {
		return UHC_ENUM_SOFTWARE_LIMIT; // Device already allocated
	}
	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
80019560:	c2 80       	breq	800195b0 <uhi_hid_mouse_install+0x70>
	b_iface_supported = false;
	while(conf_desc_lgt) {
		switch (ptr_iface->bDescriptorType) {
80019562:	12 9c       	mov	r12,r9

		case USB_DT_INTERFACE:
			if ((ptr_iface->bInterfaceClass   == HID_CLASS)
80019564:	30 4a       	mov	r10,4
/**
 * \name Functions required by UHC
 * @{
 */

uhc_enum_status_t uhi_hid_mouse_install(uhc_device_t* dev)
80019566:	30 3e       	mov	lr,3
	}
	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
	b_iface_supported = false;
	while(conf_desc_lgt) {
		switch (ptr_iface->bDescriptorType) {
80019568:	30 24       	mov	r4,2
8001956a:	30 5b       	mov	r11,5
8001956c:	c0 98       	rjmp	8001957e <uhi_hid_mouse_install+0x3e>
8001956e:	f6 09 18 00 	cp.b	r9,r11
		default:
			// Ignore descriptor
			break;
		}
		Assert(conf_desc_lgt>=ptr_iface->bLength);
		conf_desc_lgt -= ptr_iface->bLength;
80019572:	c1 00       	breq	80019592 <uhi_hid_mouse_install+0x52>
80019574:	0f 89       	ld.ub	r9,r7[0x0]
		ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
80019576:	12 18       	sub	r8,r9
		default:
			// Ignore descriptor
			break;
		}
		Assert(conf_desc_lgt>=ptr_iface->bLength);
		conf_desc_lgt -= ptr_iface->bLength;
80019578:	12 07       	add	r7,r9
		return UHC_ENUM_SOFTWARE_LIMIT; // Device already allocated
	}
	conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
	ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
	b_iface_supported = false;
	while(conf_desc_lgt) {
8001957a:	5c 88       	casts.h	r8
		switch (ptr_iface->bDescriptorType) {
8001957c:	c1 a0       	breq	800195b0 <uhi_hid_mouse_install+0x70>
8001957e:	0f 99       	ld.ub	r9,r7[0x1]
80019580:	f4 09 18 00 	cp.b	r9,r10

		case USB_DT_INTERFACE:
			if ((ptr_iface->bInterfaceClass   == HID_CLASS)
80019584:	cf 51       	brne	8001956e <uhi_hid_mouse_install+0x2e>
80019586:	0f d9       	ld.ub	r9,r7[0x5]
80019588:	fc 09 18 00 	cp.b	r9,lr
				Assert(false);
				return UHC_ENUM_MEMORY_LIMIT; // Internal RAM allocation fail
			}
			uhi_hid_mouse_dev.dev = dev;
			// All endpoints of all interfaces supported allocated
			return UHC_ENUM_SUCCESS;
8001958c:	c0 d0       	breq	800195a6 <uhi_hid_mouse_install+0x66>
8001958e:	30 0c       	mov	r12,0
			}
			break;

		case USB_DT_ENDPOINT:
			//  Allocation of the endpoint
			if (!b_iface_supported) {
80019590:	cf 2b       	rjmp	80019574 <uhi_hid_mouse_install+0x34>
80019592:	58 0c       	cp.w	r12,0
				break;
			}
			if (!uhd_ep_alloc(dev->address, (usb_ep_desc_t*)ptr_iface)) {
80019594:	cf 00       	breq	80019574 <uhi_hid_mouse_install+0x34>
80019596:	0e 9b       	mov	r11,r7
80019598:	eb 3c 00 12 	ld.ub	r12,r5[18]
8001959c:	fe b0 d7 36 	rcall	80014408 <uhd_ep_alloc>
800195a0:	c0 91       	brne	800195b2 <uhi_hid_mouse_install+0x72>
800195a2:	30 4c       	mov	r12,4
/**
 * \name Functions required by UHC
 * @{
 */

uhc_enum_status_t uhi_hid_mouse_install(uhc_device_t* dev)
800195a4:	d8 22       	popm	r4-r7,pc
800195a6:	0f f9       	ld.ub	r9,r7[0x7]
800195a8:	e8 09 18 00 	cp.b	r9,r4
800195ac:	5f 0c       	sreq	r12
			// Ignore descriptor
			break;
		}
		Assert(conf_desc_lgt>=ptr_iface->bLength);
		conf_desc_lgt -= ptr_iface->bLength;
		ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
800195ae:	ce 3b       	rjmp	80019574 <uhi_hid_mouse_install+0x34>
			}
			if (!uhd_ep_alloc(dev->address, (usb_ep_desc_t*)ptr_iface)) {
				return UHC_ENUM_HARDWARE_LIMIT; // Endpoint allocation fail
			}
			Assert(((usb_ep_desc_t*)ptr_iface)->bEndpointAddress & USB_EP_DIR_IN);
			uhi_hid_mouse_dev.ep_in = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
800195b0:	da 2a       	popm	r4-r7,pc,r12=1
800195b2:	0f a8       	ld.ub	r8,r7[0x2]
			uhi_hid_mouse_dev.report_size =
800195b4:	ac c8       	st.b	r6[0x4],r8
800195b6:	0f cc       	ld.ub	r12,r7[0x4]
					le16_to_cpu(((usb_ep_desc_t*)ptr_iface)->wMaxPacketSize);
			uhi_hid_mouse_dev.report = malloc(uhi_hid_mouse_dev.report_size);
800195b8:	ac dc       	st.b	r6[0x5],r12
800195ba:	e0 a0 3b eb 	rcall	80020d90 <malloc>
			if (uhi_hid_mouse_dev.report == NULL) {
800195be:	8d 2c       	st.w	r6[0x8],r12
				Assert(false);
				return UHC_ENUM_MEMORY_LIMIT; // Internal RAM allocation fail
			}
			uhi_hid_mouse_dev.dev = dev;
800195c0:	c0 60       	breq	800195cc <uhi_hid_mouse_install+0x8c>
800195c2:	e0 68 2a 00 	mov	r8,10752
			// All endpoints of all interfaces supported allocated
			return UHC_ENUM_SUCCESS;
800195c6:	30 0c       	mov	r12,0
			Assert(((usb_ep_desc_t*)ptr_iface)->bEndpointAddress & USB_EP_DIR_IN);
			uhi_hid_mouse_dev.ep_in = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
			uhi_hid_mouse_dev.report_size =
					le16_to_cpu(((usb_ep_desc_t*)ptr_iface)->wMaxPacketSize);
			uhi_hid_mouse_dev.report = malloc(uhi_hid_mouse_dev.report_size);
			if (uhi_hid_mouse_dev.report == NULL) {
800195c8:	91 05       	st.w	r8[0x0],r5
800195ca:	d8 22       	popm	r4-r7,pc
800195cc:	30 6c       	mov	r12,6
800195ce:	d8 22       	popm	r4-r7,pc

800195d0 <uhi_hid_gamepad_uninstall>:
  //uhi_hid_gamepad_dev.report_btn_prev = 0;
  uhi_hid_gamepad_start_trans_report(dev->address);
  UHI_HID_GAMEPAD_CHANGE(dev, true);
}

void uhi_hid_gamepad_uninstall(uhc_device_t* dev) {
800195d0:	d4 01       	pushm	lr
  if (uhi_hid_gamepad_dev.dev != dev) {
800195d2:	e0 68 2a 10 	mov	r8,10768
800195d6:	70 09       	ld.w	r9,r8[0x0]
800195d8:	18 39       	cp.w	r9,r12
800195da:	c0 20       	breq	800195de <uhi_hid_gamepad_uninstall+0xe>
    return; // Device not enabled in this interface
  }
  uhi_hid_gamepad_dev.dev = NULL;
800195dc:	d8 02       	popm	pc
  Assert(uhi_hid_gamepad_dev.report!=NULL);
  free(uhi_hid_gamepad_dev.report);
800195de:	30 09       	mov	r9,0

void uhi_hid_gamepad_uninstall(uhc_device_t* dev) {
  if (uhi_hid_gamepad_dev.dev != dev) {
    return; // Device not enabled in this interface
  }
  uhi_hid_gamepad_dev.dev = NULL;
800195e0:	70 2c       	ld.w	r12,r8[0x8]
  Assert(uhi_hid_gamepad_dev.report!=NULL);
  free(uhi_hid_gamepad_dev.report);
800195e2:	91 09       	st.w	r8[0x0],r9
800195e4:	e0 a0 3b ce 	rcall	80020d80 <free>
800195e8:	d8 02       	popm	pc
800195ea:	d7 03       	nop

800195ec <uhi_hid_gamepad_enable>:
800195ec:	d4 01       	pushm	lr
800195ee:	e0 69 2a 10 	mov	r9,10768
  //////////
  ////////////


void uhi_hid_gamepad_enable(uhc_device_t* dev) {
  if (uhi_hid_gamepad_dev.dev != dev) {
800195f2:	72 08       	ld.w	r8,r9[0x0]
800195f4:	18 38       	cp.w	r8,r12
800195f6:	c0 20       	breq	800195fa <uhi_hid_gamepad_enable+0xe>
 *
 * \param add   USB address to use
 */
static void uhi_hid_gamepad_start_trans_report(usb_add_t add) {
  // Start transfer on interrupt endpoint IN
  uhd_ep_run(add, uhi_hid_gamepad_dev.ep_in, true, uhi_hid_gamepad_dev.report,
800195f8:	d8 02       	popm	pc
800195fa:	fe ca ff e2 	sub	r10,pc,-30
800195fe:	13 cb       	ld.ub	r11,r9[0x4]
80019600:	1a da       	st.w	--sp,r10
80019602:	30 0a       	mov	r10,0
80019604:	1a da       	st.w	--sp,r10
80019606:	30 1a       	mov	r10,1
80019608:	f1 3c 00 12 	ld.ub	r12,r8[18]
8001960c:	13 d8       	ld.ub	r8,r9[0x5]
8001960e:	72 29       	ld.w	r9,r9[0x8]
80019610:	fe b0 dc 6a 	rcall	80014ee4 <uhd_ep_run>
80019614:	2f ed       	sub	sp,-8
80019616:	d8 02       	popm	pc

80019618 <uhi_hid_gamepad_report_reception>:
80019618:	eb cd 40 e0 	pushm	r5-r7,lr
8001961c:	58 0a       	cp.w	r10,0
8001961e:	5f 18       	srne	r8

  int i;

  UNUSED(ep);

  if ((status != UHD_TRANS_NOERROR) || (nb_transfered < 4)) {
80019620:	58 39       	cp.w	r9,3
80019622:	5f 89       	srls	r9
static void uhi_hid_gamepad_report_reception(
					   usb_add_t add,
					   usb_ep_t ep,
					   uhd_trans_status_t status,
					   iram_size_t nb_transfered)
{
80019624:	18 96       	mov	r6,r12

  int i;

  UNUSED(ep);

  if ((status != UHD_TRANS_NOERROR) || (nb_transfered < 4)) {
80019626:	f3 e8 10 08 	or	r8,r9,r8
8001962a:	c0 30       	breq	80019630 <uhi_hid_gamepad_report_reception+0x18>
8001962c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
    return; // HID gamepad transfer aborted
  }

  print_dbg("\r\n gamepad_report: ");
80019630:	49 2c       	lddpc	r12,80019678 <uhi_hid_gamepad_report_reception+0x60>
80019632:	fe b0 cd 0d 	rcall	8001304c <print_dbg>
  for (i=0; i<uhi_hid_gamepad_dev.report_size; i++) {
80019636:	e0 67 2a 10 	mov	r7,10768
8001963a:	0f d8       	ld.ub	r8,r7[0x5]
8001963c:	58 08       	cp.w	r8,0
8001963e:	c0 f0       	breq	8001965c <uhi_hid_gamepad_report_reception+0x44>
    print_dbg(" ");
80019640:	30 05       	mov	r5,0
80019642:	48 fc       	lddpc	r12,8001967c <uhi_hid_gamepad_report_reception+0x64>
80019644:	fe b0 cd 04 	rcall	8001304c <print_dbg>
    print_dbg_hex((unsigned long int) uhi_hid_gamepad_dev.report[i]);
80019648:	6e 28       	ld.w	r8,r7[0x8]
8001964a:	f0 05 07 0c 	ld.ub	r12,r8[r5]
8001964e:	fe b0 cc a7 	rcall	80012f9c <print_dbg_hex>
  if ((status != UHD_TRANS_NOERROR) || (nb_transfered < 4)) {
    return; // HID gamepad transfer aborted
  }

  print_dbg("\r\n gamepad_report: ");
  for (i=0; i<uhi_hid_gamepad_dev.report_size; i++) {
80019652:	2f f5       	sub	r5,-1
80019654:	0f d8       	ld.ub	r8,r7[0x5]
80019656:	0a 38       	cp.w	r8,r5
80019658:	fe 99 ff f5 	brgt	80019642 <uhi_hid_gamepad_report_reception+0x2a>
 *
 * \param add   USB address to use
 */
static void uhi_hid_gamepad_start_trans_report(usb_add_t add) {
  // Start transfer on interrupt endpoint IN
  uhd_ep_run(add, uhi_hid_gamepad_dev.ep_in, true, uhi_hid_gamepad_dev.report,
8001965c:	fe c9 00 44 	sub	r9,pc,68
80019660:	0f cb       	ld.ub	r11,r7[0x4]
80019662:	1a d9       	st.w	--sp,r9
80019664:	30 09       	mov	r9,0
80019666:	0c 9c       	mov	r12,r6
80019668:	1a d9       	st.w	--sp,r9
8001966a:	30 1a       	mov	r10,1
8001966c:	6e 29       	ld.w	r9,r7[0x8]
8001966e:	fe b0 dc 3b 	rcall	80014ee4 <uhd_ep_run>
80019672:	2f ed       	sub	sp,-8
80019674:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80019678:	80 02       	ld.sh	r2,r0[0x0]
8001967a:	2a 7c       	sub	r12,-89
8001967c:	80 02       	ld.sh	r2,r0[0x0]
8001967e:	32 2c       	mov	r12,34

80019680 <uhi_hid_gamepad_install>:
80019680:	d4 21       	pushm	r4-r7,lr
80019682:	e0 66 2a 10 	mov	r6,10768
80019686:	18 95       	mov	r5,r12
80019688:	6c 08       	ld.w	r8,r6[0x0]
8001968a:	58 08       	cp.w	r8,0
8001968c:	c0 30       	breq	80019692 <uhi_hid_gamepad_install+0x12>
8001968e:	30 5c       	mov	r12,5
  usb_iface_desc_t *ptr_iface;

  if (uhi_hid_gamepad_dev.dev != NULL) {
    return UHC_ENUM_SOFTWARE_LIMIT; // Device already allocated
  }
  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
80019690:	d8 22       	popm	r4-r7,pc
80019692:	78 67       	ld.w	r7,r12[0x18]
80019694:	0f a4       	ld.ub	r4,r7[0x2]
80019696:	0f b9       	ld.ub	r9,r7[0x3]
80019698:	f3 e4 10 84 	or	r4,r9,r4<<0x8
8001969c:	5c c4       	swap.bh	r4
  ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
  b_iface_supported = false;

  //  return UHC_ENUM_UNSUPPORTED; // No interface supported

  while(conf_desc_lgt) {
8001969e:	5c 84       	casts.h	r4

  if (uhi_hid_gamepad_dev.dev != NULL) {
    return UHC_ENUM_SOFTWARE_LIMIT; // Device already allocated
  }
  conf_desc_lgt = le16_to_cpu(dev->conf_desc->wTotalLength);
  ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
800196a0:	c6 60       	breq	8001976c <uhi_hid_gamepad_install+0xec>
800196a2:	10 9a       	mov	r10,r8
  b_iface_supported = false;

  //  return UHC_ENUM_UNSUPPORTED; // No interface supported

  while(conf_desc_lgt) {
    switch (ptr_iface->bDescriptorType) {
800196a4:	c0 a8       	rjmp	800196b8 <uhi_hid_gamepad_install+0x38>
800196a6:	30 59       	mov	r9,5
800196a8:	f2 08 18 00 	cp.b	r8,r9
    default:
      // Ignore descriptor
      break;
    }
    Assert(conf_desc_lgt>=ptr_iface->bLength);
    conf_desc_lgt -= ptr_iface->bLength;
800196ac:	c5 60       	breq	80019758 <uhi_hid_gamepad_install+0xd8>
800196ae:	0f 88       	ld.ub	r8,r7[0x0]
    ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
800196b0:	10 14       	sub	r4,r8
    default:
      // Ignore descriptor
      break;
    }
    Assert(conf_desc_lgt>=ptr_iface->bLength);
    conf_desc_lgt -= ptr_iface->bLength;
800196b2:	10 07       	add	r7,r8
  ptr_iface = (usb_iface_desc_t*)dev->conf_desc;
  b_iface_supported = false;

  //  return UHC_ENUM_UNSUPPORTED; // No interface supported

  while(conf_desc_lgt) {
800196b4:	5c 84       	casts.h	r4
    switch (ptr_iface->bDescriptorType) {
800196b6:	c5 b0       	breq	8001976c <uhi_hid_gamepad_install+0xec>
800196b8:	0f 98       	ld.ub	r8,r7[0x1]
800196ba:	30 49       	mov	r9,4
800196bc:	f2 08 18 00 	cp.b	r8,r9
    case USB_DT_INTERFACE:

      /////////////////
      ///////////////  
      //#if 1
      print_dbg("\r\n\r\n");
800196c0:	cf 31       	brne	800196a6 <uhi_hid_gamepad_install+0x26>
800196c2:	4b 3c       	lddpc	r12,8001978c <uhi_hid_gamepad_install+0x10c>
800196c4:	fe b0 cc c4 	rcall	8001304c <print_dbg>
      print_dbg("\r\n iface_desc -> bLength : ");
800196c8:	4b 2c       	lddpc	r12,80019790 <uhi_hid_gamepad_install+0x110>
800196ca:	fe b0 cc c1 	rcall	8001304c <print_dbg>
      print_dbg_hex(ptr_iface->bLength);
800196ce:	0f 8c       	ld.ub	r12,r7[0x0]
800196d0:	fe b0 cc 66 	rcall	80012f9c <print_dbg_hex>
      print_dbg("\r\n iface_desc -> bDescriptorType : ");
800196d4:	4b 0c       	lddpc	r12,80019794 <uhi_hid_gamepad_install+0x114>
800196d6:	fe b0 cc bb 	rcall	8001304c <print_dbg>
      print_dbg_hex(ptr_iface->bDescriptorType);
800196da:	0f 9c       	ld.ub	r12,r7[0x1]
800196dc:	fe b0 cc 60 	rcall	80012f9c <print_dbg_hex>
      print_dbg("\r\n iface_desc -> bInterfaceNumber : ");
800196e0:	4a ec       	lddpc	r12,80019798 <uhi_hid_gamepad_install+0x118>
800196e2:	fe b0 cc b5 	rcall	8001304c <print_dbg>
      print_dbg_hex(ptr_iface->bInterfaceNumber);
800196e6:	0f ac       	ld.ub	r12,r7[0x2]
800196e8:	fe b0 cc 5a 	rcall	80012f9c <print_dbg_hex>
      print_dbg("\r\n iface_desc -> bAlternateSetting : ");
800196ec:	4a cc       	lddpc	r12,8001979c <uhi_hid_gamepad_install+0x11c>
800196ee:	fe b0 cc af 	rcall	8001304c <print_dbg>
      print_dbg_hex(ptr_iface->bAlternateSetting);
800196f2:	0f bc       	ld.ub	r12,r7[0x3]
800196f4:	fe b0 cc 54 	rcall	80012f9c <print_dbg_hex>
      print_dbg("\r\n iface_desc -> bNumEndpoints : ");
800196f8:	4a ac       	lddpc	r12,800197a0 <uhi_hid_gamepad_install+0x120>
800196fa:	fe b0 cc a9 	rcall	8001304c <print_dbg>
      print_dbg_hex(ptr_iface->bNumEndpoints);
800196fe:	0f cc       	ld.ub	r12,r7[0x4]
80019700:	fe b0 cc 4e 	rcall	80012f9c <print_dbg_hex>
      print_dbg("\r\n iface_desc -> bInterfaceClass : ");
80019704:	4a 8c       	lddpc	r12,800197a4 <uhi_hid_gamepad_install+0x124>
80019706:	fe b0 cc a3 	rcall	8001304c <print_dbg>
      print_dbg_hex(ptr_iface->bInterfaceClass);
8001970a:	0f dc       	ld.ub	r12,r7[0x5]
8001970c:	fe b0 cc 48 	rcall	80012f9c <print_dbg_hex>
      print_dbg("\r\n iface_desc -> bInterfaceSubClass : ");
80019710:	4a 6c       	lddpc	r12,800197a8 <uhi_hid_gamepad_install+0x128>
80019712:	fe b0 cc 9d 	rcall	8001304c <print_dbg>
      print_dbg_hex(ptr_iface->bInterfaceSubClass);
80019716:	0f ec       	ld.ub	r12,r7[0x6]
80019718:	fe b0 cc 42 	rcall	80012f9c <print_dbg_hex>
      print_dbg("\r\n iface_desc -> bInterfaceProtocol : ");
8001971c:	4a 4c       	lddpc	r12,800197ac <uhi_hid_gamepad_install+0x12c>
8001971e:	fe b0 cc 97 	rcall	8001304c <print_dbg>
      print_dbg_hex(ptr_iface->bInterfaceProtocol);
80019722:	0f fc       	ld.ub	r12,r7[0x7]
80019724:	fe b0 cc 3c 	rcall	80012f9c <print_dbg_hex>
      print_dbg("\r\n iface_desc -> iInterface : ");
80019728:	4a 2c       	lddpc	r12,800197b0 <uhi_hid_gamepad_install+0x130>
8001972a:	fe b0 cc 91 	rcall	8001304c <print_dbg>
      print_dbg_hex(ptr_iface->iInterface);
8001972e:	ef 3c 00 08 	ld.ub	r12,r7[8]
80019732:	fe b0 cc 35 	rcall	80012f9c <print_dbg_hex>
      print_dbg("\r\n\r\n");
80019736:	49 6c       	lddpc	r12,8001978c <uhi_hid_gamepad_install+0x10c>
80019738:	fe b0 cc 8a 	rcall	8001304c <print_dbg>
      ////////////
      /////////
      if ((ptr_iface->bInterfaceClass   == HID_CLASS)
8001973c:	0f d9       	ld.ub	r9,r7[0x5]
8001973e:	30 38       	mov	r8,3
80019740:	f0 09 18 00 	cp.b	r9,r8
	Assert(false);
	return UHC_ENUM_MEMORY_LIMIT; // Internal RAM allocation fail
      }
      uhi_hid_gamepad_dev.dev = dev;
      // All endpoints of all interfaces supported allocated
      return UHC_ENUM_SUCCESS;
80019744:	c0 30       	breq	8001974a <uhi_hid_gamepad_install+0xca>
80019746:	30 0a       	mov	r10,0
      print_dbg_hex(ptr_iface->iInterface);
      print_dbg("\r\n\r\n");
      ////////////
      /////////
      if ((ptr_iface->bInterfaceClass   == HID_CLASS)
	  && (ptr_iface->bInterfaceProtocol == HID_PROTOCOL_GENERIC) ) {
80019748:	cb 3b       	rjmp	800196ae <uhi_hid_gamepad_install+0x2e>
8001974a:	0f f9       	ld.ub	r9,r7[0x7]
8001974c:	30 08       	mov	r8,0
8001974e:	f0 09 18 00 	cp.b	r9,r8
80019752:	cf a1       	brne	80019746 <uhi_hid_gamepad_install+0xc6>
80019754:	30 1a       	mov	r10,1
      }
      break;

    case USB_DT_ENDPOINT:
      //  Allocation of the endpoint
      if (!b_iface_supported) {
80019756:	ca cb       	rjmp	800196ae <uhi_hid_gamepad_install+0x2e>
80019758:	58 0a       	cp.w	r10,0
	break;
      }
      if (!uhd_ep_alloc(dev->address, (usb_ep_desc_t*)ptr_iface)) {
8001975a:	ca a0       	breq	800196ae <uhi_hid_gamepad_install+0x2e>
8001975c:	0e 9b       	mov	r11,r7
8001975e:	eb 3c 00 12 	ld.ub	r12,r5[18]
80019762:	fe b0 d6 53 	rcall	80014408 <uhd_ep_alloc>
80019766:	c0 41       	brne	8001976e <uhi_hid_gamepad_install+0xee>
80019768:	30 4c       	mov	r12,4
      // Ignore descriptor
      break;
    }
    Assert(conf_desc_lgt>=ptr_iface->bLength);
    conf_desc_lgt -= ptr_iface->bLength;
    ptr_iface = (usb_iface_desc_t*)((uint8_t*)ptr_iface + ptr_iface->bLength);
8001976a:	d8 22       	popm	r4-r7,pc
      }
      if (!uhd_ep_alloc(dev->address, (usb_ep_desc_t*)ptr_iface)) {
	return UHC_ENUM_HARDWARE_LIMIT; // Endpoint allocation fail
      }
      Assert(((usb_ep_desc_t*)ptr_iface)->bEndpointAddress & USB_EP_DIR_IN);
      uhi_hid_gamepad_dev.ep_in = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
8001976c:	da 2a       	popm	r4-r7,pc,r12=1
8001976e:	0f a8       	ld.ub	r8,r7[0x2]
      uhi_hid_gamepad_dev.report_size =
80019770:	ac c8       	st.b	r6[0x4],r8
80019772:	0f cc       	ld.ub	r12,r7[0x4]
	le16_to_cpu(((usb_ep_desc_t*)ptr_iface)->wMaxPacketSize);
      uhi_hid_gamepad_dev.report = malloc(uhi_hid_gamepad_dev.report_size);
80019774:	ac dc       	st.b	r6[0x5],r12
80019776:	e0 a0 3b 0d 	rcall	80020d90 <malloc>
      if (uhi_hid_gamepad_dev.report == NULL) {
8001977a:	8d 2c       	st.w	r6[0x8],r12
	Assert(false);
	return UHC_ENUM_MEMORY_LIMIT; // Internal RAM allocation fail
      }
      uhi_hid_gamepad_dev.dev = dev;
8001977c:	c0 60       	breq	80019788 <uhi_hid_gamepad_install+0x108>
8001977e:	e0 68 2a 10 	mov	r8,10768
      // All endpoints of all interfaces supported allocated
      return UHC_ENUM_SUCCESS;
80019782:	30 0c       	mov	r12,0
      Assert(((usb_ep_desc_t*)ptr_iface)->bEndpointAddress & USB_EP_DIR_IN);
      uhi_hid_gamepad_dev.ep_in = ((usb_ep_desc_t*)ptr_iface)->bEndpointAddress;
      uhi_hid_gamepad_dev.report_size =
	le16_to_cpu(((usb_ep_desc_t*)ptr_iface)->wMaxPacketSize);
      uhi_hid_gamepad_dev.report = malloc(uhi_hid_gamepad_dev.report_size);
      if (uhi_hid_gamepad_dev.report == NULL) {
80019784:	91 05       	st.w	r8[0x0],r5
80019786:	d8 22       	popm	r4-r7,pc
80019788:	30 6c       	mov	r12,6
8001978a:	d8 22       	popm	r4-r7,pc
8001978c:	80 02       	ld.sh	r2,r0[0x0]
8001978e:	1c 5c       	eor	r12,lr
80019790:	80 02       	ld.sh	r2,r0[0x0]
80019792:	2a 90       	sub	r0,-87
80019794:	80 02       	ld.sh	r2,r0[0x0]
80019796:	2a ac       	sub	r12,-86
80019798:	80 02       	ld.sh	r2,r0[0x0]
8001979a:	2a d0       	sub	r0,-83
8001979c:	80 02       	ld.sh	r2,r0[0x0]
8001979e:	2a f8       	sub	r8,-81
800197a0:	80 02       	ld.sh	r2,r0[0x0]
800197a2:	2b 20       	sub	r0,-78
800197a4:	80 02       	ld.sh	r2,r0[0x0]
800197a6:	2b 44       	sub	r4,-76
800197a8:	80 02       	ld.sh	r2,r0[0x0]
800197aa:	2b 68       	sub	r8,-74
800197ac:	80 02       	ld.sh	r2,r0[0x0]
800197ae:	2b 90       	sub	r0,-71
800197b0:	80 02       	ld.sh	r2,r0[0x0]
800197b2:	2b b8       	sub	r8,-69

800197b4 <fatfs_lba_of_cluster>:
// fatfs_lba_of_cluster: This function converts a cluster number into a sector / 
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
    if (fs->fat_type == FAT_TYPE_16)
800197b4:	78 c8       	ld.w	r8,r12[0x30]
800197b6:	58 08       	cp.w	r8,0
800197b8:	c0 80       	breq	800197c8 <fatfs_lba_of_cluster+0x14>
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
    else
        return ((fs->cluster_begin_lba + ((Cluster_Number-2)*fs->sectors_per_cluster)));
800197ba:	78 18       	ld.w	r8,r12[0x4]
800197bc:	20 2b       	sub	r11,2
800197be:	19 89       	ld.ub	r9,r12[0x0]
800197c0:	f6 09 02 4c 	mul	r12,r11,r9
800197c4:	10 0c       	add	r12,r8
}
800197c6:	5e fc       	retal	r12
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
    if (fs->fat_type == FAT_TYPE_16)
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
800197c8:	19 88       	ld.ub	r8,r12[0x0]
800197ca:	f9 19 00 28 	ld.uh	r9,r12[40]
800197ce:	20 2b       	sub	r11,2
800197d0:	a5 49       	asr	r9,0x4
800197d2:	b1 3b       	mul	r11,r8
800197d4:	78 18       	ld.w	r8,r12[0x4]
800197d6:	f2 08 00 0c 	add	r12,r9,r8
800197da:	16 0c       	add	r12,r11
800197dc:	5e fc       	retal	r12

800197de <fatfs_sector_read>:
}
//-----------------------------------------------------------------------------
// fatfs_sector_read: 
//-----------------------------------------------------------------------------
int fatfs_sector_read(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count)
{
800197de:	d4 01       	pushm	lr
800197e0:	16 9e       	mov	lr,r11
    return fs->disk_io.read_media(lba, target, count);
800197e2:	78 d8       	ld.w	r8,r12[0x34]
}
//-----------------------------------------------------------------------------
// fatfs_sector_read: 
//-----------------------------------------------------------------------------
int fatfs_sector_read(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count)
{
800197e4:	14 9b       	mov	r11,r10
    return fs->disk_io.read_media(lba, target, count);
800197e6:	1c 9c       	mov	r12,lr
800197e8:	12 9a       	mov	r10,r9
800197ea:	5d 18       	icall	r8
}
800197ec:	d8 02       	popm	pc

800197ee <fatfs_sector_write>:
//-----------------------------------------------------------------------------
// fatfs_sector_write: 
//-----------------------------------------------------------------------------
int fatfs_sector_write(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count)
{
800197ee:	d4 01       	pushm	lr
800197f0:	16 9e       	mov	lr,r11
    return fs->disk_io.write_media(lba, target, count);
800197f2:	78 e8       	ld.w	r8,r12[0x38]
}
//-----------------------------------------------------------------------------
// fatfs_sector_write: 
//-----------------------------------------------------------------------------
int fatfs_sector_write(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count)
{
800197f4:	14 9b       	mov	r11,r10
    return fs->disk_io.write_media(lba, target, count);
800197f6:	1c 9c       	mov	r12,lr
800197f8:	12 9a       	mov	r10,r9
800197fa:	5d 18       	icall	r8
}
800197fc:	d8 02       	popm	pc

800197fe <fatfs_get_root_cluster>:
//-----------------------------------------------------------------------------
uint32 fatfs_get_root_cluster(struct fatfs *fs)
{
    // NOTE: On FAT16 this will be 0 which has a special meaning...
    return fs->rootdir_first_cluster;
}
800197fe:	78 2c       	ld.w	r12,r12[0x8]
80019800:	5e fc       	retal	r12

80019802 <fatfs_list_directory_start>:
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
void fatfs_list_directory_start(struct fatfs *fs, struct fs_dir_list_status *dirls, uint32 StartCluster)
{
    dirls->cluster = StartCluster;
    dirls->sector = 0;
80019802:	30 08       	mov	r8,0
// fatfs_list_directory_start: Initialise a directory listing procedure
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
void fatfs_list_directory_start(struct fatfs *fs, struct fs_dir_list_status *dirls, uint32 StartCluster)
{
    dirls->cluster = StartCluster;
80019804:	97 1a       	st.w	r11[0x4],r10
    dirls->sector = 0;
    dirls->offset = 0;
80019806:	f7 68 00 08 	st.b	r11[8],r8
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
void fatfs_list_directory_start(struct fatfs *fs, struct fs_dir_list_status *dirls, uint32 StartCluster)
{
    dirls->cluster = StartCluster;
    dirls->sector = 0;
8001980a:	97 08       	st.w	r11[0x0],r8
    dirls->offset = 0;
}
8001980c:	5e fc       	retal	r12
8001980e:	d7 03       	nop

80019810 <fatfs_init>:

//-----------------------------------------------------------------------------
// fatfs_init: Load FAT Parameters
//-----------------------------------------------------------------------------
int fatfs_init(struct fatfs *fs)
{
80019810:	eb cd 40 f8 	pushm	r3-r7,lr
    uint32 total_sectors;
    uint32 data_sectors;
    uint32 count_of_clusters;
    uint8 valid_partition = 0;

    fs->currentsector.address = FAT32_INVALID_CLUSTER;
80019814:	3f f8       	mov	r8,-1

//-----------------------------------------------------------------------------
// fatfs_init: Load FAT Parameters
//-----------------------------------------------------------------------------
int fatfs_init(struct fatfs *fs)
{
80019816:	18 97       	mov	r7,r12
    uint32 data_sectors;
    uint32 count_of_clusters;
    uint8 valid_partition = 0;

    fs->currentsector.address = FAT32_INVALID_CLUSTER;
    fs->currentsector.dirty = 0;
80019818:	30 06       	mov	r6,0
    uint32 total_sectors;
    uint32 data_sectors;
    uint32 count_of_clusters;
    uint8 valid_partition = 0;

    fs->currentsector.address = FAT32_INVALID_CLUSTER;
8001981a:	f9 48 02 44 	st.w	r12[580],r8
    fs->currentsector.dirty = 0;
8001981e:	f9 46 02 48 	st.w	r12[584],r6

    fs->next_free_cluster = 0; // Invalid
80019822:	99 96       	st.w	r12[0x24],r6

    fatfs_fat_init(fs);
80019824:	e0 a0 15 56 	rcall	8001c2d0 <fatfs_fat_init>

    // Make sure we have a read function (write function is optional)
    if (!fs->disk_io.read_media)
80019828:	6e d8       	ld.w	r8,r7[0x34]
8001982a:	58 08       	cp.w	r8,0
8001982c:	c0 31       	brne	80019832 <fatfs_init+0x22>
        }
        else
        {
            // Volume is FAT32
            fs->fat_type = FAT_TYPE_32;
            return FAT_INIT_OK;
8001982e:	e3 cf c0 f8 	ldm	sp++,r3-r7,pc,r12=-1

    // MBR: Sector 0 on the disk
    // NOTE: Some removeable media does not have this.

    // Load MBR (LBA 0) into the 512 byte buffer
    if (!fs->disk_io.read_media(0, fs->currentsector.sector, 1))
80019832:	0c 9c       	mov	r12,r6
80019834:	30 1a       	mov	r10,1
80019836:	ee c6 ff bc 	sub	r6,r7,-68
8001983a:	0c 9b       	mov	r11,r6
8001983c:	5d 18       	icall	r8
8001983e:	cf 80       	breq	8001982e <fatfs_init+0x1e>
    ///////////////////


    // Make Sure 0x55 and 0xAA are at end of sector
    // (this should be the case regardless of the MBR or boot sector)
    if (fs->currentsector.sector[SIGNATURE_POSITION] != 0x55 || fs->currentsector.sector[SIGNATURE_POSITION+1] != 0xAA)
80019840:	ef 18 02 42 	ld.uh	r8,r7[578]
80019844:	e0 48 55 aa 	cp.w	r8,21930
80019848:	c0 40       	breq	80019850 <fatfs_init+0x40>
        }
        else
        {
            // Volume is FAT32
            fs->fat_type = FAT_TYPE_32;
            return FAT_INIT_OK;
8001984a:	3f dc       	mov	r12,-3
8001984c:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
    // (this should be the case regardless of the MBR or boot sector)
    if (fs->currentsector.sector[SIGNATURE_POSITION] != 0x55 || fs->currentsector.sector[SIGNATURE_POSITION+1] != 0xAA)
        return FAT_INIT_INVALID_SIGNATURE;

    // Now check again using the access function to prove endian conversion function
    if (GET_16BIT_WORD(fs->currentsector.sector, SIGNATURE_POSITION) != SIGNATURE_VALUE) 
80019850:	ef 39 02 43 	ld.ub	r9,r7[579]
80019854:	ef 38 02 42 	ld.ub	r8,r7[578]
80019858:	a9 69       	lsl	r9,0x8
8001985a:	f2 08 00 08 	add	r8,r9,r8
8001985e:	e0 48 aa 55 	cp.w	r8,43605
80019862:	c0 40       	breq	8001986a <fatfs_init+0x5a>
80019864:	3f cc       	mov	r12,-4
80019866:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
    	   
    if (sizeof(struct fat_dir_entry) != FAT_DIR_ENTRY_SIZE)
        return FAT_INIT_STRUCT_PACKING;

    // Check the partition type code
    switch(fs->currentsector.sector[PARTITION1_TYPECODE_LOCATION])
8001986a:	ef 38 02 06 	ld.ub	r8,r7[518]
8001986e:	30 f9       	mov	r9,15
80019870:	f2 08 18 00 	cp.b	r8,r9
80019874:	e0 8b 00 0c 	brhi	8001988c <fatfs_init+0x7c>
80019878:	30 19       	mov	r9,1
8001987a:	f2 08 09 49 	lsl	r9,r9,r8
8001987e:	12 9a       	mov	r10,r9
80019880:	e2 1a d8 60 	andl	r10,0xd860,COH
80019884:	c0 91       	brne	80019896 <fatfs_init+0x86>
80019886:	ed b9 00 00 	bld	r9,0x0
8001988a:	c2 70       	breq	800198d8 <fatfs_init+0xc8>
        break;
        case 0x00:
            valid_partition = 0;
            break;
        default:
            if (fs->currentsector.sector[PARTITION1_TYPECODE_LOCATION] <= 0x06)
8001988c:	30 69       	mov	r9,6
8001988e:	f2 08 18 00 	cp.b	r8,r9
80019892:	e0 8b 00 23 	brhi	800198d8 <fatfs_init+0xc8>
        break;
    }

    // Read LBA Begin for the file system
    if (valid_partition)        
        fs->lba_begin = GET_32BIT_WORD(fs->currentsector.sector, PARTITION1_LBA_BEGIN_LOCATION);
80019896:	ef 38 02 0c 	ld.ub	r8,r7[524]
8001989a:	b1 68       	lsl	r8,0x10
8001989c:	ef 3c 02 0d 	ld.ub	r12,r7[525]
800198a0:	b9 6c       	lsl	r12,0x18
800198a2:	10 0c       	add	r12,r8
800198a4:	ef 38 02 0a 	ld.ub	r8,r7[522]
800198a8:	10 0c       	add	r12,r8
800198aa:	ef 38 02 0b 	ld.ub	r8,r7[523]
800198ae:	a9 68       	lsl	r8,0x8
800198b0:	10 0c       	add	r12,r8
800198b2:	8f 7c       	st.w	r7[0x1c],r12
    else
        fs->lba_begin = 0;

    // Load Volume 1 table into sector buffer
    // (We may already have this in the buffer if MBR less drive!)
    if (!fs->disk_io.read_media(fs->lba_begin, fs->currentsector.sector, 1))
800198b4:	0c 9b       	mov	r11,r6
800198b6:	6e d8       	ld.w	r8,r7[0x34]
800198b8:	30 1a       	mov	r10,1
800198ba:	5d 18       	icall	r8
800198bc:	cb 90       	breq	8001982e <fatfs_init+0x1e>
        return FAT_INIT_MEDIA_ACCESS_ERROR;

    // Make sure there are 512 bytes per cluster
    if (GET_16BIT_WORD(fs->currentsector.sector, 0x0B) != FAT_SECTOR_SIZE) 
800198be:	ef 36 00 50 	ld.ub	r6,r7[80]
800198c2:	ef 3a 00 4f 	ld.ub	r10,r7[79]
800198c6:	ec 08 15 08 	lsl	r8,r6,0x8
800198ca:	14 08       	add	r8,r10
800198cc:	e0 48 02 00 	cp.w	r8,512
800198d0:	c0 70       	breq	800198de <fatfs_init+0xce>
800198d2:	3f ec       	mov	r12,-2
800198d4:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
    // Read LBA Begin for the file system
    if (valid_partition)        
        fs->lba_begin = GET_32BIT_WORD(fs->currentsector.sector, PARTITION1_LBA_BEGIN_LOCATION);
    // Else possibly MBR less disk
    else
        fs->lba_begin = 0;
800198d8:	30 0c       	mov	r12,0
800198da:	8f 7c       	st.w	r7[0x1c],r12
800198dc:	ce cb       	rjmp	800198b4 <fatfs_init+0xa4>
    // Make sure there are 512 bytes per cluster
    if (GET_16BIT_WORD(fs->currentsector.sector, 0x0B) != FAT_SECTOR_SIZE) 
        return FAT_INIT_INVALID_SECTOR_SIZE;

    // Load Parameters of FAT partition     
    fs->sectors_per_cluster = fs->currentsector.sector[BPB_SECPERCLUS];
800198de:	ef 38 00 51 	ld.ub	r8,r7[81]
    reserved_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT);
    num_of_fats = fs->currentsector.sector[BPB_NUMFATS];
    fs->root_entry_count = GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT);
800198e2:	ef 39 00 55 	ld.ub	r9,r7[85]
    // Make sure there are 512 bytes per cluster
    if (GET_16BIT_WORD(fs->currentsector.sector, 0x0B) != FAT_SECTOR_SIZE) 
        return FAT_INIT_INVALID_SECTOR_SIZE;

    // Load Parameters of FAT partition     
    fs->sectors_per_cluster = fs->currentsector.sector[BPB_SECPERCLUS];
800198e6:	ae 88       	st.b	r7[0x0],r8
    reserved_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT);
    num_of_fats = fs->currentsector.sector[BPB_NUMFATS];
    fs->root_entry_count = GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT);
800198e8:	ef 38 00 56 	ld.ub	r8,r7[86]
800198ec:	a9 68       	lsl	r8,0x8
800198ee:	f2 08 00 08 	add	r8,r9,r8
800198f2:	ef 58 00 28 	st.h	r7[40],r8

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
800198f6:	ef 39 00 5b 	ld.ub	r9,r7[91]
800198fa:	ef 38 00 5a 	ld.ub	r8,r7[90]
800198fe:	f2 05 15 08 	lsl	r5,r9,0x8
    if (GET_16BIT_WORD(fs->currentsector.sector, 0x0B) != FAT_SECTOR_SIZE) 
        return FAT_INIT_INVALID_SECTOR_SIZE;

    // Load Parameters of FAT partition     
    fs->sectors_per_cluster = fs->currentsector.sector[BPB_SECPERCLUS];
    reserved_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT);
80019902:	ef 3c 00 53 	ld.ub	r12,r7[83]
    num_of_fats = fs->currentsector.sector[BPB_NUMFATS];
    fs->root_entry_count = GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT);

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
80019906:	10 05       	add	r5,r8
    if (GET_16BIT_WORD(fs->currentsector.sector, 0x0B) != FAT_SECTOR_SIZE) 
        return FAT_INIT_INVALID_SECTOR_SIZE;

    // Load Parameters of FAT partition     
    fs->sectors_per_cluster = fs->currentsector.sector[BPB_SECPERCLUS];
    reserved_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT);
80019908:	ef 3b 00 52 	ld.ub	r11,r7[82]
    num_of_fats = fs->currentsector.sector[BPB_NUMFATS];
8001990c:	ef 3e 00 54 	ld.ub	lr,r7[84]
    fs->root_entry_count = GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT);

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
80019910:	c1 01       	brne	80019930 <fatfs_init+0x120>
        fs->fat_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
80019912:	ef 35 00 6a 	ld.ub	r5,r7[106]
80019916:	b1 65       	lsl	r5,0x10
80019918:	ef 34 00 6b 	ld.ub	r4,r7[107]
8001991c:	b9 64       	lsl	r4,0x18
8001991e:	0a 04       	add	r4,r5
80019920:	ef 35 00 68 	ld.ub	r5,r7[104]
80019924:	0a 04       	add	r4,r5
80019926:	ef 35 00 69 	ld.ub	r5,r7[105]
8001992a:	a9 65       	lsl	r5,0x8
8001992c:	e8 05 00 05 	add	r5,r4,r5
80019930:	8f 85       	st.w	r7[0x20],r5
    
    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
80019932:	ef 35 00 72 	ld.ub	r5,r7[114]
80019936:	b1 65       	lsl	r5,0x10
80019938:	ef 34 00 73 	ld.ub	r4,r7[115]
8001993c:	b9 64       	lsl	r4,0x18
8001993e:	0a 04       	add	r4,r5
80019940:	ef 35 00 70 	ld.ub	r5,r7[112]
80019944:	0a 04       	add	r4,r5
80019946:	ef 35 00 71 	ld.ub	r5,r7[113]
8001994a:	a9 65       	lsl	r5,0x8
8001994c:	e8 05 00 05 	add	r5,r4,r5
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
80019950:	ef 13 00 28 	ld.uh	r3,r7[40]
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
    
    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);
80019954:	ef 34 00 74 	ld.ub	r4,r7[116]
        fs->fat_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
    
    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
80019958:	8f 25       	st.w	r7[0x8],r5
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
8001995a:	a5 73       	lsl	r3,0x5
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
    
    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);
8001995c:	ef 35 00 75 	ld.ub	r5,r7[117]

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
80019960:	e6 c3 fe 01 	sub	r3,r3,-511
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
    
    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);
80019964:	a9 65       	lsl	r5,0x8

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
80019966:	a9 53       	asr	r3,0x9
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
    
    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);
80019968:	e8 05 00 05 	add	r5,r4,r5

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
8001996c:	8f 43       	st.w	r7[0x10],r3
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
    
    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);
8001996e:	ef 55 00 18 	st.h	r7[24],r5

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
80019972:	6e 84       	ld.w	r4,r7[0x20]
80019974:	f8 05 15 08 	lsl	r5,r12,0x8
80019978:	fc 04 02 44 	mul	r4,lr,r4
8001997c:	16 05       	add	r5,r11
8001997e:	5c 75       	castu.h	r5
80019980:	ea 04 00 03 	add	r3,r5,r4
80019984:	8f 33       	st.w	r7[0xc],r3
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + reserved_sectors;
80019986:	6e 73       	ld.w	r3,r7[0x1c]
80019988:	06 05       	add	r5,r3

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (num_of_fats * fs->fat_sectors);
8001998a:	ea 04 00 04 	add	r4,r5,r4
    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + reserved_sectors;
8001998e:	8f 55       	st.w	r7[0x14],r5

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (num_of_fats * fs->fat_sectors);
80019990:	8f 14       	st.w	r7[0x4],r4

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
80019992:	ef 35 02 42 	ld.ub	r5,r7[578]
80019996:	ef 34 02 43 	ld.ub	r4,r7[579]
8001999a:	a9 64       	lsl	r4,0x8
8001999c:	e8 05 00 05 	add	r5,r4,r5
800199a0:	e0 45 aa 55 	cp.w	r5,43605
800199a4:	fe 91 ff 53 	brne	8001984a <fatfs_init+0x3a>
        return FAT_INIT_INVALID_SIGNATURE;

    // Calculate the root dir sectors
    root_dir_sectors = ((GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT) * 32) + (GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC) - 1)) / GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC);
    
    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
800199a8:	a9 69       	lsl	r9,0x8

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
        return FAT_INIT_INVALID_SIGNATURE;

    // Calculate the root dir sectors
    root_dir_sectors = ((GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT) * 32) + (GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC) - 1)) / GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC);
800199aa:	ef 33 00 56 	ld.ub	r3,r7[86]
    
    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
800199ae:	f2 08 00 05 	add	r5,r9,r8

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
        return FAT_INIT_INVALID_SIGNATURE;

    // Calculate the root dir sectors
    root_dir_sectors = ((GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT) * 32) + (GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC) - 1)) / GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC);
800199b2:	ef 34 00 55 	ld.ub	r4,r7[85]
    
    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
800199b6:	c0 f1       	brne	800199d4 <fatfs_init+0x1c4>
        FATSz = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
    else
        FATSz = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);  
800199b8:	ef 38 00 6a 	ld.ub	r8,r7[106]
800199bc:	b1 68       	lsl	r8,0x10
800199be:	ef 35 00 6b 	ld.ub	r5,r7[107]
800199c2:	b9 65       	lsl	r5,0x18
800199c4:	10 05       	add	r5,r8
800199c6:	ef 38 00 68 	ld.ub	r8,r7[104]
800199ca:	10 05       	add	r5,r8
800199cc:	ef 38 00 69 	ld.ub	r8,r7[105]
800199d0:	a9 68       	lsl	r8,0x8
800199d2:	10 05       	add	r5,r8

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_TOTSEC16) != 0)
800199d4:	ef 39 00 58 	ld.ub	r9,r7[88]
800199d8:	ef 38 00 57 	ld.ub	r8,r7[87]
800199dc:	a9 69       	lsl	r9,0x8
800199de:	10 09       	add	r9,r8
800199e0:	c0 f1       	brne	800199fe <fatfs_init+0x1ee>
        total_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_TOTSEC16);
    else
        total_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_TOTSEC32);
800199e2:	ef 38 00 66 	ld.ub	r8,r7[102]
800199e6:	b1 68       	lsl	r8,0x10
800199e8:	ef 39 00 67 	ld.ub	r9,r7[103]
800199ec:	b9 69       	lsl	r9,0x18
800199ee:	10 09       	add	r9,r8
800199f0:	ef 38 00 64 	ld.ub	r8,r7[100]
800199f4:	10 09       	add	r9,r8
800199f6:	ef 38 00 65 	ld.ub	r8,r7[101]
800199fa:	a9 68       	lsl	r8,0x8
800199fc:	10 09       	add	r9,r8

    data_sectors = total_sectors - (GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT) + (fs->currentsector.sector[BPB_NUMFATS] * FATSz) + root_dir_sectors);

    // Find out which version of FAT this is...
    if (fs->sectors_per_cluster != 0)
800199fe:	0f 88       	ld.ub	r8,r7[0x0]
80019a00:	58 08       	cp.w	r8,0
80019a02:	c0 41       	brne	80019a0a <fatfs_init+0x1fa>
        }
        else
        {
            // Volume is FAT32
            fs->fat_type = FAT_TYPE_32;
            return FAT_INIT_OK;
80019a04:	3f bc       	mov	r12,-5
        }
    }
    else
        return FAT_INIT_WRONG_FILESYS_TYPE;    
}
80019a06:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
    data_sectors = total_sectors - (GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT) + (fs->currentsector.sector[BPB_NUMFATS] * FATSz) + root_dir_sectors);

    // Find out which version of FAT this is...
    if (fs->sectors_per_cluster != 0)
    {
        count_of_clusters = data_sectors / fs->sectors_per_cluster;
80019a0a:	a9 6c       	lsl	r12,0x8

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
        return FAT_INIT_INVALID_SIGNATURE;

    // Calculate the root dir sectors
    root_dir_sectors = ((GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT) * 32) + (GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC) - 1)) / GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC);
80019a0c:	a9 66       	lsl	r6,0x8
    data_sectors = total_sectors - (GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT) + (fs->currentsector.sector[BPB_NUMFATS] * FATSz) + root_dir_sectors);

    // Find out which version of FAT this is...
    if (fs->sectors_per_cluster != 0)
    {
        count_of_clusters = data_sectors / fs->sectors_per_cluster;
80019a0e:	a9 63       	lsl	r3,0x8

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
        return FAT_INIT_INVALID_SIGNATURE;

    // Calculate the root dir sectors
    root_dir_sectors = ((GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT) * 32) + (GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC) - 1)) / GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC);
80019a10:	ec 0a 00 0a 	add	r10,r6,r10
    data_sectors = total_sectors - (GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT) + (fs->currentsector.sector[BPB_NUMFATS] * FATSz) + root_dir_sectors);

    // Find out which version of FAT this is...
    if (fs->sectors_per_cluster != 0)
    {
        count_of_clusters = data_sectors / fs->sectors_per_cluster;
80019a14:	e6 04 00 04 	add	r4,r3,r4
80019a18:	ea 0e 02 4e 	mul	lr,r5,lr
80019a1c:	f8 0b 00 0b 	add	r11,r12,r11
80019a20:	f4 c5 00 01 	sub	r5,r10,1
80019a24:	e8 0c 15 05 	lsl	r12,r4,0x5
80019a28:	18 05       	add	r5,r12
80019a2a:	ea 0a 0c 04 	divs	r4,r5,r10
80019a2e:	e8 0a 11 00 	rsub	r10,r4,0
80019a32:	16 1a       	sub	r10,r11
80019a34:	1c 1a       	sub	r10,lr
80019a36:	f4 09 00 09 	add	r9,r10,r9
80019a3a:	f2 08 0d 08 	divu	r8,r9,r8

        if(count_of_clusters < 4085) 
80019a3e:	e0 48 0f f4 	cp.w	r8,4084
80019a42:	fe 98 ff e1 	brls	80019a04 <fatfs_init+0x1f4>
            // Volume is FAT12 
            return FAT_INIT_WRONG_FILESYS_TYPE;
        else if(count_of_clusters < 65525) 
        {
            // Clear this FAT32 specific param
            fs->rootdir_first_cluster = 0;
80019a46:	e0 48 ff f4 	cp.w	r8,65524
80019a4a:	f9 bc 08 00 	movls	r12,0

            // Volume is FAT16
            fs->fat_type = FAT_TYPE_16;
80019a4e:	ef fc 8a 0c 	st.wls	r7[0x30],r12
            // Volume is FAT12 
            return FAT_INIT_WRONG_FILESYS_TYPE;
        else if(count_of_clusters < 65525) 
        {
            // Clear this FAT32 specific param
            fs->rootdir_first_cluster = 0;
80019a52:	ef fc 8a 02 	st.wls	r7[0x8],r12
            return FAT_INIT_OK;
        }
        else
        {
            // Volume is FAT32
            fs->fat_type = FAT_TYPE_32;
80019a56:	f9 b8 0b 01 	movhi	r8,1
80019a5a:	ef f8 ba 0c 	st.whi	r7[0x30],r8
80019a5e:	f9 bc 0b 00 	movhi	r12,0
            return FAT_INIT_OK;
80019a62:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80019a66:	d7 03       	nop

80019a68 <T.41>:
80019a68:	eb cd 40 f8 	pushm	r3-r7,lr
    uint32 cluster_chain = 0;
    uint32 i;
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
80019a6c:	58 0b       	cp.w	r11,0
80019a6e:	5f 09       	sreq	r9
80019a70:	78 c8       	ld.w	r8,r12[0x30]
}
//-----------------------------------------------------------------------------
// fatfs_sector_reader: From the provided startcluster and sector offset
// Returns True if success, returns False if not (including if read out of range)
//-----------------------------------------------------------------------------
int fatfs_sector_reader(struct fatfs *fs, uint32 start_cluster, uint32 offset, uint8 *target)
80019a72:	18 97       	mov	r7,r12
    uint32 cluster_chain = 0;
    uint32 i;
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
80019a74:	58 08       	cp.w	r8,0
80019a76:	5f 08       	sreq	r8
}
//-----------------------------------------------------------------------------
// fatfs_sector_reader: From the provided startcluster and sector offset
// Returns True if success, returns False if not (including if read out of range)
//-----------------------------------------------------------------------------
int fatfs_sector_reader(struct fatfs *fs, uint32 start_cluster, uint32 offset, uint8 *target)
80019a78:	14 94       	mov	r4,r10
    uint32 cluster_chain = 0;
    uint32 i;
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
80019a7a:	f3 e8 00 08 	and	r8,r9,r8
80019a7e:	c0 f0       	breq	80019a9c <T.41+0x34>
    {
        if (offset < fs->rootdir_sectors)
80019a80:	78 48       	ld.w	r8,r12[0x10]
80019a82:	14 38       	cp.w	r8,r10
80019a84:	e0 88 00 1d 	brls	80019abe <T.41+0x56>
            lba = fs->lba_begin + fs->rootdir_first_sector + offset;
80019a88:	6e 78       	ld.w	r8,r7[0x1c]
80019a8a:	78 3c       	ld.w	r12,r12[0xc]
80019a8c:	10 0c       	add	r12,r8

    // User provided target array
    if (target)
        return fs->disk_io.read_media(lba, target, 1);
    // Else read sector if not already loaded
    else if (lba != fs->currentsector.address)
80019a8e:	ee f8 02 44 	ld.w	r8,r7[580]

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
    {
        if (offset < fs->rootdir_sectors)
            lba = fs->lba_begin + fs->rootdir_first_sector + offset;
80019a92:	14 0c       	add	r12,r10

    // User provided target array
    if (target)
        return fs->disk_io.read_media(lba, target, 1);
    // Else read sector if not already loaded
    else if (lba != fs->currentsector.address)
80019a94:	10 3c       	cp.w	r12,r8
80019a96:	c2 01       	brne	80019ad6 <T.41+0x6e>
80019a98:	e3 cf 90 f8 	ldm	sp++,r3-r7,pc,r12=1
    {
        // Set start of cluster chain to initial value
        cluster_chain = start_cluster;

        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;      
80019a9c:	19 83       	ld.ub	r3,r12[0x0]
80019a9e:	f4 03 0d 08 	divu	r8,r10,r3
80019aa2:	10 95       	mov	r5,r8
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
80019aa4:	58 08       	cp.w	r8,0
80019aa6:	c0 a0       	breq	80019aba <T.41+0x52>
80019aa8:	30 06       	mov	r6,0
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);
80019aaa:	0e 9c       	mov	r12,r7
        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;      
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
80019aac:	2f f6       	sub	r6,-1
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);
80019aae:	e0 a0 14 5b 	rcall	8001c364 <fatfs_find_next_cluster>
80019ab2:	18 9b       	mov	r11,r12
        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;      
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
80019ab4:	0c 35       	cp.w	r5,r6
80019ab6:	fe 9b ff fa 	brhi	80019aaa <T.41+0x42>
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);

        // If end of cluster chain then return false
        if (cluster_chain == FAT32_LAST_CLUSTER) 
80019aba:	5b fb       	cp.w	r11,-1
80019abc:	c0 31       	brne	80019ac2 <T.41+0x5a>
        return fs->disk_io.read_media(lba, target, 1);
    // Else read sector if not already loaded
    else if (lba != fs->currentsector.address)
    {
        fs->currentsector.address = lba;
        return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
80019abe:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
        // If end of cluster chain then return false
        if (cluster_chain == FAT32_LAST_CLUSTER) 
            return 0;

        // Calculate sector address
        lba = fatfs_lba_of_cluster(fs, cluster_chain)+sector_to_read;
80019ac2:	0e 9c       	mov	r12,r7
80019ac4:	c7 8e       	rcall	800197b4 <fatfs_lba_of_cluster>
80019ac6:	a7 35       	mul	r5,r3
80019ac8:	ee f8 02 44 	ld.w	r8,r7[580]

    // User provided target array
    if (target)
        return fs->disk_io.read_media(lba, target, 1);
    // Else read sector if not already loaded
    else if (lba != fs->currentsector.address)
80019acc:	0a 14       	sub	r4,r5
        // If end of cluster chain then return false
        if (cluster_chain == FAT32_LAST_CLUSTER) 
            return 0;

        // Calculate sector address
        lba = fatfs_lba_of_cluster(fs, cluster_chain)+sector_to_read;
80019ace:	e8 0c 00 0c 	add	r12,r4,r12
80019ad2:	10 3c       	cp.w	r12,r8

    // User provided target array
    if (target)
        return fs->disk_io.read_media(lba, target, 1);
    // Else read sector if not already loaded
    else if (lba != fs->currentsector.address)
80019ad4:	ce 20       	breq	80019a98 <T.41+0x30>
80019ad6:	ef 4c 02 44 	st.w	r7[580],r12
    {
        fs->currentsector.address = lba;
80019ada:	ee cb ff bc 	sub	r11,r7,-68
        return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
80019ade:	6e d8       	ld.w	r8,r7[0x34]
80019ae0:	30 1a       	mov	r10,1
80019ae2:	5d 18       	icall	r8
80019ae4:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc

80019ae8 <fatfs_get_file_entry>:
80019ae8:	d4 31       	pushm	r0-r7,lr
80019aea:	fa cd 01 28 	sub	sp,sp,296
80019aee:	18 97       	mov	r7,r12
80019af0:	50 1b       	stdsp	sp[0x4],r11
80019af2:	14 96       	mov	r6,r10
    char short_filename[13];
    struct lfn_cache lfn;
    int dotRequired = 0;
    struct fat_dir_entry *directoryEntry;

    fatfs_lfn_cache_init(&lfn, 1);
80019af4:	30 1b       	mov	r11,1
}
//-------------------------------------------------------------
// fatfs_get_file_entry: Find the file entry for a filename
//-------------------------------------------------------------
uint32 fatfs_get_file_entry(struct fatfs *fs, uint32 Cluster, char *name_to_find, struct fat_dir_entry *sfEntry)
{
80019af6:	50 39       	stdsp	sp[0xc],r9
    char short_filename[13];
    struct lfn_cache lfn;
    int dotRequired = 0;
    struct fat_dir_entry *directoryEntry;

    fatfs_lfn_cache_init(&lfn, 1);
80019af8:	fa c5 ff ee 	sub	r5,sp,-18
80019afc:	0a 9c       	mov	r12,r5
80019afe:	e0 a0 0e 4c 	rcall	8001b796 <fatfs_lfn_cache_init>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
80019b02:	ee cb ff bc 	sub	r11,r7,-68
80019b06:	30 04       	mov	r4,0
80019b08:	50 2b       	stdsp	sp[0x8],r11
80019b0a:	08 9a       	mov	r10,r4

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
80019b0c:	40 1b       	lddsp	r11,sp[0x4]
80019b0e:	2f f4       	sub	r4,-1
80019b10:	0e 9c       	mov	r12,r7
80019b12:	ca bf       	rcall	80019a68 <T.41>
80019b14:	e0 80 00 90 	breq	80019c34 <fatfs_get_file_entry+0x14c>
80019b18:	40 23       	lddsp	r3,sp[0x8]
80019b1a:	30 02       	mov	r2,0
80019b1c:	32 01       	mov	r1,32
                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++) 
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
                        if (directoryEntry->Name[i] != ' ')
80019b1e:	32 e0       	mov	r0,46

                    // Dot only required if extension present
                    if (dotRequired)
                    {
                        // If not . or .. entry
                        if (short_filename[0]!='.')
80019b20:	c0 d8       	rjmp	80019b3a <fatfs_get_file_entry+0x52>
80019b22:	e4 cb ff bc 	sub	r11,r2,-68
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);
80019b26:	0a 9c       	mov	r12,r5
80019b28:	ee 0b 00 0b 	add	r11,r7,r11
80019b2c:	e0 a0 0c 68 	rcall	8001b3fc <fatfs_lfn_cache_entry>
80019b30:	2e 03       	sub	r3,-32
                    {
                        memcpy(sfEntry,directoryEntry,sizeof(struct fat_dir_entry));
                        return 1;
                    }

                    fatfs_lfn_cache_init(&lfn, 0);
80019b32:	2e 02       	sub	r2,-32
80019b34:	e0 42 02 00 	cp.w	r2,512
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
80019b38:	ce 90       	breq	80019b0a <fatfs_get_file_entry+0x22>
80019b3a:	06 9c       	mov	r12,r3
                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
80019b3c:	e0 a0 0d 47 	rcall	8001b5ca <fatfs_entry_lfn_text>
80019b40:	18 9b       	mov	r11,r12
80019b42:	cf 01       	brne	80019b22 <fatfs_get_file_entry+0x3a>
80019b44:	50 0b       	stdsp	sp[0x0],r11
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
80019b46:	06 9c       	mov	r12,r3
80019b48:	e0 a0 0d 48 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
80019b4c:	40 0b       	lddsp	r11,sp[0x0]
80019b4e:	c6 01       	brne	80019c0e <fatfs_get_file_entry+0x126>
80019b50:	06 9b       	mov	r11,r3
                    fatfs_lfn_cache_init(&lfn, 0);

                // Normal SFN Entry and Long text exists 
                else if (fatfs_entry_lfn_exists(&lfn, directoryEntry) ) 
80019b52:	0a 9c       	mov	r12,r5
80019b54:	e0 a0 0d 5b 	rcall	8001b60a <fatfs_entry_lfn_exists>
80019b58:	18 98       	mov	r8,r12
80019b5a:	c0 d0       	breq	80019b74 <fatfs_get_file_entry+0x8c>
80019b5c:	0a 9c       	mov	r12,r5
                {
                    long_filename = fatfs_lfn_cache_get(&lfn);
80019b5e:	e0 a0 0d 1f 	rcall	8001b59c <fatfs_lfn_cache_get>
80019b62:	0c 9b       	mov	r11,r6

                    // Compare names to see if they match
                    if (fatfs_compare_names(long_filename, name_to_find)) 
80019b64:	e0 a0 11 74 	rcall	8001be4c <fatfs_compare_names>
80019b68:	c6 01       	brne	80019c28 <fatfs_get_file_entry+0x140>
80019b6a:	18 9b       	mov	r11,r12
                    {
                        memcpy(sfEntry,directoryEntry,sizeof(struct fat_dir_entry));
                        return 1;
                    }

                    fatfs_lfn_cache_init(&lfn, 0);
80019b6c:	0a 9c       	mov	r12,r5
80019b6e:	e0 a0 0e 14 	rcall	8001b796 <fatfs_lfn_cache_init>
80019b72:	cd fb       	rjmp	80019b30 <fatfs_get_file_entry+0x48>
80019b74:	50 08       	stdsp	sp[0x0],r8
                }                 
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
80019b76:	06 9c       	mov	r12,r3
80019b78:	e0 a0 0d 64 	rcall	8001b640 <fatfs_entry_sfn_only>
80019b7c:	40 08       	lddsp	r8,sp[0x0]
80019b7e:	cd 90       	breq	80019b30 <fatfs_get_file_entry+0x48>
80019b80:	30 0a       	mov	r10,0
                {
                    memset(short_filename, 0, sizeof(short_filename));
80019b82:	30 0b       	mov	r11,0
80019b84:	fa eb 01 18 	st.d	sp[280],r10
80019b88:	54 88       	stdsp	sp[0x120],r8
80019b8a:	fb 68 01 24 	st.b	sp[292],r8
80019b8e:	07 88       	ld.ub	r8,r3[0x0]

                    // Copy name to string
                    for (i=0; i<8; i++) 
                        short_filename[i] = directoryEntry->Name[i];
80019b90:	fb 68 01 18 	st.b	sp[280],r8
80019b94:	07 99       	ld.ub	r9,r3[0x1]
80019b96:	fb 69 01 19 	st.b	sp[281],r9
80019b9a:	07 a9       	ld.ub	r9,r3[0x2]
80019b9c:	fb 69 01 1a 	st.b	sp[282],r9
80019ba0:	07 b9       	ld.ub	r9,r3[0x3]
80019ba2:	fb 69 01 1b 	st.b	sp[283],r9
80019ba6:	07 c9       	ld.ub	r9,r3[0x4]
80019ba8:	fb 69 01 1c 	st.b	sp[284],r9
80019bac:	07 d9       	ld.ub	r9,r3[0x5]
80019bae:	fb 69 01 1d 	st.b	sp[285],r9
80019bb2:	07 e9       	ld.ub	r9,r3[0x6]
80019bb4:	fb 69 01 1e 	st.b	sp[286],r9
80019bb8:	07 f9       	ld.ub	r9,r3[0x7]
80019bba:	fb 69 01 1f 	st.b	sp[287],r9
80019bbe:	e7 39 00 08 	ld.ub	r9,r3[8]

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++) 
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
80019bc2:	fb 69 01 21 	st.b	sp[289],r9
80019bc6:	e7 39 00 09 	ld.ub	r9,r3[9]
80019bca:	e7 3a 00 08 	ld.ub	r10,r3[8]
                        if (directoryEntry->Name[i] != ' ')
80019bce:	fb 69 01 22 	st.b	sp[290],r9

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++) 
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
80019bd2:	e7 39 00 09 	ld.ub	r9,r3[9]
                        if (directoryEntry->Name[i] != ' ')
80019bd6:	e2 09 18 00 	cp.b	r9,r1
80019bda:	c1 e0       	breq	80019c16 <fatfs_get_file_entry+0x12e>
80019bdc:	30 1b       	mov	r11,1
80019bde:	e7 39 00 0a 	ld.ub	r9,r3[10]

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++) 
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
80019be2:	fb 69 01 23 	st.b	sp[291],r9
80019be6:	e7 39 00 0a 	ld.ub	r9,r3[10]
                        if (directoryEntry->Name[i] != ' ')
80019bea:	e2 09 18 00 	cp.b	r9,r1
80019bee:	c1 80       	breq	80019c1e <fatfs_get_file_entry+0x136>
80019bf0:	f0 00 18 00 	cp.b	r0,r8
                    // Dot only required if extension present
                    if (dotRequired)
                    {
                        // If not . or .. entry
                        if (short_filename[0]!='.')
                            short_filename[8] = '.';
80019bf4:	e2 09 17 00 	moveq	r9,r1
80019bf8:	e0 09 17 10 	movne	r9,r0
80019bfc:	fb 69 01 20 	st.b	sp[288],r9
80019c00:	0c 9b       	mov	r11,r6
                    }
                    else
                        short_filename[8] = ' ';
                    
                    // Compare names to see if they match
                    if (fatfs_compare_names(short_filename, name_to_find)) 
80019c02:	fa cc fe e8 	sub	r12,sp,-280
80019c06:	e0 a0 11 23 	rcall	8001be4c <fatfs_compare_names>
80019c0a:	c0 f1       	brne	80019c28 <fatfs_get_file_entry+0x140>
80019c0c:	18 9b       	mov	r11,r12
                    {
                        memcpy(sfEntry,directoryEntry,sizeof(struct fat_dir_entry));
                        return 1;
                    }

                    fatfs_lfn_cache_init(&lfn, 0);
80019c0e:	0a 9c       	mov	r12,r5
80019c10:	e0 a0 0d c3 	rcall	8001b796 <fatfs_lfn_cache_init>
80019c14:	c8 eb       	rjmp	80019b30 <fatfs_get_file_entry+0x48>
80019c16:	e2 0a 18 00 	cp.b	r10,r1
                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++) 
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
                        if (directoryEntry->Name[i] != ' ')
80019c1a:	5f 1b       	srne	r11
80019c1c:	ce 1b       	rjmp	80019bde <fatfs_get_file_entry+0xf6>
80019c1e:	58 0b       	cp.w	r11,0
                            dotRequired = 1;
                    }

                    // Dot only required if extension present
                    if (dotRequired)
80019c20:	ce 81       	brne	80019bf0 <fatfs_get_file_entry+0x108>
80019c22:	fb 69 01 20 	st.b	sp[288],r9
                            short_filename[8] = '.';
                        else
                            short_filename[8] = ' ';
                    }
                    else
                        short_filename[8] = ' ';
80019c26:	ce db       	rjmp	80019c00 <fatfs_get_file_entry+0x118>
80019c28:	06 9b       	mov	r11,r3
                    
                    // Compare names to see if they match
                    if (fatfs_compare_names(short_filename, name_to_find)) 
                    {
                        memcpy(sfEntry,directoryEntry,sizeof(struct fat_dir_entry));
80019c2a:	40 3c       	lddsp	r12,sp[0xc]
80019c2c:	32 0a       	mov	r10,32
80019c2e:	e0 a0 3a d1 	rcall	800211d0 <memcpy>
80019c32:	30 1c       	mov	r12,1
80019c34:	2b 6d       	sub	sp,-296
        else
            break;
    } // End of while loop

    return 0;
}
80019c36:	d8 32       	popm	r0-r7,pc

80019c38 <fatfs_sfn_exists>:
80019c38:	d4 31       	pushm	r0-r7,lr
80019c3a:	20 6d       	sub	sp,24
80019c3c:	f8 c8 fe fc 	sub	r8,r12,-260
80019c40:	50 18       	stdsp	sp[0x4],r8
80019c42:	f8 c8 fe dc 	sub	r8,r12,-292
80019c46:	18 95       	mov	r5,r12
80019c48:	50 28       	stdsp	sp[0x8],r8
80019c4a:	50 4b       	stdsp	sp[0x10],r11
80019c4c:	f8 c8 fe bc 	sub	r8,r12,-324
80019c50:	50 5a       	stdsp	sp[0x14],r10
80019c52:	f8 c7 ff bc 	sub	r7,r12,-68
80019c56:	30 06       	mov	r6,0
80019c58:	f8 c2 ff 9c 	sub	r2,r12,-100
80019c5c:	f8 c3 ff 7c 	sub	r3,r12,-132
80019c60:	f8 c4 ff 5c 	sub	r4,r12,-164
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
80019c64:	f8 c1 ff 3c 	sub	r1,r12,-196
80019c68:	f8 c0 ff 1c 	sub	r0,r12,-228
80019c6c:	50 38       	stdsp	sp[0xc],r8
80019c6e:	0c 9a       	mov	r10,r6

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
80019c70:	40 4b       	lddsp	r11,sp[0x10]
80019c72:	2f f6       	sub	r6,-1
80019c74:	0a 9c       	mov	r12,r5
80019c76:	cf 9e       	rcall	80019a68 <T.41>
80019c78:	c7 10       	breq	80019d5a <fatfs_sfn_exists+0x122>
80019c7a:	0e 9c       	mov	r12,r7
                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
80019c7c:	e0 a0 0c a7 	rcall	8001b5ca <fatfs_entry_lfn_text>
80019c80:	e0 80 00 fd 	breq	80019e7a <fatfs_sfn_exists+0x242>
80019c84:	04 9c       	mov	r12,r2
80019c86:	e0 a0 0c a2 	rcall	8001b5ca <fatfs_entry_lfn_text>
80019c8a:	e0 80 00 e5 	breq	80019e54 <fatfs_sfn_exists+0x21c>
80019c8e:	06 9c       	mov	r12,r3
80019c90:	e0 a0 0c 9d 	rcall	8001b5ca <fatfs_entry_lfn_text>
80019c94:	e0 80 00 cd 	breq	80019e2e <fatfs_sfn_exists+0x1f6>
80019c98:	08 9c       	mov	r12,r4
80019c9a:	e0 a0 0c 98 	rcall	8001b5ca <fatfs_entry_lfn_text>
80019c9e:	e0 80 00 b5 	breq	80019e08 <fatfs_sfn_exists+0x1d0>
80019ca2:	02 9c       	mov	r12,r1
80019ca4:	e0 a0 0c 93 	rcall	8001b5ca <fatfs_entry_lfn_text>
80019ca8:	e0 80 00 9d 	breq	80019de2 <fatfs_sfn_exists+0x1aa>
80019cac:	00 9c       	mov	r12,r0
80019cae:	e0 a0 0c 8e 	rcall	8001b5ca <fatfs_entry_lfn_text>
80019cb2:	e0 80 00 85 	breq	80019dbc <fatfs_sfn_exists+0x184>
80019cb6:	40 1c       	lddsp	r12,sp[0x4]
80019cb8:	e0 a0 0c 89 	rcall	8001b5ca <fatfs_entry_lfn_text>
80019cbc:	c7 00       	breq	80019d9c <fatfs_sfn_exists+0x164>
80019cbe:	40 2c       	lddsp	r12,sp[0x8]
80019cc0:	e0 a0 0c 85 	rcall	8001b5ca <fatfs_entry_lfn_text>
80019cc4:	c5 c0       	breq	80019d7c <fatfs_sfn_exists+0x144>
80019cc6:	40 3c       	lddsp	r12,sp[0xc]
80019cc8:	e0 a0 0c 81 	rcall	8001b5ca <fatfs_entry_lfn_text>
80019ccc:	c4 90       	breq	80019d5e <fatfs_sfn_exists+0x126>
80019cce:	ee c8 fe e0 	sub	r8,r7,-288
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
80019cd2:	50 08       	stdsp	sp[0x0],r8
80019cd4:	10 9c       	mov	r12,r8

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
80019cd6:	e0 a0 0c 7a 	rcall	8001b5ca <fatfs_entry_lfn_text>
80019cda:	e0 80 00 f5 	breq	80019ec4 <fatfs_sfn_exists+0x28c>
80019cde:	ee c8 fe c0 	sub	r8,r7,-320
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
80019ce2:	50 08       	stdsp	sp[0x0],r8
80019ce4:	10 9c       	mov	r12,r8

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
80019ce6:	e0 a0 0c 72 	rcall	8001b5ca <fatfs_entry_lfn_text>
80019cea:	e0 80 00 db 	breq	80019ea0 <fatfs_sfn_exists+0x268>
80019cee:	ee c8 fe a0 	sub	r8,r7,-352
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
80019cf2:	50 08       	stdsp	sp[0x0],r8
80019cf4:	10 9c       	mov	r12,r8

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
80019cf6:	e0 a0 0c 6a 	rcall	8001b5ca <fatfs_entry_lfn_text>
80019cfa:	e0 80 01 31 	breq	80019f5c <fatfs_sfn_exists+0x324>
80019cfe:	ee c8 fe 80 	sub	r8,r7,-384
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
80019d02:	50 08       	stdsp	sp[0x0],r8
80019d04:	10 9c       	mov	r12,r8

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
80019d06:	e0 a0 0c 62 	rcall	8001b5ca <fatfs_entry_lfn_text>
80019d0a:	e0 80 01 16 	breq	80019f36 <fatfs_sfn_exists+0x2fe>
80019d0e:	ee c8 fe 60 	sub	r8,r7,-416
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
80019d12:	50 08       	stdsp	sp[0x0],r8
80019d14:	10 9c       	mov	r12,r8

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
80019d16:	e0 a0 0c 5a 	rcall	8001b5ca <fatfs_entry_lfn_text>
80019d1a:	e0 80 00 fb 	breq	80019f10 <fatfs_sfn_exists+0x2d8>
80019d1e:	ee c8 fe 40 	sub	r8,r7,-448
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
80019d22:	50 08       	stdsp	sp[0x0],r8
80019d24:	10 9c       	mov	r12,r8

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
80019d26:	e0 a0 0c 52 	rcall	8001b5ca <fatfs_entry_lfn_text>
80019d2a:	e0 80 00 e0 	breq	80019eea <fatfs_sfn_exists+0x2b2>
80019d2e:	ee c8 fe 20 	sub	r8,r7,-480
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
80019d32:	50 08       	stdsp	sp[0x0],r8
80019d34:	10 9c       	mov	r12,r8

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
80019d36:	e0 a0 0c 4a 	rcall	8001b5ca <fatfs_entry_lfn_text>
80019d3a:	c9 a1       	brne	80019c6e <fatfs_sfn_exists+0x36>
80019d3c:	40 0c       	lddsp	r12,sp[0x0]
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
80019d3e:	e0 a0 0c 4d 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
80019d42:	c9 61       	brne	80019c6e <fatfs_sfn_exists+0x36>
80019d44:	40 0c       	lddsp	r12,sp[0x0]
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
80019d46:	e0 a0 0c 7d 	rcall	8001b640 <fatfs_entry_sfn_only>
80019d4a:	c9 20       	breq	80019c6e <fatfs_sfn_exists+0x36>
80019d4c:	40 0c       	lddsp	r12,sp[0x0]
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
80019d4e:	30 ba       	mov	r10,11
80019d50:	40 5b       	lddsp	r11,sp[0x14]
80019d52:	e0 a0 3b 7c 	rcall	8002144a <strncmp>
80019d56:	c8 c1       	brne	80019c6e <fatfs_sfn_exists+0x36>
80019d58:	30 1c       	mov	r12,1
80019d5a:	2f ad       	sub	sp,-24
        else
            break;
    } // End of while loop

    return 0;
}
80019d5c:	d8 32       	popm	r0-r7,pc
80019d5e:	40 3c       	lddsp	r12,sp[0xc]
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
80019d60:	e0 a0 0c 3c 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
80019d64:	cb 51       	brne	80019cce <fatfs_sfn_exists+0x96>
80019d66:	40 3c       	lddsp	r12,sp[0xc]
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
80019d68:	e0 a0 0c 6c 	rcall	8001b640 <fatfs_entry_sfn_only>
80019d6c:	cb 10       	breq	80019cce <fatfs_sfn_exists+0x96>
80019d6e:	30 ba       	mov	r10,11
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
80019d70:	40 5b       	lddsp	r11,sp[0x14]
80019d72:	40 3c       	lddsp	r12,sp[0xc]
80019d74:	e0 a0 3b 6b 	rcall	8002144a <strncmp>
80019d78:	ca b1       	brne	80019cce <fatfs_sfn_exists+0x96>
80019d7a:	ce fb       	rjmp	80019d58 <fatfs_sfn_exists+0x120>
80019d7c:	40 2c       	lddsp	r12,sp[0x8]
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
80019d7e:	e0 a0 0c 2d 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
80019d82:	ca 21       	brne	80019cc6 <fatfs_sfn_exists+0x8e>
80019d84:	40 2c       	lddsp	r12,sp[0x8]
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
80019d86:	e0 a0 0c 5d 	rcall	8001b640 <fatfs_entry_sfn_only>
80019d8a:	c9 e0       	breq	80019cc6 <fatfs_sfn_exists+0x8e>
80019d8c:	30 ba       	mov	r10,11
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
80019d8e:	40 5b       	lddsp	r11,sp[0x14]
80019d90:	40 2c       	lddsp	r12,sp[0x8]
80019d92:	e0 a0 3b 5c 	rcall	8002144a <strncmp>
80019d96:	c9 81       	brne	80019cc6 <fatfs_sfn_exists+0x8e>
80019d98:	30 1c       	mov	r12,1
80019d9a:	ce 0b       	rjmp	80019d5a <fatfs_sfn_exists+0x122>
80019d9c:	40 1c       	lddsp	r12,sp[0x4]
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
80019d9e:	e0 a0 0c 1d 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
80019da2:	c8 e1       	brne	80019cbe <fatfs_sfn_exists+0x86>
80019da4:	40 1c       	lddsp	r12,sp[0x4]
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
80019da6:	e0 a0 0c 4d 	rcall	8001b640 <fatfs_entry_sfn_only>
80019daa:	c8 a0       	breq	80019cbe <fatfs_sfn_exists+0x86>
80019dac:	30 ba       	mov	r10,11
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
80019dae:	40 5b       	lddsp	r11,sp[0x14]
80019db0:	40 1c       	lddsp	r12,sp[0x4]
80019db2:	e0 a0 3b 4c 	rcall	8002144a <strncmp>
80019db6:	c8 41       	brne	80019cbe <fatfs_sfn_exists+0x86>
80019db8:	30 1c       	mov	r12,1
80019dba:	cd 0b       	rjmp	80019d5a <fatfs_sfn_exists+0x122>
80019dbc:	00 9c       	mov	r12,r0
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
80019dbe:	e0 a0 0c 0d 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
80019dc2:	fe 91 ff 7a 	brne	80019cb6 <fatfs_sfn_exists+0x7e>
80019dc6:	00 9c       	mov	r12,r0
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
80019dc8:	e0 a0 0c 3c 	rcall	8001b640 <fatfs_entry_sfn_only>
80019dcc:	fe 90 ff 75 	breq	80019cb6 <fatfs_sfn_exists+0x7e>
80019dd0:	30 ba       	mov	r10,11
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
80019dd2:	40 5b       	lddsp	r11,sp[0x14]
80019dd4:	00 9c       	mov	r12,r0
80019dd6:	e0 a0 3b 3a 	rcall	8002144a <strncmp>
80019dda:	fe 91 ff 6e 	brne	80019cb6 <fatfs_sfn_exists+0x7e>
80019dde:	30 1c       	mov	r12,1
80019de0:	cb db       	rjmp	80019d5a <fatfs_sfn_exists+0x122>
80019de2:	02 9c       	mov	r12,r1
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
80019de4:	e0 a0 0b fa 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
80019de8:	fe 91 ff 62 	brne	80019cac <fatfs_sfn_exists+0x74>
80019dec:	02 9c       	mov	r12,r1
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
80019dee:	e0 a0 0c 29 	rcall	8001b640 <fatfs_entry_sfn_only>
80019df2:	fe 90 ff 5d 	breq	80019cac <fatfs_sfn_exists+0x74>
80019df6:	30 ba       	mov	r10,11
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
80019df8:	40 5b       	lddsp	r11,sp[0x14]
80019dfa:	02 9c       	mov	r12,r1
80019dfc:	e0 a0 3b 27 	rcall	8002144a <strncmp>
80019e00:	fe 91 ff 56 	brne	80019cac <fatfs_sfn_exists+0x74>
80019e04:	30 1c       	mov	r12,1
80019e06:	ca ab       	rjmp	80019d5a <fatfs_sfn_exists+0x122>
80019e08:	08 9c       	mov	r12,r4
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
80019e0a:	e0 a0 0b e7 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
80019e0e:	fe 91 ff 4a 	brne	80019ca2 <fatfs_sfn_exists+0x6a>
80019e12:	08 9c       	mov	r12,r4
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
80019e14:	e0 a0 0c 16 	rcall	8001b640 <fatfs_entry_sfn_only>
80019e18:	fe 90 ff 45 	breq	80019ca2 <fatfs_sfn_exists+0x6a>
80019e1c:	30 ba       	mov	r10,11
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
80019e1e:	40 5b       	lddsp	r11,sp[0x14]
80019e20:	08 9c       	mov	r12,r4
80019e22:	e0 a0 3b 14 	rcall	8002144a <strncmp>
80019e26:	fe 91 ff 3e 	brne	80019ca2 <fatfs_sfn_exists+0x6a>
80019e2a:	30 1c       	mov	r12,1
80019e2c:	c9 7b       	rjmp	80019d5a <fatfs_sfn_exists+0x122>
80019e2e:	06 9c       	mov	r12,r3
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
80019e30:	e0 a0 0b d4 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
80019e34:	fe 91 ff 32 	brne	80019c98 <fatfs_sfn_exists+0x60>
80019e38:	06 9c       	mov	r12,r3
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
80019e3a:	e0 a0 0c 03 	rcall	8001b640 <fatfs_entry_sfn_only>
80019e3e:	fe 90 ff 2d 	breq	80019c98 <fatfs_sfn_exists+0x60>
80019e42:	30 ba       	mov	r10,11
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
80019e44:	40 5b       	lddsp	r11,sp[0x14]
80019e46:	06 9c       	mov	r12,r3
80019e48:	e0 a0 3b 01 	rcall	8002144a <strncmp>
80019e4c:	fe 91 ff 26 	brne	80019c98 <fatfs_sfn_exists+0x60>
80019e50:	30 1c       	mov	r12,1
80019e52:	c8 4b       	rjmp	80019d5a <fatfs_sfn_exists+0x122>
80019e54:	04 9c       	mov	r12,r2
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
80019e56:	e0 a0 0b c1 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
80019e5a:	fe 91 ff 1a 	brne	80019c8e <fatfs_sfn_exists+0x56>
80019e5e:	04 9c       	mov	r12,r2
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
80019e60:	e0 a0 0b f0 	rcall	8001b640 <fatfs_entry_sfn_only>
80019e64:	fe 90 ff 15 	breq	80019c8e <fatfs_sfn_exists+0x56>
80019e68:	30 ba       	mov	r10,11
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
80019e6a:	40 5b       	lddsp	r11,sp[0x14]
80019e6c:	04 9c       	mov	r12,r2
80019e6e:	e0 a0 3a ee 	rcall	8002144a <strncmp>
80019e72:	fe 91 ff 0e 	brne	80019c8e <fatfs_sfn_exists+0x56>
80019e76:	30 1c       	mov	r12,1
80019e78:	c7 1b       	rjmp	80019d5a <fatfs_sfn_exists+0x122>
80019e7a:	0e 9c       	mov	r12,r7
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
80019e7c:	e0 a0 0b ae 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
80019e80:	fe 91 ff 02 	brne	80019c84 <fatfs_sfn_exists+0x4c>
80019e84:	0e 9c       	mov	r12,r7
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
80019e86:	e0 a0 0b dd 	rcall	8001b640 <fatfs_entry_sfn_only>
80019e8a:	fe 90 fe fd 	breq	80019c84 <fatfs_sfn_exists+0x4c>
80019e8e:	30 ba       	mov	r10,11
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
80019e90:	40 5b       	lddsp	r11,sp[0x14]
80019e92:	0e 9c       	mov	r12,r7
80019e94:	e0 a0 3a db 	rcall	8002144a <strncmp>
80019e98:	fe 91 fe f6 	brne	80019c84 <fatfs_sfn_exists+0x4c>
80019e9c:	30 1c       	mov	r12,1
80019e9e:	c5 eb       	rjmp	80019d5a <fatfs_sfn_exists+0x122>
80019ea0:	40 0c       	lddsp	r12,sp[0x0]
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
80019ea2:	e0 a0 0b 9b 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
80019ea6:	fe 91 ff 24 	brne	80019cee <fatfs_sfn_exists+0xb6>
80019eaa:	40 0c       	lddsp	r12,sp[0x0]
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
80019eac:	e0 a0 0b ca 	rcall	8001b640 <fatfs_entry_sfn_only>
80019eb0:	fe 90 ff 1f 	breq	80019cee <fatfs_sfn_exists+0xb6>
80019eb4:	40 0c       	lddsp	r12,sp[0x0]
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
80019eb6:	30 ba       	mov	r10,11
80019eb8:	40 5b       	lddsp	r11,sp[0x14]
80019eba:	e0 a0 3a c8 	rcall	8002144a <strncmp>
80019ebe:	fe 91 ff 18 	brne	80019cee <fatfs_sfn_exists+0xb6>
80019ec2:	c4 bb       	rjmp	80019d58 <fatfs_sfn_exists+0x120>
80019ec4:	40 0c       	lddsp	r12,sp[0x0]
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
80019ec6:	e0 a0 0b 89 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
80019eca:	fe 91 ff 0a 	brne	80019cde <fatfs_sfn_exists+0xa6>
80019ece:	40 0c       	lddsp	r12,sp[0x0]
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
80019ed0:	e0 a0 0b b8 	rcall	8001b640 <fatfs_entry_sfn_only>
80019ed4:	fe 90 ff 05 	breq	80019cde <fatfs_sfn_exists+0xa6>
80019ed8:	40 0c       	lddsp	r12,sp[0x0]
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
80019eda:	30 ba       	mov	r10,11
80019edc:	40 5b       	lddsp	r11,sp[0x14]
80019ede:	e0 a0 3a b6 	rcall	8002144a <strncmp>
80019ee2:	fe 91 fe fe 	brne	80019cde <fatfs_sfn_exists+0xa6>
80019ee6:	30 1c       	mov	r12,1
80019ee8:	c3 9b       	rjmp	80019d5a <fatfs_sfn_exists+0x122>
80019eea:	40 0c       	lddsp	r12,sp[0x0]
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
80019eec:	e0 a0 0b 76 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
80019ef0:	fe 91 ff 1f 	brne	80019d2e <fatfs_sfn_exists+0xf6>
80019ef4:	40 0c       	lddsp	r12,sp[0x0]
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
80019ef6:	e0 a0 0b a5 	rcall	8001b640 <fatfs_entry_sfn_only>
80019efa:	fe 90 ff 1a 	breq	80019d2e <fatfs_sfn_exists+0xf6>
80019efe:	40 0c       	lddsp	r12,sp[0x0]
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
80019f00:	30 ba       	mov	r10,11
80019f02:	40 5b       	lddsp	r11,sp[0x14]
80019f04:	e0 a0 3a a3 	rcall	8002144a <strncmp>
80019f08:	fe 91 ff 13 	brne	80019d2e <fatfs_sfn_exists+0xf6>
80019f0c:	30 1c       	mov	r12,1
80019f0e:	c2 6b       	rjmp	80019d5a <fatfs_sfn_exists+0x122>
80019f10:	40 0c       	lddsp	r12,sp[0x0]
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
80019f12:	e0 a0 0b 63 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
80019f16:	fe 91 ff 04 	brne	80019d1e <fatfs_sfn_exists+0xe6>
80019f1a:	40 0c       	lddsp	r12,sp[0x0]
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
80019f1c:	e0 a0 0b 92 	rcall	8001b640 <fatfs_entry_sfn_only>
80019f20:	fe 90 fe ff 	breq	80019d1e <fatfs_sfn_exists+0xe6>
80019f24:	40 0c       	lddsp	r12,sp[0x0]
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
80019f26:	30 ba       	mov	r10,11
80019f28:	40 5b       	lddsp	r11,sp[0x14]
80019f2a:	e0 a0 3a 90 	rcall	8002144a <strncmp>
80019f2e:	fe 91 fe f8 	brne	80019d1e <fatfs_sfn_exists+0xe6>
80019f32:	30 1c       	mov	r12,1
80019f34:	c1 3b       	rjmp	80019d5a <fatfs_sfn_exists+0x122>
80019f36:	40 0c       	lddsp	r12,sp[0x0]
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
80019f38:	e0 a0 0b 50 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
80019f3c:	fe 91 fe e9 	brne	80019d0e <fatfs_sfn_exists+0xd6>
80019f40:	40 0c       	lddsp	r12,sp[0x0]
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
80019f42:	e0 a0 0b 7f 	rcall	8001b640 <fatfs_entry_sfn_only>
80019f46:	fe 90 fe e4 	breq	80019d0e <fatfs_sfn_exists+0xd6>
80019f4a:	40 0c       	lddsp	r12,sp[0x0]
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
80019f4c:	30 ba       	mov	r10,11
80019f4e:	40 5b       	lddsp	r11,sp[0x14]
80019f50:	e0 a0 3a 7d 	rcall	8002144a <strncmp>
80019f54:	fe 91 fe dd 	brne	80019d0e <fatfs_sfn_exists+0xd6>
80019f58:	30 1c       	mov	r12,1
80019f5a:	c0 0b       	rjmp	80019d5a <fatfs_sfn_exists+0x122>
80019f5c:	40 0c       	lddsp	r12,sp[0x0]
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
80019f5e:	e0 a0 0b 3d 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
80019f62:	fe 91 fe ce 	brne	80019cfe <fatfs_sfn_exists+0xc6>
80019f66:	40 0c       	lddsp	r12,sp[0x0]
                    ;
                else 
#endif
                // Normal Entry, only 8.3 Text    
                if (fatfs_entry_sfn_only(directoryEntry) )
80019f68:	e0 a0 0b 6c 	rcall	8001b640 <fatfs_entry_sfn_only>
80019f6c:	fe 90 fe c9 	breq	80019cfe <fatfs_sfn_exists+0xc6>
80019f70:	40 0c       	lddsp	r12,sp[0x0]
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
80019f72:	30 ba       	mov	r10,11
80019f74:	40 5b       	lddsp	r11,sp[0x14]
80019f76:	e0 a0 3a 6a 	rcall	8002144a <strncmp>
80019f7a:	fe 91 fe c2 	brne	80019cfe <fatfs_sfn_exists+0xc6>
80019f7e:	30 1c       	mov	r12,1
80019f80:	ce da       	rjmp	80019d5a <fatfs_sfn_exists+0x122>
80019f82:	d7 03       	nop

80019f84 <fatfs_update_file_length>:
80019f84:	d4 31       	pushm	r0-r7,lr
80019f86:	20 8d       	sub	sp,32
80019f88:	50 4b       	stdsp	sp[0x10],r11
80019f8a:	50 5a       	stdsp	sp[0x14],r10
80019f8c:	50 79       	stdsp	sp[0x1c],r9
80019f8e:	18 97       	mov	r7,r12
80019f90:	78 e8       	ld.w	r8,r12[0x38]
80019f92:	58 08       	cp.w	r8,0
80019f94:	e0 80 01 f4 	breq	8001a37c <fatfs_update_file_length+0x3f8>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
80019f98:	f8 ce ff 1c 	sub	lr,r12,-228
80019f9c:	f8 c6 ff bc 	sub	r6,r12,-68
80019fa0:	50 0e       	stdsp	sp[0x0],lr
80019fa2:	f8 c9 fe fc 	sub	r9,r12,-260
80019fa6:	f8 c8 fe dc 	sub	r8,r12,-292
80019faa:	f8 ce fe bc 	sub	lr,r12,-324
80019fae:	30 05       	mov	r5,0
80019fb0:	50 66       	stdsp	sp[0x18],r6
80019fb2:	f8 c2 ff 9c 	sub	r2,r12,-100
80019fb6:	f8 c3 ff 7c 	sub	r3,r12,-132
80019fba:	f8 c1 ff 5c 	sub	r1,r12,-164
80019fbe:	f8 c0 ff 3c 	sub	r0,r12,-196
80019fc2:	50 19       	stdsp	sp[0x4],r9
80019fc4:	50 28       	stdsp	sp[0x8],r8
80019fc6:	50 3e       	stdsp	sp[0xc],lr
80019fc8:	0a 9a       	mov	r10,r5

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
80019fca:	40 4b       	lddsp	r11,sp[0x10]
80019fcc:	2f f5       	sub	r5,-1
80019fce:	0e 9c       	mov	r12,r7
80019fd0:	fe b0 fd 4c 	rcall	80019a68 <T.41>
80019fd4:	e0 80 01 d4 	breq	8001a37c <fatfs_update_file_length+0x3f8>
                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
80019fd8:	0c 9c       	mov	r12,r6
80019fda:	e0 a0 0a f8 	rcall	8001b5ca <fatfs_entry_lfn_text>
80019fde:	e0 80 01 3c 	breq	8001a256 <fatfs_update_file_length+0x2d2>
80019fe2:	04 9c       	mov	r12,r2
80019fe4:	e0 a0 0a f3 	rcall	8001b5ca <fatfs_entry_lfn_text>
80019fe8:	e0 80 01 23 	breq	8001a22e <fatfs_update_file_length+0x2aa>
80019fec:	06 9c       	mov	r12,r3
80019fee:	e0 a0 0a ee 	rcall	8001b5ca <fatfs_entry_lfn_text>
80019ff2:	e0 80 01 0a 	breq	8001a206 <fatfs_update_file_length+0x282>
80019ff6:	02 9c       	mov	r12,r1
80019ff8:	e0 a0 0a e9 	rcall	8001b5ca <fatfs_entry_lfn_text>
80019ffc:	e0 80 00 f1 	breq	8001a1de <fatfs_update_file_length+0x25a>
8001a000:	00 9c       	mov	r12,r0
8001a002:	e0 a0 0a e4 	rcall	8001b5ca <fatfs_entry_lfn_text>
8001a006:	e0 80 00 d7 	breq	8001a1b4 <fatfs_update_file_length+0x230>
8001a00a:	40 0c       	lddsp	r12,sp[0x0]
8001a00c:	e0 a0 0a df 	rcall	8001b5ca <fatfs_entry_lfn_text>
8001a010:	e0 80 00 bc 	breq	8001a188 <fatfs_update_file_length+0x204>
8001a014:	40 1c       	lddsp	r12,sp[0x4]
8001a016:	e0 a0 0a da 	rcall	8001b5ca <fatfs_entry_lfn_text>
8001a01a:	e0 80 00 a1 	breq	8001a15c <fatfs_update_file_length+0x1d8>
8001a01e:	40 2c       	lddsp	r12,sp[0x8]
8001a020:	e0 a0 0a d5 	rcall	8001b5ca <fatfs_entry_lfn_text>
8001a024:	e0 80 00 86 	breq	8001a130 <fatfs_update_file_length+0x1ac>
8001a028:	40 3c       	lddsp	r12,sp[0xc]
8001a02a:	e0 a0 0a d0 	rcall	8001b5ca <fatfs_entry_lfn_text>
8001a02e:	c6 e0       	breq	8001a10a <fatfs_update_file_length+0x186>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001a030:	ec c4 fe e0 	sub	r4,r6,-288

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
8001a034:	08 9c       	mov	r12,r4
8001a036:	e0 a0 0a ca 	rcall	8001b5ca <fatfs_entry_lfn_text>
8001a03a:	e0 80 01 35 	breq	8001a2a4 <fatfs_update_file_length+0x320>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001a03e:	ec c4 fe c0 	sub	r4,r6,-320

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
8001a042:	08 9c       	mov	r12,r4
8001a044:	e0 a0 0a c3 	rcall	8001b5ca <fatfs_entry_lfn_text>
8001a048:	e0 80 01 19 	breq	8001a27a <fatfs_update_file_length+0x2f6>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001a04c:	ec c4 fe a0 	sub	r4,r6,-352

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
8001a050:	08 9c       	mov	r12,r4
8001a052:	e0 a0 0a bc 	rcall	8001b5ca <fatfs_entry_lfn_text>
8001a056:	e0 80 01 7d 	breq	8001a350 <fatfs_update_file_length+0x3cc>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001a05a:	ec c4 fe 80 	sub	r4,r6,-384

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
8001a05e:	08 9c       	mov	r12,r4
8001a060:	e0 a0 0a b5 	rcall	8001b5ca <fatfs_entry_lfn_text>
8001a064:	e0 80 01 60 	breq	8001a324 <fatfs_update_file_length+0x3a0>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001a068:	ec c4 fe 60 	sub	r4,r6,-416

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
8001a06c:	08 9c       	mov	r12,r4
8001a06e:	e0 a0 0a ae 	rcall	8001b5ca <fatfs_entry_lfn_text>
8001a072:	e0 80 01 43 	breq	8001a2f8 <fatfs_update_file_length+0x374>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001a076:	ec c4 fe 40 	sub	r4,r6,-448

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
8001a07a:	08 9c       	mov	r12,r4
8001a07c:	e0 a0 0a a7 	rcall	8001b5ca <fatfs_entry_lfn_text>
8001a080:	e0 80 01 27 	breq	8001a2ce <fatfs_update_file_length+0x34a>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001a084:	ec c4 fe 20 	sub	r4,r6,-480

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
8001a088:	08 9c       	mov	r12,r4
8001a08a:	e0 a0 0a a0 	rcall	8001b5ca <fatfs_entry_lfn_text>
8001a08e:	c9 d1       	brne	80019fc8 <fatfs_update_file_length+0x44>
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001a090:	08 9c       	mov	r12,r4
8001a092:	e0 a0 0a a3 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
8001a096:	c9 91       	brne	80019fc8 <fatfs_update_file_length+0x44>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001a098:	08 9c       	mov	r12,r4
8001a09a:	e0 a0 0a d3 	rcall	8001b640 <fatfs_entry_sfn_only>
8001a09e:	c9 50       	breq	80019fc8 <fatfs_update_file_length+0x44>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001a0a0:	30 ba       	mov	r10,11
8001a0a2:	40 5b       	lddsp	r11,sp[0x14]
8001a0a4:	08 9c       	mov	r12,r4
8001a0a6:	e0 a0 39 d2 	rcall	8002144a <strncmp>
8001a0aa:	c8 f1       	brne	80019fc8 <fatfs_update_file_length+0x44>
8001a0ac:	50 64       	stdsp	sp[0x18],r4
8001a0ae:	e0 6c 01 e0 	mov	r12,480
                    {
                        directoryEntry->FileSize = FAT_HTONL(fileLength);
8001a0b2:	40 79       	lddsp	r9,sp[0x1c]
8001a0b4:	e6 19 00 ff 	andh	r9,0xff,COH
8001a0b8:	40 7e       	lddsp	lr,sp[0x1c]
                        // TODO: Update last write time

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));                    
8001a0ba:	40 6b       	lddsp	r11,sp[0x18]
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
                    {
                        directoryEntry->FileSize = FAT_HTONL(fileLength);
8001a0bc:	40 78       	lddsp	r8,sp[0x1c]
8001a0be:	1c 95       	mov	r5,lr
8001a0c0:	b9 68       	lsl	r8,0x18
8001a0c2:	e2 15 ff 00 	andl	r5,0xff00,COH
8001a0c6:	f1 ee 13 88 	or	r8,r8,lr>>0x18
8001a0ca:	f1 e5 10 88 	or	r8,r8,r5<<0x8
8001a0ce:	f1 e9 12 88 	or	r8,r8,r9>>0x8
8001a0d2:	f7 68 00 1f 	st.b	r11[31],r8
8001a0d6:	f0 09 16 18 	lsr	r9,r8,0x18
8001a0da:	40 6e       	lddsp	lr,sp[0x18]
8001a0dc:	fd 69 00 1c 	st.b	lr[28],r9
8001a0e0:	f3 d8 c2 08 	bfextu	r9,r8,0x10,0x8
8001a0e4:	f1 d8 c1 08 	bfextu	r8,r8,0x8,0x8
                        // TODO: Update last write time

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));                    
8001a0e8:	ec 0c 00 0c 	add	r12,r6,r12
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
                    {
                        directoryEntry->FileSize = FAT_HTONL(fileLength);
8001a0ec:	fd 68 00 1e 	st.b	lr[30],r8
                        // TODO: Update last write time

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));                    
8001a0f0:	32 0a       	mov	r10,32
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
                    {
                        directoryEntry->FileSize = FAT_HTONL(fileLength);
8001a0f2:	fd 69 00 1d 	st.b	lr[29],r9
                        // TODO: Update last write time

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));                    
8001a0f6:	e0 a0 38 6d 	rcall	800211d0 <memcpy>

                        // Write sector back
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
8001a0fa:	0c 9b       	mov	r11,r6
8001a0fc:	ee fc 02 44 	ld.w	r12,r7[580]
8001a100:	6e e8       	ld.w	r8,r7[0x38]
8001a102:	30 1a       	mov	r10,1
8001a104:	5d 18       	icall	r8
        else
            break;
    } // End of while loop

    return 0;
}
8001a106:	2f 8d       	sub	sp,-32
8001a108:	d8 32       	popm	r0-r7,pc
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001a10a:	40 3c       	lddsp	r12,sp[0xc]
8001a10c:	e0 a0 0a 66 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
8001a110:	c9 01       	brne	8001a030 <fatfs_update_file_length+0xac>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001a112:	40 3c       	lddsp	r12,sp[0xc]
8001a114:	e0 a0 0a 96 	rcall	8001b640 <fatfs_entry_sfn_only>
8001a118:	c8 c0       	breq	8001a030 <fatfs_update_file_length+0xac>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001a11a:	30 ba       	mov	r10,11
8001a11c:	40 5b       	lddsp	r11,sp[0x14]
8001a11e:	40 3c       	lddsp	r12,sp[0xc]
8001a120:	e0 a0 39 95 	rcall	8002144a <strncmp>
8001a124:	c8 61       	brne	8001a030 <fatfs_update_file_length+0xac>
8001a126:	40 39       	lddsp	r9,sp[0xc]
8001a128:	e0 6c 01 00 	mov	r12,256
8001a12c:	50 69       	stdsp	sp[0x18],r9
8001a12e:	cc 2b       	rjmp	8001a0b2 <fatfs_update_file_length+0x12e>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001a130:	40 2c       	lddsp	r12,sp[0x8]
8001a132:	e0 a0 0a 53 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
8001a136:	fe 91 ff 79 	brne	8001a028 <fatfs_update_file_length+0xa4>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001a13a:	40 2c       	lddsp	r12,sp[0x8]
8001a13c:	e0 a0 0a 82 	rcall	8001b640 <fatfs_entry_sfn_only>
8001a140:	fe 90 ff 74 	breq	8001a028 <fatfs_update_file_length+0xa4>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001a144:	30 ba       	mov	r10,11
8001a146:	40 5b       	lddsp	r11,sp[0x14]
8001a148:	40 2c       	lddsp	r12,sp[0x8]
8001a14a:	e0 a0 39 80 	rcall	8002144a <strncmp>
8001a14e:	fe 91 ff 6d 	brne	8001a028 <fatfs_update_file_length+0xa4>
8001a152:	40 2e       	lddsp	lr,sp[0x8]
8001a154:	e0 6c 00 e0 	mov	r12,224
8001a158:	50 6e       	stdsp	sp[0x18],lr
8001a15a:	ca cb       	rjmp	8001a0b2 <fatfs_update_file_length+0x12e>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001a15c:	40 1c       	lddsp	r12,sp[0x4]
8001a15e:	e0 a0 0a 3d 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
8001a162:	fe 91 ff 5e 	brne	8001a01e <fatfs_update_file_length+0x9a>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001a166:	40 1c       	lddsp	r12,sp[0x4]
8001a168:	e0 a0 0a 6c 	rcall	8001b640 <fatfs_entry_sfn_only>
8001a16c:	fe 90 ff 59 	breq	8001a01e <fatfs_update_file_length+0x9a>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001a170:	30 ba       	mov	r10,11
8001a172:	40 5b       	lddsp	r11,sp[0x14]
8001a174:	40 1c       	lddsp	r12,sp[0x4]
8001a176:	e0 a0 39 6a 	rcall	8002144a <strncmp>
8001a17a:	fe 91 ff 52 	brne	8001a01e <fatfs_update_file_length+0x9a>
8001a17e:	40 18       	lddsp	r8,sp[0x4]
8001a180:	e0 6c 00 c0 	mov	r12,192
8001a184:	50 68       	stdsp	sp[0x18],r8
8001a186:	c9 6b       	rjmp	8001a0b2 <fatfs_update_file_length+0x12e>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001a188:	40 0c       	lddsp	r12,sp[0x0]
8001a18a:	e0 a0 0a 27 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
8001a18e:	fe 91 ff 43 	brne	8001a014 <fatfs_update_file_length+0x90>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001a192:	40 0c       	lddsp	r12,sp[0x0]
8001a194:	e0 a0 0a 56 	rcall	8001b640 <fatfs_entry_sfn_only>
8001a198:	fe 90 ff 3e 	breq	8001a014 <fatfs_update_file_length+0x90>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001a19c:	30 ba       	mov	r10,11
8001a19e:	40 5b       	lddsp	r11,sp[0x14]
8001a1a0:	40 0c       	lddsp	r12,sp[0x0]
8001a1a2:	e0 a0 39 54 	rcall	8002144a <strncmp>
8001a1a6:	fe 91 ff 37 	brne	8001a014 <fatfs_update_file_length+0x90>
8001a1aa:	40 09       	lddsp	r9,sp[0x0]
8001a1ac:	e0 6c 00 a0 	mov	r12,160
8001a1b0:	50 69       	stdsp	sp[0x18],r9
8001a1b2:	c8 0b       	rjmp	8001a0b2 <fatfs_update_file_length+0x12e>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001a1b4:	00 9c       	mov	r12,r0
8001a1b6:	e0 a0 0a 11 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
8001a1ba:	fe 91 ff 28 	brne	8001a00a <fatfs_update_file_length+0x86>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001a1be:	00 9c       	mov	r12,r0
8001a1c0:	e0 a0 0a 40 	rcall	8001b640 <fatfs_entry_sfn_only>
8001a1c4:	fe 90 ff 23 	breq	8001a00a <fatfs_update_file_length+0x86>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001a1c8:	30 ba       	mov	r10,11
8001a1ca:	40 5b       	lddsp	r11,sp[0x14]
8001a1cc:	00 9c       	mov	r12,r0
8001a1ce:	e0 a0 39 3e 	rcall	8002144a <strncmp>
8001a1d2:	fe 91 ff 1c 	brne	8001a00a <fatfs_update_file_length+0x86>
8001a1d6:	50 60       	stdsp	sp[0x18],r0
8001a1d8:	e0 6c 00 80 	mov	r12,128
8001a1dc:	c6 bb       	rjmp	8001a0b2 <fatfs_update_file_length+0x12e>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001a1de:	02 9c       	mov	r12,r1
8001a1e0:	e0 a0 09 fc 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
8001a1e4:	fe 91 ff 0e 	brne	8001a000 <fatfs_update_file_length+0x7c>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001a1e8:	02 9c       	mov	r12,r1
8001a1ea:	e0 a0 0a 2b 	rcall	8001b640 <fatfs_entry_sfn_only>
8001a1ee:	fe 90 ff 09 	breq	8001a000 <fatfs_update_file_length+0x7c>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001a1f2:	30 ba       	mov	r10,11
8001a1f4:	40 5b       	lddsp	r11,sp[0x14]
8001a1f6:	02 9c       	mov	r12,r1
8001a1f8:	e0 a0 39 29 	rcall	8002144a <strncmp>
8001a1fc:	fe 91 ff 02 	brne	8001a000 <fatfs_update_file_length+0x7c>
8001a200:	50 61       	stdsp	sp[0x18],r1
8001a202:	36 0c       	mov	r12,96
8001a204:	c5 7b       	rjmp	8001a0b2 <fatfs_update_file_length+0x12e>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001a206:	06 9c       	mov	r12,r3
8001a208:	e0 a0 09 e8 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
8001a20c:	fe 91 fe f5 	brne	80019ff6 <fatfs_update_file_length+0x72>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001a210:	06 9c       	mov	r12,r3
8001a212:	e0 a0 0a 17 	rcall	8001b640 <fatfs_entry_sfn_only>
8001a216:	fe 90 fe f0 	breq	80019ff6 <fatfs_update_file_length+0x72>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001a21a:	30 ba       	mov	r10,11
8001a21c:	40 5b       	lddsp	r11,sp[0x14]
8001a21e:	06 9c       	mov	r12,r3
8001a220:	e0 a0 39 15 	rcall	8002144a <strncmp>
8001a224:	fe 91 fe e9 	brne	80019ff6 <fatfs_update_file_length+0x72>
8001a228:	50 63       	stdsp	sp[0x18],r3
8001a22a:	34 0c       	mov	r12,64
8001a22c:	c4 3b       	rjmp	8001a0b2 <fatfs_update_file_length+0x12e>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001a22e:	04 9c       	mov	r12,r2
8001a230:	e0 a0 09 d4 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
8001a234:	fe 91 fe dc 	brne	80019fec <fatfs_update_file_length+0x68>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001a238:	04 9c       	mov	r12,r2
8001a23a:	e0 a0 0a 03 	rcall	8001b640 <fatfs_entry_sfn_only>
8001a23e:	fe 90 fe d7 	breq	80019fec <fatfs_update_file_length+0x68>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001a242:	30 ba       	mov	r10,11
8001a244:	40 5b       	lddsp	r11,sp[0x14]
8001a246:	04 9c       	mov	r12,r2
8001a248:	e0 a0 39 01 	rcall	8002144a <strncmp>
8001a24c:	fe 91 fe d0 	brne	80019fec <fatfs_update_file_length+0x68>
8001a250:	50 62       	stdsp	sp[0x18],r2
8001a252:	32 0c       	mov	r12,32
8001a254:	c2 fb       	rjmp	8001a0b2 <fatfs_update_file_length+0x12e>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001a256:	0c 9c       	mov	r12,r6
8001a258:	e0 a0 09 c0 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
8001a25c:	fe 91 fe c3 	brne	80019fe2 <fatfs_update_file_length+0x5e>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001a260:	0c 9c       	mov	r12,r6
8001a262:	e0 a0 09 ef 	rcall	8001b640 <fatfs_entry_sfn_only>
8001a266:	fe 90 fe be 	breq	80019fe2 <fatfs_update_file_length+0x5e>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001a26a:	30 ba       	mov	r10,11
8001a26c:	40 5b       	lddsp	r11,sp[0x14]
8001a26e:	0c 9c       	mov	r12,r6
8001a270:	e0 a0 38 ed 	rcall	8002144a <strncmp>
8001a274:	fe 91 fe b7 	brne	80019fe2 <fatfs_update_file_length+0x5e>
8001a278:	c1 db       	rjmp	8001a0b2 <fatfs_update_file_length+0x12e>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001a27a:	08 9c       	mov	r12,r4
8001a27c:	e0 a0 09 ae 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
8001a280:	fe 91 fe e6 	brne	8001a04c <fatfs_update_file_length+0xc8>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001a284:	08 9c       	mov	r12,r4
8001a286:	e0 a0 09 dd 	rcall	8001b640 <fatfs_entry_sfn_only>
8001a28a:	fe 90 fe e1 	breq	8001a04c <fatfs_update_file_length+0xc8>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001a28e:	30 ba       	mov	r10,11
8001a290:	40 5b       	lddsp	r11,sp[0x14]
8001a292:	08 9c       	mov	r12,r4
8001a294:	e0 a0 38 db 	rcall	8002144a <strncmp>
8001a298:	fe 91 fe da 	brne	8001a04c <fatfs_update_file_length+0xc8>
8001a29c:	50 64       	stdsp	sp[0x18],r4
8001a29e:	e0 6c 01 40 	mov	r12,320
8001a2a2:	c0 8b       	rjmp	8001a0b2 <fatfs_update_file_length+0x12e>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001a2a4:	08 9c       	mov	r12,r4
8001a2a6:	e0 a0 09 99 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
8001a2aa:	fe 91 fe ca 	brne	8001a03e <fatfs_update_file_length+0xba>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001a2ae:	08 9c       	mov	r12,r4
8001a2b0:	e0 a0 09 c8 	rcall	8001b640 <fatfs_entry_sfn_only>
8001a2b4:	fe 90 fe c5 	breq	8001a03e <fatfs_update_file_length+0xba>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001a2b8:	30 ba       	mov	r10,11
8001a2ba:	40 5b       	lddsp	r11,sp[0x14]
8001a2bc:	08 9c       	mov	r12,r4
8001a2be:	e0 a0 38 c6 	rcall	8002144a <strncmp>
8001a2c2:	fe 91 fe be 	brne	8001a03e <fatfs_update_file_length+0xba>
8001a2c6:	50 64       	stdsp	sp[0x18],r4
8001a2c8:	e0 6c 01 20 	mov	r12,288
8001a2cc:	cf 3a       	rjmp	8001a0b2 <fatfs_update_file_length+0x12e>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001a2ce:	08 9c       	mov	r12,r4
8001a2d0:	e0 a0 09 84 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
8001a2d4:	fe 91 fe d8 	brne	8001a084 <fatfs_update_file_length+0x100>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001a2d8:	08 9c       	mov	r12,r4
8001a2da:	e0 a0 09 b3 	rcall	8001b640 <fatfs_entry_sfn_only>
8001a2de:	fe 90 fe d3 	breq	8001a084 <fatfs_update_file_length+0x100>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001a2e2:	30 ba       	mov	r10,11
8001a2e4:	40 5b       	lddsp	r11,sp[0x14]
8001a2e6:	08 9c       	mov	r12,r4
8001a2e8:	e0 a0 38 b1 	rcall	8002144a <strncmp>
8001a2ec:	fe 91 fe cc 	brne	8001a084 <fatfs_update_file_length+0x100>
8001a2f0:	50 64       	stdsp	sp[0x18],r4
8001a2f2:	e0 6c 01 c0 	mov	r12,448
8001a2f6:	cd ea       	rjmp	8001a0b2 <fatfs_update_file_length+0x12e>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001a2f8:	08 9c       	mov	r12,r4
8001a2fa:	e0 a0 09 6f 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
8001a2fe:	fe 91 fe bc 	brne	8001a076 <fatfs_update_file_length+0xf2>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001a302:	08 9c       	mov	r12,r4
8001a304:	e0 a0 09 9e 	rcall	8001b640 <fatfs_entry_sfn_only>
8001a308:	fe 90 fe b7 	breq	8001a076 <fatfs_update_file_length+0xf2>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001a30c:	30 ba       	mov	r10,11
8001a30e:	40 5b       	lddsp	r11,sp[0x14]
8001a310:	08 9c       	mov	r12,r4
8001a312:	e0 a0 38 9c 	rcall	8002144a <strncmp>
8001a316:	fe 91 fe b0 	brne	8001a076 <fatfs_update_file_length+0xf2>
8001a31a:	50 64       	stdsp	sp[0x18],r4
8001a31c:	e0 6c 01 a0 	mov	r12,416
8001a320:	fe 9f fe c9 	bral	8001a0b2 <fatfs_update_file_length+0x12e>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001a324:	08 9c       	mov	r12,r4
8001a326:	e0 a0 09 59 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
8001a32a:	fe 91 fe 9f 	brne	8001a068 <fatfs_update_file_length+0xe4>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001a32e:	08 9c       	mov	r12,r4
8001a330:	e0 a0 09 88 	rcall	8001b640 <fatfs_entry_sfn_only>
8001a334:	fe 90 fe 9a 	breq	8001a068 <fatfs_update_file_length+0xe4>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001a338:	30 ba       	mov	r10,11
8001a33a:	40 5b       	lddsp	r11,sp[0x14]
8001a33c:	08 9c       	mov	r12,r4
8001a33e:	e0 a0 38 86 	rcall	8002144a <strncmp>
8001a342:	fe 91 fe 93 	brne	8001a068 <fatfs_update_file_length+0xe4>
8001a346:	50 64       	stdsp	sp[0x18],r4
8001a348:	e0 6c 01 80 	mov	r12,384
8001a34c:	fe 9f fe b3 	bral	8001a0b2 <fatfs_update_file_length+0x12e>
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) ) 
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) ) 
8001a350:	08 9c       	mov	r12,r4
8001a352:	e0 a0 09 43 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
8001a356:	fe 91 fe 82 	brne	8001a05a <fatfs_update_file_length+0xd6>
                    ;

                // Normal Entry, only 8.3 Text         
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
8001a35a:	08 9c       	mov	r12,r4
8001a35c:	e0 a0 09 72 	rcall	8001b640 <fatfs_entry_sfn_only>
8001a360:	fe 90 fe 7d 	breq	8001a05a <fatfs_update_file_length+0xd6>
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
8001a364:	30 ba       	mov	r10,11
8001a366:	40 5b       	lddsp	r11,sp[0x14]
8001a368:	08 9c       	mov	r12,r4
8001a36a:	e0 a0 38 70 	rcall	8002144a <strncmp>
8001a36e:	fe 91 fe 76 	brne	8001a05a <fatfs_update_file_length+0xd6>
8001a372:	50 64       	stdsp	sp[0x18],r4
8001a374:	e0 6c 01 60 	mov	r12,352
8001a378:	fe 9f fe 9d 	bral	8001a0b2 <fatfs_update_file_length+0x12e>

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));                    

                        // Write sector back
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
8001a37c:	2f 8d       	sub	sp,-32
8001a37e:	d8 3a       	popm	r0-r7,pc,r12=0

8001a380 <fatfs_list_directory_next>:
8001a380:	d4 31       	pushm	r0-r7,lr
8001a382:	fa cd 01 20 	sub	sp,sp,288
8001a386:	18 92       	mov	r2,r12
8001a388:	16 91       	mov	r1,r11
8001a38a:	50 1a       	stdsp	sp[0x4],r10
8001a38c:	fa c4 ff f6 	sub	r4,sp,-10
8001a390:	30 0b       	mov	r11,0
8001a392:	08 9c       	mov	r12,r4
8001a394:	e0 a0 0a 01 	rcall	8001b796 <fatfs_lfn_cache_init>
            {
                // Increase directory offset 
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001a398:	e4 c3 ff bc 	sub	r3,r2,-68
    struct lfn_cache lfn;
    int dotRequired = 0;
    int result = 0;
 
    // Initialise LFN cache first
    fatfs_lfn_cache_init(&lfn, 0);
8001a39c:	62 0a       	ld.w	r10,r1[0x0]
    {
        // If data read OK
        if (fatfs_sector_reader(fs, dirls->cluster, dirls->sector, 0))
        {
            // Maximum of 16 directory entries
            for (item = dirls->offset; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
8001a39e:	30 f5       	mov	r5,15
    fatfs_lfn_cache_init(&lfn, 0);

    while (1)
    {
        // If data read OK
        if (fatfs_sector_reader(fs, dirls->cluster, dirls->sector, 0))
8001a3a0:	62 1b       	ld.w	r11,r1[0x4]
8001a3a2:	04 9c       	mov	r12,r2
8001a3a4:	fe b0 fb 62 	rcall	80019a68 <T.41>
8001a3a8:	e0 80 00 ba 	breq	8001a51c <fatfs_list_directory_next+0x19c>
        {
            // Maximum of 16 directory entries
            for (item = dirls->offset; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
8001a3ac:	e3 37 00 08 	ld.ub	r7,r1[8]
8001a3b0:	ea 07 18 00 	cp.b	r7,r5
8001a3b4:	e0 88 00 10 	brls	8001a3d4 <fatfs_list_directory_next+0x54>
8001a3b8:	c2 68       	rjmp	8001a404 <fatfs_list_directory_next+0x84>
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if ( fatfs_entry_lfn_text(directoryEntry) )   
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);
8001a3ba:	e0 cb ff bc 	sub	r11,r0,-68
8001a3be:	08 9c       	mov	r12,r4
8001a3c0:	e4 0b 00 0b 	add	r11,r2,r11
8001a3c4:	e0 a0 08 1c 	rcall	8001b3fc <fatfs_lfn_cache_entry>
    {
        // If data read OK
        if (fatfs_sector_reader(fs, dirls->cluster, dirls->sector, 0))
        {
            // Maximum of 16 directory entries
            for (item = dirls->offset; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
8001a3c8:	2f f7       	sub	r7,-1
8001a3ca:	5c 57       	castu.b	r7
8001a3cc:	ea 07 18 00 	cp.b	r7,r5
8001a3d0:	e0 8b 00 1a 	brhi	8001a404 <fatfs_list_directory_next+0x84>
            {
                // Increase directory offset 
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001a3d4:	ee 00 15 05 	lsl	r0,r7,0x5
8001a3d8:	e6 00 00 06 	add	r6,r3,r0

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if ( fatfs_entry_lfn_text(directoryEntry) )   
8001a3dc:	0c 9c       	mov	r12,r6
8001a3de:	e0 a0 08 f6 	rcall	8001b5ca <fatfs_entry_lfn_text>
8001a3e2:	18 9b       	mov	r11,r12
8001a3e4:	ce b1       	brne	8001a3ba <fatfs_list_directory_next+0x3a>
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);
                     
                // If Invalid record found delete any long file name information collated
                else if ( fatfs_entry_lfn_invalid(directoryEntry) )     
8001a3e6:	50 0b       	stdsp	sp[0x0],r11
8001a3e8:	0c 9c       	mov	r12,r6
8001a3ea:	e0 a0 08 f7 	rcall	8001b5d8 <fatfs_entry_lfn_invalid>
8001a3ee:	40 0b       	lddsp	r11,sp[0x0]
8001a3f0:	c1 10       	breq	8001a412 <fatfs_list_directory_next+0x92>
                    fatfs_lfn_cache_init(&lfn, 0);
8001a3f2:	08 9c       	mov	r12,r4
8001a3f4:	e0 a0 09 d1 	rcall	8001b796 <fatfs_lfn_cache_init>
    {
        // If data read OK
        if (fatfs_sector_reader(fs, dirls->cluster, dirls->sector, 0))
        {
            // Maximum of 16 directory entries
            for (item = dirls->offset; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
8001a3f8:	2f f7       	sub	r7,-1
8001a3fa:	5c 57       	castu.b	r7
8001a3fc:	ea 07 18 00 	cp.b	r7,r5
8001a400:	fe 98 ff ea 	brls	8001a3d4 <fatfs_list_directory_next+0x54>
                    return 1;            
                }
            }// end of for

            // If reached end of the dir move onto next sector
            dirls->sector++;
8001a404:	62 0a       	ld.w	r10,r1[0x0]
            dirls->offset = 0;
8001a406:	30 09       	mov	r9,0
                    return 1;            
                }
            }// end of for

            // If reached end of the dir move onto next sector
            dirls->sector++;
8001a408:	2f fa       	sub	r10,-1
            dirls->offset = 0;
8001a40a:	e3 69 00 08 	st.b	r1[8],r9
                    return 1;            
                }
            }// end of for

            // If reached end of the dir move onto next sector
            dirls->sector++;
8001a40e:	83 0a       	st.w	r1[0x0],r10
            dirls->offset = 0;
        }
        else
            break;
    }
8001a410:	cc 8b       	rjmp	8001a3a0 <fatfs_list_directory_next+0x20>
                // If Invalid record found delete any long file name information collated
                else if ( fatfs_entry_lfn_invalid(directoryEntry) )     
                    fatfs_lfn_cache_init(&lfn, 0);

                // Normal SFN Entry and Long text exists 
                else if (fatfs_entry_lfn_exists(&lfn, directoryEntry) ) 
8001a412:	0c 9b       	mov	r11,r6
8001a414:	08 9c       	mov	r12,r4
8001a416:	e0 a0 08 fa 	rcall	8001b60a <fatfs_entry_lfn_exists>
8001a41a:	18 90       	mov	r0,r12
8001a41c:	e0 81 00 82 	brne	8001a520 <fatfs_list_directory_next+0x1a0>
                    return 1;
                }            
                // Normal Entry, only 8.3 Text         
                else 
#endif        
                if ( fatfs_entry_sfn_only(directoryEntry) )
8001a420:	0c 9c       	mov	r12,r6
8001a422:	e0 a0 09 0f 	rcall	8001b640 <fatfs_entry_sfn_only>
8001a426:	cd 10       	breq	8001a3c8 <fatfs_list_directory_next+0x48>
                {
                    fatfs_lfn_cache_init(&lfn, 0);
8001a428:	08 9c       	mov	r12,r4
8001a42a:	00 9b       	mov	r11,r0
8001a42c:	e0 a0 09 b5 	rcall	8001b796 <fatfs_lfn_cache_init>
                    
                    memset(short_filename, 0, sizeof(short_filename));
8001a430:	fa cb fe f0 	sub	r11,sp,-272
//-----------------------------------------------------------------------------
// fatfs_list_directory_next: Get the next entry in the directory.
// Returns: 1 = found, 0 = end of listing
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fatfs_list_directory_next(struct fatfs *fs, struct fs_dir_list_status *dirls, struct fs_dir_ent *entry)
8001a434:	ec c9 ff fc 	sub	r9,r6,-4
#endif        
                if ( fatfs_entry_sfn_only(directoryEntry) )
                {
                    fatfs_lfn_cache_init(&lfn, 0);
                    
                    memset(short_filename, 0, sizeof(short_filename));
8001a438:	fb 60 01 1c 	st.b	sp[284],r0
//-----------------------------------------------------------------------------
// fatfs_list_directory_next: Get the next entry in the directory.
// Returns: 1 = found, 0 = end of listing
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fatfs_list_directory_next(struct fatfs *fs, struct fs_dir_list_status *dirls, struct fs_dir_ent *entry)
8001a43c:	16 39       	cp.w	r9,r11
8001a43e:	5f 3c       	srlo	r12
8001a440:	fa c8 fe ec 	sub	r8,sp,-276
8001a444:	10 36       	cp.w	r6,r8
8001a446:	5f ba       	srhi	r10
8001a448:	f9 ea 10 0a 	or	r10,r12,r10
8001a44c:	f9 d6 c0 02 	bfextu	r12,r6,0x0,0x2
8001a450:	5f 0c       	sreq	r12
8001a452:	f9 ea 00 0a 	and	r10,r12,r10
8001a456:	e0 0a 18 00 	cp.b	r10,r0
8001a45a:	c7 f0       	breq	8001a558 <fatfs_list_directory_next+0x1d8>
                    
                    memset(short_filename, 0, sizeof(short_filename));

                    // Copy name to string
                    for (i=0; i<8; i++) 
                        short_filename[i] = directoryEntry->Name[i];
8001a45c:	72 09       	ld.w	r9,r9[0x0]
8001a45e:	91 09       	st.w	r8[0x0],r9
8001a460:	6c 08       	ld.w	r8,r6[0x0]
8001a462:	97 08       	st.w	r11[0x0],r8

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++) 
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
8001a464:	ed 38 00 09 	ld.ub	r8,r6[9]
8001a468:	fb 68 01 1a 	st.b	sp[282],r8
8001a46c:	ed 39 00 08 	ld.ub	r9,r6[8]
8001a470:	fb 69 01 19 	st.b	sp[281],r9
                        if (directoryEntry->Name[i] != ' ')
8001a474:	32 0a       	mov	r10,32
8001a476:	f4 08 18 00 	cp.b	r8,r10
8001a47a:	c6 b0       	breq	8001a550 <fatfs_list_directory_next+0x1d0>
8001a47c:	30 1c       	mov	r12,1

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++) 
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
8001a47e:	ed 38 00 0a 	ld.ub	r8,r6[10]
8001a482:	fb 68 01 1b 	st.b	sp[283],r8
                        if (directoryEntry->Name[i] != ' ')
8001a486:	32 09       	mov	r9,32
8001a488:	f2 08 18 00 	cp.b	r8,r9
8001a48c:	c5 f0       	breq	8001a54a <fatfs_list_directory_next+0x1ca>

                    // Dot only required if extension present
                    if (dotRequired)
                    {
                        // If not . or .. entry
                        if (short_filename[0]!='.')
8001a48e:	32 e8       	mov	r8,46
8001a490:	fb 39 01 10 	ld.ub	r9,sp[272]
8001a494:	f0 09 18 00 	cp.b	r9,r8
8001a498:	c5 50       	breq	8001a542 <fatfs_list_directory_next+0x1c2>
                            short_filename[8] = '.';
                        else
                            short_filename[8] = ' ';
                    }
                    else
                        short_filename[8] = ' ';
8001a49a:	fb 68 01 18 	st.b	sp[280],r8
                    
                    fatfs_get_sfn_display_name(entry->filename, short_filename);
8001a49e:	40 1c       	lddsp	r12,sp[0x4]
8001a4a0:	e0 a0 0c b0 	rcall	8001be00 <fatfs_get_sfn_display_name>

                    if (fatfs_entry_is_dir(directoryEntry)) 
8001a4a4:	0c 9c       	mov	r12,r6
8001a4a6:	e0 a0 08 e3 	rcall	8001b66c <fatfs_entry_is_dir>
8001a4aa:	c4 80       	breq	8001a53a <fatfs_list_directory_next+0x1ba>
                        entry->is_dir = 1; 
8001a4ac:	30 18       	mov	r8,1
8001a4ae:	40 19       	lddsp	r9,sp[0x4]
8001a4b0:	f3 68 01 04 	st.b	r9[260],r8
                    else
                        entry->is_dir = 0;

                    entry->size = FAT_HTONL(directoryEntry->FileSize);
8001a4b4:	ed 39 00 1c 	ld.ub	r9,r6[28]
8001a4b8:	ed 38 00 1d 	ld.ub	r8,r6[29]
8001a4bc:	b1 68       	lsl	r8,0x10
8001a4be:	f1 e9 11 88 	or	r8,r8,r9<<0x18
8001a4c2:	ed 39 00 1e 	ld.ub	r9,r6[30]
8001a4c6:	f1 e9 10 88 	or	r8,r8,r9<<0x8
8001a4ca:	ed 39 00 1f 	ld.ub	r9,r6[31]
8001a4ce:	f3 e8 10 08 	or	r8,r9,r8
8001a4d2:	10 99       	mov	r9,r8
8001a4d4:	e6 19 00 ff 	andh	r9,0xff,COH
8001a4d8:	f0 0a 15 18 	lsl	r10,r8,0x18
8001a4dc:	f5 e8 13 8a 	or	r10,r10,r8>>0x18
8001a4e0:	e2 18 ff 00 	andl	r8,0xff00,COH
8001a4e4:	f5 e8 10 88 	or	r8,r10,r8<<0x8
8001a4e8:	f1 e9 12 88 	or	r8,r8,r9>>0x8
8001a4ec:	40 19       	lddsp	r9,sp[0x4]
8001a4ee:	f3 48 01 0c 	st.w	r9[268],r8
                    entry->cluster = (FAT_HTONS(directoryEntry->FstClusHI)<<16) | FAT_HTONS(directoryEntry->FstClusLO);
8001a4f2:	ed 38 00 14 	ld.ub	r8,r6[20]
8001a4f6:	ed 39 00 15 	ld.ub	r9,r6[21]
8001a4fa:	f1 e9 10 89 	or	r9,r8,r9<<0x8
8001a4fe:	ed 3a 00 1b 	ld.ub	r10,r6[27]
8001a502:	ed 38 00 1a 	ld.ub	r8,r6[26]
8001a506:	f1 ea 10 88 	or	r8,r8,r10<<0x8
8001a50a:	f1 e9 11 08 	or	r8,r8,r9<<0x10
8001a50e:	40 19       	lddsp	r9,sp[0x4]
8001a510:	f3 48 01 08 	st.w	r9[264],r8

                    // Next starting position
                    dirls->offset = item + 1;
8001a514:	2f f7       	sub	r7,-1
8001a516:	30 1c       	mov	r12,1
8001a518:	e3 67 00 08 	st.b	r1[8],r7
        else
            break;
    }

    return result;
} 
8001a51c:	2b 8d       	sub	sp,-288
8001a51e:	d8 32       	popm	r0-r7,pc

                // Normal SFN Entry and Long text exists 
                else if (fatfs_entry_lfn_exists(&lfn, directoryEntry) ) 
                {
                    // Get text
                    long_filename = fatfs_lfn_cache_get(&lfn);
8001a520:	08 9c       	mov	r12,r4
8001a522:	e0 a0 08 3d 	rcall	8001b59c <fatfs_lfn_cache_get>
                    strncpy(entry->filename, long_filename, FATFS_MAX_LONG_FILENAME-1);
8001a526:	e0 6a 01 03 	mov	r10,259
8001a52a:	18 9b       	mov	r11,r12
8001a52c:	40 1c       	lddsp	r12,sp[0x4]
8001a52e:	e0 a0 37 a1 	rcall	80021470 <strncpy>

                    if (fatfs_entry_is_dir(directoryEntry)) 
8001a532:	0c 9c       	mov	r12,r6
8001a534:	e0 a0 08 9c 	rcall	8001b66c <fatfs_entry_is_dir>
8001a538:	cb a1       	brne	8001a4ac <fatfs_list_directory_next+0x12c>
                    fatfs_get_sfn_display_name(entry->filename, short_filename);

                    if (fatfs_entry_is_dir(directoryEntry)) 
                        entry->is_dir = 1; 
                    else
                        entry->is_dir = 0;
8001a53a:	40 18       	lddsp	r8,sp[0x4]
8001a53c:	f1 6c 01 04 	st.b	r8[260],r12
8001a540:	cb ab       	rjmp	8001a4b4 <fatfs_list_directory_next+0x134>
                    {
                        // If not . or .. entry
                        if (short_filename[0]!='.')
                            short_filename[8] = '.';
                        else
                            short_filename[8] = ' ';
8001a542:	32 08       	mov	r8,32
8001a544:	fb 68 01 18 	st.b	sp[280],r8
8001a548:	ca bb       	rjmp	8001a49e <fatfs_list_directory_next+0x11e>
                        if (directoryEntry->Name[i] != ' ')
                            dotRequired = 1;
                    }

                    // Dot only required if extension present
                    if (dotRequired)
8001a54a:	58 0c       	cp.w	r12,0
8001a54c:	ca 70       	breq	8001a49a <fatfs_list_directory_next+0x11a>
8001a54e:	ca 0b       	rjmp	8001a48e <fatfs_list_directory_next+0x10e>
                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++) 
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
                        if (directoryEntry->Name[i] != ' ')
8001a550:	f0 09 18 00 	cp.b	r9,r8
8001a554:	5f 1c       	srne	r12
8001a556:	c9 4b       	rjmp	8001a47e <fatfs_list_directory_next+0xfe>
                    
                    memset(short_filename, 0, sizeof(short_filename));

                    // Copy name to string
                    for (i=0; i<8; i++) 
                        short_filename[i] = directoryEntry->Name[i];
8001a558:	0d 88       	ld.ub	r8,r6[0x0]
8001a55a:	fb 68 01 10 	st.b	sp[272],r8
8001a55e:	0d 98       	ld.ub	r8,r6[0x1]
8001a560:	fb 68 01 11 	st.b	sp[273],r8
8001a564:	0d a8       	ld.ub	r8,r6[0x2]
8001a566:	fb 68 01 12 	st.b	sp[274],r8
8001a56a:	0d b8       	ld.ub	r8,r6[0x3]
8001a56c:	fb 68 01 13 	st.b	sp[275],r8
8001a570:	0d c8       	ld.ub	r8,r6[0x4]
8001a572:	fb 68 01 14 	st.b	sp[276],r8
8001a576:	0d d8       	ld.ub	r8,r6[0x5]
8001a578:	fb 68 01 15 	st.b	sp[277],r8
8001a57c:	0d e8       	ld.ub	r8,r6[0x6]
8001a57e:	fb 68 01 16 	st.b	sp[278],r8
8001a582:	0d f8       	ld.ub	r8,r6[0x7]
8001a584:	fb 68 01 17 	st.b	sp[279],r8
8001a588:	c6 eb       	rjmp	8001a464 <fatfs_list_directory_next+0xe4>
8001a58a:	d7 03       	nop

8001a58c <fatfs_write_sector>:
8001a58c:	eb cd 40 e0 	pushm	r5-r7,lr
8001a590:	20 1d       	sub	sp,4
8001a592:	18 96       	mov	r6,r12
8001a594:	16 98       	mov	r8,r11
8001a596:	78 e7       	ld.w	r7,r12[0x38]
8001a598:	58 07       	cp.w	r7,0
8001a59a:	c2 50       	breq	8001a5e4 <fatfs_write_sector+0x58>
8001a59c:	58 0b       	cp.w	r11,0
8001a59e:	5f 05       	sreq	r5
8001a5a0:	78 ce       	ld.w	lr,r12[0x30]
8001a5a2:	58 0e       	cp.w	lr,0
8001a5a4:	5f 0e       	sreq	lr
8001a5a6:	fd e5 00 05 	and	r5,lr,r5
8001a5aa:	c1 10       	breq	8001a5cc <fatfs_write_sector+0x40>
8001a5ac:	78 48       	ld.w	r8,r12[0x10]
8001a5ae:	14 38       	cp.w	r8,r10
8001a5b0:	e0 88 00 1a 	brls	8001a5e4 <fatfs_write_sector+0x58>
8001a5b4:	78 3c       	ld.w	r12,r12[0xc]
8001a5b6:	6c 78       	ld.w	r8,r6[0x1c]
    {
        uint32 lba;

        // In FAT16 we cannot extend the root dir!
        if (sector < fs->rootdir_sectors)
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
8001a5b8:	10 0c       	add	r12,r8
8001a5ba:	14 0c       	add	r12,r10
        else
            return 0;

        // User target buffer passed in
        if (target)
8001a5bc:	58 09       	cp.w	r9,0
8001a5be:	c2 d0       	breq	8001a618 <fatfs_write_sector+0x8c>
        {
            // Calculate write address
            uint32 lba = fatfs_lba_of_cluster(fs, cluster) + sector;

            // Write to disk
            return fs->disk_io.write_media(lba, target, 1);
8001a5c0:	12 9b       	mov	r11,r9
8001a5c2:	30 1a       	mov	r10,1
8001a5c4:	5d 17       	icall	r7

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
        }
    }
}
8001a5c6:	2f fd       	sub	sp,-4
8001a5c8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
    }
    // FAT16/32 Other
    else
    {
        // User target buffer passed in
        if (target)
8001a5cc:	58 09       	cp.w	r9,0
8001a5ce:	c1 90       	breq	8001a600 <fatfs_write_sector+0x74>
// fatfs_lba_of_cluster: This function converts a cluster number into a sector / 
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
    if (fs->fat_type == FAT_TYPE_16)
8001a5d0:	58 0e       	cp.w	lr,0
8001a5d2:	c0 c1       	brne	8001a5ea <fatfs_write_sector+0x5e>
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
    else
        return ((fs->cluster_begin_lba + ((Cluster_Number-2)*fs->sectors_per_cluster)));
8001a5d4:	78 1b       	ld.w	r11,r12[0x4]
8001a5d6:	20 28       	sub	r8,2
8001a5d8:	19 8c       	ld.ub	r12,r12[0x0]
8001a5da:	f0 0c 02 4c 	mul	r12,r8,r12
8001a5de:	16 0c       	add	r12,r11
        {
            // Calculate write address
            uint32 lba = fatfs_lba_of_cluster(fs, cluster) + sector;

            // Write to disk
            return fs->disk_io.write_media(lba, target, 1);
8001a5e0:	14 0c       	add	r12,r10
8001a5e2:	ce fb       	rjmp	8001a5c0 <fatfs_write_sector+0x34>
        {
            // Calculate write address
            fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
8001a5e4:	2f fd       	sub	sp,-4
8001a5e6:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
    if (fs->fat_type == FAT_TYPE_16)
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
8001a5ea:	19 8b       	ld.ub	r11,r12[0x0]
8001a5ec:	20 28       	sub	r8,2
8001a5ee:	f9 1c 00 28 	ld.uh	r12,r12[40]
8001a5f2:	b7 38       	mul	r8,r11
8001a5f4:	a5 4c       	asr	r12,0x4
8001a5f6:	6c 1b       	ld.w	r11,r6[0x4]
8001a5f8:	16 0c       	add	r12,r11
8001a5fa:	10 0c       	add	r12,r8
        {
            // Calculate write address
            uint32 lba = fatfs_lba_of_cluster(fs, cluster) + sector;

            // Write to disk
            return fs->disk_io.write_media(lba, target, 1);
8001a5fc:	14 0c       	add	r12,r10
8001a5fe:	ce 1b       	rjmp	8001a5c0 <fatfs_write_sector+0x34>
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;
8001a600:	50 0a       	stdsp	sp[0x0],r10
8001a602:	fe b0 f8 d9 	rcall	800197b4 <fatfs_lba_of_cluster>
8001a606:	40 0a       	lddsp	r10,sp[0x0]

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
8001a608:	ec cb ff bc 	sub	r11,r6,-68
            return fs->disk_io.write_media(lba, target, 1);
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;
8001a60c:	14 0c       	add	r12,r10

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
8001a60e:	30 1a       	mov	r10,1
            return fs->disk_io.write_media(lba, target, 1);
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;
8001a610:	ed 4c 02 44 	st.w	r6[580],r12

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
8001a614:	5d 17       	icall	r7
8001a616:	cd 8b       	rjmp	8001a5c6 <fatfs_write_sector+0x3a>
            return fs->disk_io.write_media(lba, target, 1);
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = lba;
8001a618:	ed 4c 02 44 	st.w	r6[580],r12

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
8001a61c:	ec cb ff bc 	sub	r11,r6,-68
8001a620:	30 1a       	mov	r10,1
8001a622:	5d 17       	icall	r7
8001a624:	cd 1b       	rjmp	8001a5c6 <fatfs_write_sector+0x3a>
8001a626:	d7 03       	nop

8001a628 <fatfs_sector_reader>:
8001a628:	eb cd 40 fc 	pushm	r2-r7,lr
    uint32 cluster_chain = 0;
    uint32 i;
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
8001a62c:	58 0b       	cp.w	r11,0
8001a62e:	5f 08       	sreq	r8
//-----------------------------------------------------------------------------
// fatfs_sector_reader: From the provided startcluster and sector offset
// Returns True if success, returns False if not (including if read out of range)
//-----------------------------------------------------------------------------
int fatfs_sector_reader(struct fatfs *fs, uint32 start_cluster, uint32 offset, uint8 *target)
{
8001a630:	12 93       	mov	r3,r9
8001a632:	18 97       	mov	r7,r12
    uint32 cluster_chain = 0;
    uint32 i;
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
8001a634:	78 c9       	ld.w	r9,r12[0x30]
//-----------------------------------------------------------------------------
// fatfs_sector_reader: From the provided startcluster and sector offset
// Returns True if success, returns False if not (including if read out of range)
//-----------------------------------------------------------------------------
int fatfs_sector_reader(struct fatfs *fs, uint32 start_cluster, uint32 offset, uint8 *target)
{
8001a636:	14 96       	mov	r6,r10
    uint32 cluster_chain = 0;
    uint32 i;
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
8001a638:	58 09       	cp.w	r9,0
8001a63a:	5f 09       	sreq	r9
8001a63c:	12 68       	and	r8,r9
8001a63e:	c1 10       	breq	8001a660 <fatfs_sector_reader+0x38>
    {
        if (offset < fs->rootdir_sectors)
8001a640:	78 48       	ld.w	r8,r12[0x10]
8001a642:	14 38       	cp.w	r8,r10
8001a644:	e0 88 00 3b 	brls	8001a6ba <fatfs_sector_reader+0x92>
            lba = fs->lba_begin + fs->rootdir_first_sector + offset;
8001a648:	78 3c       	ld.w	r12,r12[0xc]
8001a64a:	6e 78       	ld.w	r8,r7[0x1c]
8001a64c:	10 0c       	add	r12,r8
8001a64e:	14 0c       	add	r12,r10
        // Calculate sector address
        lba = fatfs_lba_of_cluster(fs, cluster_chain)+sector_to_read;
    }

    // User provided target array
    if (target)
8001a650:	58 03       	cp.w	r3,0
8001a652:	c2 70       	breq	8001a6a0 <fatfs_sector_reader+0x78>
        return fs->disk_io.read_media(lba, target, 1);
8001a654:	6e d8       	ld.w	r8,r7[0x34]
8001a656:	06 9b       	mov	r11,r3
8001a658:	30 1a       	mov	r10,1
8001a65a:	5d 18       	icall	r8
8001a65c:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
    {
        // Set start of cluster chain to initial value
        cluster_chain = start_cluster;

        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;      
8001a660:	19 82       	ld.ub	r2,r12[0x0]
8001a662:	f4 02 0d 08 	divu	r8,r10,r2
8001a666:	10 94       	mov	r4,r8
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
8001a668:	58 08       	cp.w	r8,0
8001a66a:	c0 a0       	breq	8001a67e <fatfs_sector_reader+0x56>
8001a66c:	30 05       	mov	r5,0
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);
8001a66e:	0e 9c       	mov	r12,r7
        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;      
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
8001a670:	2f f5       	sub	r5,-1
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);
8001a672:	e0 a0 0e 79 	rcall	8001c364 <fatfs_find_next_cluster>
8001a676:	18 9b       	mov	r11,r12
        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;      
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
8001a678:	0a 34       	cp.w	r4,r5
8001a67a:	fe 9b ff fa 	brhi	8001a66e <fatfs_sector_reader+0x46>
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);

        // If end of cluster chain then return false
        if (cluster_chain == FAT32_LAST_CLUSTER) 
8001a67e:	5b fb       	cp.w	r11,-1
8001a680:	c1 d0       	breq	8001a6ba <fatfs_sector_reader+0x92>
// fatfs_lba_of_cluster: This function converts a cluster number into a sector / 
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
    if (fs->fat_type == FAT_TYPE_16)
8001a682:	6e c8       	ld.w	r8,r7[0x30]
8001a684:	58 08       	cp.w	r8,0
8001a686:	c1 c0       	breq	8001a6be <fatfs_sector_reader+0x96>
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
    else
        return ((fs->cluster_begin_lba + ((Cluster_Number-2)*fs->sectors_per_cluster)));
8001a688:	0f 88       	ld.ub	r8,r7[0x0]
8001a68a:	20 2b       	sub	r11,2
8001a68c:	b1 3b       	mul	r11,r8
8001a68e:	6e 18       	ld.w	r8,r7[0x4]
8001a690:	f6 08 00 08 	add	r8,r11,r8
        // If end of cluster chain then return false
        if (cluster_chain == FAT32_LAST_CLUSTER) 
            return 0;

        // Calculate sector address
        lba = fatfs_lba_of_cluster(fs, cluster_chain)+sector_to_read;
8001a694:	a5 34       	mul	r4,r2
8001a696:	08 16       	sub	r6,r4
8001a698:	ec 08 00 0c 	add	r12,r6,r8
    }

    // User provided target array
    if (target)
8001a69c:	58 03       	cp.w	r3,0
8001a69e:	cd b1       	brne	8001a654 <fatfs_sector_reader+0x2c>
        return fs->disk_io.read_media(lba, target, 1);
    // Else read sector if not already loaded
    else if (lba != fs->currentsector.address)
8001a6a0:	ee f8 02 44 	ld.w	r8,r7[580]
8001a6a4:	18 38       	cp.w	r8,r12
8001a6a6:	c1 70       	breq	8001a6d4 <fatfs_sector_reader+0xac>
    {
        fs->currentsector.address = lba;
8001a6a8:	ef 4c 02 44 	st.w	r7[580],r12
        return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
8001a6ac:	ee cb ff bc 	sub	r11,r7,-68
8001a6b0:	6e d8       	ld.w	r8,r7[0x34]
8001a6b2:	30 1a       	mov	r10,1
8001a6b4:	5d 18       	icall	r8
8001a6b6:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
8001a6ba:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
    if (fs->fat_type == FAT_TYPE_16)
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
8001a6be:	ef 19 00 28 	ld.uh	r9,r7[40]
8001a6c2:	a5 49       	asr	r9,0x4
8001a6c4:	20 2b       	sub	r11,2
8001a6c6:	6e 18       	ld.w	r8,r7[0x4]
8001a6c8:	f2 08 00 08 	add	r8,r9,r8
8001a6cc:	0f 89       	ld.ub	r9,r7[0x0]
8001a6ce:	f6 09 03 48 	mac	r8,r11,r9
8001a6d2:	ce 1b       	rjmp	8001a694 <fatfs_sector_reader+0x6c>

    // User provided target array
    if (target)
        return fs->disk_io.read_media(lba, target, 1);
    // Else read sector if not already loaded
    else if (lba != fs->currentsector.address)
8001a6d4:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1

8001a6d8 <fatfs_cache_init>:
        file->cluster_cache_data[i] = 0; 
    }
#endif
    
    return 1;
}
8001a6d8:	5e ff       	retal	1

8001a6da <fatfs_cache_get_next_cluster>:
        return 1;
    }
#endif
    
    return 0;
}
8001a6da:	5e fd       	retal	0

8001a6dc <fatfs_cache_set_next_cluster>:
        file->cluster_cache_data[slot] = nextCluster;
    }
#endif

    return 1;
}
8001a6dc:	5e ff       	retal	1
8001a6de:	d7 03       	nop

8001a6e0 <_free_file>:
inline void fat_list_remove(struct fat_list *list, struct fat_node *node) 
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
8001a6e0:	f8 f8 04 3c 	ld.w	r8,r12[1084]
8001a6e4:	58 08       	cp.w	r8,0
8001a6e6:	c1 f0       	breq	8001a724 <_free_file+0x44>
        list->head = node->next;
    else
        node->previous->next = node->next;
8001a6e8:	f8 f9 04 40 	ld.w	r9,r12[1088]
8001a6ec:	91 19       	st.w	r8[0x4],r9
8001a6ee:	f8 f8 04 40 	ld.w	r8,r12[1088]
8001a6f2:	f8 f9 04 3c 	ld.w	r9,r12[1084]

    if(!node->next)
8001a6f6:	58 08       	cp.w	r8,0
8001a6f8:	c1 e0       	breq	8001a734 <_free_file+0x54>
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
8001a6fa:	91 09       	st.w	r8[0x0],r9
inline void fat_list_insert_last(struct fat_list *list, struct fat_node *node) 
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
8001a6fc:	e0 6b 37 1c 	mov	r11,14108
{
    // Remove from open list
    fat_list_remove(&_open_file_list, &file->list_node);

    // Add to free list
    fat_list_insert_last(&_free_file_list, &file->list_node);
8001a700:	f8 c9 fb c4 	sub	r9,r12,-1084
8001a704:	76 18       	ld.w	r8,r11[0x4]
8001a706:	58 08       	cp.w	r8,0
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
8001a708:	c1 a0       	breq	8001a73c <_free_file+0x5c>
8001a70a:	f9 48 04 3c 	st.w	r12[1084],r8
    new_node->next = node->next;
8001a70e:	70 1a       	ld.w	r10,r8[0x4]
8001a710:	f9 4a 04 40 	st.w	r12[1088],r10
    if (!node->next)
        list->tail = new_node;
8001a714:	70 1a       	ld.w	r10,r8[0x4]
8001a716:	58 0a       	cp.w	r10,0
8001a718:	f7 f9 0a 01 	st.weq	r11[0x4],r9
    else
        node->next->previous = new_node;
8001a71c:	f5 f9 1a 00 	st.wne	r10[0x0],r9
    node->next = new_node;
8001a720:	91 19       	st.w	r8[0x4],r9
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
        list->head = node->next;
8001a722:	5e fc       	retal	r12
8001a724:	10 99       	mov	r9,r8
8001a726:	e0 6a 2a 1c 	mov	r10,10780
8001a72a:	f8 f8 04 40 	ld.w	r8,r12[1088]
    else
        node->previous->next = node->next;

    if(!node->next)
8001a72e:	95 08       	st.w	r10[0x0],r8
        list->tail = node->previous;
8001a730:	58 08       	cp.w	r8,0
8001a732:	ce 41       	brne	8001a6fa <_free_file+0x1a>
8001a734:	e0 68 2a 1c 	mov	r8,10780
inline void fat_list_insert_first(struct fat_list *list, struct fat_node *node) 
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
8001a738:	91 19       	st.w	r8[0x4],r9
8001a73a:	ce 1b       	rjmp	8001a6fc <_free_file+0x1c>
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
8001a73c:	76 08       	ld.w	r8,r11[0x0]
    new_node->next = node;
8001a73e:	58 08       	cp.w	r8,0
8001a740:	c0 e0       	breq	8001a75c <_free_file+0x7c>
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
8001a742:	70 0a       	ld.w	r10,r8[0x0]
8001a744:	f9 48 04 40 	st.w	r12[1088],r8
    new_node->next = node;
    if (!node->previous)
        list->head = new_node;
8001a748:	f9 4a 04 3c 	st.w	r12[1084],r10
8001a74c:	70 0a       	ld.w	r10,r8[0x0]
    else
        node->previous->next = new_node;
8001a74e:	58 0a       	cp.w	r10,0
8001a750:	f7 f9 0a 00 	st.weq	r11[0x0],r9
    node->previous = new_node;
8001a754:	f5 f9 1a 01 	st.wne	r10[0x4],r9
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
8001a758:	91 09       	st.w	r8[0x0],r9
        list->tail = node;
        node->previous = 0;
        node->next = 0;
8001a75a:	5e fc       	retal	r12
8001a75c:	97 19       	st.w	r11[0x4],r9

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
8001a75e:	97 09       	st.w	r11[0x0],r9
8001a760:	f9 48 04 40 	st.w	r12[1088],r8
8001a764:	f9 48 04 3c 	st.w	r12[1084],r8
8001a768:	5e fc       	retal	r12
8001a76a:	d7 03       	nop

8001a76c <fl_init>:
8001a76c:	e0 68 2e 90 	mov	r8,11920
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
8001a770:	30 09       	mov	r9,0
8001a772:	f1 49 08 84 	st.w	r8[2180],r9

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
8001a776:	f1 49 04 3c 	st.w	r8[1084],r9
inline void fat_list_init(struct fat_list *list);
inline void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
8001a77a:	e0 6a 2a 1c 	mov	r10,10780
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
8001a77e:	95 09       	st.w	r10[0x0],r9
8001a780:	95 19       	st.w	r10[0x4],r9
    new_node->next = node->next;
    if (!node->next)
8001a782:	f0 c9 fb c4 	sub	r9,r8,-1084
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
8001a786:	f0 ca f7 80 	sub	r10,r8,-2176
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
8001a78a:	f1 49 08 80 	st.w	r8[2176],r9
8001a78e:	f1 4a 04 40 	st.w	r8[1088],r10
8001a792:	e0 68 37 1c 	mov	r8,14108

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    _filelib_init = 1;
8001a796:	91 09       	st.w	r8[0x0],r9
8001a798:	91 1a       	st.w	r8[0x4],r10
}
8001a79a:	30 19       	mov	r9,1
8001a79c:	e0 68 37 18 	mov	r8,14104
8001a7a0:	91 09       	st.w	r8[0x0],r9
8001a7a2:	5e fc       	retal	r12

8001a7a4 <_open_directory>:
8001a7a4:	eb cd 40 fe 	pushm	r1-r7,lr
8001a7a8:	fa cd 01 24 	sub	sp,sp,292
//-----------------------------------------------------------------------------
// _open_directory: Cycle through path string to find the start cluster
// address of the highest subdir.
//-----------------------------------------------------------------------------
static int _open_directory(char *path, uint32 *pathCluster)
{
8001a7ac:	18 93       	mov	r3,r12
8001a7ae:	16 91       	mov	r1,r11
    char currentfolder[FATFS_MAX_LONG_FILENAME];
    struct fat_dir_entry sfEntry;
    uint32 startcluster;

    // Set starting cluster to root cluster
    startcluster = fatfs_get_root_cluster(&_fs);
8001a7b0:	e0 6c 2a 28 	mov	r12,10792
8001a7b4:	fe b0 f8 25 	rcall	800197fe <fatfs_get_root_cluster>

    // Find number of levels
    levels = fatfs_total_path_levels(path);
8001a7b8:	18 95       	mov	r5,r12
8001a7ba:	06 9c       	mov	r12,r3
8001a7bc:	e0 a0 0a f4 	rcall	8001bda4 <fatfs_total_path_levels>

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++) 
8001a7c0:	18 92       	mov	r2,r12
8001a7c2:	c3 35       	brlt	8001a828 <_open_directory+0x84>
8001a7c4:	30 07       	mov	r7,0
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
            return 0;

        // Find clusteraddress for folder (currentfolder) 
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
8001a7c6:	1a 96       	mov	r6,sp
8001a7c8:	fa c4 fe fc 	sub	r4,sp,-260
8001a7cc:	c2 18       	rjmp	8001a80e <_open_directory+0x6a>
8001a7ce:	0a 9b       	mov	r11,r5
8001a7d0:	08 99       	mov	r9,r4
8001a7d2:	1a 9a       	mov	r10,sp
8001a7d4:	e0 6c 2a 28 	mov	r12,10792
8001a7d8:	fe b0 f9 88 	rcall	80019ae8 <fatfs_get_file_entry>
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
8001a7dc:	c2 30       	breq	8001a822 <_open_directory+0x7e>
8001a7de:	08 9c       	mov	r12,r4
8001a7e0:	e0 a0 07 46 	rcall	8001b66c <fatfs_entry_is_dir>
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
8001a7e4:	c1 f0       	breq	8001a822 <_open_directory+0x7e>
8001a7e6:	fb 19 01 18 	ld.uh	r9,sp[280]
8001a7ea:	fb 18 01 1e 	ld.uh	r8,sp[286]
8001a7ee:	f2 05 15 08 	lsl	r5,r9,0x8
8001a7f2:	eb d5 c0 10 	bfextu	r5,r5,0x0,0x10
8001a7f6:	eb e9 12 85 	or	r5,r5,r9>>0x8
8001a7fa:	f0 09 15 08 	lsl	r9,r8,0x8
8001a7fe:	b1 65       	lsl	r5,0x10
8001a800:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8001a804:	f3 e8 12 88 	or	r8,r9,r8>>0x8

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++) 
8001a808:	10 05       	add	r5,r8
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
8001a80a:	0e 32       	cp.w	r2,r7
8001a80c:	c0 e5       	brlt	8001a828 <_open_directory+0x84>
8001a80e:	0e 9b       	mov	r11,r7

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++) 
8001a810:	e0 69 01 04 	mov	r9,260
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
8001a814:	2f f7       	sub	r7,-1
8001a816:	1a 9a       	mov	r10,sp
8001a818:	06 9c       	mov	r12,r3
8001a81a:	e0 a0 0c 11 	rcall	8001c03c <fatfs_get_substring>
        else
            return 0;
    }

    *pathCluster = startcluster;
    return 1;
8001a81e:	5b fc       	cp.w	r12,-1
8001a820:	cd 71       	brne	8001a7ce <_open_directory+0x2a>
8001a822:	2b 7d       	sub	sp,-292
        }
        else
            return 0;
    }

    *pathCluster = startcluster;
8001a824:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
8001a828:	83 05       	st.w	r1[0x0],r5
8001a82a:	2b 7d       	sub	sp,-292
8001a82c:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1

8001a830 <_write_sectors>:
8001a830:	d4 31       	pushm	r0-r7,lr
8001a832:	20 3d       	sub	sp,12
8001a834:	3f f8       	mov	r8,-1
8001a836:	12 90       	mov	r0,r9
8001a838:	50 28       	stdsp	sp[0x8],r8
8001a83a:	e0 69 2a 28 	mov	r9,10792
8001a83e:	50 0a       	stdsp	sp[0x0],r10
8001a840:	13 88       	ld.ub	r8,r9[0x0]
8001a842:	f6 08 0d 06 	divu	r6,r11,r8
    uint32 lba;
    uint32 TotalWriteCount = count;

    // Find values for Cluster index & sector within cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;      
    SectorNumber = offset - (ClusterIdx * _fs.sectors_per_cluster);
8001a846:	18 95       	mov	r5,r12
8001a848:	ec 08 02 42 	mul	r2,r6,r8
8001a84c:	0c 94       	mov	r4,r6
8001a84e:	f6 02 01 02 	sub	r2,r11,r2
    // Limit number of sectors written to the number remaining in this cluster
    if ((SectorNumber + count) > _fs.sectors_per_cluster)
        count = _fs.sectors_per_cluster - SectorNumber;

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
8001a852:	f8 f7 02 28 	ld.w	r7,r12[552]
    // Find values for Cluster index & sector within cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;      
    SectorNumber = offset - (ClusterIdx * _fs.sectors_per_cluster);

    // Limit number of sectors written to the number remaining in this cluster
    if ((SectorNumber + count) > _fs.sectors_per_cluster)
8001a856:	e4 00 00 09 	add	r9,r2,r0
8001a85a:	12 38       	cp.w	r8,r9
8001a85c:	e0 01 17 20 	movhs	r1,r0
        count = _fs.sectors_per_cluster - SectorNumber;
8001a860:	f1 d2 e3 11 	subcs	r1,r8,r2

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
8001a864:	0c 37       	cp.w	r7,r6
        Cluster = file->last_fat_lookup.CurrentCluster;
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
8001a866:	c5 b0       	breq	8001a91c <_write_sectors+0xec>
8001a868:	58 06       	cp.w	r6,0
        // Start searching from the beginning..
        else
        {
            // Set start of cluster chain to initial value
            i = 0;
            Cluster = file->startcluster;
8001a86a:	c4 e1       	brne	8001a906 <_write_sectors+0xd6>
8001a86c:	6a 16       	ld.w	r6,r5[0x4]
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
8001a86e:	30 07       	mov	r7,0
8001a870:	0e 34       	cp.w	r4,r7
8001a872:	e0 88 00 58 	brls	8001a922 <_write_sectors+0xf2>
8001a876:	fa c3 ff fc 	sub	r3,sp,-4

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
            }            

            LastCluster = Cluster;
8001a87a:	c0 98       	rjmp	8001a88c <_write_sectors+0x5c>
            i = 0;
            Cluster = file->startcluster;
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
8001a87c:	50 26       	stdsp	sp[0x8],r6
                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
            }            

            LastCluster = Cluster;
            Cluster = nextCluster;
8001a87e:	2f f7       	sub	r7,-1

            // Dont keep following a dead end
            if (Cluster == FAT32_LAST_CLUSTER)
8001a880:	40 16       	lddsp	r6,sp[0x4]
8001a882:	5b f6       	cp.w	r6,-1
            i = 0;
            Cluster = file->startcluster;
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
8001a884:	c1 c0       	breq	8001a8bc <_write_sectors+0x8c>
8001a886:	0e 34       	cp.w	r4,r7
8001a888:	e0 88 00 2a 	brls	8001a8dc <_write_sectors+0xac>
        {
            uint32 nextCluster;
            
            // Does the entry exist in the cache?
            if (!fatfs_cache_get_next_cluster(&_fs, file, i, &nextCluster))            
8001a88c:	0e 9a       	mov	r10,r7
8001a88e:	06 99       	mov	r9,r3
8001a890:	0a 9b       	mov	r11,r5
8001a892:	e0 6c 2a 28 	mov	r12,10792
8001a896:	c2 2f       	rcall	8001a6da <fatfs_cache_get_next_cluster>
            {
                // Scan file linked list to find next entry
                nextCluster = fatfs_find_next_cluster(&_fs, Cluster);
8001a898:	cf 21       	brne	8001a87c <_write_sectors+0x4c>
8001a89a:	0c 9b       	mov	r11,r6
8001a89c:	e0 6c 2a 28 	mov	r12,10792

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
8001a8a0:	e0 a0 0d 62 	rcall	8001c364 <fatfs_find_next_cluster>
            
            // Does the entry exist in the cache?
            if (!fatfs_cache_get_next_cluster(&_fs, file, i, &nextCluster))            
            {
                // Scan file linked list to find next entry
                nextCluster = fatfs_find_next_cluster(&_fs, Cluster);
8001a8a4:	0e 9a       	mov	r10,r7

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
8001a8a6:	18 99       	mov	r9,r12
8001a8a8:	50 1c       	stdsp	sp[0x4],r12
8001a8aa:	0a 9b       	mov	r11,r5
8001a8ac:	e0 6c 2a 28 	mov	r12,10792
            i = 0;
            Cluster = file->startcluster;
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
8001a8b0:	c1 6f       	rcall	8001a6dc <fatfs_cache_set_next_cluster>
                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
            }            

            LastCluster = Cluster;
            Cluster = nextCluster;
8001a8b2:	50 26       	stdsp	sp[0x8],r6

            // Dont keep following a dead end
            if (Cluster == FAT32_LAST_CLUSTER)
8001a8b4:	2f f7       	sub	r7,-1
8001a8b6:	40 16       	lddsp	r6,sp[0x4]
8001a8b8:	5b f6       	cp.w	r6,-1
8001a8ba:	ce 61       	brne	8001a886 <_write_sectors+0x56>

        // If we have reached the end of the chain, allocate more!
        if (Cluster == FAT32_LAST_CLUSTER)
        {
            // Add some more cluster(s) to the last good cluster chain
            if (!fatfs_add_free_space(&_fs, &LastCluster,  (TotalWriteCount + _fs.sectors_per_cluster -1) / _fs.sectors_per_cluster))
8001a8bc:	e0 69 2a 28 	mov	r9,10792
8001a8c0:	13 88       	ld.ub	r8,r9[0x0]
8001a8c2:	e0 cb 00 01 	sub	r11,r0,1
8001a8c6:	10 0b       	add	r11,r8
8001a8c8:	f6 08 0d 0a 	divu	r10,r11,r8
8001a8cc:	fa cb ff f8 	sub	r11,sp,-8
8001a8d0:	e0 6c 2a 28 	mov	r12,10792
            Cluster = LastCluster;
        }

        // Record current cluster lookup details
        file->last_fat_lookup.CurrentCluster = Cluster;
        file->last_fat_lookup.ClusterIdx = ClusterIdx;
8001a8d4:	e0 a0 15 e6 	rcall	8001d4a0 <fatfs_add_free_space>

            Cluster = LastCluster;
        }

        // Record current cluster lookup details
        file->last_fat_lookup.CurrentCluster = Cluster;
8001a8d8:	c1 e0       	breq	8001a914 <_write_sectors+0xe4>
8001a8da:	40 26       	lddsp	r6,sp[0x8]
        file->last_fat_lookup.ClusterIdx = ClusterIdx;
    }

    // Calculate write address
    lba = fatfs_lba_of_cluster(&_fs, Cluster) + SectorNumber;
8001a8dc:	eb 44 02 28 	st.w	r5[552],r4
8001a8e0:	eb 46 02 2c 	st.w	r5[556],r6

    if (fatfs_sector_write(&_fs, lba, buf, count))
8001a8e4:	0c 9b       	mov	r11,r6
8001a8e6:	e0 6c 2a 28 	mov	r12,10792
8001a8ea:	fe b0 f7 65 	rcall	800197b4 <fatfs_lba_of_cluster>
8001a8ee:	02 99       	mov	r9,r1
8001a8f0:	f8 02 00 0b 	add	r11,r12,r2
        return count;
    else
        return 0;
}
8001a8f4:	40 0a       	lddsp	r10,sp[0x0]
8001a8f6:	e0 6c 2a 28 	mov	r12,10792
        Cluster = file->last_fat_lookup.CurrentCluster;
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
8001a8fa:	fe b0 f7 7a 	rcall	800197ee <fatfs_sector_write>
8001a8fe:	c0 b0       	breq	8001a914 <_write_sectors+0xe4>
8001a900:	02 9c       	mov	r12,r1
        {
            i = file->last_fat_lookup.ClusterIdx;
            Cluster = file->last_fat_lookup.CurrentCluster;
8001a902:	2f dd       	sub	sp,-12
8001a904:	d8 32       	popm	r0-r7,pc
        Cluster = file->last_fat_lookup.CurrentCluster;
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
8001a906:	ee c9 ff ff 	sub	r9,r7,-1

    if (fatfs_sector_write(&_fs, lba, buf, count))
        return count;
    else
        return 0;
}
8001a90a:	0c 39       	cp.w	r9,r6
8001a90c:	cb 01       	brne	8001a86c <_write_sectors+0x3c>
8001a90e:	f8 f6 02 2c 	ld.w	r6,r12[556]
    if ((SectorNumber + count) > _fs.sectors_per_cluster)
        count = _fs.sectors_per_cluster - SectorNumber;

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
        Cluster = file->last_fat_lookup.CurrentCluster;
8001a912:	ca fb       	rjmp	8001a870 <_write_sectors+0x40>
8001a914:	30 01       	mov	r1,0
            if (Cluster == FAT32_LAST_CLUSTER)
                break;
        }

        // If we have reached the end of the chain, allocate more!
        if (Cluster == FAT32_LAST_CLUSTER)
8001a916:	02 9c       	mov	r12,r1
8001a918:	2f dd       	sub	sp,-12
8001a91a:	d8 32       	popm	r0-r7,pc
8001a91c:	f8 f6 02 2c 	ld.w	r6,r12[556]
8001a920:	ce 2b       	rjmp	8001a8e4 <_write_sectors+0xb4>
8001a922:	5b f6       	cp.w	r6,-1
8001a924:	cd c1       	brne	8001a8dc <_write_sectors+0xac>
8001a926:	cc eb       	rjmp	8001a8c2 <_write_sectors+0x92>

8001a928 <_read_sectors>:
8001a928:	d4 31       	pushm	r0-r7,lr
8001a92a:	20 1d       	sub	sp,4
8001a92c:	12 92       	mov	r2,r9
8001a92e:	e0 68 2a 28 	mov	r8,10792
8001a932:	18 96       	mov	r6,r12
8001a934:	11 88       	ld.ub	r8,r8[0x0]
8001a936:	14 90       	mov	r0,r10
    uint32 Cluster = 0;
    uint32 i;
    uint32 lba;

    // Find cluster index within file & sector with cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;      
8001a938:	f6 08 0d 04 	divu	r4,r11,r8
    // Limit number of sectors read to the number remaining in this cluster
    if ((Sector + count) > _fs.sectors_per_cluster)
        count = _fs.sectors_per_cluster - Sector;

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
8001a93c:	f8 f7 02 28 	ld.w	r7,r12[552]
    uint32 i;
    uint32 lba;

    // Find cluster index within file & sector with cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;      
    Sector = offset - (ClusterIdx * _fs.sectors_per_cluster);
8001a940:	e8 08 02 41 	mul	r1,r4,r8
8001a944:	08 95       	mov	r5,r4
8001a946:	f6 01 01 01 	sub	r1,r11,r1

    // Limit number of sectors read to the number remaining in this cluster
    if ((Sector + count) > _fs.sectors_per_cluster)
8001a94a:	e2 09 00 09 	add	r9,r1,r9
        count = _fs.sectors_per_cluster - Sector;
8001a94e:	12 38       	cp.w	r8,r9
8001a950:	f1 d1 e3 12 	subcs	r2,r8,r1

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
8001a954:	08 37       	cp.w	r7,r4
        Cluster = file->last_fat_lookup.CurrentCluster;
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
8001a956:	c3 e0       	breq	8001a9d2 <_read_sectors+0xaa>
8001a958:	58 04       	cp.w	r4,0
        // Start searching from the beginning..
        else
        {
            // Set start of cluster chain to initial value
            i = 0;
            Cluster = file->startcluster;                    
8001a95a:	c4 41       	brne	8001a9e2 <_read_sectors+0xba>
8001a95c:	6c 14       	ld.w	r4,r6[0x4]
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
8001a95e:	30 07       	mov	r7,0
8001a960:	0e 35       	cp.w	r5,r7
8001a962:	e0 88 00 21 	brls	8001a9a4 <_read_sectors+0x7c>
8001a966:	1a 93       	mov	r3,sp
8001a968:	c0 68       	rjmp	8001a974 <_read_sectors+0x4c>

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
            }            

            Cluster = nextCluster;
8001a96a:	2f f7       	sub	r7,-1
            i = 0;
            Cluster = file->startcluster;                    
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
8001a96c:	40 04       	lddsp	r4,sp[0x0]
8001a96e:	0e 35       	cp.w	r5,r7
8001a970:	e0 88 00 1a 	brls	8001a9a4 <_read_sectors+0x7c>
        {
            uint32 nextCluster;
            
            // Does the entry exist in the cache?
            if (!fatfs_cache_get_next_cluster(&_fs, file, i, &nextCluster))            
8001a974:	0e 9a       	mov	r10,r7
8001a976:	1a 99       	mov	r9,sp
8001a978:	0c 9b       	mov	r11,r6
8001a97a:	e0 6c 2a 28 	mov	r12,10792
8001a97e:	ca ee       	rcall	8001a6da <fatfs_cache_get_next_cluster>
            {
                // Scan file linked list to find next entry
                nextCluster = fatfs_find_next_cluster(&_fs, Cluster);
8001a980:	cf 51       	brne	8001a96a <_read_sectors+0x42>
8001a982:	08 9b       	mov	r11,r4
8001a984:	e0 6c 2a 28 	mov	r12,10792

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
8001a988:	e0 a0 0c ee 	rcall	8001c364 <fatfs_find_next_cluster>
            
            // Does the entry exist in the cache?
            if (!fatfs_cache_get_next_cluster(&_fs, file, i, &nextCluster))            
            {
                // Scan file linked list to find next entry
                nextCluster = fatfs_find_next_cluster(&_fs, Cluster);
8001a98c:	0e 9a       	mov	r10,r7

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
8001a98e:	18 99       	mov	r9,r12
8001a990:	50 0c       	stdsp	sp[0x0],r12
8001a992:	0c 9b       	mov	r11,r6
8001a994:	e0 6c 2a 28 	mov	r12,10792
            }            

            Cluster = nextCluster;
8001a998:	ca 2e       	rcall	8001a6dc <fatfs_cache_set_next_cluster>
            i = 0;
            Cluster = file->startcluster;                    
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
8001a99a:	2f f7       	sub	r7,-1
8001a99c:	40 04       	lddsp	r4,sp[0x0]
8001a99e:	0e 35       	cp.w	r5,r7

            Cluster = nextCluster;
        }

        // Record current cluster lookup details (if valid)
        if (Cluster != FAT32_LAST_CLUSTER)
8001a9a0:	fe 9b ff ea 	brhi	8001a974 <_read_sectors+0x4c>
        {
            file->last_fat_lookup.CurrentCluster = Cluster;
            file->last_fat_lookup.ClusterIdx = ClusterIdx;
8001a9a4:	5b f4       	cp.w	r4,-1
8001a9a6:	c1 a0       	breq	8001a9da <_read_sectors+0xb2>
        }

        // Record current cluster lookup details (if valid)
        if (Cluster != FAT32_LAST_CLUSTER)
        {
            file->last_fat_lookup.CurrentCluster = Cluster;
8001a9a8:	ed 45 02 28 	st.w	r6[552],r5
    // If end of cluster chain then return false
    if (Cluster == FAT32_LAST_CLUSTER) 
        return 0;

    // Calculate sector address
    lba = fatfs_lba_of_cluster(&_fs, Cluster) + Sector;
8001a9ac:	ed 44 02 2c 	st.w	r6[556],r4
8001a9b0:	08 9b       	mov	r11,r4
8001a9b2:	e0 6c 2a 28 	mov	r12,10792

    // Read sector of file
    if (fatfs_sector_read(&_fs, lba, buffer, count))
8001a9b6:	fe b0 f6 ff 	rcall	800197b4 <fatfs_lba_of_cluster>
8001a9ba:	04 99       	mov	r9,r2
8001a9bc:	f8 01 00 0b 	add	r11,r12,r1
8001a9c0:	00 9a       	mov	r10,r0
8001a9c2:	e0 6c 2a 28 	mov	r12,10792
        return count;
    else
        return 0;
}
8001a9c6:	fe b0 f7 0c 	rcall	800197de <fatfs_sector_read>
    if ((Sector + count) > _fs.sectors_per_cluster)
        count = _fs.sectors_per_cluster - Sector;

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
        Cluster = file->last_fat_lookup.CurrentCluster;
8001a9ca:	c0 80       	breq	8001a9da <_read_sectors+0xb2>
8001a9cc:	04 9c       	mov	r12,r2
            file->last_fat_lookup.ClusterIdx = ClusterIdx;
        }
    }

    // If end of cluster chain then return false
    if (Cluster == FAT32_LAST_CLUSTER) 
8001a9ce:	2f fd       	sub	sp,-4
8001a9d0:	d8 32       	popm	r0-r7,pc

    // Calculate sector address
    lba = fatfs_lba_of_cluster(&_fs, Cluster) + Sector;

    // Read sector of file
    if (fatfs_sector_read(&_fs, lba, buffer, count))
8001a9d2:	f8 f4 02 2c 	ld.w	r4,r12[556]
        return count;
    else
        return 0;
}
8001a9d6:	5b f4       	cp.w	r4,-1
8001a9d8:	ce c1       	brne	8001a9b0 <_read_sectors+0x88>
        Cluster = file->last_fat_lookup.CurrentCluster;
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
8001a9da:	30 02       	mov	r2,0
8001a9dc:	04 9c       	mov	r12,r2
8001a9de:	2f fd       	sub	sp,-4
8001a9e0:	d8 32       	popm	r0-r7,pc
        {
            i = file->last_fat_lookup.ClusterIdx;
            Cluster = file->last_fat_lookup.CurrentCluster;
8001a9e2:	ee c8 ff ff 	sub	r8,r7,-1
        Cluster = file->last_fat_lookup.CurrentCluster;
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
8001a9e6:	08 38       	cp.w	r8,r4
8001a9e8:	cb a1       	brne	8001a95c <_read_sectors+0x34>
8001a9ea:	f8 f4 02 2c 	ld.w	r4,r12[556]
8001a9ee:	cb 9b       	rjmp	8001a960 <_read_sectors+0x38>

8001a9f0 <_create_file>:
8001a9f0:	eb cd 40 fc 	pushm	r2-r7,lr
8001a9f4:	20 bd       	sub	sp,44
8001a9f6:	e0 68 2a 28 	mov	r8,10792
8001a9fa:	18 93       	mov	r3,r12
8001a9fc:	70 e8       	ld.w	r8,r8[0x38]
8001a9fe:	58 08       	cp.w	r8,0
    struct fat_dir_entry sfEntry;
    char shortFilename[FAT_SFN_SIZE_FULL];
    int tailNum = 0;

    // No write access?
    if (!_fs.disk_io.write_media)
8001aa00:	c0 61       	brne	8001aa0c <_create_file+0x1c>

    fatfs_cache_init(&_fs, file);
    
    fatfs_fat_purge(&_fs);

    return file;
8001aa02:	30 07       	mov	r7,0
}
8001aa04:	0e 9c       	mov	r12,r7
8001aa06:	2f 5d       	sub	sp,-44
8001aa08:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
{
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
8001aa0c:	e0 69 37 1c 	mov	r9,14108
    if (node)
8001aa10:	72 05       	ld.w	r5,r9[0x0]
8001aa12:	58 05       	cp.w	r5,0
inline void fat_list_remove(struct fat_list *list, struct fat_node *node) 
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
8001aa14:	cf 70       	breq	8001aa02 <_create_file+0x12>
        list->head = node->next;
8001aa16:	6a 08       	ld.w	r8,r5[0x0]
8001aa18:	58 08       	cp.w	r8,0
8001aa1a:	f0 0a 17 00 	moveq	r10,r8
8001aa1e:	eb f8 00 01 	ld.weq	r8,r5[0x4]
8001aa22:	f3 f8 0a 00 	st.weq	r9[0x0],r8
    else
        node->previous->next = node->next;
8001aa26:	eb fa 10 01 	ld.wne	r10,r5[0x4]
8001aa2a:	f1 fa 1a 01 	st.wne	r8[0x4],r10
8001aa2e:	eb f8 10 01 	ld.wne	r8,r5[0x4]
8001aa32:	eb fa 10 00 	ld.wne	r10,r5[0x0]

    if(!node->next)
        list->tail = node->previous;
8001aa36:	f3 fa 0a 01 	st.weq	r9[0x4],r10
    else
        node->next->previous = node->previous;
8001aa3a:	f1 fa 1a 00 	st.wne	r8[0x0],r10
inline void fat_list_insert_last(struct fat_list *list, struct fat_node *node) 
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
8001aa3e:	e0 64 2a 1c 	mov	r4,10780
8001aa42:	68 18       	ld.w	r8,r4[0x4]
8001aa44:	58 08       	cp.w	r8,0
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
8001aa46:	e0 80 00 b9 	breq	8001abb8 <_create_file+0x1c8>
    new_node->next = node->next;
8001aa4a:	8b 08       	st.w	r5[0x0],r8
    if (!node->next)
8001aa4c:	70 19       	ld.w	r9,r8[0x4]
        list->tail = new_node;
8001aa4e:	8b 19       	st.w	r5[0x4],r9
8001aa50:	70 19       	ld.w	r9,r8[0x4]
8001aa52:	58 09       	cp.w	r9,0
    else
        node->next->previous = new_node;
8001aa54:	e9 f5 0a 01 	st.weq	r4[0x4],r5
    node->next = new_node;
8001aa58:	f3 f5 1a 00 	st.wne	r9[0x0],r5

    // Add to open list
    if (node)
        fat_list_insert_last(&_open_file_list, node);

    return fat_list_entry(node, FL_FILE, list_node);
8001aa5c:	91 15       	st.w	r8[0x4],r5
    if (!_fs.disk_io.write_media)
        return NULL;

    // Allocate a new file handle
    file = _allocate_file();
    if (!file)
8001aa5e:	ea c7 04 3c 	sub	r7,r5,1084
        return NULL;

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
8001aa62:	cd 10       	breq	8001aa04 <_create_file+0x14>
8001aa64:	ea c6 04 28 	sub	r6,r5,1064
8001aa68:	e0 6a 01 04 	mov	r10,260
8001aa6c:	30 0b       	mov	r11,0
8001aa6e:	0c 9c       	mov	r12,r6
    memset(file->filename, '\0', sizeof(file->filename));
8001aa70:	e0 a0 34 54 	rcall	80021318 <memset>
8001aa74:	ea c5 03 24 	sub	r5,r5,804
8001aa78:	e0 6a 01 04 	mov	r10,260
8001aa7c:	30 0b       	mov	r11,0
8001aa7e:	0a 9c       	mov	r12,r5

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)filename, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
8001aa80:	e0 a0 34 4c 	rcall	80021318 <memset>
8001aa84:	e0 68 01 04 	mov	r8,260
8001aa88:	06 9c       	mov	r12,r3
8001aa8a:	0a 99       	mov	r9,r5
8001aa8c:	10 9a       	mov	r10,r8
8001aa8e:	0c 9b       	mov	r11,r6
8001aa90:	e0 a0 0b 2e 	rcall	8001c0ec <fatfs_split_path>
static int _check_file_open(FL_FILE* file)
{
    struct fat_node *node;
    
    // Compare open files
    fat_list_for_each(&_open_file_list, node)
8001aa94:	5b fc       	cp.w	r12,-1
8001aa96:	c1 80       	breq	8001aac6 <_create_file+0xd6>
8001aa98:	68 04       	ld.w	r4,r4[0x0]
8001aa9a:	58 04       	cp.w	r4,0
8001aa9c:	c0 51       	brne	8001aaa6 <_create_file+0xb6>
8001aa9e:	c1 88       	rjmp	8001aace <_create_file+0xde>
8001aaa0:	68 14       	ld.w	r4,r4[0x4]
    {
        FL_FILE* openFile = fat_list_entry(node, FL_FILE, list_node);
8001aaa2:	58 04       	cp.w	r4,0
8001aaa4:	c1 50       	breq	8001aace <_create_file+0xde>

        // If not the current file 
        if (openFile != file)
8001aaa6:	e8 c8 04 3c 	sub	r8,r4,1084
        {
            // Compare path and name
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
8001aaaa:	10 37       	cp.w	r7,r8
8001aaac:	cf a0       	breq	8001aaa0 <_create_file+0xb0>
8001aaae:	0c 9b       	mov	r11,r6
8001aab0:	e8 cc 04 28 	sub	r12,r4,1064
8001aab4:	e0 a0 09 cc 	rcall	8001be4c <fatfs_compare_names>
8001aab8:	cf 40       	breq	8001aaa0 <_create_file+0xb0>
8001aaba:	e8 cc 03 24 	sub	r12,r4,804
8001aabe:	0a 9b       	mov	r11,r5
8001aac0:	e0 a0 09 c6 	rcall	8001be4c <fatfs_compare_names>
    if (tailNum == 9999)
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);

        _free_file(file);
8001aac4:	ce e0       	breq	8001aaa0 <_create_file+0xb0>
8001aac6:	0e 9c       	mov	r12,r7
8001aac8:	c0 ce       	rcall	8001a6e0 <_free_file>
        return NULL;
8001aaca:	30 07       	mov	r7,0
        _free_file(file);
        return NULL;
    }

    // If file is in the root dir
    if (file->path[0] == 0)
8001aacc:	c9 cb       	rjmp	8001aa04 <_create_file+0x14>
8001aace:	ef 39 00 14 	ld.ub	r9,r7[20]
8001aad2:	30 08       	mov	r8,0
8001aad4:	f0 09 18 00 	cp.b	r9,r8
        file->parentcluster = fatfs_get_root_cluster(&_fs);
8001aad8:	c6 81       	brne	8001aba8 <_create_file+0x1b8>
8001aada:	e0 6c 2a 28 	mov	r12,10792
8001aade:	fe b0 f6 90 	rcall	800197fe <fatfs_get_root_cluster>
            return NULL;
        }
    }

    // Check if same filename exists in directory
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry) == 1)
8001aae2:	18 9b       	mov	r11,r12
8001aae4:	8f 0c       	st.w	r7[0x0],r12
8001aae6:	1a 99       	mov	r9,sp
8001aae8:	0a 9a       	mov	r10,r5
8001aaea:	e0 6c 2a 28 	mov	r12,10792
8001aaee:	fe b0 f7 fd 	rcall	80019ae8 <fatfs_get_file_entry>
    {
        _free_file(file);
        return NULL;
    }

    file->startcluster = 0;
8001aaf2:	58 1c       	cp.w	r12,1

    // Create the file space for the file (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
8001aaf4:	ce 90       	breq	8001aac6 <_create_file+0xd6>
8001aaf6:	30 19       	mov	r9,1
    {
        _free_file(file);
        return NULL;
    }

    file->startcluster = 0;
8001aaf8:	30 06       	mov	r6,0

    // Create the file space for the file (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
8001aafa:	ee ca ff fc 	sub	r10,r7,-4
8001aafe:	8f 16       	st.w	r7[0x4],r6
8001ab00:	12 9b       	mov	r11,r9
8001ab02:	e0 6c 2a 28 	mov	r12,10792
        // If second hit or more, generate a ~n tail        
        if (tailNum != 0)
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);
8001ab06:	e0 a0 15 01 	rcall	8001d508 <fatfs_allocate_free_space>
        // Create a standard short filename (without tail)
        fatfs_lfn_create_sfn(shortFilename, file->filename);

        // If second hit or more, generate a ~n tail        
        if (tailNum != 0)
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
8001ab0a:	18 98       	mov	r8,r12
8001ab0c:	c6 e0       	breq	8001abe8 <_create_file+0x1f8>
8001ab0e:	0c 94       	mov	r4,r6
8001ab10:	ee c3 fd e4 	sub	r3,r7,-540
8001ab14:	fa c2 ff e0 	sub	r2,sp,-32
8001ab18:	c1 28       	rjmp	8001ab3c <_create_file+0x14c>
8001ab1a:	08 9a       	mov	r10,r4
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
8001ab1c:	04 9b       	mov	r11,r2
8001ab1e:	06 9c       	mov	r12,r3
8001ab20:	e0 a0 06 56 	rcall	8001b7cc <fatfs_lfn_generate_tail>
8001ab24:	06 9a       	mov	r10,r3
8001ab26:	6e 0b       	ld.w	r11,r7[0x0]
8001ab28:	e0 6c 2a 28 	mov	r12,10792
            break;

        tailNum++;
    }
    while (tailNum < 9999);
8001ab2c:	fe b0 f8 86 	rcall	80019c38 <fatfs_sfn_exists>
8001ab30:	18 96       	mov	r6,r12
    // Generate a short filename & tail
    tailNum = 0;
    do 
    {
        // Create a standard short filename (without tail)
        fatfs_lfn_create_sfn(shortFilename, file->filename);
8001ab32:	c1 10       	breq	8001ab54 <_create_file+0x164>
8001ab34:	2f f4       	sub	r4,-1
8001ab36:	e0 44 27 0f 	cp.w	r4,9999

        // If second hit or more, generate a ~n tail        
        if (tailNum != 0)
8001ab3a:	c5 c0       	breq	8001abf2 <_create_file+0x202>
8001ab3c:	0a 9b       	mov	r11,r5
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);
8001ab3e:	04 9c       	mov	r12,r2
8001ab40:	e0 a0 06 a8 	rcall	8001b890 <fatfs_lfn_create_sfn>
8001ab44:	58 04       	cp.w	r4,0
8001ab46:	ce a1       	brne	8001ab1a <_create_file+0x12a>
8001ab48:	30 ba       	mov	r10,11
        tailNum++;
    }
    while (tailNum < 9999);

    // We reached the max number of duplicate short file names (unlikely!)
    if (tailNum == 9999)
8001ab4a:	04 9b       	mov	r11,r2
8001ab4c:	06 9c       	mov	r12,r3
8001ab4e:	e0 a0 33 41 	rcall	800211d0 <memcpy>
        return NULL;
    }
#endif

    // Add file to disk
    if (!fatfs_add_file_entry(&_fs, file->parentcluster, (char*)file->filename, (char*)file->shortfilename, file->startcluster, 0, 0))
8001ab52:	ce 9b       	rjmp	8001ab24 <_create_file+0x134>
8001ab54:	e0 44 27 0f 	cp.w	r4,9999
8001ab58:	c4 d0       	breq	8001abf2 <_create_file+0x202>
8001ab5a:	1a dc       	st.w	--sp,r12
8001ab5c:	0a 9a       	mov	r10,r5
8001ab5e:	1a dc       	st.w	--sp,r12
8001ab60:	06 99       	mov	r9,r3
8001ab62:	6e 18       	ld.w	r8,r7[0x4]
8001ab64:	6e 0b       	ld.w	r11,r7[0x0]
8001ab66:	e0 6c 2a 28 	mov	r12,10792
    }

    // General
    file->filelength = 0;
    file->bytenum = 0;
    file->file_data_address = 0xFFFFFFFF;
8001ab6a:	e0 a0 0f e3 	rcall	8001cb30 <fatfs_add_file_entry>
    file->file_data_dirty = 0;
    file->filelength_changed = 0;

    // Quick lookup for next link in the chain
    file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
    file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
8001ab6e:	2f ed       	sub	sp,-8
8001ab70:	18 95       	mov	r5,r12
    }

    // General
    file->filelength = 0;
    file->bytenum = 0;
    file->file_data_address = 0xFFFFFFFF;
8001ab72:	58 0c       	cp.w	r12,0
8001ab74:	c3 00       	breq	8001abd4 <_create_file+0x1e4>
    file->file_data_dirty = 0;
    file->filelength_changed = 0;

    // Quick lookup for next link in the chain
    file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
8001ab76:	3f f8       	mov	r8,-1
8001ab78:	0e 9b       	mov	r11,r7
    // General
    file->filelength = 0;
    file->bytenum = 0;
    file->file_data_address = 0xFFFFFFFF;
    file->file_data_dirty = 0;
    file->filelength_changed = 0;
8001ab7a:	ef 48 02 2c 	st.w	r7[556],r8
        return NULL;
    }

    // General
    file->filelength = 0;
    file->bytenum = 0;
8001ab7e:	ef 48 04 30 	st.w	r7[1072],r8
    file->file_data_address = 0xFFFFFFFF;
    file->file_data_dirty = 0;
8001ab82:	ef 48 02 28 	st.w	r7[552],r8

    // Quick lookup for next link in the chain
    file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
    file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;

    fatfs_cache_init(&_fs, file);
8001ab86:	8f 46       	st.w	r7[0x10],r6
8001ab88:	8f 36       	st.w	r7[0xc],r6
    
    fatfs_fat_purge(&_fs);
8001ab8a:	8f 26       	st.w	r7[0x8],r6
8001ab8c:	ef 46 04 34 	st.w	r7[1076],r6

    return file;
}
8001ab90:	e0 6c 2a 28 	mov	r12,10792
8001ab94:	fe b0 fd a2 	rcall	8001a6d8 <fatfs_cache_init>
    if (file->path[0] == 0)
        file->parentcluster = fatfs_get_root_cluster(&_fs);
    else
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
8001ab98:	e0 6c 2a 28 	mov	r12,10792
8001ab9c:	e0 a0 0b b8 	rcall	8001c30c <fatfs_fat_purge>
8001aba0:	0e 9c       	mov	r12,r7
8001aba2:	2f 5d       	sub	sp,-44
        {
            _free_file(file);
            return NULL;
8001aba4:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
inline void fat_list_insert_first(struct fat_list *list, struct fat_node *node) 
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
8001aba8:	0c 9c       	mov	r12,r6
8001abaa:	0e 9b       	mov	r11,r7
8001abac:	fe b0 fd fc 	rcall	8001a7a4 <_open_directory>
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
    new_node->next = node;
8001abb0:	18 98       	mov	r8,r12
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
8001abb2:	c1 b0       	breq	8001abe8 <_create_file+0x1f8>
    new_node->next = node;
    if (!node->previous)
8001abb4:	6e 0b       	ld.w	r11,r7[0x0]
        list->head = new_node;
8001abb6:	c9 8b       	rjmp	8001aae6 <_create_file+0xf6>
8001abb8:	68 08       	ld.w	r8,r4[0x0]
8001abba:	58 08       	cp.w	r8,0
    else
        node->previous->next = new_node;
8001abbc:	c2 10       	breq	8001abfe <_create_file+0x20e>
8001abbe:	70 09       	ld.w	r9,r8[0x0]
    node->previous = new_node;
8001abc0:	8b 18       	st.w	r5[0x4],r8
8001abc2:	8b 09       	st.w	r5[0x0],r9

    // Add file to disk
    if (!fatfs_add_file_entry(&_fs, file->parentcluster, (char*)file->filename, (char*)file->shortfilename, file->startcluster, 0, 0))
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
8001abc4:	70 09       	ld.w	r9,r8[0x0]
8001abc6:	58 09       	cp.w	r9,0
8001abc8:	e9 f5 0a 00 	st.weq	r4[0x0],r5

        _free_file(file);
8001abcc:	f3 f5 1a 01 	st.wne	r9[0x4],r5
8001abd0:	91 05       	st.w	r8[0x0],r5
8001abd2:	c4 6b       	rjmp	8001aa5e <_create_file+0x6e>
        return NULL;
8001abd4:	6e 1b       	ld.w	r11,r7[0x4]
    file->startcluster = 0;

    // Create the file space for the file (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
    {
        _free_file(file);
8001abd6:	e0 6c 2a 28 	mov	r12,10792
8001abda:	e0 a0 0d 9f 	rcall	8001c718 <fatfs_free_cluster_chain>
        return NULL;
8001abde:	0e 9c       	mov	r12,r7

    // We reached the max number of duplicate short file names (unlikely!)
    if (tailNum == 9999)
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
8001abe0:	0a 97       	mov	r7,r5
8001abe2:	fe b0 fd 7f 	rcall	8001a6e0 <_free_file>
8001abe6:	c0 fb       	rjmp	8001aa04 <_create_file+0x14>
8001abe8:	0e 9c       	mov	r12,r7
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
8001abea:	10 97       	mov	r7,r8
        list->tail = node;
8001abec:	fe b0 fd 7a 	rcall	8001a6e0 <_free_file>
        node->previous = 0;
8001abf0:	c0 ab       	rjmp	8001aa04 <_create_file+0x14>
8001abf2:	6e 1b       	ld.w	r11,r7[0x4]
8001abf4:	e0 6c 2a 28 	mov	r12,10792
8001abf8:	e0 a0 0d 90 	rcall	8001c718 <fatfs_free_cluster_chain>
8001abfc:	c6 5b       	rjmp	8001aac6 <_create_file+0xd6>
8001abfe:	89 05       	st.w	r4[0x0],r5
8001ac00:	89 15       	st.w	r4[0x4],r5
8001ac02:	8b 18       	st.w	r5[0x4],r8
8001ac04:	8b 08       	st.w	r5[0x0],r8
8001ac06:	c2 cb       	rjmp	8001aa5e <_create_file+0x6e>

8001ac08 <fl_readdir>:
8001ac08:	eb cd 40 e0 	pushm	r5-r7,lr
8001ac0c:	20 1d       	sub	sp,4
8001ac0e:	e0 69 37 18 	mov	r9,14104
8001ac12:	18 96       	mov	r6,r12
8001ac14:	16 95       	mov	r5,r11
8001ac16:	72 08       	ld.w	r8,r9[0x0]
8001ac18:	58 08       	cp.w	r8,0
8001ac1a:	c1 b0       	breq	8001ac50 <fl_readdir+0x48>
8001ac1c:	e0 67 2a 28 	mov	r7,10792
8001ac20:	6e f8       	ld.w	r8,r7[0x3c]
8001ac22:	58 08       	cp.w	r8,0
8001ac24:	c0 20       	breq	8001ac28 <fl_readdir+0x20>
8001ac26:	5d 18       	icall	r8
8001ac28:	0a 9a       	mov	r10,r5
8001ac2a:	0c 9b       	mov	r11,r6
8001ac2c:	e0 6c 2a 28 	mov	r12,10792
8001ac30:	fe b0 fb a8 	rcall	8001a380 <fatfs_list_directory_next>
8001ac34:	6f 08       	ld.w	r8,r7[0x40]
8001ac36:	58 08       	cp.w	r8,0
8001ac38:	c0 40       	breq	8001ac40 <fl_readdir+0x38>
8001ac3a:	50 0c       	stdsp	sp[0x0],r12
8001ac3c:	5d 18       	icall	r8
8001ac3e:	40 0c       	lddsp	r12,sp[0x0]
    res = fatfs_list_directory_next(&_fs, dirls, entry);

    FL_UNLOCK(&_fs);

    return res ? 0 : -1;
}
8001ac40:	58 0c       	cp.w	r12,0
8001ac42:	f9 bc 00 ff 	moveq	r12,-1
8001ac46:	f9 bc 01 00 	movne	r12,0
8001ac4a:	2f fd       	sub	sp,-4
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
8001ac4c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
8001ac50:	e0 6a 2e 90 	mov	r10,11920
inline void fat_list_init(struct fat_list *list);
inline void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
8001ac54:	f5 48 08 84 	st.w	r10[2180],r8
8001ac58:	f5 48 04 3c 	st.w	r10[1084],r8
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
8001ac5c:	e0 6b 2a 1c 	mov	r11,10780
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
8001ac60:	97 08       	st.w	r11[0x0],r8
8001ac62:	97 18       	st.w	r11[0x4],r8
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
8001ac64:	f4 cc f7 80 	sub	r12,r10,-2176
8001ac68:	e0 68 37 1c 	mov	r8,14108
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
8001ac6c:	f5 4c 04 40 	st.w	r10[1088],r12

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    _filelib_init = 1;
8001ac70:	f4 cb fb c4 	sub	r11,r10,-1084
8001ac74:	f5 4b 08 80 	st.w	r10[2176],r11
8001ac78:	91 1c       	st.w	r8[0x4],r12
8001ac7a:	91 0b       	st.w	r8[0x0],r11
8001ac7c:	30 18       	mov	r8,1
8001ac7e:	93 08       	st.w	r9[0x0],r8
8001ac80:	cc eb       	rjmp	8001ac1c <fl_readdir+0x14>
8001ac82:	d7 03       	nop

8001ac84 <fl_opendir>:
8001ac84:	eb cd 40 e0 	pushm	r5-r7,lr
8001ac88:	20 1d       	sub	sp,4
8001ac8a:	3f f8       	mov	r8,-1
8001ac8c:	50 08       	stdsp	sp[0x0],r8
8001ac8e:	e0 69 37 18 	mov	r9,14104
//-----------------------------------------------------------------------------
// fl_opendir: Opens a directory for listing
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
FL_DIR* fl_opendir(const char* path, FL_DIR *dir)
{
8001ac92:	18 95       	mov	r5,r12
    int levels;
    int res = 1;
    uint32 cluster = FAT32_INVALID_CLUSTER;

    // If first call to library, initialise
    CHECK_FL_INIT();
8001ac94:	16 96       	mov	r6,r11
8001ac96:	72 08       	ld.w	r8,r9[0x0]
8001ac98:	58 08       	cp.w	r8,0

    FL_LOCK(&_fs);
8001ac9a:	c1 e0       	breq	8001acd6 <fl_opendir+0x52>
8001ac9c:	e0 67 2a 28 	mov	r7,10792
8001aca0:	6e f8       	ld.w	r8,r7[0x3c]
8001aca2:	58 08       	cp.w	r8,0

    levels = fatfs_total_path_levels((char*)path) + 1;
8001aca4:	c0 20       	breq	8001aca8 <fl_opendir+0x24>
8001aca6:	5d 18       	icall	r8
8001aca8:	0a 9c       	mov	r12,r5

    // If path is in the root dir
    if (levels == 0)
8001acaa:	e0 a0 08 7d 	rcall	8001bda4 <fatfs_total_path_levels>
        cluster = fatfs_get_root_cluster(&_fs);
    // Find parent directory start cluster
    else
        res = _open_directory((char*)path, &cluster);
8001acae:	5b fc       	cp.w	r12,-1
8001acb0:	c2 c0       	breq	8001ad08 <fl_opendir+0x84>
8001acb2:	0a 9c       	mov	r12,r5
8001acb4:	1a 9b       	mov	r11,sp

    if (res)
8001acb6:	fe b0 fd 77 	rcall	8001a7a4 <_open_directory>
        fatfs_list_directory_start(&_fs, dir, cluster);

    FL_UNLOCK(&_fs);
8001acba:	c3 31       	brne	8001ad20 <fl_opendir+0x9c>
8001acbc:	6f 08       	ld.w	r8,r7[0x40]
8001acbe:	58 08       	cp.w	r8,0

    return cluster != FAT32_INVALID_CLUSTER ? dir : 0;
8001acc0:	c0 20       	breq	8001acc4 <fl_opendir+0x40>
}
8001acc2:	5d 18       	icall	r8
8001acc4:	40 0c       	lddsp	r12,sp[0x0]
8001acc6:	5b fc       	cp.w	r12,-1
8001acc8:	ec 0c 17 10 	movne	r12,r6
8001accc:	f9 bc 00 00 	moveq	r12,0
8001acd0:	2f fd       	sub	sp,-4

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
8001acd2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
8001acd6:	e0 6a 2e 90 	mov	r10,11920

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
8001acda:	f5 48 08 84 	st.w	r10[2180],r8
inline void fat_list_init(struct fat_list *list);
inline void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
8001acde:	f5 48 04 3c 	st.w	r10[1084],r8
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
8001ace2:	e0 6b 2a 1c 	mov	r11,10780
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
8001ace6:	97 08       	st.w	r11[0x0],r8
8001ace8:	97 18       	st.w	r11[0x4],r8
8001acea:	f4 cc f7 80 	sub	r12,r10,-2176
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
8001acee:	e0 68 37 1c 	mov	r8,14108
8001acf2:	f5 4c 04 40 	st.w	r10[1088],r12
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
8001acf6:	f4 cb fb c4 	sub	r11,r10,-1084

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    _filelib_init = 1;
8001acfa:	f5 4b 08 80 	st.w	r10[2176],r11

    levels = fatfs_total_path_levels((char*)path) + 1;

    // If path is in the root dir
    if (levels == 0)
        cluster = fatfs_get_root_cluster(&_fs);
8001acfe:	91 1c       	st.w	r8[0x4],r12
8001ad00:	91 0b       	st.w	r8[0x0],r11
8001ad02:	30 18       	mov	r8,1
8001ad04:	93 08       	st.w	r9[0x0],r8
8001ad06:	cc bb       	rjmp	8001ac9c <fl_opendir+0x18>
    // Find parent directory start cluster
    else
        res = _open_directory((char*)path, &cluster);

    if (res)
        fatfs_list_directory_start(&_fs, dir, cluster);
8001ad08:	e0 6c 2a 28 	mov	r12,10792
8001ad0c:	fe b0 f5 79 	rcall	800197fe <fatfs_get_root_cluster>
8001ad10:	18 9a       	mov	r10,r12
        cluster = fatfs_get_root_cluster(&_fs);
    // Find parent directory start cluster
    else
        res = _open_directory((char*)path, &cluster);

    if (res)
8001ad12:	50 0c       	stdsp	sp[0x0],r12
8001ad14:	0c 9b       	mov	r11,r6
8001ad16:	e0 6c 2a 28 	mov	r12,10792
8001ad1a:	fe b0 f5 74 	rcall	80019802 <fatfs_list_directory_start>
8001ad1e:	cc fb       	rjmp	8001acbc <fl_opendir+0x38>
8001ad20:	40 0a       	lddsp	r10,sp[0x0]
8001ad22:	cf 9b       	rjmp	8001ad14 <fl_opendir+0x90>

8001ad24 <fl_fflush>:
8001ad24:	eb cd 40 c0 	pushm	r6-r7,lr
8001ad28:	e0 69 37 18 	mov	r9,14104
8001ad2c:	18 97       	mov	r7,r12
8001ad2e:	72 08       	ld.w	r8,r9[0x0]
8001ad30:	58 08       	cp.w	r8,0
8001ad32:	c1 30       	breq	8001ad58 <fl_fflush+0x34>
8001ad34:	58 07       	cp.w	r7,0
8001ad36:	c0 f0       	breq	8001ad54 <fl_fflush+0x30>
8001ad38:	e0 66 2a 28 	mov	r6,10792
    // If first call to library, initialise
    CHECK_FL_INIT();

    if (file)
    {
        FL_LOCK(&_fs);
8001ad3c:	6c f8       	ld.w	r8,r6[0x3c]
8001ad3e:	58 08       	cp.w	r8,0

        // If some write data still in buffer
        if (file->file_data_dirty)
8001ad40:	c0 20       	breq	8001ad44 <fl_fflush+0x20>
8001ad42:	5d 18       	icall	r8
8001ad44:	ee f8 04 34 	ld.w	r8,r7[1076]
            // Write back current sector before loading next
            if (_write_sectors(file, file->file_data_address, file->file_data_sector, 1))
                file->file_data_dirty = 0;
        }

        FL_UNLOCK(&_fs);
8001ad48:	58 08       	cp.w	r8,0
8001ad4a:	c2 01       	brne	8001ad8a <fl_fflush+0x66>
8001ad4c:	6d 08       	ld.w	r8,r6[0x40]
8001ad4e:	58 08       	cp.w	r8,0
    }
#endif
    return 0;
}
8001ad50:	c0 20       	breq	8001ad54 <fl_fflush+0x30>
8001ad52:	5d 18       	icall	r8

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
8001ad54:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
8001ad58:	e0 6a 2e 90 	mov	r10,11920

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
8001ad5c:	f5 48 08 84 	st.w	r10[2180],r8
inline void fat_list_init(struct fat_list *list);
inline void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
8001ad60:	f5 48 04 3c 	st.w	r10[1084],r8
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
8001ad64:	e0 6b 2a 1c 	mov	r11,10780
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
8001ad68:	97 08       	st.w	r11[0x0],r8
8001ad6a:	97 18       	st.w	r11[0x4],r8
8001ad6c:	f4 cc f7 80 	sub	r12,r10,-2176
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
8001ad70:	e0 68 37 1c 	mov	r8,14108
8001ad74:	f5 4c 04 40 	st.w	r10[1088],r12
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
8001ad78:	f4 cb fb c4 	sub	r11,r10,-1084

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    _filelib_init = 1;
8001ad7c:	f5 4b 08 80 	st.w	r10[2176],r11

        // If some write data still in buffer
        if (file->file_data_dirty)
        {
            // Write back current sector before loading next
            if (_write_sectors(file, file->file_data_address, file->file_data_sector, 1))
8001ad80:	91 1c       	st.w	r8[0x4],r12
8001ad82:	91 0b       	st.w	r8[0x0],r11
8001ad84:	30 18       	mov	r8,1
8001ad86:	93 08       	st.w	r9[0x0],r8
8001ad88:	cd 6b       	rjmp	8001ad34 <fl_fflush+0x10>
8001ad8a:	30 19       	mov	r9,1
8001ad8c:	ee ca fd d0 	sub	r10,r7,-560
                file->file_data_dirty = 0;
8001ad90:	ee fb 04 30 	ld.w	r11,r7[1072]
8001ad94:	0e 9c       	mov	r12,r7
8001ad96:	fe b0 fd 4d 	rcall	8001a830 <_write_sectors>
8001ad9a:	f9 b8 01 00 	movne	r8,0
8001ad9e:	ef f8 1b 0d 	st.wne	r7[0x434],r8
8001ada2:	cd 5b       	rjmp	8001ad4c <fl_fflush+0x28>

8001ada4 <T.96>:
8001ada4:	eb cd 40 fe 	pushm	r1-r7,lr
8001ada8:	e0 68 37 18 	mov	r8,14104
8001adac:	18 95       	mov	r5,r12
8001adae:	16 97       	mov	r7,r11
8001adb0:	70 08       	ld.w	r8,r8[0x0]
8001adb2:	58 08       	cp.w	r8,0
    FL_FILE *file = (FL_FILE *)f;

    // If first call to library, initialise
    CHECK_FL_INIT();

    if (buffer==NULL || file==NULL)
8001adb4:	c0 c0       	breq	8001adcc <T.96+0x28>
8001adb6:	58 07       	cp.w	r7,0
8001adb8:	5f 09       	sreq	r9
8001adba:	58 05       	cp.w	r5,0
8001adbc:	5f 08       	sreq	r8
8001adbe:	f3 e8 10 08 	or	r8,r9,r8
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesRead < count)
8001adc2:	c0 80       	breq	8001add2 <T.96+0x2e>
        // Increment file pointer
        file->bytenum += copyCount;
    }    

    return bytesRead;
}
8001adc4:	3f f6       	mov	r6,-1
8001adc6:	0c 9c       	mov	r12,r6
8001adc8:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
    int bytesRead = 0;    

    FL_FILE *file = (FL_FILE *)f;

    // If first call to library, initialise
    CHECK_FL_INIT();
8001adcc:	fe b0 fc d0 	rcall	8001a76c <fl_init>

    if (buffer==NULL || file==NULL)
        return -1;

    // No read permissions
    if (!(file->flags & FILE_READ))
8001add0:	cf 3b       	rjmp	8001adb6 <T.96+0x12>
8001add2:	ef 38 04 38 	ld.ub	r8,r7[1080]
8001add6:	ed b8 00 00 	bld	r8,0x0
    // Nothing to be done
    if (!count)
        return 0;

    // Check if read starts past end of file
    if (file->bytenum >= file->filelength)
8001adda:	cf 51       	brne	8001adc4 <T.96+0x20>
8001addc:	6e 24       	ld.w	r4,r7[0x8]
8001adde:	6e 32       	ld.w	r2,r7[0xc]
8001ade0:	04 34       	cp.w	r4,r2
        return -1;

    // Limit to file size
    if ( (file->bytenum + count) > file->filelength )
8001ade2:	cf 12       	brcc	8001adc4 <T.96+0x20>
8001ade4:	e8 c8 ff ff 	sub	r8,r4,-1
8001ade8:	10 32       	cp.w	r2,r8
        count = file->filelength - file->bytenum;
8001adea:	c4 e2       	brcc	8001ae86 <T.96+0xe2>
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesRead < count)
8001adec:	08 12       	sub	r2,r4
8001adee:	58 02       	cp.w	r2,0
8001adf0:	e0 8a 00 50 	brle	8001ae90 <T.96+0xec>

    // Calculate start sector
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;
8001adf4:	e7 d4 c0 09 	bfextu	r3,r4,0x0,0x9
                // Flush un-written data to file
                if (file->file_data_dirty)
                    fl_fflush(file);

                // Get LBA of sector offset within file
                if (!_read_sectors(file, sector, file->file_data_sector, 1))
8001adf8:	a9 94       	lsr	r4,0x9
8001adfa:	ee c1 fd d0 	sub	r1,r7,-560
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesRead < count)
    {        
        // Read whole sector, read from media directly into target buffer
        if ((offset == 0) && ((count - bytesRead) >= FAT_SECTOR_SIZE))
8001adfe:	30 06       	mov	r6,0
8001ae00:	58 03       	cp.w	r3,0
8001ae02:	c2 b1       	brne	8001ae58 <T.96+0xb4>
                // Flush un-written data to file
                if (file->file_data_dirty)
                    fl_fflush(file);

                // Get LBA of sector offset within file
                if (!_read_sectors(file, sector, file->file_data_sector, 1))
8001ae04:	c2 48       	rjmp	8001ae4c <T.96+0xa8>
8001ae06:	30 19       	mov	r9,1
8001ae08:	02 9a       	mov	r10,r1
8001ae0a:	08 9b       	mov	r11,r4
8001ae0c:	0e 9c       	mov	r12,r7
8001ae0e:	fe b0 fd 8d 	rcall	8001a928 <_read_sectors>
                    // Read failed - out of range (probably)
                    break;

                file->file_data_address = sector;
                file->file_data_dirty = 0;
8001ae12:	cd a0       	breq	8001adc6 <T.96+0x22>
                // Get LBA of sector offset within file
                if (!_read_sectors(file, sector, file->file_data_sector, 1))
                    // Read failed - out of range (probably)
                    break;

                file->file_data_address = sector;
8001ae14:	30 08       	mov	r8,0
8001ae16:	ef 44 04 30 	st.w	r7[1072],r4
                file->file_data_dirty = 0;
8001ae1a:	ef 48 04 34 	st.w	r7[1076],r8
            }
        
            // We have upto one sector to copy
            copyCount = FAT_SECTOR_SIZE - offset;
8001ae1e:	e0 68 02 00 	mov	r8,512
            // Only require some of this sector?
            if (copyCount > (count - bytesRead))
                copyCount = (count - bytesRead);

            // Copy to application buffer
            memcpy( (uint8*)((uint8*)buffer + bytesRead), (uint8*)(file->file_data_sector + offset), copyCount);
8001ae22:	e2 03 00 0b 	add	r11,r1,r3
                file->file_data_address = sector;
                file->file_data_dirty = 0;
            }
        
            // We have upto one sector to copy
            copyCount = FAT_SECTOR_SIZE - offset;
8001ae26:	f0 03 01 03 	sub	r3,r8,r3
8001ae2a:	e4 06 01 08 	sub	r8,r2,r6
8001ae2e:	2f f4       	sub	r4,-1
8001ae30:	e6 08 0d 43 	min	r3,r3,r8
            // Only require some of this sector?
            if (copyCount > (count - bytesRead))
                copyCount = (count - bytesRead);

            // Copy to application buffer
            memcpy( (uint8*)((uint8*)buffer + bytesRead), (uint8*)(file->file_data_sector + offset), copyCount);
8001ae34:	ea 06 00 0c 	add	r12,r5,r6
8001ae38:	06 9a       	mov	r10,r3
8001ae3a:	e0 a0 31 cb 	rcall	800211d0 <memcpy>
    
        // Increase total read count 
        bytesRead += copyCount;

        // Increment file pointer
        file->bytenum += copyCount;
8001ae3e:	6e 28       	ld.w	r8,r7[0x8]
8001ae40:	06 08       	add	r8,r3
            sector++;
            offset = 0;
        }
    
        // Increase total read count 
        bytesRead += copyCount;
8001ae42:	8f 28       	st.w	r7[0x8],r8

        // Increment file pointer
        file->bytenum += copyCount;
8001ae44:	06 06       	add	r6,r3
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesRead < count)
8001ae46:	30 03       	mov	r3,0
8001ae48:	04 36       	cp.w	r6,r2
    {        
        // Read whole sector, read from media directly into target buffer
        if ((offset == 0) && ((count - bytesRead) >= FAT_SECTOR_SIZE))
8001ae4a:	cb e4       	brge	8001adc6 <T.96+0x22>
8001ae4c:	e4 06 01 09 	sub	r9,r2,r6
8001ae50:	e0 49 01 ff 	cp.w	r9,511
8001ae54:	e0 89 00 0d 	brgt	8001ae6e <T.96+0xca>
                break;
        }
        else
        {
            // Do we need to re-read the sector?
            if (file->file_data_address != sector)
8001ae58:	ee f8 04 30 	ld.w	r8,r7[1072]
8001ae5c:	10 34       	cp.w	r4,r8
            {
                // Flush un-written data to file
                if (file->file_data_dirty)
8001ae5e:	ce 00       	breq	8001ae1e <T.96+0x7a>
8001ae60:	ee f8 04 34 	ld.w	r8,r7[1076]
8001ae64:	58 08       	cp.w	r8,0
                    fl_fflush(file);
8001ae66:	cd 00       	breq	8001ae06 <T.96+0x62>
8001ae68:	0e 9c       	mov	r12,r7
8001ae6a:	c5 df       	rcall	8001ad24 <fl_fflush>
8001ae6c:	cc db       	rjmp	8001ae06 <T.96+0x62>
    {        
        // Read whole sector, read from media directly into target buffer
        if ((offset == 0) && ((count - bytesRead) >= FAT_SECTOR_SIZE))
        {
            // Read as many sectors as possible into target buffer
            uint32 sectorsRead = _read_sectors(file, sector, (uint8*)((uint8*)buffer + bytesRead), (count - bytesRead) / FAT_SECTOR_SIZE);        
8001ae6e:	a9 59       	asr	r9,0x9
8001ae70:	ea 06 00 0a 	add	r10,r5,r6
8001ae74:	08 9b       	mov	r11,r4
8001ae76:	0e 9c       	mov	r12,r7
8001ae78:	fe b0 fd 58 	rcall	8001a928 <_read_sectors>
            if (sectorsRead)
8001ae7c:	ca 50       	breq	8001adc6 <T.96+0x22>
            {
                // We have upto one sector to copy
                copyCount = FAT_SECTOR_SIZE * sectorsRead;

                // Move onto next sector and reset copy offset
                sector+= sectorsRead;
8001ae7e:	18 04       	add	r4,r12
            // Read as many sectors as possible into target buffer
            uint32 sectorsRead = _read_sectors(file, sector, (uint8*)((uint8*)buffer + bytesRead), (count - bytesRead) / FAT_SECTOR_SIZE);        
            if (sectorsRead)
            {
                // We have upto one sector to copy
                copyCount = FAT_SECTOR_SIZE * sectorsRead;
8001ae80:	f8 03 15 09 	lsl	r3,r12,0x9
8001ae84:	cd db       	rjmp	8001ae3e <T.96+0x9a>

    // Calculate start sector
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;
8001ae86:	e7 d4 c0 09 	bfextu	r3,r4,0x0,0x9
8001ae8a:	30 12       	mov	r2,1
    // Limit to file size
    if ( (file->bytenum + count) > file->filelength )
        count = file->filelength - file->bytenum;

    // Calculate start sector
    sector = file->bytenum / FAT_SECTOR_SIZE;
8001ae8c:	a9 94       	lsr	r4,0x9
8001ae8e:	cb 6b       	rjmp	8001adfa <T.96+0x56>

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesRead < count)
8001ae90:	30 06       	mov	r6,0
8001ae92:	c9 ab       	rjmp	8001adc6 <T.96+0x22>

8001ae94 <fl_fgetc>:
8001ae94:	d4 01       	pushm	lr
8001ae96:	20 1d       	sub	sp,4
8001ae98:	30 08       	mov	r8,0
8001ae9a:	18 9b       	mov	r11,r12
8001ae9c:	fa cc ff fc 	sub	r12,sp,-4
8001aea0:	18 f8       	st.b	--r12,r8
8001aea2:	c8 1f       	rcall	8001ada4 <T.96>
8001aea4:	58 1c       	cp.w	r12,1
8001aea6:	fb fc 08 03 	ld.ubeq	r12,sp[0x3]
    int res;
    uint8 data = 0;
    
    res = fl_fread(&data, 1, 1, f);
    if (res == 1)
        return (int)data;
8001aeaa:	2f fd       	sub	sp,-4
    else
        return res;
}
8001aeac:	d8 02       	popm	pc
8001aeae:	d7 03       	nop

8001aeb0 <fl_fclose>:
8001aeb0:	eb cd 40 c0 	pushm	r6-r7,lr
void fl_fclose(void *f)
{
    FL_FILE *file = (FL_FILE *)f;

    // If first call to library, initialise
    CHECK_FL_INIT();
8001aeb4:	e0 69 37 18 	mov	r9,14104
8001aeb8:	18 97       	mov	r7,r12
8001aeba:	72 08       	ld.w	r8,r9[0x0]
8001aebc:	58 08       	cp.w	r8,0

    if (file)
8001aebe:	c4 30       	breq	8001af44 <fl_fclose+0x94>
8001aec0:	58 07       	cp.w	r7,0
    {
        FL_LOCK(&_fs);
8001aec2:	c3 f0       	breq	8001af40 <fl_fclose+0x90>
8001aec4:	e0 66 2a 28 	mov	r6,10792
8001aec8:	6c f8       	ld.w	r8,r6[0x3c]
8001aeca:	58 08       	cp.w	r8,0

        // Flush un-written data to file
        fl_fflush(f);
8001aecc:	c0 20       	breq	8001aed0 <fl_fclose+0x20>
8001aece:	5d 18       	icall	r8
8001aed0:	0e 9c       	mov	r12,r7

        // File size changed?
        if (file->filelength_changed)
8001aed2:	c2 9f       	rcall	8001ad24 <fl_fflush>
8001aed4:	6e 48       	ld.w	r8,r7[0x10]
8001aed6:	58 08       	cp.w	r8,0
            fatfs_update_file_length(&_fs, file->parentcluster, (char*)file->shortfilename, file->filelength);
#endif
            file->filelength_changed = 0;
        }

        file->bytenum = 0;
8001aed8:	c4 f1       	brne	8001af76 <fl_fclose+0xc6>
        file->filelength = 0;
        file->startcluster = 0;
        file->file_data_address = 0xFFFFFFFF;
        file->file_data_dirty = 0;
        file->filelength_changed = 0;
8001aeda:	30 08       	mov	r8,0
            fatfs_update_file_length(&_fs, file->parentcluster, (char*)file->shortfilename, file->filelength);
#endif
            file->filelength_changed = 0;
        }

        file->bytenum = 0;
8001aedc:	8f 48       	st.w	r7[0x10],r8
        file->filelength = 0;
8001aede:	8f 28       	st.w	r7[0x8],r8
        file->startcluster = 0;
8001aee0:	8f 38       	st.w	r7[0xc],r8
        file->file_data_address = 0xFFFFFFFF;
        file->file_data_dirty = 0;
8001aee2:	8f 18       	st.w	r7[0x4],r8
8001aee4:	ef 48 04 34 	st.w	r7[1076],r8
        }

        file->bytenum = 0;
        file->filelength = 0;
        file->startcluster = 0;
        file->file_data_address = 0xFFFFFFFF;
8001aee8:	3f f8       	mov	r8,-1
8001aeea:	ef 48 04 30 	st.w	r7[1072],r8
inline void fat_list_remove(struct fat_list *list, struct fat_node *node) 
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
8001aeee:	ee f8 04 3c 	ld.w	r8,r7[1084]
8001aef2:	58 08       	cp.w	r8,0
        list->head = node->next;
    else
        node->previous->next = node->next;
8001aef4:	c4 c0       	breq	8001af8c <fl_fclose+0xdc>
8001aef6:	ee f9 04 40 	ld.w	r9,r7[1088]
8001aefa:	91 19       	st.w	r8[0x4],r9
8001aefc:	ee f9 04 40 	ld.w	r9,r7[1088]
8001af00:	ee f8 04 3c 	ld.w	r8,r7[1084]

    if(!node->next)
8001af04:	58 09       	cp.w	r9,0
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
8001af06:	c4 a0       	breq	8001af9a <fl_fclose+0xea>
inline void fat_list_insert_last(struct fat_list *list, struct fat_node *node) 
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
8001af08:	93 08       	st.w	r9[0x0],r8
{
    // Remove from open list
    fat_list_remove(&_open_file_list, &file->list_node);

    // Add to free list
    fat_list_insert_last(&_free_file_list, &file->list_node);
8001af0a:	e0 6b 37 1c 	mov	r11,14108
8001af0e:	ee c9 fb c4 	sub	r9,r7,-1084
8001af12:	76 18       	ld.w	r8,r11[0x4]
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
8001af14:	58 08       	cp.w	r8,0
8001af16:	c4 60       	breq	8001afa2 <fl_fclose+0xf2>
    new_node->next = node->next;
8001af18:	ef 48 04 3c 	st.w	r7[1084],r8
8001af1c:	70 1a       	ld.w	r10,r8[0x4]
    if (!node->next)
8001af1e:	ef 4a 04 40 	st.w	r7[1088],r10
        list->tail = new_node;
8001af22:	70 1a       	ld.w	r10,r8[0x4]
8001af24:	58 0a       	cp.w	r10,0
    else
        node->next->previous = new_node;
8001af26:	f7 f9 0a 01 	st.weq	r11[0x4],r9
    node->next = new_node;
8001af2a:	f5 f9 1a 00 	st.wne	r10[0x0],r9
        file->filelength_changed = 0;

        // Free file handle
        _free_file(file);

        fatfs_fat_purge(&_fs);
8001af2e:	91 19       	st.w	r8[0x4],r9
8001af30:	e0 6c 2a 28 	mov	r12,10792

        FL_UNLOCK(&_fs);
8001af34:	e0 a0 09 ec 	rcall	8001c30c <fatfs_fat_purge>
8001af38:	6d 08       	ld.w	r8,r6[0x40]
8001af3a:	58 08       	cp.w	r8,0
8001af3c:	c0 20       	breq	8001af40 <fl_fclose+0x90>

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
8001af3e:	5d 18       	icall	r8
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
8001af40:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
8001af44:	e0 6a 2e 90 	mov	r10,11920
inline void fat_list_init(struct fat_list *list);
inline void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
8001af48:	f5 48 08 84 	st.w	r10[2180],r8
8001af4c:	f5 48 04 3c 	st.w	r10[1084],r8
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
8001af50:	e0 6b 2a 1c 	mov	r11,10780
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
8001af54:	97 08       	st.w	r11[0x0],r8
8001af56:	97 18       	st.w	r11[0x4],r8
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
8001af58:	f4 cc f7 80 	sub	r12,r10,-2176
8001af5c:	e0 68 37 1c 	mov	r8,14108
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
8001af60:	f5 4c 04 40 	st.w	r10[1088],r12

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    _filelib_init = 1;
8001af64:	f4 cb fb c4 	sub	r11,r10,-1084
8001af68:	f5 4b 08 80 	st.w	r10[2176],r11
        // File size changed?
        if (file->filelength_changed)
        {
#if FATFS_INC_WRITE_SUPPORT
            // Update filesize in directory
            fatfs_update_file_length(&_fs, file->parentcluster, (char*)file->shortfilename, file->filelength);
8001af6c:	91 1c       	st.w	r8[0x4],r12
8001af6e:	91 0b       	st.w	r8[0x0],r11
8001af70:	30 18       	mov	r8,1
8001af72:	93 08       	st.w	r9[0x0],r8
8001af74:	ca 6b       	rjmp	8001aec0 <fl_fclose+0x10>
8001af76:	6e 39       	ld.w	r9,r7[0xc]
#endif
            file->filelength_changed = 0;
8001af78:	ee ca fd e4 	sub	r10,r7,-540
8001af7c:	6e 0b       	ld.w	r11,r7[0x0]
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
        list->head = node->next;
8001af7e:	e0 6c 2a 28 	mov	r12,10792
8001af82:	fe b0 f8 01 	rcall	80019f84 <fatfs_update_file_length>
    else
        node->previous->next = node->next;

    if(!node->next)
8001af86:	30 08       	mov	r8,0
8001af88:	8f 48       	st.w	r7[0x10],r8
        list->tail = node->previous;
8001af8a:	ca 8b       	rjmp	8001aeda <fl_fclose+0x2a>
8001af8c:	ee f9 04 40 	ld.w	r9,r7[1088]
inline void fat_list_insert_first(struct fat_list *list, struct fat_node *node) 
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
8001af90:	e0 6a 2a 1c 	mov	r10,10780
8001af94:	95 09       	st.w	r10[0x0],r9
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
8001af96:	58 09       	cp.w	r9,0
    new_node->next = node;
8001af98:	cb 81       	brne	8001af08 <fl_fclose+0x58>
8001af9a:	e0 69 2a 1c 	mov	r9,10780
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
8001af9e:	93 18       	st.w	r9[0x4],r8
    new_node->next = node;
    if (!node->previous)
8001afa0:	cb 5b       	rjmp	8001af0a <fl_fclose+0x5a>
        list->head = new_node;
8001afa2:	76 08       	ld.w	r8,r11[0x0]
8001afa4:	58 08       	cp.w	r8,0
8001afa6:	c0 e0       	breq	8001afc2 <fl_fclose+0x112>
    else
        node->previous->next = new_node;
8001afa8:	70 0a       	ld.w	r10,r8[0x0]
8001afaa:	ef 48 04 40 	st.w	r7[1088],r8
    node->previous = new_node;
8001afae:	ef 4a 04 3c 	st.w	r7[1084],r10
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
8001afb2:	70 0a       	ld.w	r10,r8[0x0]
        list->tail = node;
        node->previous = 0;
        node->next = 0;
8001afb4:	58 0a       	cp.w	r10,0
8001afb6:	f7 f9 0a 00 	st.weq	r11[0x0],r9

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
8001afba:	f5 f9 1a 01 	st.wne	r10[0x4],r9
8001afbe:	91 09       	st.w	r8[0x0],r9
8001afc0:	cb 8b       	rjmp	8001af30 <fl_fclose+0x80>
8001afc2:	97 19       	st.w	r11[0x4],r9
8001afc4:	97 09       	st.w	r11[0x0],r9
8001afc6:	ef 48 04 40 	st.w	r7[1088],r8
8001afca:	ef 48 04 3c 	st.w	r7[1084],r8
8001afce:	cb 1b       	rjmp	8001af30 <fl_fclose+0x80>

8001afd0 <fl_attach_media>:
8001afd0:	eb cd 40 80 	pushm	r7,lr
8001afd4:	e0 6a 37 18 	mov	r10,14104
8001afd8:	18 98       	mov	r8,r12
8001afda:	74 09       	ld.w	r9,r10[0x0]
8001afdc:	58 09       	cp.w	r9,0
8001afde:	c1 00       	breq	8001affe <fl_attach_media+0x2e>
    int res;

    // If first call to library, initialise
    CHECK_FL_INIT();

    _fs.disk_io.read_media = rd;
8001afe0:	e0 6c 2a 28 	mov	r12,10792
    _fs.disk_io.write_media = wr;

    // Initialise FAT parameters
    if ((res = fatfs_init(&_fs)) != FAT_INIT_OK)
8001afe4:	99 d8       	st.w	r12[0x34],r8
8001afe6:	99 eb       	st.w	r12[0x38],r11
8001afe8:	fe b0 f4 14 	rcall	80019810 <fatfs_init>
	    print_dbg_hex(res);
	    print_dbg("\r\n");
        return res;
    }

    _filelib_valid = 1;
8001afec:	18 97       	mov	r7,r12
8001afee:	c2 11       	brne	8001b030 <fl_attach_media+0x60>
    return FAT_INIT_OK;
}
8001aff0:	30 19       	mov	r9,1
	    print_dbg_hex(res);
	    print_dbg("\r\n");
        return res;
    }

    _filelib_valid = 1;
8001aff2:	e0 68 2a 24 	mov	r8,10788
    return FAT_INIT_OK;
}
8001aff6:	0e 9c       	mov	r12,r7
8001aff8:	91 09       	st.w	r8[0x0],r9
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
8001affa:	e3 cd 80 80 	ldm	sp++,r7,pc

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
8001affe:	e0 6c 2e 90 	mov	r12,11920
inline void fat_list_init(struct fat_list *list);
inline void fat_list_init(struct fat_list *list)
{
    FAT_ASSERT(list);

    list->head = list->tail = 0;
8001b002:	f9 49 08 84 	st.w	r12[2180],r9
8001b006:	f9 49 04 3c 	st.w	r12[1084],r9
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
8001b00a:	e0 6e 2a 1c 	mov	lr,10780
8001b00e:	9d 09       	st.w	lr[0x0],r9
8001b010:	9d 19       	st.w	lr[0x4],r9
    new_node->next = node->next;
    if (!node->next)
8001b012:	f8 c7 fb c4 	sub	r7,r12,-1084
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
8001b016:	e0 69 37 1c 	mov	r9,14108
8001b01a:	f9 47 08 80 	st.w	r12[2176],r7

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    _filelib_init = 1;
8001b01e:	f8 ce f7 80 	sub	lr,r12,-2176
8001b022:	f9 4e 04 40 	st.w	r12[1088],lr

    // Initialise FAT parameters
    if ((res = fatfs_init(&_fs)) != FAT_INIT_OK)
    {
      //        FAT_PRINTF(("FAT_FS: Error could not load FAT details (%d)!\r\n", res));
            print_dbg("FAT_FS: Error could not load FAT details!\r\n");
8001b026:	93 1e       	st.w	r9[0x4],lr
8001b028:	93 07       	st.w	r9[0x0],r7
	    print_dbg("error number: ");
8001b02a:	30 19       	mov	r9,1
8001b02c:	95 09       	st.w	r10[0x0],r9
8001b02e:	cd 9b       	rjmp	8001afe0 <fl_attach_media+0x10>
	    print_dbg_hex(res);
8001b030:	fe cc 83 24 	sub	r12,pc,-31964
8001b034:	fe b0 c0 0c 	rcall	8001304c <print_dbg>
	    print_dbg("\r\n");
8001b038:	fe cc 83 00 	sub	r12,pc,-32000
        return res;
    }

    _filelib_valid = 1;
    return FAT_INIT_OK;
}
8001b03c:	fe b0 c0 08 	rcall	8001304c <print_dbg>
8001b040:	0e 9c       	mov	r12,r7
8001b042:	fe b0 bf ad 	rcall	80012f9c <print_dbg_hex>
8001b046:	fe cc 8f e6 	sub	r12,pc,-28698
8001b04a:	fe b0 c0 01 	rcall	8001304c <print_dbg>
8001b04e:	0e 9c       	mov	r12,r7
8001b050:	e3 cd 80 80 	ldm	sp++,r7,pc

8001b054 <_open_file>:
8001b054:	eb cd 40 fe 	pushm	r1-r7,lr
8001b058:	20 8d       	sub	sp,32
8001b05a:	e0 61 37 1c 	mov	r1,14108
8001b05e:	18 92       	mov	r2,r12
8001b060:	62 06       	ld.w	r6,r1[0x0]
8001b062:	58 06       	cp.w	r6,0
8001b064:	e0 80 00 f0 	breq	8001b244 <_open_file+0x1f0>
8001b068:	6c 08       	ld.w	r8,r6[0x0]
8001b06a:	58 08       	cp.w	r8,0
8001b06c:	f0 09 17 00 	moveq	r9,r8
8001b070:	ed f8 00 01 	ld.weq	r8,r6[0x4]
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
        list->head = node->next;
8001b074:	e3 f8 0a 00 	st.weq	r1[0x0],r8
    else
        node->previous->next = node->next;
8001b078:	ed f9 10 01 	ld.wne	r9,r6[0x4]
8001b07c:	f1 f9 1a 01 	st.wne	r8[0x4],r9
8001b080:	ed f8 10 01 	ld.wne	r8,r6[0x4]
8001b084:	ed f9 10 00 	ld.wne	r9,r6[0x0]

    if(!node->next)
        list->tail = node->previous;
8001b088:	e3 f9 0a 01 	st.weq	r1[0x4],r9
    else
        node->next->previous = node->previous;
8001b08c:	f1 f9 1a 00 	st.wne	r8[0x0],r9
inline void fat_list_insert_last(struct fat_list *list, struct fat_node *node) 
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
8001b090:	e0 63 2a 1c 	mov	r3,10780
8001b094:	66 18       	ld.w	r8,r3[0x4]
8001b096:	58 08       	cp.w	r8,0
8001b098:	e0 80 00 db 	breq	8001b24e <_open_file+0x1fa>
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
8001b09c:	8d 08       	st.w	r6[0x0],r8
    new_node->next = node->next;
8001b09e:	70 19       	ld.w	r9,r8[0x4]
8001b0a0:	8d 19       	st.w	r6[0x4],r9
    if (!node->next)
8001b0a2:	70 19       	ld.w	r9,r8[0x4]
        list->tail = new_node;
8001b0a4:	58 09       	cp.w	r9,0
8001b0a6:	e7 f6 0a 01 	st.weq	r3[0x4],r6
    else
        node->next->previous = new_node;
8001b0aa:	f3 f6 1a 00 	st.wne	r9[0x0],r6
    node->next = new_node;
8001b0ae:	91 16       	st.w	r8[0x4],r6

    // Add to open list
    if (node)
        fat_list_insert_last(&_open_file_list, node);

    return fat_list_entry(node, FL_FILE, list_node);
8001b0b0:	ec c7 04 3c 	sub	r7,r6,1084
    FL_FILE* file; 
    struct fat_dir_entry sfEntry;

    // Allocate a new file handle
    file = _allocate_file();
    if (!file)
8001b0b4:	c3 60       	breq	8001b120 <_open_file+0xcc>
        return NULL;

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
8001b0b6:	ec c5 04 28 	sub	r5,r6,1064
8001b0ba:	e0 6a 01 04 	mov	r10,260
8001b0be:	30 0b       	mov	r11,0
8001b0c0:	0a 9c       	mov	r12,r5
8001b0c2:	e0 a0 31 2b 	rcall	80021318 <memset>
    memset(file->filename, '\0', sizeof(file->filename));
8001b0c6:	ec c4 03 24 	sub	r4,r6,804
8001b0ca:	e0 6a 01 04 	mov	r10,260
8001b0ce:	30 0b       	mov	r11,0
8001b0d0:	08 9c       	mov	r12,r4
8001b0d2:	e0 a0 31 23 	rcall	80021318 <memset>

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)path, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
8001b0d6:	e0 68 01 04 	mov	r8,260
8001b0da:	04 9c       	mov	r12,r2
8001b0dc:	08 99       	mov	r9,r4
8001b0de:	10 9a       	mov	r10,r8
8001b0e0:	0a 9b       	mov	r11,r5
8001b0e2:	e0 a0 08 05 	rcall	8001c0ec <fatfs_split_path>
8001b0e6:	5b fc       	cp.w	r12,-1
8001b0e8:	c1 80       	breq	8001b118 <_open_file+0xc4>
static int _check_file_open(FL_FILE* file)
{
    struct fat_node *node;
    
    // Compare open files
    fat_list_for_each(&_open_file_list, node)
8001b0ea:	66 02       	ld.w	r2,r3[0x0]
8001b0ec:	58 02       	cp.w	r2,0
8001b0ee:	c0 51       	brne	8001b0f8 <_open_file+0xa4>
8001b0f0:	c1 c8       	rjmp	8001b128 <_open_file+0xd4>
8001b0f2:	64 12       	ld.w	r2,r2[0x4]
8001b0f4:	58 02       	cp.w	r2,0
8001b0f6:	c1 90       	breq	8001b128 <_open_file+0xd4>
    {
        FL_FILE* openFile = fat_list_entry(node, FL_FILE, list_node);
8001b0f8:	e4 c8 04 3c 	sub	r8,r2,1084

        // If not the current file 
        if (openFile != file)
8001b0fc:	10 37       	cp.w	r7,r8
8001b0fe:	cf a0       	breq	8001b0f2 <_open_file+0x9e>
        {
            // Compare path and name
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
8001b100:	0a 9b       	mov	r11,r5
8001b102:	e4 cc 04 28 	sub	r12,r2,1064
8001b106:	e0 a0 06 a3 	rcall	8001be4c <fatfs_compare_names>
8001b10a:	cf 40       	breq	8001b0f2 <_open_file+0x9e>
8001b10c:	e4 cc 03 24 	sub	r12,r2,804
8001b110:	08 9b       	mov	r11,r4
8001b112:	e0 a0 06 9d 	rcall	8001be4c <fatfs_compare_names>
8001b116:	ce e0       	breq	8001b0f2 <_open_file+0x9e>
    }

    // Check if file already open
    if (_check_file_open(file))
    {
        _free_file(file);
8001b118:	0e 9c       	mov	r12,r7
8001b11a:	fe b0 fa e3 	rcall	8001a6e0 <_free_file>
8001b11e:	30 07       	mov	r7,0
            return file;
        }

    _free_file(file);
    return NULL;
}
8001b120:	0e 9c       	mov	r12,r7
8001b122:	2f 8d       	sub	sp,-32
8001b124:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
        _free_file(file);
        return NULL;
    }

    // If file is in the root dir
    if (file->path[0]==0)
8001b128:	ef 39 00 14 	ld.ub	r9,r7[20]
8001b12c:	30 08       	mov	r8,0
8001b12e:	f0 09 18 00 	cp.b	r9,r8
8001b132:	c5 70       	breq	8001b1e0 <_open_file+0x18c>
        file->parentcluster = fatfs_get_root_cluster(&_fs);
    else
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
8001b134:	0a 9c       	mov	r12,r5
8001b136:	0e 9b       	mov	r11,r7
8001b138:	fe b0 fb 36 	rcall	8001a7a4 <_open_directory>
8001b13c:	18 98       	mov	r8,r12
8001b13e:	e0 80 00 ab 	breq	8001b294 <_open_file+0x240>
        {
            _free_file(file);
            return NULL;
8001b142:	6e 0b       	ld.w	r11,r7[0x0]
        }
    }

    // Using dir cluster address search for filename
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry))
8001b144:	08 9a       	mov	r10,r4
8001b146:	1a 95       	mov	r5,sp
8001b148:	e0 6c 2a 28 	mov	r12,10792
8001b14c:	1a 99       	mov	r9,sp
8001b14e:	fe b0 f4 cd 	rcall	80019ae8 <fatfs_get_file_entry>
        // Make sure entry is file not dir!
        if (fatfs_entry_is_file(&sfEntry))
8001b152:	c4 e0       	breq	8001b1ee <_open_file+0x19a>
8001b154:	1a 9c       	mov	r12,sp
8001b156:	e0 a0 02 90 	rcall	8001b676 <fatfs_entry_is_file>
        {
            // Initialise file details
            memcpy(file->shortfilename, sfEntry.Name, FAT_SFN_SIZE_FULL);
8001b15a:	c4 a0       	breq	8001b1ee <_open_file+0x19a>
8001b15c:	1a 9b       	mov	r11,sp
8001b15e:	30 ba       	mov	r10,11
8001b160:	ee cc fd e4 	sub	r12,r7,-540
8001b164:	e0 a0 30 36 	rcall	800211d0 <memcpy>
            file->filelength = FAT_HTONL(sfEntry.FileSize);
            file->bytenum = 0;
            file->startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
            file->file_data_address = 0xFFFFFFFF;
8001b168:	40 7a       	lddsp	r10,sp[0x1c]
        // Make sure entry is file not dir!
        if (fatfs_entry_is_file(&sfEntry))
        {
            // Initialise file details
            memcpy(file->shortfilename, sfEntry.Name, FAT_SFN_SIZE_FULL);
            file->filelength = FAT_HTONL(sfEntry.FileSize);
8001b16a:	3f f8       	mov	r8,-1
8001b16c:	14 9c       	mov	r12,r10
8001b16e:	f4 06 15 18 	lsl	r6,r10,0x18
8001b172:	e6 1c 00 ff 	andh	r12,0xff,COH
8001b176:	ed ea 13 86 	or	r6,r6,r10>>0x18
8001b17a:	e2 1a ff 00 	andl	r10,0xff00,COH
8001b17e:	ed ea 10 8a 	or	r10,r6,r10<<0x8
8001b182:	f5 ec 12 8a 	or	r10,r10,r12>>0x8
8001b186:	30 09       	mov	r9,0
            file->bytenum = 0;
8001b188:	8f 3a       	st.w	r7[0xc],r10
            file->startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
8001b18a:	8f 29       	st.w	r7[0x8],r9
8001b18c:	fb 16 00 14 	ld.uh	r6,sp[20]
8001b190:	fb 1a 00 1a 	ld.uh	r10,sp[26]
            file->file_data_dirty = 0;
            file->filelength_changed = 0;

            // Quick lookup for next link in the chain
            file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
            file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
8001b194:	ef 48 02 2c 	st.w	r7[556],r8
            // Initialise file details
            memcpy(file->shortfilename, sfEntry.Name, FAT_SFN_SIZE_FULL);
            file->filelength = FAT_HTONL(sfEntry.FileSize);
            file->bytenum = 0;
            file->startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
            file->file_data_address = 0xFFFFFFFF;
8001b198:	ef 48 04 30 	st.w	r7[1072],r8
            file->file_data_dirty = 0;
            file->filelength_changed = 0;

            // Quick lookup for next link in the chain
            file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
8001b19c:	ef 48 02 28 	st.w	r7[552],r8
        {
            // Initialise file details
            memcpy(file->shortfilename, sfEntry.Name, FAT_SFN_SIZE_FULL);
            file->filelength = FAT_HTONL(sfEntry.FileSize);
            file->bytenum = 0;
            file->startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
8001b1a0:	ec 08 15 08 	lsl	r8,r6,0x8
8001b1a4:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8001b1a8:	f1 e6 12 86 	or	r6,r8,r6>>0x8
8001b1ac:	f4 08 15 08 	lsl	r8,r10,0x8
8001b1b0:	b1 66       	lsl	r6,0x10
8001b1b2:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8001b1b6:	f1 ea 12 8a 	or	r10,r8,r10>>0x8
8001b1ba:	ec 0a 00 0a 	add	r10,r6,r10
            file->file_data_address = 0xFFFFFFFF;
            file->file_data_dirty = 0;
            file->filelength_changed = 0;
8001b1be:	0e 9b       	mov	r11,r7
            memcpy(file->shortfilename, sfEntry.Name, FAT_SFN_SIZE_FULL);
            file->filelength = FAT_HTONL(sfEntry.FileSize);
            file->bytenum = 0;
            file->startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
            file->file_data_address = 0xFFFFFFFF;
            file->file_data_dirty = 0;
8001b1c0:	8f 49       	st.w	r7[0x10],r9
8001b1c2:	ef 49 04 34 	st.w	r7[1076],r9

            // Quick lookup for next link in the chain
            file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
            file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;

            fatfs_cache_init(&_fs, file);
8001b1c6:	8f 1a       	st.w	r7[0x4],r10
8001b1c8:	e0 6c 2a 28 	mov	r12,10792

            fatfs_fat_purge(&_fs);
8001b1cc:	fe b0 fa 86 	rcall	8001a6d8 <fatfs_cache_init>
8001b1d0:	e0 6c 2a 28 	mov	r12,10792
            return file;
        }

    _free_file(file);
    return NULL;
}
8001b1d4:	e0 a0 08 9c 	rcall	8001c30c <fatfs_fat_purge>
8001b1d8:	0e 9c       	mov	r12,r7
        return NULL;
    }

    // If file is in the root dir
    if (file->path[0]==0)
        file->parentcluster = fatfs_get_root_cluster(&_fs);
8001b1da:	2f 8d       	sub	sp,-32
8001b1dc:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
8001b1e0:	e0 6c 2a 28 	mov	r12,10792
8001b1e4:	fe b0 f3 0d 	rcall	800197fe <fatfs_get_root_cluster>
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
        list->head = node->next;
8001b1e8:	18 9b       	mov	r11,r12
8001b1ea:	8f 0c       	st.w	r7[0x0],r12
8001b1ec:	ca cb       	rjmp	8001b144 <_open_file+0xf0>
8001b1ee:	6c 08       	ld.w	r8,r6[0x0]
8001b1f0:	58 08       	cp.w	r8,0
8001b1f2:	f0 09 17 00 	moveq	r9,r8
    else
        node->previous->next = node->next;
8001b1f6:	ef f8 01 10 	ld.weq	r8,r7[0x440]
8001b1fa:	e7 f8 0a 00 	st.weq	r3[0x0],r8
8001b1fe:	ef f9 11 10 	ld.wne	r9,r7[0x440]
8001b202:	f1 f9 1a 01 	st.wne	r8[0x4],r9

    if(!node->next)
        list->tail = node->previous;
8001b206:	ef f8 11 10 	ld.wne	r8,r7[0x440]
    else
        node->next->previous = node->previous;
8001b20a:	ed f9 10 00 	ld.wne	r9,r6[0x0]
inline void fat_list_insert_last(struct fat_list *list, struct fat_node *node) 
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
8001b20e:	e7 f9 0a 01 	st.weq	r3[0x4],r9
{
    // Remove from open list
    fat_list_remove(&_open_file_list, &file->list_node);

    // Add to free list
    fat_list_insert_last(&_free_file_list, &file->list_node);
8001b212:	f1 f9 1a 00 	st.wne	r8[0x0],r9
8001b216:	e0 6b 37 1c 	mov	r11,14108
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
8001b21a:	62 18       	ld.w	r8,r1[0x4]
    new_node->next = node->next;
8001b21c:	ee c9 fb c4 	sub	r9,r7,-1084
8001b220:	58 08       	cp.w	r8,0
    if (!node->next)
8001b222:	c2 40       	breq	8001b26a <_open_file+0x216>
        list->tail = new_node;
8001b224:	8d 08       	st.w	r6[0x0],r8
8001b226:	70 1a       	ld.w	r10,r8[0x4]
8001b228:	ef 4a 04 40 	st.w	r7[1088],r10
    else
        node->next->previous = new_node;
8001b22c:	70 1a       	ld.w	r10,r8[0x4]
    node->next = new_node;
8001b22e:	58 0a       	cp.w	r10,0
8001b230:	f7 f9 0a 01 	st.weq	r11[0x4],r9
            return file;
        }

    _free_file(file);
    return NULL;
}
8001b234:	f5 f9 1a 00 	st.wne	r10[0x0],r9
8001b238:	30 07       	mov	r7,0
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
    if (node)
8001b23a:	91 19       	st.w	r8[0x4],r9
8001b23c:	0e 9c       	mov	r12,r7
8001b23e:	2f 8d       	sub	sp,-32
8001b240:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
inline void fat_list_insert_first(struct fat_list *list, struct fat_node *node) 
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
8001b244:	0c 97       	mov	r7,r6
8001b246:	0e 9c       	mov	r12,r7
8001b248:	2f 8d       	sub	sp,-32
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
8001b24a:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
8001b24e:	66 08       	ld.w	r8,r3[0x0]
    new_node->next = node;
    if (!node->previous)
8001b250:	58 08       	cp.w	r8,0
        list->head = new_node;
8001b252:	c1 c0       	breq	8001b28a <_open_file+0x236>
8001b254:	70 09       	ld.w	r9,r8[0x0]
8001b256:	8d 18       	st.w	r6[0x4],r8
    else
        node->previous->next = new_node;
8001b258:	8d 09       	st.w	r6[0x0],r9
8001b25a:	70 09       	ld.w	r9,r8[0x0]
    node->previous = new_node;
8001b25c:	58 09       	cp.w	r9,0
8001b25e:	e7 f6 0a 00 	st.weq	r3[0x0],r6
inline void fat_list_insert_first(struct fat_list *list, struct fat_node *node) 
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
8001b262:	f3 f6 1a 01 	st.wne	r9[0x4],r6
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
8001b266:	91 06       	st.w	r8[0x0],r6
8001b268:	c2 4b       	rjmp	8001b0b0 <_open_file+0x5c>
    new_node->next = node;
8001b26a:	76 08       	ld.w	r8,r11[0x0]
8001b26c:	58 08       	cp.w	r8,0
    if (!node->previous)
8001b26e:	c1 80       	breq	8001b29e <_open_file+0x24a>
        list->head = new_node;
8001b270:	70 0a       	ld.w	r10,r8[0x0]
8001b272:	8d 0a       	st.w	r6[0x0],r10
8001b274:	ef 48 04 40 	st.w	r7[1088],r8
    else
        node->previous->next = new_node;
8001b278:	70 0a       	ld.w	r10,r8[0x0]
    node->previous = new_node;
8001b27a:	58 0a       	cp.w	r10,0
8001b27c:	f7 f9 0a 00 	st.weq	r11[0x0],r9
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
8001b280:	f5 f9 1a 01 	st.wne	r10[0x4],r9
        list->tail = node;
        node->previous = 0;
        node->next = 0;
8001b284:	91 09       	st.w	r8[0x0],r9

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
        node->previous = 0;
8001b286:	30 07       	mov	r7,0
8001b288:	c4 cb       	rjmp	8001b120 <_open_file+0xcc>
    else
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
        {
            _free_file(file);
8001b28a:	87 06       	st.w	r3[0x0],r6
8001b28c:	87 16       	st.w	r3[0x4],r6
8001b28e:	8d 18       	st.w	r6[0x4],r8
8001b290:	8d 08       	st.w	r6[0x0],r8
            return NULL;
8001b292:	c0 fb       	rjmp	8001b0b0 <_open_file+0x5c>
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
        list->tail = node;
8001b294:	0e 9c       	mov	r12,r7
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
    {
        list->head = node;
8001b296:	10 97       	mov	r7,r8
        list->tail = node;
        node->previous = 0;
8001b298:	fe b0 fa 24 	rcall	8001a6e0 <_free_file>
        node->next = 0;
8001b29c:	c4 2b       	rjmp	8001b120 <_open_file+0xcc>
8001b29e:	97 19       	st.w	r11[0x4],r9
8001b2a0:	97 09       	st.w	r11[0x0],r9
8001b2a2:	8d 08       	st.w	r6[0x0],r8
8001b2a4:	ef 48 04 40 	st.w	r7[1088],r8
8001b2a8:	10 97       	mov	r7,r8
8001b2aa:	c3 bb       	rjmp	8001b120 <_open_file+0xcc>

8001b2ac <fl_fopen>:
8001b2ac:	eb cd 40 fc 	pushm	r2-r7,lr
8001b2b0:	20 1d       	sub	sp,4
8001b2b2:	e0 69 37 18 	mov	r9,14104
8001b2b6:	18 97       	mov	r7,r12
8001b2b8:	72 08       	ld.w	r8,r9[0x0]
8001b2ba:	58 08       	cp.w	r8,0
8001b2bc:	c0 a0       	breq	8001b2d0 <fl_fopen+0x24>
8001b2be:	e0 68 2a 24 	mov	r8,10788
8001b2c2:	70 08       	ld.w	r8,r8[0x0]
8001b2c4:	58 08       	cp.w	r8,0
8001b2c6:	c2 21       	brne	8001b30a <fl_fopen+0x5e>
8001b2c8:	30 0c       	mov	r12,0
8001b2ca:	2f fd       	sub	sp,-4
8001b2cc:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
8001b2d0:	e0 6a 2e 90 	mov	r10,11920
8001b2d4:	f5 48 08 84 	st.w	r10[2180],r8
8001b2d8:	f5 48 04 3c 	st.w	r10[1084],r8
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
    new_node->next = node->next;
    if (!node->next)
8001b2dc:	e0 6c 2a 1c 	mov	r12,10780
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
8001b2e0:	99 08       	st.w	r12[0x0],r8
8001b2e2:	99 18       	st.w	r12[0x4],r8
8001b2e4:	f4 c6 f7 80 	sub	r6,r10,-2176
{
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
8001b2e8:	e0 68 37 1c 	mov	r8,14108
8001b2ec:	f5 46 04 40 	st.w	r10[1088],r6
    new_node->next = node->next;
    if (!node->next)
        list->tail = new_node;
    else
        node->next->previous = new_node;
    node->next = new_node;
8001b2f0:	f4 cc fb c4 	sub	r12,r10,-1084

    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    _filelib_init = 1;
8001b2f4:	f5 4c 08 80 	st.w	r10[2176],r12
    uint8 flags = 0;

    // If first call to library, initialise
    CHECK_FL_INIT();

    if (!_filelib_valid)
8001b2f8:	91 16       	st.w	r8[0x4],r6
8001b2fa:	91 0c       	st.w	r8[0x0],r12
8001b2fc:	30 18       	mov	r8,1
        return NULL;

    if (!path || !mode)
8001b2fe:	93 08       	st.w	r9[0x0],r8
8001b300:	e0 68 2a 24 	mov	r8,10788
8001b304:	70 08       	ld.w	r8,r8[0x0]
8001b306:	58 08       	cp.w	r8,0
8001b308:	ce 00       	breq	8001b2c8 <fl_fopen+0x1c>
8001b30a:	58 0b       	cp.w	r11,0
    FL_UNLOCK(&_fs);
}
//-----------------------------------------------------------------------------
// fopen: Open or Create a file for reading or writing
//-----------------------------------------------------------------------------
void* fl_fopen(const char *path, const char *mode)
8001b30c:	5f 09       	sreq	r9
8001b30e:	58 07       	cp.w	r7,0
8001b310:	5f 08       	sreq	r8
8001b312:	f3 e8 10 08 	or	r8,r9,r8
    //        will move it back to the end of file. 
    //        The file is created if it does not exist. 

    for (i=0;i<(int)strlen(mode);i++)
    {
        switch (mode[i])
8001b316:	cd 91       	brne	8001b2c8 <fl_fopen+0x1c>
    FL_UNLOCK(&_fs);
}
//-----------------------------------------------------------------------------
// fopen: Open or Create a file for reading or writing
//-----------------------------------------------------------------------------
void* fl_fopen(const char *path, const char *mode)
8001b318:	16 9c       	mov	r12,r11
8001b31a:	50 0b       	stdsp	sp[0x0],r11
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten. 
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations 
    //        will move it back to the end of file. 
    //        The file is created if it does not exist. 

    for (i=0;i<(int)strlen(mode);i++)
8001b31c:	e0 a0 30 75 	rcall	80021406 <strlen>
    {
        switch (mode[i])
8001b320:	30 06       	mov	r6,0
8001b322:	fe ca 87 4a 	sub	r10,pc,-30902
8001b326:	0c 98       	mov	r8,r6
8001b328:	40 0b       	lddsp	r11,sp[0x0]
8001b32a:	18 38       	cp.w	r8,r12
8001b32c:	c1 e4       	brge	8001b368 <fl_fopen+0xbc>
8001b32e:	f6 08 07 09 	ld.ub	r9,r11[r8]
            flags |= FILE_WRITE;
            flags |= FILE_APPEND;
            flags |= FILE_CREATE;
            break;
        case '+':
            if (flags & FILE_READ)
8001b332:	22 b9       	sub	r9,43
8001b334:	e0 49 00 4c 	cp.w	r9,76
                flags |= FILE_WRITE;
8001b338:	e0 8b 00 08 	brhi	8001b348 <fl_fopen+0x9c>
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten. 
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations 
    //        will move it back to the end of file. 
    //        The file is created if it does not exist. 

    for (i=0;i<(int)strlen(mode);i++)
8001b33c:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
            break;
        case 'w':
        case 'W':
            flags |= FILE_WRITE;
            flags |= FILE_ERASE;
            flags |= FILE_CREATE;
8001b340:	ed b6 00 00 	bld	r6,0x0
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten. 
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations 
    //        will move it back to the end of file. 
    //        The file is created if it does not exist. 

    for (i=0;i<(int)strlen(mode);i++)
8001b344:	c3 81       	brne	8001b3b4 <fl_fopen+0x108>
    {
        switch (mode[i])
        {
        case 'r':
        case 'R':
            flags |= FILE_READ;
8001b346:	a1 b6       	sbr	r6,0x1
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten. 
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations 
    //        will move it back to the end of file. 
    //        The file is created if it does not exist. 

    for (i=0;i<(int)strlen(mode);i++)
8001b348:	2f f8       	sub	r8,-1
8001b34a:	cf 0b       	rjmp	8001b32a <fl_fopen+0x7e>
                flags |= FILE_CREATE;
            }
            break;
        case 'b':
        case 'B':
            flags |= FILE_BINARY;
8001b34c:	e8 16 00 32 	orl	r6,0x32
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten. 
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations 
    //        will move it back to the end of file. 
    //        The file is created if it does not exist. 

    for (i=0;i<(int)strlen(mode);i++)
8001b350:	2f f8       	sub	r8,-1
            break;
        case 'a':
        case 'A':
            flags |= FILE_WRITE;
            flags |= FILE_APPEND;
            flags |= FILE_CREATE;
8001b352:	ce cb       	rjmp	8001b32a <fl_fopen+0x7e>
8001b354:	a1 a6       	sbr	r6,0x0
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten. 
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations 
    //        will move it back to the end of file. 
    //        The file is created if it does not exist. 

    for (i=0;i<(int)strlen(mode);i++)
8001b356:	2f f8       	sub	r8,-1
8001b358:	ce 9b       	rjmp	8001b32a <fl_fopen+0x7e>
    // No write support!
    flags &= ~(FILE_CREATE | FILE_WRITE | FILE_APPEND);
#endif

    // No write access - remove write/modify flags
    if (!_fs.disk_io.write_media)
8001b35a:	a3 b6       	sbr	r6,0x3
8001b35c:	2f f8       	sub	r8,-1
8001b35e:	ce 6b       	rjmp	8001b32a <fl_fopen+0x7e>
8001b360:	e8 16 00 26 	orl	r6,0x26
        flags &= ~(FILE_CREATE | FILE_WRITE | FILE_APPEND);

    FL_LOCK(&_fs);
8001b364:	2f f8       	sub	r8,-1
8001b366:	ce 2b       	rjmp	8001b32a <fl_fopen+0x7e>
8001b368:	e0 65 2a 28 	mov	r5,10792

    // Read
    if (flags & FILE_READ)
8001b36c:	6a e8       	ld.w	r8,r5[0x38]
8001b36e:	58 08       	cp.w	r8,0
        file = _open_file(path);

    // Create New
#if FATFS_INC_WRITE_SUPPORT
    if (!file && (flags & FILE_CREATE))
8001b370:	c3 d0       	breq	8001b3ea <fl_fopen+0x13e>
8001b372:	6a f8       	ld.w	r8,r5[0x3c]
8001b374:	58 08       	cp.w	r8,0
8001b376:	c0 20       	breq	8001b37a <fl_fopen+0xce>
8001b378:	5d 18       	icall	r8
        file = _create_file(path);
#endif

    // Write Existing (and not open due to read or create)
    if (!(flags & FILE_READ))
8001b37a:	e9 d6 c0 01 	bfextu	r4,r6,0x0,0x1
        if ((flags & FILE_CREATE) && !file)
8001b37e:	c2 91       	brne	8001b3d0 <fl_fopen+0x124>
8001b380:	0c 93       	mov	r3,r6
8001b382:	e2 13 00 20 	andl	r3,0x20,COH
8001b386:	c3 51       	brne	8001b3f0 <fl_fopen+0x144>
8001b388:	06 92       	mov	r2,r3
8001b38a:	58 04       	cp.w	r4,0
8001b38c:	c2 c1       	brne	8001b3e4 <fl_fopen+0x138>
            if (flags & (FILE_WRITE | FILE_APPEND))
8001b38e:	58 03       	cp.w	r3,0
8001b390:	5f 18       	srne	r8
8001b392:	58 02       	cp.w	r2,0
8001b394:	5f 09       	sreq	r9
8001b396:	10 69       	and	r9,r8
                file = _open_file(path);

    if (file)
        file->flags = flags;

    FL_UNLOCK(&_fs);
8001b398:	e8 09 18 00 	cp.b	r9,r4
8001b39c:	c2 40       	breq	8001b3e4 <fl_fopen+0x138>
8001b39e:	0c 98       	mov	r8,r6
8001b3a0:	e2 18 00 06 	andl	r8,0x6,COH
            flags |= FILE_CREATE;
            break;
        case '+':
            if (flags & FILE_READ)
                flags |= FILE_WRITE;
            else if (flags & FILE_WRITE)
8001b3a4:	c1 d1       	brne	8001b3de <fl_fopen+0x132>
8001b3a6:	08 92       	mov	r2,r4
8001b3a8:	6b 08       	ld.w	r8,r5[0x40]
            {
                flags |= FILE_READ;
                flags |= FILE_ERASE;
                flags |= FILE_CREATE;
            }
            else if (flags & FILE_APPEND)
8001b3aa:	58 08       	cp.w	r8,0
8001b3ac:	c0 20       	breq	8001b3b0 <fl_fopen+0x104>
8001b3ae:	5d 18       	icall	r8
            {
                flags |= FILE_READ;
                flags |= FILE_WRITE;
                flags |= FILE_APPEND;
                flags |= FILE_CREATE;
8001b3b0:	04 9c       	mov	r12,r2
8001b3b2:	c8 cb       	rjmp	8001b2ca <fl_fopen+0x1e>
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten. 
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations 
    //        will move it back to the end of file. 
    //        The file is created if it does not exist. 

    for (i=0;i<(int)strlen(mode);i++)
8001b3b4:	ed b6 00 01 	bld	r6,0x1
                flags |= FILE_WRITE;
            else if (flags & FILE_WRITE)
            {
                flags |= FILE_READ;
                flags |= FILE_ERASE;
                flags |= FILE_CREATE;
8001b3b8:	c0 80       	breq	8001b3c8 <fl_fopen+0x11c>
8001b3ba:	ed b6 00 02 	bld	r6,0x2
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten. 
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations 
    //        will move it back to the end of file. 
    //        The file is created if it does not exist. 

    for (i=0;i<(int)strlen(mode);i++)
8001b3be:	cc 51       	brne	8001b348 <fl_fopen+0x9c>

    FL_LOCK(&_fs);

    // Read
    if (flags & FILE_READ)
        file = _open_file(path);
8001b3c0:	e8 16 00 27 	orl	r6,0x27
8001b3c4:	2f f8       	sub	r8,-1
8001b3c6:	cb 2b       	rjmp	8001b32a <fl_fopen+0x7e>

    // Create New
#if FATFS_INC_WRITE_SUPPORT
    if (!file && (flags & FILE_CREATE))
8001b3c8:	e8 16 00 31 	orl	r6,0x31
        if ((flags & FILE_CREATE) && !file)
            if (flags & (FILE_WRITE | FILE_APPEND))
                file = _open_file(path);

    if (file)
        file->flags = flags;
8001b3cc:	2f f8       	sub	r8,-1
8001b3ce:	ca eb       	rjmp	8001b32a <fl_fopen+0x7e>

    // Write Existing (and not open due to read or create)
    if (!(flags & FILE_READ))
        if ((flags & FILE_CREATE) && !file)
            if (flags & (FILE_WRITE | FILE_APPEND))
                file = _open_file(path);
8001b3d0:	0e 9c       	mov	r12,r7
8001b3d2:	c4 1e       	rcall	8001b054 <_open_file>
8001b3d4:	18 92       	mov	r2,r12
8001b3d6:	cd 50       	breq	8001b380 <fl_fopen+0xd4>

    if (file)
8001b3d8:	e5 66 04 38 	st.b	r2[1080],r6
8001b3dc:	ce 6b       	rjmp	8001b3a8 <fl_fopen+0xfc>
    flags &= ~(FILE_CREATE | FILE_WRITE | FILE_APPEND);
#endif

    // No write access - remove write/modify flags
    if (!_fs.disk_io.write_media)
        flags &= ~(FILE_CREATE | FILE_WRITE | FILE_APPEND);
8001b3de:	0e 9c       	mov	r12,r7
8001b3e0:	c3 ae       	rcall	8001b054 <_open_file>
8001b3e2:	18 92       	mov	r2,r12
        file = _open_file(path);

    // Create New
#if FATFS_INC_WRITE_SUPPORT
    if (!file && (flags & FILE_CREATE))
        file = _create_file(path);
8001b3e4:	58 02       	cp.w	r2,0
8001b3e6:	cf 91       	brne	8001b3d8 <fl_fopen+0x12c>
8001b3e8:	ce 0b       	rjmp	8001b3a8 <fl_fopen+0xfc>
8001b3ea:	e2 16 00 d9 	andl	r6,0xd9,COH
8001b3ee:	cc 2b       	rjmp	8001b372 <fl_fopen+0xc6>
8001b3f0:	0e 9c       	mov	r12,r7
8001b3f2:	fe b0 fa ff 	rcall	8001a9f0 <_create_file>
8001b3f6:	18 92       	mov	r2,r12
8001b3f8:	cc 9b       	rjmp	8001b38a <fl_fopen+0xde>
8001b3fa:	d7 03       	nop

8001b3fc <fatfs_lfn_cache_entry>:
// fatfs_lfn_cache_entry - Function extracts long file name text from sector 
// at a specific offset
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_lfn_cache_entry(struct lfn_cache *lfn, uint8 *entryBuffer)
{
8001b3fc:	d4 01       	pushm	lr
    uint8 LFNIndex, i;
    LFNIndex = entryBuffer[0] & 0x1F;

    // Limit file name to cache size!
    if (LFNIndex > MAX_LONGFILENAME_ENTRIES)
8001b3fe:	31 48       	mov	r8,20
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_lfn_cache_entry(struct lfn_cache *lfn, uint8 *entryBuffer)
{
    uint8 LFNIndex, i;
    LFNIndex = entryBuffer[0] & 0x1F;
8001b400:	17 89       	ld.ub	r9,r11[0x0]
8001b402:	f3 d9 c0 05 	bfextu	r9,r9,0x0,0x5

    // Limit file name to cache size!
    if (LFNIndex > MAX_LONGFILENAME_ENTRIES)
8001b406:	f0 09 18 00 	cp.b	r9,r8
8001b40a:	e0 8b 00 c8 	brhi	8001b59a <fatfs_lfn_cache_entry+0x19e>
        return ;

    // This is an error condition
    if (LFNIndex == 0)
8001b40e:	58 09       	cp.w	r9,0
8001b410:	e0 80 00 c5 	breq	8001b59a <fatfs_lfn_cache_entry+0x19e>
        return ;

    if (lfn->no_of_strings == 0) 
8001b414:	30 08       	mov	r8,0
8001b416:	f9 3a 01 05 	ld.ub	r10,r12[261]
        lfn->no_of_strings = LFNIndex;
8001b41a:	f0 0a 18 00 	cp.b	r10,r8
8001b41e:	f9 f9 0f 05 	st.beq	r12[0x105],r9

    lfn->String[LFNIndex-1][0] = entryBuffer[1];
8001b422:	20 19       	sub	r9,1
8001b424:	f2 09 00 18 	add	r8,r9,r9<<0x1
8001b428:	17 9e       	ld.ub	lr,r11[0x1]
8001b42a:	f2 08 00 29 	add	r9,r9,r8<<0x2
8001b42e:	f8 09 00 08 	add	r8,r12,r9
8001b432:	10 9a       	mov	r10,r8
8001b434:	14 ce       	st.b	r10++,lr
    lfn->String[LFNIndex-1][1] = entryBuffer[3];
8001b436:	17 be       	ld.ub	lr,r11[0x3]
8001b438:	b4 8e       	st.b	r10[0x0],lr
    lfn->String[LFNIndex-1][2] = entryBuffer[5];
8001b43a:	17 da       	ld.ub	r10,r11[0x5]
8001b43c:	b0 aa       	st.b	r8[0x2],r10
    lfn->String[LFNIndex-1][3] = entryBuffer[7];
8001b43e:	17 fa       	ld.ub	r10,r11[0x7]
8001b440:	b0 ba       	st.b	r8[0x3],r10
    lfn->String[LFNIndex-1][4] = entryBuffer[9];
8001b442:	f7 3a 00 09 	ld.ub	r10,r11[9]
8001b446:	b0 ca       	st.b	r8[0x4],r10
    lfn->String[LFNIndex-1][5] = entryBuffer[0x0E];
8001b448:	f7 3a 00 0e 	ld.ub	r10,r11[14]
8001b44c:	b0 da       	st.b	r8[0x5],r10
    lfn->String[LFNIndex-1][6] = entryBuffer[0x10];
8001b44e:	f7 3a 00 10 	ld.ub	r10,r11[16]
8001b452:	b0 ea       	st.b	r8[0x6],r10
    lfn->String[LFNIndex-1][7] = entryBuffer[0x12];
8001b454:	f7 3a 00 12 	ld.ub	r10,r11[18]
8001b458:	b0 fa       	st.b	r8[0x7],r10
    lfn->String[LFNIndex-1][8] = entryBuffer[0x14];
8001b45a:	f7 3a 00 14 	ld.ub	r10,r11[20]
8001b45e:	f1 6a 00 08 	st.b	r8[8],r10
    lfn->String[LFNIndex-1][9] = entryBuffer[0x16];
8001b462:	f7 3a 00 16 	ld.ub	r10,r11[22]
8001b466:	f1 6a 00 09 	st.b	r8[9],r10
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];                                           
8001b46a:	f7 3a 00 18 	ld.ub	r10,r11[24]
8001b46e:	f1 6a 00 0a 	st.b	r8[10],r10
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
8001b472:	f7 3a 00 1c 	ld.ub	r10,r11[28]
8001b476:	f1 6a 00 0b 	st.b	r8[11],r10
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];
8001b47a:	f7 3a 00 1e 	ld.ub	r10,r11[30]

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF) 
8001b47e:	11 8b       	ld.ub	r11,r8[0x0]
    lfn->String[LFNIndex-1][7] = entryBuffer[0x12];
    lfn->String[LFNIndex-1][8] = entryBuffer[0x14];
    lfn->String[LFNIndex-1][9] = entryBuffer[0x16];
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];                                           
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];
8001b480:	f1 6a 00 0c 	st.b	r8[12],r10

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF) 
8001b484:	3f fa       	mov	r10,-1
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
8001b486:	f4 0b 18 00 	cp.b	r11,r10
8001b48a:	f9 ba 00 20 	moveq	r10,32
8001b48e:	f1 fa 0e 00 	st.beq	r8[0x0],r10
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];                                           
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF) 
8001b492:	f8 09 00 08 	add	r8,r12,r9
8001b496:	3f fa       	mov	r10,-1
8001b498:	2f f8       	sub	r8,-1
8001b49a:	11 8b       	ld.ub	r11,r8[0x0]
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
8001b49c:	f4 0b 18 00 	cp.b	r11,r10
8001b4a0:	f9 ba 00 20 	moveq	r10,32
8001b4a4:	f1 fa 0e 00 	st.beq	r8[0x0],r10
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];                                           
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF) 
8001b4a8:	f8 09 00 08 	add	r8,r12,r9
8001b4ac:	3f fa       	mov	r10,-1
8001b4ae:	2f e8       	sub	r8,-2
8001b4b0:	11 8b       	ld.ub	r11,r8[0x0]
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
8001b4b2:	f4 0b 18 00 	cp.b	r11,r10
8001b4b6:	f9 ba 00 20 	moveq	r10,32
8001b4ba:	f1 fa 0e 00 	st.beq	r8[0x0],r10
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];                                           
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF) 
8001b4be:	f8 09 00 08 	add	r8,r12,r9
8001b4c2:	3f fa       	mov	r10,-1
8001b4c4:	2f d8       	sub	r8,-3
8001b4c6:	11 8b       	ld.ub	r11,r8[0x0]
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
8001b4c8:	f4 0b 18 00 	cp.b	r11,r10
8001b4cc:	f9 ba 00 20 	moveq	r10,32
8001b4d0:	f1 fa 0e 00 	st.beq	r8[0x0],r10
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];                                           
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF) 
8001b4d4:	f8 09 00 08 	add	r8,r12,r9
8001b4d8:	3f fa       	mov	r10,-1
8001b4da:	2f c8       	sub	r8,-4
8001b4dc:	11 8b       	ld.ub	r11,r8[0x0]
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
8001b4de:	f4 0b 18 00 	cp.b	r11,r10
8001b4e2:	f9 ba 00 20 	moveq	r10,32
8001b4e6:	f1 fa 0e 00 	st.beq	r8[0x0],r10
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];                                           
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF) 
8001b4ea:	f8 09 00 08 	add	r8,r12,r9
8001b4ee:	3f fa       	mov	r10,-1
8001b4f0:	2f b8       	sub	r8,-5
8001b4f2:	11 8b       	ld.ub	r11,r8[0x0]
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
8001b4f4:	f4 0b 18 00 	cp.b	r11,r10
8001b4f8:	f9 ba 00 20 	moveq	r10,32
8001b4fc:	f1 fa 0e 00 	st.beq	r8[0x0],r10
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];                                           
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF) 
8001b500:	f8 09 00 08 	add	r8,r12,r9
8001b504:	3f fa       	mov	r10,-1
8001b506:	2f a8       	sub	r8,-6
8001b508:	11 8b       	ld.ub	r11,r8[0x0]
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
8001b50a:	f4 0b 18 00 	cp.b	r11,r10
8001b50e:	f9 ba 00 20 	moveq	r10,32
8001b512:	f1 fa 0e 00 	st.beq	r8[0x0],r10
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];                                           
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF) 
8001b516:	f8 09 00 08 	add	r8,r12,r9
8001b51a:	3f fa       	mov	r10,-1
8001b51c:	2f 98       	sub	r8,-7
8001b51e:	11 8b       	ld.ub	r11,r8[0x0]
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
8001b520:	f4 0b 18 00 	cp.b	r11,r10
8001b524:	f9 ba 00 20 	moveq	r10,32
8001b528:	f1 fa 0e 00 	st.beq	r8[0x0],r10
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];                                           
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF) 
8001b52c:	f8 09 00 08 	add	r8,r12,r9
8001b530:	3f fa       	mov	r10,-1
8001b532:	2f 88       	sub	r8,-8
8001b534:	11 8b       	ld.ub	r11,r8[0x0]
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
8001b536:	f4 0b 18 00 	cp.b	r11,r10
8001b53a:	f9 ba 00 20 	moveq	r10,32
8001b53e:	f1 fa 0e 00 	st.beq	r8[0x0],r10
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];                                           
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF) 
8001b542:	f8 09 00 08 	add	r8,r12,r9
8001b546:	3f fa       	mov	r10,-1
8001b548:	2f 78       	sub	r8,-9
8001b54a:	11 8b       	ld.ub	r11,r8[0x0]
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
8001b54c:	f4 0b 18 00 	cp.b	r11,r10
8001b550:	f9 ba 00 20 	moveq	r10,32
8001b554:	f1 fa 0e 00 	st.beq	r8[0x0],r10
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];                                           
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF) 
8001b558:	f8 09 00 08 	add	r8,r12,r9
8001b55c:	3f fa       	mov	r10,-1
8001b55e:	2f 68       	sub	r8,-10
8001b560:	11 8b       	ld.ub	r11,r8[0x0]
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
8001b562:	f4 0b 18 00 	cp.b	r11,r10
8001b566:	f9 ba 00 20 	moveq	r10,32
8001b56a:	f1 fa 0e 00 	st.beq	r8[0x0],r10
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];                                           
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF) 
8001b56e:	f8 09 00 08 	add	r8,r12,r9
8001b572:	3f fa       	mov	r10,-1
8001b574:	2f 58       	sub	r8,-11
8001b576:	11 8b       	ld.ub	r11,r8[0x0]
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
8001b578:	f4 0b 18 00 	cp.b	r11,r10
8001b57c:	f9 ba 00 20 	moveq	r10,32
8001b580:	f1 fa 0e 00 	st.beq	r8[0x0],r10
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];                                           
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF) 
8001b584:	f8 09 00 09 	add	r9,r12,r9
8001b588:	3f f8       	mov	r8,-1
8001b58a:	2f 49       	sub	r9,-12
8001b58c:	13 8a       	ld.ub	r10,r9[0x0]
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
8001b58e:	f0 0a 18 00 	cp.b	r10,r8
8001b592:	f9 b8 00 20 	moveq	r8,32
8001b596:	f3 f8 0e 00 	st.beq	r9[0x0],r8
8001b59a:	d8 02       	popm	pc

8001b59c <fatfs_lfn_cache_get>:
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
char* fatfs_lfn_cache_get(struct lfn_cache *lfn)
{
    // Null terminate long filename
    if (lfn->no_of_strings == MAX_LONGFILENAME_ENTRIES)
8001b59c:	f9 38 01 05 	ld.ub	r8,r12[261]
8001b5a0:	31 49       	mov	r9,20
8001b5a2:	f2 08 18 00 	cp.b	r8,r9
8001b5a6:	c0 e0       	breq	8001b5c2 <fatfs_lfn_cache_get+0x26>
        lfn->Null = '\0';
    else if (lfn->no_of_strings)
8001b5a8:	58 08       	cp.w	r8,0
8001b5aa:	c0 31       	brne	8001b5b0 <fatfs_lfn_cache_get+0x14>
        lfn->String[lfn->no_of_strings][0] = '\0';
    else
        lfn->String[0][0] = '\0';
8001b5ac:	b8 88       	st.b	r12[0x0],r8

    return (char*)&lfn->String[0][0];
}
8001b5ae:	5e fc       	retal	r12
{
    // Null terminate long filename
    if (lfn->no_of_strings == MAX_LONGFILENAME_ENTRIES)
        lfn->Null = '\0';
    else if (lfn->no_of_strings)
        lfn->String[lfn->no_of_strings][0] = '\0';
8001b5b0:	f0 08 00 19 	add	r9,r8,r8<<0x1
8001b5b4:	f0 09 00 28 	add	r8,r8,r9<<0x2
8001b5b8:	30 09       	mov	r9,0
8001b5ba:	f8 08 00 08 	add	r8,r12,r8
8001b5be:	b0 89       	st.b	r8[0x0],r9
8001b5c0:	5e fc       	retal	r12
#if FATFS_INC_LFN_SUPPORT
char* fatfs_lfn_cache_get(struct lfn_cache *lfn)
{
    // Null terminate long filename
    if (lfn->no_of_strings == MAX_LONGFILENAME_ENTRIES)
        lfn->Null = '\0';
8001b5c2:	30 08       	mov	r8,0
8001b5c4:	f9 68 01 04 	st.b	r12[260],r8
8001b5c8:	5e fc       	retal	r12

8001b5ca <fatfs_entry_lfn_text>:
//-----------------------------------------------------------------------------
// fatfs_entry_lfn_text: If LFN text entry found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_text(struct fat_dir_entry *entry)
{
8001b5ca:	f9 38 00 0b 	ld.ub	r8,r12[11]
8001b5ce:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8001b5d2:	58 f8       	cp.w	r8,15
    if ((entry->Attr & FILE_ATTR_LFN_TEXT) == FILE_ATTR_LFN_TEXT) 
        return 1;
    else 
        return 0;
}
8001b5d4:	5f 0c       	sreq	r12
8001b5d6:	5e fc       	retal	r12

8001b5d8 <fatfs_entry_lfn_invalid>:
// fatfs_entry_lfn_invalid: If SFN found not relating to LFN
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  || 
8001b5d8:	3e 58       	mov	r8,-27
8001b5da:	19 89       	ld.ub	r9,r12[0x0]
8001b5dc:	f0 09 18 00 	cp.b	r9,r8
8001b5e0:	5f 0a       	sreq	r10
8001b5e2:	30 08       	mov	r8,0
8001b5e4:	f0 09 18 00 	cp.b	r9,r8
8001b5e8:	5f 09       	sreq	r9
8001b5ea:	f5 e9 10 09 	or	r9,r10,r9
8001b5ee:	f0 09 18 00 	cp.b	r9,r8
8001b5f2:	c0 b1       	brne	8001b608 <fatfs_entry_lfn_invalid+0x30>
         (entry->Name[0]==FILE_HEADER_DELETED)||
         (entry->Attr==FILE_ATTR_VOLUME_ID) || 
8001b5f4:	f9 38 00 0b 	ld.ub	r8,r12[11]
// fatfs_entry_lfn_invalid: If SFN found not relating to LFN
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  || 
8001b5f8:	30 89       	mov	r9,8
8001b5fa:	f2 08 18 00 	cp.b	r8,r9
8001b5fe:	c0 50       	breq	8001b608 <fatfs_entry_lfn_invalid+0x30>
8001b600:	e2 18 00 06 	andl	r8,0x6,COH
8001b604:	5f 1c       	srne	r12
8001b606:	5e fc       	retal	r12
8001b608:	5e ff       	retal	1

8001b60a <fatfs_entry_lfn_exists>:
// fatfs_entry_lfn_exists: If LFN exists and correlation SFN found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) && 
8001b60a:	f7 38 00 0b 	ld.ub	r8,r11[11]
8001b60e:	30 f9       	mov	r9,15
8001b610:	f2 08 18 00 	cp.b	r8,r9
8001b614:	c1 50       	breq	8001b63e <fatfs_entry_lfn_exists+0x34>
         (entry->Name[0]!=FILE_HEADER_BLANK) && 
8001b616:	17 89       	ld.ub	r9,r11[0x0]
// fatfs_entry_lfn_exists: If LFN exists and correlation SFN found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) && 
8001b618:	58 09       	cp.w	r9,0
8001b61a:	c1 20       	breq	8001b63e <fatfs_entry_lfn_exists+0x34>
8001b61c:	3e 5a       	mov	r10,-27
8001b61e:	f4 09 18 00 	cp.b	r9,r10
8001b622:	c0 e0       	breq	8001b63e <fatfs_entry_lfn_exists+0x34>
8001b624:	30 89       	mov	r9,8
8001b626:	f2 08 18 00 	cp.b	r8,r9
8001b62a:	c0 a0       	breq	8001b63e <fatfs_entry_lfn_exists+0x34>
8001b62c:	e2 18 00 06 	andl	r8,0x6,COH
8001b630:	c0 71       	brne	8001b63e <fatfs_entry_lfn_exists+0x34>
8001b632:	f9 39 01 05 	ld.ub	r9,r12[261]
8001b636:	f0 09 18 00 	cp.b	r9,r8
8001b63a:	5f 1c       	srne	r12
8001b63c:	5e fc       	retal	r12
8001b63e:	5e fd       	retal	0

8001b640 <fatfs_entry_sfn_only>:
//-----------------------------------------------------------------------------
// fatfs_entry_sfn_only: If SFN only exists
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) && 
8001b640:	f9 38 00 0b 	ld.ub	r8,r12[11]
8001b644:	30 f9       	mov	r9,15
8001b646:	f2 08 18 00 	cp.b	r8,r9
8001b64a:	c1 00       	breq	8001b66a <fatfs_entry_sfn_only+0x2a>
         (entry->Name[0]!=FILE_HEADER_BLANK) && 
8001b64c:	19 89       	ld.ub	r9,r12[0x0]
//-----------------------------------------------------------------------------
// fatfs_entry_sfn_only: If SFN only exists
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) && 
8001b64e:	58 09       	cp.w	r9,0
8001b650:	c0 d0       	breq	8001b66a <fatfs_entry_sfn_only+0x2a>
8001b652:	3e 5a       	mov	r10,-27
8001b654:	f4 09 18 00 	cp.b	r9,r10
8001b658:	c0 90       	breq	8001b66a <fatfs_entry_sfn_only+0x2a>
8001b65a:	30 89       	mov	r9,8
8001b65c:	f2 08 18 00 	cp.b	r8,r9
8001b660:	c0 50       	breq	8001b66a <fatfs_entry_sfn_only+0x2a>
8001b662:	e2 18 00 06 	andl	r8,0x6,COH
8001b666:	5f 0c       	sreq	r12
8001b668:	5e fc       	retal	r12
8001b66a:	5e fd       	retal	0

8001b66c <fatfs_entry_is_dir>:
// TODO: FILE_ATTR_SYSHID ?!?!??!
//-----------------------------------------------------------------------------
// fatfs_entry_is_dir: Returns 1 if a directory
//-----------------------------------------------------------------------------
int fatfs_entry_is_dir(struct fat_dir_entry *entry)
{
8001b66c:	f9 3c 00 0b 	ld.ub	r12,r12[11]
    if (entry->Attr & FILE_TYPE_DIR) 
        return 1;
    else 
        return 0;
}
8001b670:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
8001b674:	5e fc       	retal	r12

8001b676 <fatfs_entry_is_file>:
//-----------------------------------------------------------------------------
// fatfs_entry_is_file: Returns 1 is a file entry
//-----------------------------------------------------------------------------
int fatfs_entry_is_file(struct fat_dir_entry *entry)
{
8001b676:	f9 3c 00 0b 	ld.ub	r12,r12[11]
    if (entry->Attr & FILE_TYPE_FILE) 
        return 1;
    else 
        return 0;
}
8001b67a:	f9 dc c0 a1 	bfextu	r12,r12,0x5,0x1
8001b67e:	5e fc       	retal	r12

8001b680 <fatfs_sfn_create_entry>:
//-----------------------------------------------------------------------------
// fatfs_sfn_create_entry: Create the short filename directory entry
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
void fatfs_sfn_create_entry(char *shortfilename, uint32 size, uint32 startCluster, struct fat_dir_entry *entry, int dir)
{
8001b680:	eb cd 40 e0 	pushm	r5-r7,lr
#endif
//-----------------------------------------------------------------------------
// fatfs_sfn_create_entry: Create the short filename directory entry
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
void fatfs_sfn_create_entry(char *shortfilename, uint32 size, uint32 startCluster, struct fat_dir_entry *entry, int dir)
8001b684:	f8 c7 ff fc 	sub	r7,r12,-4
8001b688:	0e 39       	cp.w	r9,r7
8001b68a:	5f b5       	srhi	r5
8001b68c:	f2 ce ff fc 	sub	lr,r9,-4
8001b690:	1c 3c       	cp.w	r12,lr
8001b692:	5f b6       	srhi	r6
8001b694:	eb e6 10 06 	or	r6,r5,r6
8001b698:	f3 ec 10 05 	or	r5,r9,r12
8001b69c:	eb d5 c0 02 	bfextu	r5,r5,0x0,0x2
8001b6a0:	5f 05       	sreq	r5
8001b6a2:	eb e6 00 06 	and	r6,r5,r6
8001b6a6:	c6 70       	breq	8001b774 <fatfs_sfn_create_entry+0xf4>
{
    int i;

    // Copy short filename
    for (i=0;i<FAT_SFN_SIZE_FULL;i++)
        entry->Name[i] = shortfilename[i];
8001b6a8:	78 06       	ld.w	r6,r12[0x0]
8001b6aa:	93 06       	st.w	r9[0x0],r6
8001b6ac:	6e 07       	ld.w	r7,r7[0x0]
8001b6ae:	9d 07       	st.w	lr[0x0],r7
8001b6b0:	f9 3e 00 08 	ld.ub	lr,r12[8]
8001b6b4:	f3 6e 00 08 	st.b	r9[8],lr
8001b6b8:	f9 3e 00 09 	ld.ub	lr,r12[9]
8001b6bc:	f3 6e 00 09 	st.b	r9[9],lr
8001b6c0:	f9 3c 00 0a 	ld.ub	r12,r12[10]
8001b6c4:	f3 6c 00 0a 	st.b	r9[10],r12

    // Unless we have a RTC we might as well set these to 1980
    entry->CrtTimeTenth = 0x00;
8001b6c8:	30 0c       	mov	r12,0
    if (!dir)
        entry->Attr = FILE_TYPE_FILE;
    else
        entry->Attr = FILE_TYPE_DIR;

    entry->NTRes = 0x00;
8001b6ca:	30 0e       	mov	lr,0
    entry->CrtDate[1] = 0x00;
    entry->CrtDate[0] = 0x20;
    entry->LstAccDate[1] = 0x00;
    entry->LstAccDate[0] = 0x20;
    entry->WrtTime[1] = entry->WrtTime[0] = 0x00;
    entry->WrtDate[1] = 0x00;
8001b6cc:	f3 6c 00 19 	st.b	r9[25],r12
    // Copy short filename
    for (i=0;i<FAT_SFN_SIZE_FULL;i++)
        entry->Name[i] = shortfilename[i];

    // Unless we have a RTC we might as well set these to 1980
    entry->CrtTimeTenth = 0x00;
8001b6d0:	f3 6c 00 0d 	st.b	r9[13],r12
    entry->CrtTime[1] = entry->CrtTime[0] = 0x00;
8001b6d4:	f3 6c 00 0e 	st.b	r9[14],r12
8001b6d8:	f3 6c 00 0f 	st.b	r9[15],r12
    entry->CrtDate[1] = 0x00;
8001b6dc:	f3 6c 00 11 	st.b	r9[17],r12
    entry->CrtDate[0] = 0x20;
    entry->LstAccDate[1] = 0x00;
8001b6e0:	f3 6c 00 13 	st.b	r9[19],r12
    entry->LstAccDate[0] = 0x20;
    entry->WrtTime[1] = entry->WrtTime[0] = 0x00;
8001b6e4:	f3 6c 00 16 	st.b	r9[22],r12
8001b6e8:	f3 6c 00 17 	st.b	r9[23],r12

    // Unless we have a RTC we might as well set these to 1980
    entry->CrtTimeTenth = 0x00;
    entry->CrtTime[1] = entry->CrtTime[0] = 0x00;
    entry->CrtDate[1] = 0x00;
    entry->CrtDate[0] = 0x20;
8001b6ec:	32 0c       	mov	r12,32
    entry->WrtTime[1] = entry->WrtTime[0] = 0x00;
    entry->WrtDate[1] = 0x00;
    entry->WrtDate[0] = 0x20;    

    if (!dir)
        entry->Attr = FILE_TYPE_FILE;
8001b6ee:	58 08       	cp.w	r8,0
8001b6f0:	f3 fc 0e 0b 	st.beq	r9[0xb],r12
    else
        entry->Attr = FILE_TYPE_DIR;
8001b6f4:	f9 b8 01 10 	movne	r8,16
8001b6f8:	f3 f8 1e 0b 	st.bne	r9[0xb],r8

    entry->NTRes = 0x00;
8001b6fc:	f3 6e 00 0c 	st.b	r9[12],lr

    entry->FstClusHI = FAT_HTONS((uint16)((startCluster>>16) & 0xFFFF));
    entry->FstClusLO = FAT_HTONS((uint16)((startCluster>>0) & 0xFFFF));
8001b700:	f1 da c0 10 	bfextu	r8,r10,0x0,0x10
    else
        entry->Attr = FILE_TYPE_DIR;

    entry->NTRes = 0x00;

    entry->FstClusHI = FAT_HTONS((uint16)((startCluster>>16) & 0xFFFF));
8001b704:	b1 8a       	lsr	r10,0x10
8001b706:	f4 0e 16 08 	lsr	lr,r10,0x8
8001b70a:	fd ea 10 8a 	or	r10,lr,r10<<0x8
8001b70e:	5c 7a       	castu.h	r10
8001b710:	f3 6a 00 15 	st.b	r9[21],r10
8001b714:	a9 8a       	lsr	r10,0x8
8001b716:	f3 6a 00 14 	st.b	r9[20],r10
    entry->FstClusLO = FAT_HTONS((uint16)((startCluster>>0) & 0xFFFF));
8001b71a:	f0 0a 16 08 	lsr	r10,r8,0x8
8001b71e:	f5 e8 10 88 	or	r8,r10,r8<<0x8
8001b722:	5c 78       	castu.h	r8
8001b724:	f3 68 00 1b 	st.b	r9[27],r8
8001b728:	a9 88       	lsr	r8,0x8
8001b72a:	f3 68 00 1a 	st.b	r9[26],r8
    entry->FileSize = FAT_HTONL(size);
8001b72e:	f6 08 15 18 	lsl	r8,r11,0x18
8001b732:	f1 eb 13 88 	or	r8,r8,r11>>0x18

    // Unless we have a RTC we might as well set these to 1980
    entry->CrtTimeTenth = 0x00;
    entry->CrtTime[1] = entry->CrtTime[0] = 0x00;
    entry->CrtDate[1] = 0x00;
    entry->CrtDate[0] = 0x20;
8001b736:	f3 6c 00 10 	st.b	r9[16],r12
    entry->LstAccDate[1] = 0x00;
    entry->LstAccDate[0] = 0x20;
8001b73a:	f3 6c 00 12 	st.b	r9[18],r12
    entry->WrtTime[1] = entry->WrtTime[0] = 0x00;
    entry->WrtDate[1] = 0x00;
    entry->WrtDate[0] = 0x20;    
8001b73e:	f3 6c 00 18 	st.b	r9[24],r12

    entry->NTRes = 0x00;

    entry->FstClusHI = FAT_HTONS((uint16)((startCluster>>16) & 0xFFFF));
    entry->FstClusLO = FAT_HTONS((uint16)((startCluster>>0) & 0xFFFF));
    entry->FileSize = FAT_HTONL(size);
8001b742:	16 9c       	mov	r12,r11
8001b744:	e2 1b ff 00 	andl	r11,0xff00,COH
8001b748:	e6 1c 00 ff 	andh	r12,0xff,COH
8001b74c:	f1 eb 10 8b 	or	r11,r8,r11<<0x8
8001b750:	f7 ec 12 8b 	or	r11,r11,r12>>0x8
8001b754:	f6 08 16 18 	lsr	r8,r11,0x18
8001b758:	f3 6b 00 1f 	st.b	r9[31],r11
8001b75c:	f3 68 00 1c 	st.b	r9[28],r8
8001b760:	f1 db c2 08 	bfextu	r8,r11,0x10,0x8
8001b764:	f7 db c1 08 	bfextu	r11,r11,0x8,0x8
8001b768:	f3 68 00 1d 	st.b	r9[29],r8
8001b76c:	f3 6b 00 1e 	st.b	r9[30],r11
}
8001b770:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
{
    int i;

    // Copy short filename
    for (i=0;i<FAT_SFN_SIZE_FULL;i++)
        entry->Name[i] = shortfilename[i];
8001b774:	19 8e       	ld.ub	lr,r12[0x0]
8001b776:	b2 8e       	st.b	r9[0x0],lr
8001b778:	19 9e       	ld.ub	lr,r12[0x1]
8001b77a:	b2 9e       	st.b	r9[0x1],lr
8001b77c:	19 ae       	ld.ub	lr,r12[0x2]
8001b77e:	b2 ae       	st.b	r9[0x2],lr
8001b780:	19 be       	ld.ub	lr,r12[0x3]
8001b782:	b2 be       	st.b	r9[0x3],lr
8001b784:	19 ce       	ld.ub	lr,r12[0x4]
8001b786:	b2 ce       	st.b	r9[0x4],lr
8001b788:	19 de       	ld.ub	lr,r12[0x5]
8001b78a:	b2 de       	st.b	r9[0x5],lr
8001b78c:	19 ee       	ld.ub	lr,r12[0x6]
8001b78e:	b2 ee       	st.b	r9[0x6],lr
8001b790:	19 fe       	ld.ub	lr,r12[0x7]
8001b792:	b2 fe       	st.b	r9[0x7],lr
8001b794:	c8 eb       	rjmp	8001b6b0 <fatfs_sfn_create_entry+0x30>

8001b796 <fatfs_lfn_cache_init>:
//-----------------------------------------------------------------------------
void fatfs_lfn_cache_init(struct lfn_cache *lfn, int wipeTable)
{
    int i = 0;

    lfn->no_of_strings = 0;
8001b796:	30 08       	mov	r8,0
8001b798:	f9 68 01 05 	st.b	r12[261],r8

#if FATFS_INC_LFN_SUPPORT

    // Zero out buffer also
    if (wipeTable)
8001b79c:	58 0b       	cp.w	r11,0
8001b79e:	5e 0c       	reteq	r12
        for (i=0;i<MAX_LONGFILENAME_ENTRIES;i++)
            memset(lfn->String[i], 0x00, MAX_LFN_ENTRY_LENGTH);
8001b7a0:	30 0a       	mov	r10,0
8001b7a2:	14 99       	mov	r9,r10
8001b7a4:	f8 0a 00 08 	add	r8,r12,r10
8001b7a8:	10 c9       	st.b	r8++,r9
8001b7aa:	10 c9       	st.b	r8++,r9
8001b7ac:	10 c9       	st.b	r8++,r9
8001b7ae:	10 c9       	st.b	r8++,r9
8001b7b0:	10 c9       	st.b	r8++,r9
8001b7b2:	10 c9       	st.b	r8++,r9
8001b7b4:	10 c9       	st.b	r8++,r9
8001b7b6:	10 c9       	st.b	r8++,r9
8001b7b8:	10 c9       	st.b	r8++,r9
8001b7ba:	10 c9       	st.b	r8++,r9
8001b7bc:	10 c9       	st.b	r8++,r9
8001b7be:	10 c9       	st.b	r8++,r9
8001b7c0:	b0 89       	st.b	r8[0x0],r9
8001b7c2:	2f 3a       	sub	r10,-13

#if FATFS_INC_LFN_SUPPORT

    // Zero out buffer also
    if (wipeTable)
        for (i=0;i<MAX_LONGFILENAME_ENTRIES;i++)
8001b7c4:	e0 4a 01 04 	cp.w	r10,260
8001b7c8:	ce e1       	brne	8001b7a4 <fatfs_lfn_cache_init+0xe>
8001b7ca:	5e fc       	retal	r12

8001b7cc <fatfs_lfn_generate_tail>:
// sfn_output = Output short filename with tail
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
#if FATFS_INC_WRITE_SUPPORT
int fatfs_lfn_generate_tail(char *sfn_output, char *sfn_input, uint32 tailNum)
{
8001b7cc:	eb cd 40 fc 	pushm	r2-r7,lr
8001b7d0:	20 bd       	sub	sp,44
8001b7d2:	18 96       	mov	r6,r12
    int tail_chars;
    char tail_str[12];

    if (tailNum > 99999)
8001b7d4:	e0 5a 86 9f 	cp.w	r10,99999
8001b7d8:	e0 88 00 05 	brls	8001b7e2 <fatfs_lfn_generate_tail+0x16>
8001b7dc:	2f 5d       	sub	sp,-44
8001b7de:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
        return 0;

    // Convert to number
    memset(tail_str, 0x00, sizeof(tail_str)); 
8001b7e2:	30 09       	mov	r9,0
8001b7e4:	fa c7 ff e0 	sub	r7,sp,-32
8001b7e8:	30 08       	mov	r8,0
8001b7ea:	ee e9 00 00 	st.d	r7[0],r8
//-----------------------------------------------------------------------------
static void fatfs_itoa(uint32 num, char *s)
{
    char* cp;
    char outbuf[12];
    const char digits[] = "0123456789ABCDEF";
8001b7ee:	fe c9 8a a6 	sub	r9,pc,-30042
8001b7f2:	f3 3c 00 10 	ld.ub	r12,r9[16]
8001b7f6:	fb 6c 00 10 	st.b	sp[16],r12

    if (tailNum > 99999)
        return 0;

    // Convert to number
    memset(tail_str, 0x00, sizeof(tail_str)); 
8001b7fa:	30 0c       	mov	r12,0
    tail_str[0] = '~';
8001b7fc:	8f 2c       	st.w	r7[0x8],r12
8001b7fe:	37 ec       	mov	r12,126
8001b800:	fb 6c 00 20 	st.b	sp[32],r12
//-----------------------------------------------------------------------------
static void fatfs_itoa(uint32 num, char *s)
{
    char* cp;
    char outbuf[12];
    const char digits[] = "0123456789ABCDEF";
8001b804:	f2 e4 00 00 	ld.d	r4,r9[0]
8001b808:	fa e5 00 00 	st.d	sp[0],r4
8001b80c:	f2 e4 00 08 	ld.d	r4,r9[8]
8001b810:	fa e5 00 08 	st.d	sp[8],r4
8001b814:	fa c5 ff ec 	sub	r5,sp,-20
   
    // Build string backwards
    cp = outbuf;
    do 
    {
        *cp++ = digits[(int)(num % 10)];
8001b818:	e0 64 cc cd 	mov	r4,52429
8001b81c:	ea 14 cc cc 	orh	r4,0xcccc
//-----------------------------------------------------------------------------
static void fatfs_itoa(uint32 num, char *s)
{
    char* cp;
    char outbuf[12];
    const char digits[] = "0123456789ABCDEF";
8001b820:	0a 99       	mov	r9,r5
    cp = outbuf;
    do 
    {
        *cp++ = digits[(int)(num % 10)];
    } 
    while ((num /= 10) > 0);
8001b822:	c0 28       	rjmp	8001b826 <fatfs_lfn_generate_tail+0x5a>
   
    // Build string backwards
    cp = outbuf;
    do 
    {
        *cp++ = digits[(int)(num % 10)];
8001b824:	10 99       	mov	r9,r8
8001b826:	f4 04 06 42 	mulu.d	r2,r10,r4
8001b82a:	e6 0c 16 03 	lsr	r12,r3,0x3
8001b82e:	f8 0c 00 2e 	add	lr,r12,r12<<0x2
8001b832:	12 98       	mov	r8,r9
8001b834:	f4 0e 01 1a 	sub	r10,r10,lr<<0x1
8001b838:	fa ce ff d4 	sub	lr,sp,-44
8001b83c:	fc 0a 00 0a 	add	r10,lr,r10
8001b840:	f5 3a ff d4 	ld.ub	r10,r10[-44]
    } 
    while ((num /= 10) > 0);
8001b844:	10 ca       	st.b	r8++,r10
8001b846:	18 9a       	mov	r10,r12
8001b848:	58 0c       	cp.w	r12,0
    
    *cp-- = 0;
8001b84a:	ce d1       	brne	8001b824 <fatfs_lfn_generate_tail+0x58>

    // Copy in forwards
    while (cp >= outbuf)
8001b84c:	b0 8c       	st.b	r8[0x0],r12
8001b84e:	0a 39       	cp.w	r9,r5
8001b850:	c1 c3       	brcs	8001b888 <fatfs_lfn_generate_tail+0xbc>
8001b852:	fa c8 ff df 	sub	r8,sp,-33
        *s++ = *cp--;
8001b856:	13 8a       	ld.ub	r10,r9[0x0]
8001b858:	10 ca       	st.b	r8++,r10
    while ((num /= 10) > 0);
    
    *cp-- = 0;

    // Copy in forwards
    while (cp >= outbuf)
8001b85a:	20 19       	sub	r9,1
8001b85c:	0a 39       	cp.w	r9,r5
        *s++ = *cp--;

    *s = 0;
8001b85e:	cf c2       	brcc	8001b856 <fatfs_lfn_generate_tail+0x8a>
    memset(tail_str, 0x00, sizeof(tail_str)); 
    tail_str[0] = '~';
    fatfs_itoa(tailNum, tail_str+1);
    
    // Copy in base filename
    memcpy(sfn_output, sfn_input, FAT_SFN_SIZE_FULL);
8001b860:	30 09       	mov	r9,0

    // Copy in forwards
    while (cp >= outbuf)
        *s++ = *cp--;

    *s = 0;
8001b862:	30 ba       	mov	r10,11
    memset(tail_str, 0x00, sizeof(tail_str)); 
    tail_str[0] = '~';
    fatfs_itoa(tailNum, tail_str+1);
    
    // Copy in base filename
    memcpy(sfn_output, sfn_input, FAT_SFN_SIZE_FULL);
8001b864:	b0 89       	st.b	r8[0x0],r9
8001b866:	0c 9c       	mov	r12,r6
8001b868:	e0 a0 2c b4 	rcall	800211d0 <memcpy>
       
    // Overwrite with tail
    tail_chars = (int)strlen(tail_str);
8001b86c:	0e 9c       	mov	r12,r7
8001b86e:	e0 a0 2d cc 	rcall	80021406 <strlen>
    memcpy(sfn_output+(FAT_SFN_SIZE_PARTIAL-tail_chars), tail_str, tail_chars);
8001b872:	0e 9b       	mov	r11,r7
8001b874:	18 9a       	mov	r10,r12
8001b876:	f8 0c 11 08 	rsub	r12,r12,8
8001b87a:	ec 0c 00 0c 	add	r12,r6,r12
8001b87e:	e0 a0 2c a9 	rcall	800211d0 <memcpy>
8001b882:	2f 5d       	sub	sp,-44
8001b884:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
    while ((num /= 10) > 0);
    
    *cp-- = 0;

    // Copy in forwards
    while (cp >= outbuf)
8001b888:	fa c8 ff df 	sub	r8,sp,-33
8001b88c:	ce ab       	rjmp	8001b860 <fatfs_lfn_generate_tail+0x94>
8001b88e:	d7 03       	nop

8001b890 <fatfs_lfn_create_sfn>:
8001b890:	eb cd 40 fc 	pushm	r2-r7,lr
8001b894:	20 1d       	sub	sp,4
8001b896:	16 97       	mov	r7,r11
//-----------------------------------------------------------------------------
// fatfs_lfn_create_sfn: Create a padded SFN 
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_lfn_create_sfn(char *sfn_output, char *filename)
{
8001b898:	18 94       	mov	r4,r12
    int i;
    int dotPos = -1;
    char ext[3];
    int pos;
    int len = (int)strlen(filename);
8001b89a:	16 9c       	mov	r12,r11
8001b89c:	e0 a0 2d b5 	rcall	80021406 <strlen>

    // Invalid to start with .
    if (filename[0]=='.')
8001b8a0:	32 e3       	mov	r3,46
{
    int i;
    int dotPos = -1;
    char ext[3];
    int pos;
    int len = (int)strlen(filename);
8001b8a2:	18 96       	mov	r6,r12

    // Invalid to start with .
    if (filename[0]=='.')
8001b8a4:	0f 88       	ld.ub	r8,r7[0x0]
8001b8a6:	e6 08 18 00 	cp.b	r8,r3
8001b8aa:	e0 80 00 98 	breq	8001b9da <fatfs_lfn_create_sfn+0x14a>
        return 0;

    memset(sfn_output, ' ', FAT_SFN_SIZE_FULL);
8001b8ae:	30 ba       	mov	r10,11
8001b8b0:	32 0b       	mov	r11,32
8001b8b2:	08 9c       	mov	r12,r4
8001b8b4:	e0 a0 2d 32 	rcall	80021318 <memset>
{
    int i;
    int dotPos = -1;
    char ext[3];
    int pos;
    int len = (int)strlen(filename);
8001b8b8:	0c 95       	mov	r5,r6
    // Invalid to start with .
    if (filename[0]=='.')
        return 0;

    memset(sfn_output, ' ', FAT_SFN_SIZE_FULL);
    memset(ext, ' ', 3);
8001b8ba:	30 3a       	mov	r10,3
8001b8bc:	32 0b       	mov	r11,32
8001b8be:	1a 9c       	mov	r12,sp
8001b8c0:	e0 a0 2d 2c 	rcall	80021318 <memset>

    // Find dot seperator
    for (i = 0; i< len; i++)
8001b8c4:	58 06       	cp.w	r6,0
8001b8c6:	e0 8a 00 62 	brle	8001b98a <fatfs_lfn_create_sfn+0xfa>
8001b8ca:	3f f9       	mov	r9,-1
8001b8cc:	30 08       	mov	r8,0
8001b8ce:	ee 08 07 0a 	ld.ub	r10,r7[r8]
8001b8d2:	e6 0a 18 00 	cp.b	r10,r3
8001b8d6:	f0 09 17 00 	moveq	r9,r8
8001b8da:	2f f8       	sub	r8,-1
8001b8dc:	10 36       	cp.w	r6,r8
8001b8de:	cf 81       	brne	8001b8ce <fatfs_lfn_create_sfn+0x3e>
        if (filename[i]=='.')
            dotPos = i;
    }

    // Extract extensions
    if (dotPos!=-1)
8001b8e0:	5b f9       	cp.w	r9,-1
8001b8e2:	c2 b0       	breq	8001b938 <fatfs_lfn_create_sfn+0xa8>
    {
        // Copy first three chars of extension
        for (i = (dotPos+1); i < (dotPos+1+3); i++)
8001b8e4:	f2 c8 ff ff 	sub	r8,r9,-1
            if (i<len)
8001b8e8:	10 36       	cp.w	r6,r8
8001b8ea:	e0 8a 00 0a 	brle	8001b8fe <fatfs_lfn_create_sfn+0x6e>
                ext[i-(dotPos+1)] = filename[i];
8001b8ee:	fa ca ff fc 	sub	r10,sp,-4
8001b8f2:	ee 08 07 0b 	ld.ub	r11,r7[r8]
8001b8f6:	10 0a       	add	r10,r8
8001b8f8:	12 1a       	sub	r10,r9
8001b8fa:	f5 6b ff fb 	st.b	r10[-5],r11

    // Extract extensions
    if (dotPos!=-1)
    {
        // Copy first three chars of extension
        for (i = (dotPos+1); i < (dotPos+1+3); i++)
8001b8fe:	2f f8       	sub	r8,-1
            if (i<len)
8001b900:	10 36       	cp.w	r6,r8
8001b902:	e0 8a 00 0a 	brle	8001b916 <fatfs_lfn_create_sfn+0x86>
                ext[i-(dotPos+1)] = filename[i];
8001b906:	fa ca ff fc 	sub	r10,sp,-4
8001b90a:	ee 08 07 0b 	ld.ub	r11,r7[r8]
8001b90e:	10 0a       	add	r10,r8
8001b910:	12 1a       	sub	r10,r9
8001b912:	f5 6b ff fb 	st.b	r10[-5],r11

    // Extract extensions
    if (dotPos!=-1)
    {
        // Copy first three chars of extension
        for (i = (dotPos+1); i < (dotPos+1+3); i++)
8001b916:	2f f8       	sub	r8,-1
            if (i<len)
8001b918:	10 36       	cp.w	r6,r8
8001b91a:	e0 8a 00 0b 	brle	8001b930 <fatfs_lfn_create_sfn+0xa0>
                ext[i-(dotPos+1)] = filename[i];
8001b91e:	ee 08 07 0a 	ld.ub	r10,r7[r8]
8001b922:	fa cb ff fc 	sub	r11,sp,-4
8001b926:	f6 08 00 08 	add	r8,r11,r8
8001b92a:	12 18       	sub	r8,r9
8001b92c:	f1 6a ff fb 	st.b	r8[-5],r10
        len = dotPos;
    }

    // Add filename part
    pos = 0; 
    for (i=0;i<len;i++)
8001b930:	58 09       	cp.w	r9,0
8001b932:	e0 8a 00 2c 	brle	8001b98a <fatfs_lfn_create_sfn+0xfa>
8001b936:	12 95       	mov	r5,r9
8001b938:	30 0a       	mov	r10,0
    {
        if ( (filename[i]!=' ') && (filename[i]!='.') )
8001b93a:	32 ee       	mov	lr,46
        len = dotPos;
    }

    // Add filename part
    pos = 0; 
    for (i=0;i<len;i++)
8001b93c:	14 99       	mov	r9,r10
    {
        if ( (filename[i]!=' ') && (filename[i]!='.') )
8001b93e:	32 03       	mov	r3,32
8001b940:	14 96       	mov	r6,r10
        {
            if (filename[i] >= 'a' && filename[i] <= 'z')
8001b942:	31 92       	mov	r2,25
8001b944:	c0 98       	rjmp	8001b956 <fatfs_lfn_create_sfn+0xc6>
                sfn_output[pos++] = filename[i] - 'a' + 'A';
8001b946:	e8 0a 0b 0c 	st.b	r4[r10],r12
8001b94a:	2f fa       	sub	r10,-1
            else
                sfn_output[pos++] = filename[i];
        }
        
        // Fill upto 8 characters
        if (pos==FAT_SFN_SIZE_PARTIAL)
8001b94c:	58 8a       	cp.w	r10,8
8001b94e:	c1 e0       	breq	8001b98a <fatfs_lfn_create_sfn+0xfa>
        len = dotPos;
    }

    // Add filename part
    pos = 0; 
    for (i=0;i<len;i++)
8001b950:	2f f9       	sub	r9,-1
8001b952:	0a 39       	cp.w	r9,r5
8001b954:	c1 b4       	brge	8001b98a <fatfs_lfn_create_sfn+0xfa>
    {
        if ( (filename[i]!=' ') && (filename[i]!='.') )
8001b956:	ee 09 07 08 	ld.ub	r8,r7[r9]
8001b95a:	fc 08 18 00 	cp.b	r8,lr
8001b95e:	5f 1c       	srne	r12
8001b960:	e6 08 18 00 	cp.b	r8,r3
8001b964:	5f 1b       	srne	r11
8001b966:	f9 eb 00 0b 	and	r11,r12,r11
8001b96a:	ec 0b 18 00 	cp.b	r11,r6
8001b96e:	ce f0       	breq	8001b94c <fatfs_lfn_create_sfn+0xbc>
        {
            if (filename[i] >= 'a' && filename[i] <= 'z')
                sfn_output[pos++] = filename[i] - 'a' + 'A';
8001b970:	f0 cc 00 20 	sub	r12,r8,32
    pos = 0; 
    for (i=0;i<len;i++)
    {
        if ( (filename[i]!=' ') && (filename[i]!='.') )
        {
            if (filename[i] >= 'a' && filename[i] <= 'z')
8001b974:	f0 cb 00 61 	sub	r11,r8,97
8001b978:	e4 0b 18 00 	cp.b	r11,r2
8001b97c:	fe 98 ff e5 	brls	8001b946 <fatfs_lfn_create_sfn+0xb6>
                sfn_output[pos++] = filename[i] - 'a' + 'A';
            else
                sfn_output[pos++] = filename[i];
8001b980:	e8 0a 0b 08 	st.b	r4[r10],r8
8001b984:	2f fa       	sub	r10,-1
        }
        
        // Fill upto 8 characters
        if (pos==FAT_SFN_SIZE_PARTIAL)
8001b986:	58 8a       	cp.w	r10,8
8001b988:	ce 41       	brne	8001b950 <fatfs_lfn_create_sfn+0xc0>
    }

    // Add extension part
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
    {
        if (ext[i-FAT_SFN_SIZE_PARTIAL] >= 'a' && ext[i-FAT_SFN_SIZE_PARTIAL] <= 'z')
8001b98a:	1b 88       	ld.ub	r8,sp[0x0]
8001b98c:	31 99       	mov	r9,25
8001b98e:	f0 ca 00 61 	sub	r10,r8,97
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
8001b992:	f2 0a 18 00 	cp.b	r10,r9
8001b996:	f7 b8 08 20 	subls	r8,32
    }

    // Add extension part
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
    {
        if (ext[i-FAT_SFN_SIZE_PARTIAL] >= 'a' && ext[i-FAT_SFN_SIZE_PARTIAL] <= 'z')
8001b99a:	31 99       	mov	r9,25
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
8001b99c:	e9 68 00 08 	st.b	r4[8],r8
    }

    // Add extension part
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
    {
        if (ext[i-FAT_SFN_SIZE_PARTIAL] >= 'a' && ext[i-FAT_SFN_SIZE_PARTIAL] <= 'z')
8001b9a0:	1b 98       	ld.ub	r8,sp[0x1]
8001b9a2:	f0 ca 00 61 	sub	r10,r8,97
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
8001b9a6:	f2 0a 18 00 	cp.b	r10,r9
8001b9aa:	f7 b8 08 20 	subls	r8,32
8001b9ae:	e9 68 00 09 	st.b	r4[9],r8
    }

    // Add extension part
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
    {
        if (ext[i-FAT_SFN_SIZE_PARTIAL] >= 'a' && ext[i-FAT_SFN_SIZE_PARTIAL] <= 'z')
8001b9b2:	31 99       	mov	r9,25
8001b9b4:	1b a8       	ld.ub	r8,sp[0x2]
8001b9b6:	f0 ca 00 61 	sub	r10,r8,97
8001b9ba:	f2 0a 18 00 	cp.b	r10,r9
8001b9be:	e0 88 00 07 	brls	8001b9cc <fatfs_lfn_create_sfn+0x13c>
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
        else
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL];
8001b9c2:	e9 68 00 0a 	st.b	r4[10],r8
8001b9c6:	2f fd       	sub	sp,-4
8001b9c8:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1

    // Add extension part
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
    {
        if (ext[i-FAT_SFN_SIZE_PARTIAL] >= 'a' && ext[i-FAT_SFN_SIZE_PARTIAL] <= 'z')
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
8001b9cc:	22 08       	sub	r8,32
8001b9ce:	30 1c       	mov	r12,1
8001b9d0:	e9 68 00 0a 	st.b	r4[10],r8
        else
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL];
    }

    return 1;
}
8001b9d4:	2f fd       	sub	sp,-4
8001b9d6:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
    char ext[3];
    int pos;
    int len = (int)strlen(filename);

    // Invalid to start with .
    if (filename[0]=='.')
8001b9da:	2f fd       	sub	sp,-4
8001b9dc:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0

8001b9e0 <fatfs_lfn_entries_required>:
8001b9e0:	d4 01       	pushm	lr
8001b9e2:	e0 a0 2d 12 	rcall	80021406 <strlen>
8001b9e6:	c0 e0       	breq	8001ba02 <fatfs_lfn_entries_required+0x22>
int fatfs_lfn_entries_required(char *filename)
{
    int length = (int)strlen(filename);

    if (length)
        return (length + MAX_LFN_ENTRY_LENGTH - 1) / MAX_LFN_ENTRY_LENGTH;    
8001b9e8:	f8 c8 ff f4 	sub	r8,r12,-12
8001b9ec:	e0 6b ec 4f 	mov	r11,60495
8001b9f0:	ea 1b 4e c4 	orh	r11,0x4ec4
8001b9f4:	f0 09 14 1f 	asr	r9,r8,0x1f
8001b9f8:	f0 0b 04 4a 	muls.d	r10,r8,r11
8001b9fc:	f6 0c 14 02 	asr	r12,r11,0x2
8001ba00:	12 1c       	sub	r12,r9
    else
        return 0;
}
8001ba02:	d8 02       	popm	pc

8001ba04 <fatfs_filename_to_lfn>:
8001ba04:	eb cd 40 fe 	pushm	r1-r7,lr
//-----------------------------------------------------------------------------
// fatfs_filename_to_lfn:
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_filename_to_lfn(char *filename, uint8 *buffer, int entry, uint8 sfnChk)
{
8001ba08:	20 dd       	sub	sp,52
8001ba0a:	14 96       	mov	r6,r10
8001ba0c:	12 91       	mov	r1,r9
    int i;
    int nameIndexes[MAX_LFN_ENTRY_LENGTH] = {1,3,5,7,9,0x0E,0x10,0x12,0x14,0x16,0x18,0x1C,0x1E};
8001ba0e:	fe c9 8c b2 	sub	r9,pc,-29518
8001ba12:	72 ca       	ld.w	r10,r9[0x30]
//-----------------------------------------------------------------------------
// fatfs_filename_to_lfn:
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_filename_to_lfn(char *filename, uint8 *buffer, int entry, uint8 sfnChk)
{
8001ba14:	16 97       	mov	r7,r11
    int i;
    int nameIndexes[MAX_LFN_ENTRY_LENGTH] = {1,3,5,7,9,0x0E,0x10,0x12,0x14,0x16,0x18,0x1C,0x1E};
8001ba16:	50 ca       	stdsp	sp[0x30],r10
8001ba18:	f2 ea 00 00 	ld.d	r10,r9[0]
8001ba1c:	fa eb 00 00 	st.d	sp[0],r10
8001ba20:	f2 ea 00 08 	ld.d	r10,r9[8]
8001ba24:	fa eb 00 08 	st.d	sp[8],r10
8001ba28:	f2 ea 00 10 	ld.d	r10,r9[16]
8001ba2c:	fa eb 00 10 	st.d	sp[16],r10
8001ba30:	f2 ea 00 18 	ld.d	r10,r9[24]
8001ba34:	fa eb 00 18 	st.d	sp[24],r10
8001ba38:	f2 ea 00 20 	ld.d	r10,r9[32]
8001ba3c:	fa eb 00 20 	st.d	sp[32],r10
8001ba40:	f2 ea 00 28 	ld.d	r10,r9[40]
//-----------------------------------------------------------------------------
// fatfs_filename_to_lfn:
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_filename_to_lfn(char *filename, uint8 *buffer, int entry, uint8 sfnChk)
{
8001ba44:	18 93       	mov	r3,r12
    int i;
    int nameIndexes[MAX_LFN_ENTRY_LENGTH] = {1,3,5,7,9,0x0E,0x10,0x12,0x14,0x16,0x18,0x1C,0x1E};
8001ba46:	fa eb 00 28 	st.d	sp[40],r10

    // 13 characters entries
    int length = (int)strlen(filename);
8001ba4a:	e0 a0 2c de 	rcall	80021406 <strlen>
8001ba4e:	18 95       	mov	r5,r12
#if FATFS_INC_LFN_SUPPORT
int fatfs_lfn_entries_required(char *filename)
{
    int length = (int)strlen(filename);

    if (length)
8001ba50:	e0 80 01 60 	breq	8001bd10 <fatfs_filename_to_lfn+0x30c>
8001ba54:	f8 c8 ff f4 	sub	r8,r12,-12
8001ba58:	e0 6b ec 4f 	mov	r11,60495
8001ba5c:	ea 1b 4e c4 	orh	r11,0x4ec4
8001ba60:	f0 09 14 1f 	asr	r9,r8,0x1f
8001ba64:	f0 0b 04 4a 	muls.d	r10,r8,r11
8001ba68:	f6 02 14 02 	asr	r2,r11,0x2
8001ba6c:	12 12       	sub	r2,r9
8001ba6e:	20 12       	sub	r2,1
    // 13 characters entries
    int length = (int)strlen(filename);
    int entriesRequired = fatfs_lfn_entries_required(filename);

    // Filename offset
    int start = entry * MAX_LFN_ENTRY_LENGTH;
8001ba70:	ec 06 00 14 	add	r4,r6,r6<<0x1

    // Initialise to zeros
    memset(buffer, 0x00, FAT_DIR_ENTRY_SIZE);
8001ba74:	32 0a       	mov	r10,32
    // 13 characters entries
    int length = (int)strlen(filename);
    int entriesRequired = fatfs_lfn_entries_required(filename);

    // Filename offset
    int start = entry * MAX_LFN_ENTRY_LENGTH;
8001ba76:	ec 04 00 24 	add	r4,r6,r4<<0x2

    // Initialise to zeros
    memset(buffer, 0x00, FAT_DIR_ENTRY_SIZE);
8001ba7a:	30 0b       	mov	r11,0
8001ba7c:	0e 9c       	mov	r12,r7
8001ba7e:	e0 a0 2c 4d 	rcall	80021318 <memset>

    // LFN entry number
    buffer[0] = (uint8)(((entriesRequired-1)==entry)?(0x40|(entry+1)):(entry+1));
8001ba82:	0c 32       	cp.w	r2,r6
8001ba84:	e0 80 01 48 	breq	8001bd14 <fatfs_filename_to_lfn+0x310>
8001ba88:	2f f6       	sub	r6,-1
8001ba8a:	5c 56       	castu.b	r6

    // LFN flag
    buffer[11] = 0x0F;
8001ba8c:	30 f8       	mov	r8,15

    // Initialise to zeros
    memset(buffer, 0x00, FAT_DIR_ENTRY_SIZE);

    // LFN entry number
    buffer[0] = (uint8)(((entriesRequired-1)==entry)?(0x40|(entry+1)):(entry+1));
8001ba8e:	ae 86       	st.b	r7[0x0],r6

    // LFN flag
    buffer[11] = 0x0F;

    // Checksum of short filename
    buffer[13] = sfnChk;
8001ba90:	ef 61 00 0d 	st.b	r7[13],r1

    // LFN entry number
    buffer[0] = (uint8)(((entriesRequired-1)==entry)?(0x40|(entry+1)):(entry+1));

    // LFN flag
    buffer[11] = 0x0F;
8001ba94:	ef 68 00 0b 	st.b	r7[11],r8
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001ba98:	08 35       	cp.w	r5,r4
8001ba9a:	e0 89 00 9e 	brgt	8001bbd6 <fatfs_filename_to_lfn+0x1d2>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
8001ba9e:	e0 80 01 40 	breq	8001bd1e <fatfs_filename_to_lfn+0x31a>
            buffer[nameIndexes[i]] = 0x00;
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
8001baa2:	40 09       	lddsp	r9,sp[0x0]
8001baa4:	3f f8       	mov	r8,-1
8001baa6:	ee 09 0b 08 	st.b	r7[r9],r8
            buffer[nameIndexes[i]+1] = 0xFF;
8001baaa:	ee 09 00 09 	add	r9,r7,r9
8001baae:	b2 98       	st.b	r9[0x1],r8
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001bab0:	e8 c8 ff ff 	sub	r8,r4,-1
8001bab4:	10 35       	cp.w	r5,r8
8001bab6:	e0 8a 00 9a 	brle	8001bbea <fatfs_filename_to_lfn+0x1e6>
            buffer[nameIndexes[i]] = filename[start+i];
8001baba:	e6 08 07 09 	ld.ub	r9,r3[r8]
8001babe:	40 18       	lddsp	r8,sp[0x4]
8001bac0:	ee 08 0b 09 	st.b	r7[r8],r9
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001bac4:	e8 c8 ff fe 	sub	r8,r4,-2
8001bac8:	10 35       	cp.w	r5,r8
8001baca:	e0 89 00 9f 	brgt	8001bc08 <fatfs_filename_to_lfn+0x204>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
8001bace:	10 35       	cp.w	r5,r8
8001bad0:	e0 80 01 65 	breq	8001bd9a <fatfs_filename_to_lfn+0x396>
            buffer[nameIndexes[i]] = 0x00;
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
8001bad4:	40 29       	lddsp	r9,sp[0x8]
8001bad6:	3f f8       	mov	r8,-1
8001bad8:	ee 09 0b 08 	st.b	r7[r9],r8
            buffer[nameIndexes[i]+1] = 0xFF;
8001badc:	ee 09 00 09 	add	r9,r7,r9
8001bae0:	b2 98       	st.b	r9[0x1],r8
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001bae2:	e8 c8 ff fd 	sub	r8,r4,-3
8001bae6:	10 35       	cp.w	r5,r8
8001bae8:	e0 8a 00 9a 	brle	8001bc1c <fatfs_filename_to_lfn+0x218>
            buffer[nameIndexes[i]] = filename[start+i];
8001baec:	e6 08 07 09 	ld.ub	r9,r3[r8]
8001baf0:	40 38       	lddsp	r8,sp[0xc]
8001baf2:	ee 08 0b 09 	st.b	r7[r8],r9
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001baf6:	e8 c8 ff fc 	sub	r8,r4,-4
8001bafa:	10 35       	cp.w	r5,r8
8001bafc:	e0 89 00 9f 	brgt	8001bc3a <fatfs_filename_to_lfn+0x236>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
8001bb00:	10 35       	cp.w	r5,r8
8001bb02:	e0 80 01 42 	breq	8001bd86 <fatfs_filename_to_lfn+0x382>
            buffer[nameIndexes[i]] = 0x00;
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
8001bb06:	40 49       	lddsp	r9,sp[0x10]
8001bb08:	3f f8       	mov	r8,-1
8001bb0a:	ee 09 0b 08 	st.b	r7[r9],r8
            buffer[nameIndexes[i]+1] = 0xFF;
8001bb0e:	ee 09 00 09 	add	r9,r7,r9
8001bb12:	b2 98       	st.b	r9[0x1],r8
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001bb14:	e8 c8 ff fb 	sub	r8,r4,-5
8001bb18:	10 35       	cp.w	r5,r8
8001bb1a:	e0 8a 00 9a 	brle	8001bc4e <fatfs_filename_to_lfn+0x24a>
            buffer[nameIndexes[i]] = filename[start+i];
8001bb1e:	e6 08 07 09 	ld.ub	r9,r3[r8]
8001bb22:	40 58       	lddsp	r8,sp[0x14]
8001bb24:	ee 08 0b 09 	st.b	r7[r8],r9
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001bb28:	e8 c8 ff fa 	sub	r8,r4,-6
8001bb2c:	10 35       	cp.w	r5,r8
8001bb2e:	e0 89 00 9e 	brgt	8001bc6a <fatfs_filename_to_lfn+0x266>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
8001bb32:	10 35       	cp.w	r5,r8
8001bb34:	e0 80 01 09 	breq	8001bd46 <fatfs_filename_to_lfn+0x342>
            buffer[nameIndexes[i]] = 0x00;
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
8001bb38:	40 69       	lddsp	r9,sp[0x18]
8001bb3a:	3f f8       	mov	r8,-1
8001bb3c:	ee 09 0b 08 	st.b	r7[r9],r8
            buffer[nameIndexes[i]+1] = 0xFF;
8001bb40:	ee 09 00 09 	add	r9,r7,r9
8001bb44:	b2 98       	st.b	r9[0x1],r8
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001bb46:	e8 c8 ff f9 	sub	r8,r4,-7
8001bb4a:	10 35       	cp.w	r5,r8
8001bb4c:	e0 8a 00 99 	brle	8001bc7e <fatfs_filename_to_lfn+0x27a>
            buffer[nameIndexes[i]] = filename[start+i];
8001bb50:	e6 08 07 09 	ld.ub	r9,r3[r8]
8001bb54:	40 78       	lddsp	r8,sp[0x1c]
8001bb56:	ee 08 0b 09 	st.b	r7[r8],r9
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001bb5a:	e8 c8 ff f8 	sub	r8,r4,-8
8001bb5e:	10 35       	cp.w	r5,r8
8001bb60:	e0 89 00 9d 	brgt	8001bc9a <fatfs_filename_to_lfn+0x296>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
8001bb64:	10 35       	cp.w	r5,r8
8001bb66:	e0 80 00 e6 	breq	8001bd32 <fatfs_filename_to_lfn+0x32e>
            buffer[nameIndexes[i]] = 0x00;
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
8001bb6a:	40 89       	lddsp	r9,sp[0x20]
8001bb6c:	3f f8       	mov	r8,-1
8001bb6e:	ee 09 0b 08 	st.b	r7[r9],r8
            buffer[nameIndexes[i]+1] = 0xFF;
8001bb72:	ee 09 00 09 	add	r9,r7,r9
8001bb76:	b2 98       	st.b	r9[0x1],r8
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001bb78:	e8 c8 ff f7 	sub	r8,r4,-9
8001bb7c:	10 35       	cp.w	r5,r8
8001bb7e:	e0 8a 00 98 	brle	8001bcae <fatfs_filename_to_lfn+0x2aa>
            buffer[nameIndexes[i]] = filename[start+i];
8001bb82:	e6 08 07 09 	ld.ub	r9,r3[r8]
8001bb86:	40 98       	lddsp	r8,sp[0x24]
8001bb88:	ee 08 0b 09 	st.b	r7[r8],r9
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001bb8c:	e8 c8 ff f6 	sub	r8,r4,-10
8001bb90:	10 35       	cp.w	r5,r8
8001bb92:	e0 89 00 9c 	brgt	8001bcca <fatfs_filename_to_lfn+0x2c6>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
8001bb96:	10 35       	cp.w	r5,r8
8001bb98:	e0 80 00 ed 	breq	8001bd72 <fatfs_filename_to_lfn+0x36e>
            buffer[nameIndexes[i]] = 0x00;
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
8001bb9c:	40 a9       	lddsp	r9,sp[0x28]
8001bb9e:	3f f8       	mov	r8,-1
8001bba0:	ee 09 0b 08 	st.b	r7[r9],r8
            buffer[nameIndexes[i]+1] = 0xFF;
8001bba4:	ee 09 00 09 	add	r9,r7,r9
8001bba8:	b2 98       	st.b	r9[0x1],r8
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001bbaa:	e8 c8 ff f5 	sub	r8,r4,-11
8001bbae:	10 35       	cp.w	r5,r8
8001bbb0:	e0 8a 00 97 	brle	8001bcde <fatfs_filename_to_lfn+0x2da>
            buffer[nameIndexes[i]] = filename[start+i];
8001bbb4:	e6 08 07 09 	ld.ub	r9,r3[r8]
8001bbb8:	40 b8       	lddsp	r8,sp[0x2c]
8001bbba:	ee 08 0b 09 	st.b	r7[r8],r9
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001bbbe:	2f 44       	sub	r4,-12
8001bbc0:	08 35       	cp.w	r5,r4
8001bbc2:	e0 8a 00 9b 	brle	8001bcf8 <fatfs_filename_to_lfn+0x2f4>
            buffer[nameIndexes[i]] = filename[start+i];
8001bbc6:	e6 04 07 09 	ld.ub	r9,r3[r4]
8001bbca:	40 c8       	lddsp	r8,sp[0x30]
8001bbcc:	ee 08 0b 09 	st.b	r7[r8],r9
        {
            buffer[nameIndexes[i]] = 0xFF;
            buffer[nameIndexes[i]+1] = 0xFF;
        }
    }
}
8001bbd0:	2f 3d       	sub	sp,-52
8001bbd2:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
            buffer[nameIndexes[i]] = filename[start+i];
8001bbd6:	e6 04 07 09 	ld.ub	r9,r3[r4]
8001bbda:	40 08       	lddsp	r8,sp[0x0]
8001bbdc:	ee 08 0b 09 	st.b	r7[r8],r9
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001bbe0:	e8 c8 ff ff 	sub	r8,r4,-1
8001bbe4:	10 35       	cp.w	r5,r8
8001bbe6:	fe 99 ff 6a 	brgt	8001baba <fatfs_filename_to_lfn+0xb6>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
8001bbea:	10 35       	cp.w	r5,r8
8001bbec:	e0 80 00 d2 	breq	8001bd90 <fatfs_filename_to_lfn+0x38c>
            buffer[nameIndexes[i]] = 0x00;
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
8001bbf0:	40 19       	lddsp	r9,sp[0x4]
8001bbf2:	3f f8       	mov	r8,-1
8001bbf4:	ee 09 0b 08 	st.b	r7[r9],r8
            buffer[nameIndexes[i]+1] = 0xFF;
8001bbf8:	ee 09 00 09 	add	r9,r7,r9
8001bbfc:	b2 98       	st.b	r9[0x1],r8
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001bbfe:	e8 c8 ff fe 	sub	r8,r4,-2
8001bc02:	10 35       	cp.w	r5,r8
8001bc04:	fe 9a ff 65 	brle	8001bace <fatfs_filename_to_lfn+0xca>
            buffer[nameIndexes[i]] = filename[start+i];
8001bc08:	e6 08 07 09 	ld.ub	r9,r3[r8]
8001bc0c:	40 28       	lddsp	r8,sp[0x8]
8001bc0e:	ee 08 0b 09 	st.b	r7[r8],r9
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001bc12:	e8 c8 ff fd 	sub	r8,r4,-3
8001bc16:	10 35       	cp.w	r5,r8
8001bc18:	fe 99 ff 6a 	brgt	8001baec <fatfs_filename_to_lfn+0xe8>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
8001bc1c:	10 35       	cp.w	r5,r8
8001bc1e:	e0 80 00 af 	breq	8001bd7c <fatfs_filename_to_lfn+0x378>
            buffer[nameIndexes[i]] = 0x00;
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
8001bc22:	40 39       	lddsp	r9,sp[0xc]
8001bc24:	3f f8       	mov	r8,-1
8001bc26:	ee 09 0b 08 	st.b	r7[r9],r8
            buffer[nameIndexes[i]+1] = 0xFF;
8001bc2a:	ee 09 00 09 	add	r9,r7,r9
8001bc2e:	b2 98       	st.b	r9[0x1],r8
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001bc30:	e8 c8 ff fc 	sub	r8,r4,-4
8001bc34:	10 35       	cp.w	r5,r8
8001bc36:	fe 9a ff 65 	brle	8001bb00 <fatfs_filename_to_lfn+0xfc>
            buffer[nameIndexes[i]] = filename[start+i];
8001bc3a:	e6 08 07 09 	ld.ub	r9,r3[r8]
8001bc3e:	40 48       	lddsp	r8,sp[0x10]
8001bc40:	ee 08 0b 09 	st.b	r7[r8],r9
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001bc44:	e8 c8 ff fb 	sub	r8,r4,-5
8001bc48:	10 35       	cp.w	r5,r8
8001bc4a:	fe 99 ff 6a 	brgt	8001bb1e <fatfs_filename_to_lfn+0x11a>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
8001bc4e:	10 35       	cp.w	r5,r8
8001bc50:	c7 60       	breq	8001bd3c <fatfs_filename_to_lfn+0x338>
            buffer[nameIndexes[i]] = 0x00;
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
8001bc52:	40 59       	lddsp	r9,sp[0x14]
8001bc54:	3f f8       	mov	r8,-1
8001bc56:	ee 09 0b 08 	st.b	r7[r9],r8
            buffer[nameIndexes[i]+1] = 0xFF;
8001bc5a:	ee 09 00 09 	add	r9,r7,r9
8001bc5e:	b2 98       	st.b	r9[0x1],r8
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001bc60:	e8 c8 ff fa 	sub	r8,r4,-6
8001bc64:	10 35       	cp.w	r5,r8
8001bc66:	fe 9a ff 66 	brle	8001bb32 <fatfs_filename_to_lfn+0x12e>
            buffer[nameIndexes[i]] = filename[start+i];
8001bc6a:	e6 08 07 09 	ld.ub	r9,r3[r8]
8001bc6e:	40 68       	lddsp	r8,sp[0x18]
8001bc70:	ee 08 0b 09 	st.b	r7[r8],r9
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001bc74:	e8 c8 ff f9 	sub	r8,r4,-7
8001bc78:	10 35       	cp.w	r5,r8
8001bc7a:	fe 99 ff 6b 	brgt	8001bb50 <fatfs_filename_to_lfn+0x14c>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
8001bc7e:	10 35       	cp.w	r5,r8
8001bc80:	c5 40       	breq	8001bd28 <fatfs_filename_to_lfn+0x324>
            buffer[nameIndexes[i]] = 0x00;
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
8001bc82:	40 79       	lddsp	r9,sp[0x1c]
8001bc84:	3f f8       	mov	r8,-1
8001bc86:	ee 09 0b 08 	st.b	r7[r9],r8
            buffer[nameIndexes[i]+1] = 0xFF;
8001bc8a:	ee 09 00 09 	add	r9,r7,r9
8001bc8e:	b2 98       	st.b	r9[0x1],r8
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001bc90:	e8 c8 ff f8 	sub	r8,r4,-8
8001bc94:	10 35       	cp.w	r5,r8
8001bc96:	fe 9a ff 67 	brle	8001bb64 <fatfs_filename_to_lfn+0x160>
            buffer[nameIndexes[i]] = filename[start+i];
8001bc9a:	e6 08 07 09 	ld.ub	r9,r3[r8]
8001bc9e:	40 88       	lddsp	r8,sp[0x20]
8001bca0:	ee 08 0b 09 	st.b	r7[r8],r9
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001bca4:	e8 c8 ff f7 	sub	r8,r4,-9
8001bca8:	10 35       	cp.w	r5,r8
8001bcaa:	fe 99 ff 6c 	brgt	8001bb82 <fatfs_filename_to_lfn+0x17e>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
8001bcae:	10 35       	cp.w	r5,r8
8001bcb0:	c5 c0       	breq	8001bd68 <fatfs_filename_to_lfn+0x364>
            buffer[nameIndexes[i]] = 0x00;
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
8001bcb2:	40 99       	lddsp	r9,sp[0x24]
8001bcb4:	3f f8       	mov	r8,-1
8001bcb6:	ee 09 0b 08 	st.b	r7[r9],r8
            buffer[nameIndexes[i]+1] = 0xFF;
8001bcba:	ee 09 00 09 	add	r9,r7,r9
8001bcbe:	b2 98       	st.b	r9[0x1],r8
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001bcc0:	e8 c8 ff f6 	sub	r8,r4,-10
8001bcc4:	10 35       	cp.w	r5,r8
8001bcc6:	fe 9a ff 68 	brle	8001bb96 <fatfs_filename_to_lfn+0x192>
            buffer[nameIndexes[i]] = filename[start+i];
8001bcca:	e6 08 07 09 	ld.ub	r9,r3[r8]
8001bcce:	40 a8       	lddsp	r8,sp[0x28]
8001bcd0:	ee 08 0b 09 	st.b	r7[r8],r9
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001bcd4:	e8 c8 ff f5 	sub	r8,r4,-11
8001bcd8:	10 35       	cp.w	r5,r8
8001bcda:	fe 99 ff 6d 	brgt	8001bbb4 <fatfs_filename_to_lfn+0x1b0>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
8001bcde:	10 35       	cp.w	r5,r8
8001bce0:	c3 80       	breq	8001bd50 <fatfs_filename_to_lfn+0x34c>
            buffer[nameIndexes[i]] = 0x00;
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
8001bce2:	40 b9       	lddsp	r9,sp[0x2c]
8001bce4:	3f f8       	mov	r8,-1
8001bce6:	ee 09 0b 08 	st.b	r7[r9],r8
            buffer[nameIndexes[i]+1] = 0xFF;
8001bcea:	ee 09 00 09 	add	r9,r7,r9
8001bcee:	b2 98       	st.b	r9[0x1],r8
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
8001bcf0:	2f 44       	sub	r4,-12
8001bcf2:	08 35       	cp.w	r5,r4
8001bcf4:	fe 99 ff 69 	brgt	8001bbc6 <fatfs_filename_to_lfn+0x1c2>
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
8001bcf8:	08 35       	cp.w	r5,r4
8001bcfa:	c3 00       	breq	8001bd5a <fatfs_filename_to_lfn+0x356>
            buffer[nameIndexes[i]] = 0x00;
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
8001bcfc:	40 c9       	lddsp	r9,sp[0x30]
8001bcfe:	3f f8       	mov	r8,-1
8001bd00:	ee 09 0b 08 	st.b	r7[r9],r8
            buffer[nameIndexes[i]+1] = 0xFF;
8001bd04:	ee 09 00 09 	add	r9,r7,r9
8001bd08:	b2 98       	st.b	r9[0x1],r8
        }
    }
}
8001bd0a:	2f 3d       	sub	sp,-52
8001bd0c:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
#if FATFS_INC_LFN_SUPPORT
int fatfs_lfn_entries_required(char *filename)
{
    int length = (int)strlen(filename);

    if (length)
8001bd10:	3f f2       	mov	r2,-1
8001bd12:	ca fa       	rjmp	8001ba70 <fatfs_filename_to_lfn+0x6c>

    // Initialise to zeros
    memset(buffer, 0x00, FAT_DIR_ENTRY_SIZE);

    // LFN entry number
    buffer[0] = (uint8)(((entriesRequired-1)==entry)?(0x40|(entry+1)):(entry+1));
8001bd14:	e4 c6 ff ff 	sub	r6,r2,-1
8001bd18:	a7 a6       	sbr	r6,0x6
8001bd1a:	5c 56       	castu.b	r6
8001bd1c:	cb 8a       	rjmp	8001ba8c <fatfs_filename_to_lfn+0x88>
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
8001bd1e:	30 09       	mov	r9,0
8001bd20:	40 08       	lddsp	r8,sp[0x0]
8001bd22:	ee 08 0b 09 	st.b	r7[r8],r9
8001bd26:	c5 db       	rjmp	8001bbe0 <fatfs_filename_to_lfn+0x1dc>
8001bd28:	30 09       	mov	r9,0
8001bd2a:	40 78       	lddsp	r8,sp[0x1c]
8001bd2c:	ee 08 0b 09 	st.b	r7[r8],r9
8001bd30:	c1 5b       	rjmp	8001bb5a <fatfs_filename_to_lfn+0x156>
8001bd32:	30 09       	mov	r9,0
8001bd34:	40 88       	lddsp	r8,sp[0x20]
8001bd36:	ee 08 0b 09 	st.b	r7[r8],r9
8001bd3a:	cb 5b       	rjmp	8001bca4 <fatfs_filename_to_lfn+0x2a0>
8001bd3c:	30 09       	mov	r9,0
8001bd3e:	40 58       	lddsp	r8,sp[0x14]
8001bd40:	ee 08 0b 09 	st.b	r7[r8],r9
8001bd44:	cf 2a       	rjmp	8001bb28 <fatfs_filename_to_lfn+0x124>
8001bd46:	30 09       	mov	r9,0
8001bd48:	40 68       	lddsp	r8,sp[0x18]
8001bd4a:	ee 08 0b 09 	st.b	r7[r8],r9
8001bd4e:	c9 3b       	rjmp	8001bc74 <fatfs_filename_to_lfn+0x270>
8001bd50:	30 09       	mov	r9,0
8001bd52:	40 b8       	lddsp	r8,sp[0x2c]
8001bd54:	ee 08 0b 09 	st.b	r7[r8],r9
8001bd58:	c3 3b       	rjmp	8001bbbe <fatfs_filename_to_lfn+0x1ba>
8001bd5a:	30 09       	mov	r9,0
8001bd5c:	40 c8       	lddsp	r8,sp[0x30]
8001bd5e:	ee 08 0b 09 	st.b	r7[r8],r9
        {
            buffer[nameIndexes[i]] = 0xFF;
            buffer[nameIndexes[i]+1] = 0xFF;
        }
    }
}
8001bd62:	2f 3d       	sub	sp,-52
8001bd64:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
    {
        if ( (start+i) < length )
            buffer[nameIndexes[i]] = filename[start+i];
        else if ( (start+i) == length )
            buffer[nameIndexes[i]] = 0x00;
8001bd68:	30 09       	mov	r9,0
8001bd6a:	40 98       	lddsp	r8,sp[0x24]
8001bd6c:	ee 08 0b 09 	st.b	r7[r8],r9
8001bd70:	c0 eb       	rjmp	8001bb8c <fatfs_filename_to_lfn+0x188>
8001bd72:	30 09       	mov	r9,0
8001bd74:	40 a8       	lddsp	r8,sp[0x28]
8001bd76:	ee 08 0b 09 	st.b	r7[r8],r9
8001bd7a:	ca db       	rjmp	8001bcd4 <fatfs_filename_to_lfn+0x2d0>
8001bd7c:	30 09       	mov	r9,0
8001bd7e:	40 38       	lddsp	r8,sp[0xc]
8001bd80:	ee 08 0b 09 	st.b	r7[r8],r9
8001bd84:	cb 9a       	rjmp	8001baf6 <fatfs_filename_to_lfn+0xf2>
8001bd86:	30 09       	mov	r9,0
8001bd88:	40 48       	lddsp	r8,sp[0x10]
8001bd8a:	ee 08 0b 09 	st.b	r7[r8],r9
8001bd8e:	c5 bb       	rjmp	8001bc44 <fatfs_filename_to_lfn+0x240>
8001bd90:	30 09       	mov	r9,0
8001bd92:	40 18       	lddsp	r8,sp[0x4]
8001bd94:	ee 08 0b 09 	st.b	r7[r8],r9
8001bd98:	c9 6a       	rjmp	8001bac4 <fatfs_filename_to_lfn+0xc0>
8001bd9a:	30 09       	mov	r9,0
8001bd9c:	40 28       	lddsp	r8,sp[0x8]
8001bd9e:	ee 08 0b 09 	st.b	r7[r8],r9
8001bda2:	c3 8b       	rjmp	8001bc12 <fatfs_filename_to_lfn+0x20e>

8001bda4 <fatfs_total_path_levels>:
int fatfs_total_path_levels(char *path)
{
    int levels = 0;
    char expectedchar;

    if (!path)
8001bda4:	58 0c       	cp.w	r12,0
8001bda6:	c2 b0       	breq	8001bdfc <fatfs_total_path_levels+0x58>
        return -1;

    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
8001bda8:	19 89       	ld.ub	r9,r12[0x0]
8001bdaa:	32 f8       	mov	r8,47
8001bdac:	f0 09 18 00 	cp.b	r9,r8
8001bdb0:	c1 d0       	breq	8001bdea <fatfs_total_path_levels+0x46>
    {
        expectedchar = '/';
        path++;
    }
    else if (path[1] == ':' || path[2] == '\\')
8001bdb2:	19 99       	ld.ub	r9,r12[0x1]
8001bdb4:	33 a8       	mov	r8,58
8001bdb6:	f0 09 18 00 	cp.b	r9,r8
8001bdba:	c1 c1       	brne	8001bdf2 <fatfs_total_path_levels+0x4e>
    {
        expectedchar = '\\';
        path += 3;
8001bdbc:	f8 c8 ff fd 	sub	r8,r12,-3
8001bdc0:	35 ca       	mov	r10,92
    }
    else
        return -1;

    // Count levels in path string
    while (*path)
8001bdc2:	11 89       	ld.ub	r9,r8[0x0]
8001bdc4:	58 09       	cp.w	r9,0
8001bdc6:	c1 c0       	breq	8001bdfe <fatfs_total_path_levels+0x5a>
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
8001bdc8:	30 0c       	mov	r12,0
8001bdca:	c0 58       	rjmp	8001bdd4 <fatfs_total_path_levels+0x30>
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
            path++;
8001bdcc:	2f f8       	sub	r8,-1

    // Count levels in path string
    while (*path)
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
8001bdce:	11 89       	ld.ub	r9,r8[0x0]
8001bdd0:	58 09       	cp.w	r9,0
8001bdd2:	c0 b0       	breq	8001bde8 <fatfs_total_path_levels+0x44>
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
8001bdd4:	f2 0a 18 00 	cp.b	r10,r9
8001bdd8:	cf a1       	brne	8001bdcc <fatfs_total_path_levels+0x28>
8001bdda:	2f f8       	sub	r8,-1
            path++;
        }
    
        // Increase number of subdirs founds
        levels++;
8001bddc:	2f fc       	sub	r12,-1
    }
    else
        return -1;

    // Count levels in path string
    while (*path)
8001bdde:	11 89       	ld.ub	r9,r8[0x0]
8001bde0:	58 09       	cp.w	r9,0
8001bde2:	cf 91       	brne	8001bdd4 <fatfs_total_path_levels+0x30>
8001bde4:	20 1c       	sub	r12,1
8001bde6:	5e fc       	retal	r12
8001bde8:	5e fc       	retal	r12
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
    {
        expectedchar = '/';
        path++;
8001bdea:	f8 c8 ff ff 	sub	r8,r12,-1
8001bdee:	32 fa       	mov	r10,47
8001bdf0:	ce 9b       	rjmp	8001bdc2 <fatfs_total_path_levels+0x1e>
    }
    else if (path[1] == ':' || path[2] == '\\')
8001bdf2:	19 a9       	ld.ub	r9,r12[0x2]
8001bdf4:	35 c8       	mov	r8,92
8001bdf6:	f0 09 18 00 	cp.b	r9,r8
8001bdfa:	ce 10       	breq	8001bdbc <fatfs_total_path_levels+0x18>
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
8001bdfc:	5e fe       	retal	-1
8001bdfe:	5e fe       	retal	-1

8001be00 <fatfs_get_sfn_display_name>:
}
//-----------------------------------------------------------------------------
// fatfs_get_sfn_display_name: Get display name for SFN entry
//-----------------------------------------------------------------------------
int fatfs_get_sfn_display_name(char* out, char* in)
{
8001be00:	eb cd 40 e0 	pushm	r5-r7,lr
8001be04:	30 09       	mov	r9,0
    int len = 0;
    while (*in && len <= 11)
    {
        char a = *in++;

        if (a == ' ')
8001be06:	32 06       	mov	r6,32
// fatfs_get_sfn_display_name: Get display name for SFN entry
//-----------------------------------------------------------------------------
int fatfs_get_sfn_display_name(char* out, char* in)
{
    int len = 0;
    while (*in && len <= 11)
8001be08:	12 9e       	mov	lr,r9
        char a = *in++;

        if (a == ' ')
            continue;
        // Make lower case if uppercase
        else if ((a>='A') && (a<='Z'))
8001be0a:	31 95       	mov	r5,25
// fatfs_get_sfn_display_name: Get display name for SFN entry
//-----------------------------------------------------------------------------
int fatfs_get_sfn_display_name(char* out, char* in)
{
    int len = 0;
    while (*in && len <= 11)
8001be0c:	58 b9       	cp.w	r9,11
8001be0e:	5f a7       	srle	r7
8001be10:	17 88       	ld.ub	r8,r11[0x0]
    {
        char a = *in++;
8001be12:	2f fb       	sub	r11,-1
// fatfs_get_sfn_display_name: Get display name for SFN entry
//-----------------------------------------------------------------------------
int fatfs_get_sfn_display_name(char* out, char* in)
{
    int len = 0;
    while (*in && len <= 11)
8001be14:	fc 08 18 00 	cp.b	r8,lr
8001be18:	5f 1a       	srne	r10
8001be1a:	ef ea 00 0a 	and	r10,r7,r10
8001be1e:	14 97       	mov	r7,r10
8001be20:	fc 0a 18 00 	cp.b	r10,lr
8001be24:	c1 10       	breq	8001be46 <fatfs_get_sfn_display_name+0x46>
    {
        char a = *in++;

        if (a == ' ')
8001be26:	ec 08 18 00 	cp.b	r8,r6
8001be2a:	cf 10       	breq	8001be0c <fatfs_get_sfn_display_name+0xc>
        // Make lower case if uppercase
        else if ((a>='A') && (a<='Z'))
            a+= 32;

        *out++ = a;
        len++;
8001be2c:	2f f9       	sub	r9,-1

        if (a == ' ')
            continue;
        // Make lower case if uppercase
        else if ((a>='A') && (a<='Z'))
            a+= 32;
8001be2e:	f0 c7 ff e0 	sub	r7,r8,-32
        char a = *in++;

        if (a == ' ')
            continue;
        // Make lower case if uppercase
        else if ((a>='A') && (a<='Z'))
8001be32:	f0 ca 00 41 	sub	r10,r8,65
8001be36:	ea 0a 18 00 	cp.b	r10,r5
8001be3a:	e0 8b 00 04 	brhi	8001be42 <fatfs_get_sfn_display_name+0x42>
            a+= 32;
8001be3e:	f1 d7 c0 08 	bfextu	r8,r7,0x0,0x8

        *out++ = a;
8001be42:	18 c8       	st.b	r12++,r8
8001be44:	ce 4b       	rjmp	8001be0c <fatfs_get_sfn_display_name+0xc>
        len++;
    }

    *out = '\0';
8001be46:	b8 8a       	st.b	r12[0x0],r10
    return 1;
}
8001be48:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1

8001be4c <fatfs_compare_names>:
//-----------------------------------------------------------------------------
// fatfs_compare_names: Compare two filenames (without copying or changing origonals)
// Returns 1 if match, 0 if not
//-----------------------------------------------------------------------------
int fatfs_compare_names(char* strA, char* strB)
{
8001be4c:	d4 31       	pushm	r0-r7,lr
8001be4e:	20 4d       	sub	sp,16
8001be50:	18 97       	mov	r7,r12
{
    int dotPos = -1;
    char *strSrc = str;
    
    // Find last '.' in string (if at all)
    while (*strSrc)
8001be52:	19 84       	ld.ub	r4,r12[0x0]
8001be54:	58 04       	cp.w	r4,0
8001be56:	e0 80 00 e9 	breq	8001c028 <fatfs_compare_names+0x1dc>
8001be5a:	18 99       	mov	r9,r12
8001be5c:	08 9a       	mov	r10,r4
8001be5e:	30 08       	mov	r8,0
8001be60:	3f f6       	mov	r6,-1
    {
        if (*strSrc=='.')
8001be62:	32 ec       	mov	r12,46
8001be64:	f4 0c 18 00 	cp.b	r12,r10
8001be68:	f0 06 17 00 	moveq	r6,r8
            dotPos = (int)(strSrc-str);

        strSrc++;
8001be6c:	2f f9       	sub	r9,-1
{
    int dotPos = -1;
    char *strSrc = str;
    
    // Find last '.' in string (if at all)
    while (*strSrc)
8001be6e:	2f f8       	sub	r8,-1
8001be70:	13 8a       	ld.ub	r10,r9[0x0]
8001be72:	58 0a       	cp.w	r10,0
8001be74:	cf 81       	brne	8001be64 <fatfs_compare_names+0x18>
8001be76:	17 83       	ld.ub	r3,r11[0x0]
8001be78:	58 03       	cp.w	r3,0
8001be7a:	e0 80 00 d9 	breq	8001c02c <fatfs_compare_names+0x1e0>
8001be7e:	06 98       	mov	r8,r3
8001be80:	16 9a       	mov	r10,r11
8001be82:	30 09       	mov	r9,0
8001be84:	3f f5       	mov	r5,-1
    {
        if (*strSrc=='.')
8001be86:	32 ec       	mov	r12,46
8001be88:	f0 0c 18 00 	cp.b	r12,r8
8001be8c:	f2 05 17 00 	moveq	r5,r9
            dotPos = (int)(strSrc-str);

        strSrc++;
8001be90:	2f fa       	sub	r10,-1
{
    int dotPos = -1;
    char *strSrc = str;
    
    // Find last '.' in string (if at all)
    while (*strSrc)
8001be92:	2f f9       	sub	r9,-1
8001be94:	15 88       	ld.ub	r8,r10[0x0]
8001be96:	58 08       	cp.w	r8,0
8001be98:	cf 81       	brne	8001be88 <fatfs_compare_names+0x3c>
    ext2Pos = FileString_GetExtension(strB);

    // NOTE: Extension position can be different for matching 
    // filename if trailing space are present before it!
    // Check that if one has an extension, so does the other
    if ((ext1Pos==-1) && (ext2Pos!=-1))
8001be9a:	5b f5       	cp.w	r5,-1
8001be9c:	5f 1a       	srne	r10
8001be9e:	5b f6       	cp.w	r6,-1
8001bea0:	5f 09       	sreq	r9
8001bea2:	f5 e9 00 09 	and	r9,r10,r9
8001bea6:	f0 09 18 00 	cp.b	r9,r8
8001beaa:	c1 e1       	brne	8001bee6 <fatfs_compare_names+0x9a>
8001beac:	5b f5       	cp.w	r5,-1
8001beae:	5f 09       	sreq	r9
        return 0;
    if ((ext2Pos==-1) && (ext1Pos!=-1))
8001beb0:	5b f6       	cp.w	r6,-1
8001beb2:	5f 18       	srne	r8
8001beb4:	10 69       	and	r9,r8
8001beb6:	c1 81       	brne	8001bee6 <fatfs_compare_names+0x9a>
        return 0;

    // If they both have extensions, compare them
    if (ext1Pos!=-1)
8001beb8:	58 08       	cp.w	r8,0
8001beba:	c4 c0       	breq	8001bf52 <fatfs_compare_names+0x106>
    {
        // Set pointer to start of extension
        ext1 = strA+ext1Pos+1;
        ext2 = strB+ext2Pos+1;
8001bebc:	ea c8 ff ff 	sub	r8,r5,-1

        // Verify that the file extension lengths match!
        if (strlen(ext1) != strlen(ext2))
8001bec0:	50 0b       	stdsp	sp[0x0],r11
    // If they both have extensions, compare them
    if (ext1Pos!=-1)
    {
        // Set pointer to start of extension
        ext1 = strA+ext1Pos+1;
        ext2 = strB+ext2Pos+1;
8001bec2:	f6 08 00 00 	add	r0,r11,r8

    // If they both have extensions, compare them
    if (ext1Pos!=-1)
    {
        // Set pointer to start of extension
        ext1 = strA+ext1Pos+1;
8001bec6:	ec c1 ff ff 	sub	r1,r6,-1
8001beca:	50 26       	stdsp	sp[0x8],r6
8001becc:	ee 01 00 01 	add	r1,r7,r1
        ext2 = strB+ext2Pos+1;
8001bed0:	50 15       	stdsp	sp[0x4],r5

        // Verify that the file extension lengths match!
        if (strlen(ext1) != strlen(ext2))
8001bed2:	02 9c       	mov	r12,r1
8001bed4:	e0 a0 2a 99 	rcall	80021406 <strlen>
8001bed8:	18 92       	mov	r2,r12
8001beda:	00 9c       	mov	r12,r0
8001bedc:	e0 a0 2a 95 	rcall	80021406 <strlen>
8001bee0:	40 0b       	lddsp	r11,sp[0x0]
8001bee2:	18 32       	cp.w	r2,r12
8001bee4:	c0 40       	breq	8001beec <fatfs_compare_names+0xa0>
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
    int diff;
    char a,b;

    while (n--)
8001bee6:	30 0c       	mov	r12,0
    // Compare main part of filenames
    if (FileString_StrCmpNoCase(strA, strB, file1Len)!=0)
        return 0;
    else
        return 1;
}
8001bee8:	2f cd       	sub	sp,-16
8001beea:	d8 32       	popm	r0-r7,pc
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
    int diff;
    char a,b;

    while (n--)
8001beec:	58 02       	cp.w	r2,0
8001beee:	e0 80 00 a3 	breq	8001c034 <fatfs_compare_names+0x1e8>
8001bef2:	30 08       	mov	r8,0
    {
        a = *s1;
        b = *s2;

        // Make lower case if uppercase
        if ((a>='A') && (a<='Z'))
8001bef4:	31 9c       	mov	r12,25
8001bef6:	50 34       	stdsp	sp[0xc],r4
8001bef8:	c1 68       	rjmp	8001bf24 <fatfs_compare_names+0xd8>
8001befa:	12 94       	mov	r4,r9
            a+= 32;
        if ((b>='A') && (b<='Z'))
8001befc:	f4 ce 00 41 	sub	lr,r10,65
8001bf00:	f8 0e 18 00 	cp.b	lr,r12
8001bf04:	e0 88 00 23 	brls	8001bf4a <fatfs_compare_names+0xfe>
8001bf08:	14 9e       	mov	lr,r10
            b+= 32;

        diff = a - b;
8001bf0a:	e8 0e 01 0e 	sub	lr,r4,lr

        // If different
        if (diff)
8001bf0e:	ce c1       	brne	8001bee6 <fatfs_compare_names+0x9a>
            return diff;
        
        // If run out of strings
        if ( (*s1 == 0) || (*s2 == 0) )
8001bf10:	58 09       	cp.w	r9,0
8001bf12:	e0 80 00 90 	breq	8001c032 <fatfs_compare_names+0x1e6>
8001bf16:	58 0a       	cp.w	r10,0
8001bf18:	e0 80 00 8d 	breq	8001c032 <fatfs_compare_names+0x1e6>
8001bf1c:	2f f8       	sub	r8,-1
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
    int diff;
    char a,b;

    while (n--)
8001bf1e:	10 32       	cp.w	r2,r8
8001bf20:	e0 80 00 89 	breq	8001c032 <fatfs_compare_names+0x1e6>
    {
        a = *s1;
8001bf24:	e2 08 07 09 	ld.ub	r9,r1[r8]
        b = *s2;
8001bf28:	e0 08 07 0a 	ld.ub	r10,r0[r8]

        // Make lower case if uppercase
        if ((a>='A') && (a<='Z'))
8001bf2c:	f2 ce 00 41 	sub	lr,r9,65
8001bf30:	f8 0e 18 00 	cp.b	lr,r12
8001bf34:	fe 9b ff e3 	brhi	8001befa <fatfs_compare_names+0xae>
            a+= 32;
8001bf38:	f2 c4 ff e0 	sub	r4,r9,-32
        if ((b>='A') && (b<='Z'))
8001bf3c:	f4 ce 00 41 	sub	lr,r10,65
        a = *s1;
        b = *s2;

        // Make lower case if uppercase
        if ((a>='A') && (a<='Z'))
            a+= 32;
8001bf40:	5c 54       	castu.b	r4
        if ((b>='A') && (b<='Z'))
8001bf42:	f8 0e 18 00 	cp.b	lr,r12
8001bf46:	fe 9b ff e1 	brhi	8001bf08 <fatfs_compare_names+0xbc>
            b+= 32;
8001bf4a:	f4 ce ff e0 	sub	lr,r10,-32
8001bf4e:	5c 5e       	castu.b	lr
8001bf50:	cd db       	rjmp	8001bf0a <fatfs_compare_names+0xbe>
    }
    // No extensions
    else
    {
        // Filelength is actual filelength
        file1Len = (int)strlen(strA);
8001bf52:	50 0b       	stdsp	sp[0x0],r11
8001bf54:	0e 9c       	mov	r12,r7
8001bf56:	e0 a0 2a 58 	rcall	80021406 <strlen>
        file2Len = (int)strlen(strB);
8001bf5a:	40 0b       	lddsp	r11,sp[0x0]
    }
    // No extensions
    else
    {
        // Filelength is actual filelength
        file1Len = (int)strlen(strA);
8001bf5c:	18 96       	mov	r6,r12
        file2Len = (int)strlen(strB);
8001bf5e:	16 9c       	mov	r12,r11
8001bf60:	50 26       	stdsp	sp[0x8],r6
8001bf62:	e0 a0 2a 52 	rcall	80021406 <strlen>
8001bf66:	40 0b       	lddsp	r11,sp[0x0]
8001bf68:	50 1c       	stdsp	sp[0x4],r12
{
    int length = strLen;
    char *strSrc = str+strLen-1;
    
    // Find last non white space
    while (strLen != 0)
8001bf6a:	58 06       	cp.w	r6,0
8001bf6c:	c1 60       	breq	8001bf98 <fatfs_compare_names+0x14c>
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_TrimLength(char *str, int strLen)
{
    int length = strLen;
    char *strSrc = str+strLen-1;
8001bf6e:	40 29       	lddsp	r9,sp[0x8]
    
    // Find last non white space
    while (strLen != 0)
    {
        if (*strSrc == ' ')
8001bf70:	32 08       	mov	r8,32
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_TrimLength(char *str, int strLen)
{
    int length = strLen;
    char *strSrc = str+strLen-1;
8001bf72:	20 19       	sub	r9,1
8001bf74:	ee 09 00 09 	add	r9,r7,r9
    
    // Find last non white space
    while (strLen != 0)
    {
        if (*strSrc == ' ')
8001bf78:	13 85       	ld.ub	r5,r9[0x0]
8001bf7a:	f0 05 18 00 	cp.b	r5,r8
8001bf7e:	c0 d1       	brne	8001bf98 <fatfs_compare_names+0x14c>
8001bf80:	f2 07 01 08 	sub	r8,r9,r7
8001bf84:	c0 68       	rjmp	8001bf90 <fatfs_compare_names+0x144>
            length = (int)(strSrc - str);
        else
            break;

        strSrc--;
8001bf86:	20 18       	sub	r8,1
    char *strSrc = str+strLen-1;
    
    // Find last non white space
    while (strLen != 0)
    {
        if (*strSrc == ' ')
8001bf88:	13 7a       	ld.ub	r10,--r9
8001bf8a:	ea 0a 18 00 	cp.b	r10,r5
8001bf8e:	c0 41       	brne	8001bf96 <fatfs_compare_names+0x14a>
            length = (int)(strSrc - str);
        else
            break;

        strSrc--;
        strLen--;
8001bf90:	20 16       	sub	r6,1
    char *strSrc = str+strLen-1;
    
    // Find last non white space
    while (strLen != 0)
    {
        if (*strSrc == ' ')
8001bf92:	10 9e       	mov	lr,r8
{
    int length = strLen;
    char *strSrc = str+strLen-1;
    
    // Find last non white space
    while (strLen != 0)
8001bf94:	cf 91       	brne	8001bf86 <fatfs_compare_names+0x13a>
8001bf96:	1c 96       	mov	r6,lr
8001bf98:	58 0c       	cp.w	r12,0
8001bf9a:	c1 60       	breq	8001bfc6 <fatfs_compare_names+0x17a>
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_TrimLength(char *str, int strLen)
{
    int length = strLen;
    char *strSrc = str+strLen-1;
8001bf9c:	40 19       	lddsp	r9,sp[0x4]
    
    // Find last non white space
    while (strLen != 0)
    {
        if (*strSrc == ' ')
8001bf9e:	32 08       	mov	r8,32
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_TrimLength(char *str, int strLen)
{
    int length = strLen;
    char *strSrc = str+strLen-1;
8001bfa0:	20 19       	sub	r9,1
8001bfa2:	f6 09 00 09 	add	r9,r11,r9
    
    // Find last non white space
    while (strLen != 0)
    {
        if (*strSrc == ' ')
8001bfa6:	13 85       	ld.ub	r5,r9[0x0]
8001bfa8:	f0 05 18 00 	cp.b	r5,r8
8001bfac:	c0 d1       	brne	8001bfc6 <fatfs_compare_names+0x17a>
8001bfae:	f2 0b 01 08 	sub	r8,r9,r11
8001bfb2:	c0 68       	rjmp	8001bfbe <fatfs_compare_names+0x172>
            length = (int)(strSrc - str);
        else
            break;

        strSrc--;
8001bfb4:	20 18       	sub	r8,1
    char *strSrc = str+strLen-1;
    
    // Find last non white space
    while (strLen != 0)
    {
        if (*strSrc == ' ')
8001bfb6:	13 7a       	ld.ub	r10,--r9
8001bfb8:	ea 0a 18 00 	cp.b	r10,r5
8001bfbc:	c0 41       	brne	8001bfc4 <fatfs_compare_names+0x178>
            length = (int)(strSrc - str);
        else
            break;

        strSrc--;
        strLen--;
8001bfbe:	20 1c       	sub	r12,1
    char *strSrc = str+strLen-1;
    
    // Find last non white space
    while (strLen != 0)
    {
        if (*strSrc == ' ')
8001bfc0:	10 9e       	mov	lr,r8
{
    int length = strLen;
    char *strSrc = str+strLen-1;
    
    // Find last non white space
    while (strLen != 0)
8001bfc2:	cf 91       	brne	8001bfb4 <fatfs_compare_names+0x168>
8001bfc4:	1c 9c       	mov	r12,lr
    // Find length without trailing spaces (before ext)
    file1Len = FileString_TrimLength(strA, file1Len);
    file2Len = FileString_TrimLength(strB, file2Len);

    // Check the file lengths match
    if (file1Len!=file2Len)
8001bfc6:	18 36       	cp.w	r6,r12
8001bfc8:	c8 f1       	brne	8001bee6 <fatfs_compare_names+0x9a>
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
    int diff;
    char a,b;

    while (n--)
8001bfca:	58 06       	cp.w	r6,0
8001bfcc:	c3 60       	breq	8001c038 <fatfs_compare_names+0x1ec>
8001bfce:	30 08       	mov	r8,0
    {
        a = *s1;
        b = *s2;

        // Make lower case if uppercase
        if ((a>='A') && (a<='Z'))
8001bfd0:	31 99       	mov	r9,25
8001bfd2:	c1 88       	rjmp	8001c002 <fatfs_compare_names+0x1b6>
8001bfd4:	08 9c       	mov	r12,r4
            a+= 32;
        if ((b>='A') && (b<='Z'))
8001bfd6:	e6 ca 00 41 	sub	r10,r3,65
8001bfda:	f2 0a 18 00 	cp.b	r10,r9
8001bfde:	e0 88 00 21 	brls	8001c020 <fatfs_compare_names+0x1d4>
8001bfe2:	06 9a       	mov	r10,r3
            b+= 32;

        diff = a - b;

        // If different
        if (diff)
8001bfe4:	f4 0c 18 00 	cp.b	r12,r10
8001bfe8:	fe 91 ff 7f 	brne	8001bee6 <fatfs_compare_names+0x9a>
            return diff;
        
        // If run out of strings
        if ( (*s1 == 0) || (*s2 == 0) )
8001bfec:	58 04       	cp.w	r4,0
8001bfee:	c2 50       	breq	8001c038 <fatfs_compare_names+0x1ec>
8001bff0:	58 03       	cp.w	r3,0
8001bff2:	c2 30       	breq	8001c038 <fatfs_compare_names+0x1ec>
8001bff4:	2f f8       	sub	r8,-1
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
    int diff;
    char a,b;

    while (n--)
8001bff6:	10 36       	cp.w	r6,r8
8001bff8:	c2 00       	breq	8001c038 <fatfs_compare_names+0x1ec>
8001bffa:	ee 08 07 04 	ld.ub	r4,r7[r8]
8001bffe:	f6 08 07 03 	ld.ub	r3,r11[r8]
    {
        a = *s1;
        b = *s2;

        // Make lower case if uppercase
        if ((a>='A') && (a<='Z'))
8001c002:	08 9a       	mov	r10,r4
8001c004:	24 1a       	sub	r10,65
8001c006:	f2 0a 18 00 	cp.b	r10,r9
8001c00a:	fe 9b ff e5 	brhi	8001bfd4 <fatfs_compare_names+0x188>
            a+= 32;
8001c00e:	08 9c       	mov	r12,r4
        if ((b>='A') && (b<='Z'))
8001c010:	e6 ca 00 41 	sub	r10,r3,65
        a = *s1;
        b = *s2;

        // Make lower case if uppercase
        if ((a>='A') && (a<='Z'))
            a+= 32;
8001c014:	2e 0c       	sub	r12,-32
8001c016:	5c 5c       	castu.b	r12
        if ((b>='A') && (b<='Z'))
8001c018:	f2 0a 18 00 	cp.b	r10,r9
8001c01c:	fe 9b ff e3 	brhi	8001bfe2 <fatfs_compare_names+0x196>
            b+= 32;
8001c020:	e6 ca ff e0 	sub	r10,r3,-32
8001c024:	5c 5a       	castu.b	r10
8001c026:	cd fb       	rjmp	8001bfe4 <fatfs_compare_names+0x198>
{
    int dotPos = -1;
    char *strSrc = str;
    
    // Find last '.' in string (if at all)
    while (*strSrc)
8001c028:	3f f6       	mov	r6,-1
8001c02a:	c2 6b       	rjmp	8001be76 <fatfs_compare_names+0x2a>
8001c02c:	30 19       	mov	r9,1
8001c02e:	3f f5       	mov	r5,-1
8001c030:	c4 0b       	rjmp	8001beb0 <fatfs_compare_names+0x64>
8001c032:	40 34       	lddsp	r4,sp[0xc]
    // No extensions
    else
    {
        // Filelength is actual filelength
        file1Len = (int)strlen(strA);
        file2Len = (int)strlen(strB);
8001c034:	0a 9c       	mov	r12,r5
8001c036:	c9 ab       	rjmp	8001bf6a <fatfs_compare_names+0x11e>
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
    int diff;
    char a,b;

    while (n--)
8001c038:	30 1c       	mov	r12,1
8001c03a:	c5 7b       	rjmp	8001bee8 <fatfs_compare_names+0x9c>

8001c03c <fatfs_get_substring>:
8001c03c:	eb cd 40 f8 	pushm	r3-r7,lr
// (or file) at the specified level.
// E.g. C:\folder\file.zip : Level 0 = C:\folder, Level 1 = file.zip
// Returns: -1 = Error, 0 = Ok
//-----------------------------------------------------------------------------
int fatfs_get_substring(char *path, int levelreq, char *output, int max_len)
{
8001c040:	20 3d       	sub	sp,12
    int pathlen=0;
    int levels=0;
    int copypnt=0;
    char expectedchar;

    if (!path || max_len <= 0)
8001c042:	58 0c       	cp.w	r12,0
8001c044:	5f 08       	sreq	r8
8001c046:	58 09       	cp.w	r9,0
8001c048:	5f a7       	srle	r7
8001c04a:	ef e8 10 08 	or	r8,r7,r8
8001c04e:	c4 61       	brne	8001c0da <fatfs_get_substring+0x9e>
        return -1;

    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
8001c050:	19 8e       	ld.ub	lr,r12[0x0]
8001c052:	32 f8       	mov	r8,47
8001c054:	f0 0e 18 00 	cp.b	lr,r8
8001c058:	c4 40       	breq	8001c0e0 <fatfs_get_substring+0xa4>
    {
        expectedchar = '/';
        path++;
    }
    else if (path[1] == ':' || path[2] == '\\')
8001c05a:	19 9e       	ld.ub	lr,r12[0x1]
8001c05c:	33 a8       	mov	r8,58
8001c05e:	f0 0e 18 00 	cp.b	lr,r8
8001c062:	c3 71       	brne	8001c0d0 <fatfs_get_substring+0x94>
    {
        expectedchar = '\\';
        path += 3;
8001c064:	f8 c6 ff fd 	sub	r6,r12,-3
8001c068:	35 c7       	mov	r7,92
    }
    else
        return -1;

    // Get string length of path
    pathlen = (int)strlen (path);
8001c06a:	50 2b       	stdsp	sp[0x8],r11
8001c06c:	50 1a       	stdsp	sp[0x4],r10
8001c06e:	50 09       	stdsp	sp[0x0],r9
8001c070:	0c 9c       	mov	r12,r6
8001c072:	e0 a0 29 ca 	rcall	80021406 <strlen>

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
8001c076:	40 2b       	lddsp	r11,sp[0x8]
8001c078:	40 1a       	lddsp	r10,sp[0x4]
8001c07a:	40 09       	lddsp	r9,sp[0x0]
8001c07c:	e0 8a 00 36 	brle	8001c0e8 <fatfs_get_substring+0xac>
8001c080:	30 04       	mov	r4,0
    {
        // If a '\' is found then increase level
        if (*path == expectedchar) levels++;

        // If correct level and the character is not a '\' or '/' then copy text to 'output'
        if ( (levels == levelreq) && (*path != expectedchar) && (copypnt < (max_len-1))) 
8001c082:	20 19       	sub	r9,1

    // Get string length of path
    pathlen = (int)strlen (path);

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
8001c084:	08 95       	mov	r5,r4
8001c086:	08 98       	mov	r8,r4
8001c088:	c0 48       	rjmp	8001c090 <fatfs_get_substring+0x54>
8001c08a:	2f f8       	sub	r8,-1
8001c08c:	10 3c       	cp.w	r12,r8
8001c08e:	c1 70       	breq	8001c0bc <fatfs_get_substring+0x80>
    {
        // If a '\' is found then increase level
        if (*path == expectedchar) levels++;
8001c090:	ec 08 07 0e 	ld.ub	lr,r6[r8]
8001c094:	0e 93       	mov	r3,r7
8001c096:	ee 0e 18 00 	cp.b	lr,r7
8001c09a:	f7 b5 00 ff 	subeq	r5,-1

        // If correct level and the character is not a '\' or '/' then copy text to 'output'
        if ( (levels == levelreq) && (*path != expectedchar) && (copypnt < (max_len-1))) 
8001c09e:	16 35       	cp.w	r5,r11
8001c0a0:	cf 51       	brne	8001c08a <fatfs_get_substring+0x4e>
8001c0a2:	0e 93       	mov	r3,r7
8001c0a4:	fc 07 18 00 	cp.b	r7,lr
8001c0a8:	cf 10       	breq	8001c08a <fatfs_get_substring+0x4e>
8001c0aa:	08 39       	cp.w	r9,r4
8001c0ac:	fe 9a ff ef 	brle	8001c08a <fatfs_get_substring+0x4e>
            output[copypnt++] = *path;
8001c0b0:	f4 04 0b 0e 	st.b	r10[r4],lr

    // Get string length of path
    pathlen = (int)strlen (path);

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
8001c0b4:	2f f8       	sub	r8,-1
        // If a '\' is found then increase level
        if (*path == expectedchar) levels++;

        // If correct level and the character is not a '\' or '/' then copy text to 'output'
        if ( (levels == levelreq) && (*path != expectedchar) && (copypnt < (max_len-1))) 
            output[copypnt++] = *path;
8001c0b6:	2f f4       	sub	r4,-1

    // Get string length of path
    pathlen = (int)strlen (path);

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
8001c0b8:	10 3c       	cp.w	r12,r8
8001c0ba:	ce b1       	brne	8001c090 <fatfs_get_substring+0x54>
        // Increment through path string
        path++;
    }

    // Null Terminate
    output[copypnt] = '\0';
8001c0bc:	30 08       	mov	r8,0
8001c0be:	f4 04 0b 08 	st.b	r10[r4],r8

    // If a string was copied return 0 else return 1
    if (output[0] != '\0') 
8001c0c2:	15 89       	ld.ub	r9,r10[0x0]
8001c0c4:	f0 09 18 00 	cp.b	r9,r8
8001c0c8:	c0 90       	breq	8001c0da <fatfs_get_substring+0x9e>
8001c0ca:	2f dd       	sub	sp,-12
8001c0cc:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
    if (*path == '/')
    {
        expectedchar = '/';
        path++;
    }
    else if (path[1] == ':' || path[2] == '\\')
8001c0d0:	19 ae       	ld.ub	lr,r12[0x2]
8001c0d2:	35 c8       	mov	r8,92
8001c0d4:	f0 0e 18 00 	cp.b	lr,r8
8001c0d8:	cc 60       	breq	8001c064 <fatfs_get_substring+0x28>

    // Null Terminate
    output[copypnt] = '\0';

    // If a string was copied return 0 else return 1
    if (output[0] != '\0') 
8001c0da:	2f dd       	sub	sp,-12
8001c0dc:	e3 cf c0 f8 	ldm	sp++,r3-r7,pc,r12=-1
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
    {
        expectedchar = '/';
        path++;
8001c0e0:	f8 c6 ff ff 	sub	r6,r12,-1
8001c0e4:	32 f7       	mov	r7,47
8001c0e6:	cc 2b       	rjmp	8001c06a <fatfs_get_substring+0x2e>

    // Get string length of path
    pathlen = (int)strlen (path);

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
8001c0e8:	30 04       	mov	r4,0
8001c0ea:	ce 9b       	rjmp	8001c0bc <fatfs_get_substring+0x80>

8001c0ec <fatfs_split_path>:
8001c0ec:	eb cd 40 fc 	pushm	r2-r7,lr
// Returned is the path string and file Name string
// E.g. C:\folder\file.zip -> path = C:\folder  filename = file.zip
// E.g. C:\file.zip -> path = [blank]  filename = file.zip
//-----------------------------------------------------------------------------
int fatfs_split_path(char *full_path, char *path, int max_path, char *filename, int max_filename)
{
8001c0f0:	18 97       	mov	r7,r12
8001c0f2:	16 95       	mov	r5,r11
8001c0f4:	14 93       	mov	r3,r10
8001c0f6:	12 96       	mov	r6,r9
int fatfs_total_path_levels(char *path)
{
    int levels = 0;
    char expectedchar;

    if (!path)
8001c0f8:	58 0c       	cp.w	r12,0
8001c0fa:	c4 60       	breq	8001c186 <fatfs_split_path+0x9a>
        return -1;

    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
8001c0fc:	19 8b       	ld.ub	r11,r12[0x0]
8001c0fe:	32 fa       	mov	r10,47
8001c100:	f4 0b 18 00 	cp.b	r11,r10
8001c104:	c4 30       	breq	8001c18a <fatfs_split_path+0x9e>
    {
        expectedchar = '/';
        path++;
    }
    else if (path[1] == ':' || path[2] == '\\')
8001c106:	19 9a       	ld.ub	r10,r12[0x1]
8001c108:	33 a9       	mov	r9,58
8001c10a:	f2 0a 18 00 	cp.b	r10,r9
8001c10e:	c3 71       	brne	8001c17c <fatfs_split_path+0x90>
    {
        expectedchar = '\\';
        path += 3;
8001c110:	ee ca ff fd 	sub	r10,r7,-3
8001c114:	35 cc       	mov	r12,92
    }
    else
        return -1;

    // Count levels in path string
    while (*path)
8001c116:	15 8b       	ld.ub	r11,r10[0x0]
8001c118:	58 0b       	cp.w	r11,0
8001c11a:	c3 60       	breq	8001c186 <fatfs_split_path+0x9a>
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
8001c11c:	30 04       	mov	r4,0
8001c11e:	c0 58       	rjmp	8001c128 <fatfs_split_path+0x3c>
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
            path++;
8001c120:	2f fa       	sub	r10,-1

    // Count levels in path string
    while (*path)
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
8001c122:	15 8b       	ld.ub	r11,r10[0x0]
8001c124:	58 0b       	cp.w	r11,0
8001c126:	c0 a0       	breq	8001c13a <fatfs_split_path+0x4e>
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
8001c128:	f8 0b 18 00 	cp.b	r11,r12
8001c12c:	cf a1       	brne	8001c120 <fatfs_split_path+0x34>
8001c12e:	2f fa       	sub	r10,-1
            path++;
        }
    
        // Increase number of subdirs founds
        levels++;
8001c130:	2f f4       	sub	r4,-1
    }
    else
        return -1;

    // Count levels in path string
    while (*path)
8001c132:	15 8b       	ld.ub	r11,r10[0x0]
8001c134:	58 0b       	cp.w	r11,0
8001c136:	cf 91       	brne	8001c128 <fatfs_split_path+0x3c>
8001c138:	c0 28       	rjmp	8001c13c <fatfs_split_path+0x50>
            if (*path == expectedchar) { path++; break; }
            path++;
        }
    
        // Increase number of subdirs founds
        levels++;
8001c13a:	2f f4       	sub	r4,-1
    }
    
    // Subtract the file itself
    return levels-1;
8001c13c:	20 14       	sub	r4,1
    int levels = fatfs_total_path_levels(full_path);
    if (levels == -1)
        return -1;

    // Get filename part of string
    if (fatfs_get_substring(full_path, levels, filename, max_filename) != 0)
8001c13e:	10 99       	mov	r9,r8
8001c140:	0c 9a       	mov	r10,r6
8001c142:	08 9b       	mov	r11,r4
8001c144:	0e 9c       	mov	r12,r7
8001c146:	c7 bf       	rcall	8001c03c <fatfs_get_substring>
8001c148:	18 92       	mov	r2,r12
8001c14a:	c1 e1       	brne	8001c186 <fatfs_split_path+0x9a>
8001c14c:	58 04       	cp.w	r4,0
        return -1;

    // If root file
    if (levels == 0)
8001c14e:	c2 20       	breq	8001c192 <fatfs_split_path+0xa6>
8001c150:	0e 9c       	mov	r12,r7
        path[0] = '\0';
    else
    {
        strindex = (int)strlen(full_path) - (int)strlen(filename);
8001c152:	e0 a0 29 5a 	rcall	80021406 <strlen>
8001c156:	18 94       	mov	r4,r12
8001c158:	0c 9c       	mov	r12,r6
8001c15a:	e0 a0 29 56 	rcall	80021406 <strlen>
8001c15e:	e8 0c 01 0c 	sub	r12,r4,r12
8001c162:	0e 9b       	mov	r11,r7
        if (strindex > max_path)
            strindex = max_path;

        memcpy(path, full_path, strindex);
8001c164:	f8 03 0d 43 	min	r3,r12,r3
8001c168:	0a 9c       	mov	r12,r5
8001c16a:	06 9a       	mov	r10,r3
8001c16c:	e0 a0 28 32 	rcall	800211d0 <memcpy>
8001c170:	06 05       	add	r5,r3
        path[strindex-1] = '\0';
8001c172:	04 9c       	mov	r12,r2
8001c174:	eb 62 ff ff 	st.b	r5[-1],r2
8001c178:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
8001c17c:	19 aa       	ld.ub	r10,r12[0x2]
    if (*path == '/')
    {
        expectedchar = '/';
        path++;
    }
    else if (path[1] == ':' || path[2] == '\\')
8001c17e:	35 c9       	mov	r9,92
8001c180:	f2 0a 18 00 	cp.b	r10,r9
8001c184:	cc 60       	breq	8001c110 <fatfs_split_path+0x24>
8001c186:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
        strindex = (int)strlen(full_path) - (int)strlen(filename);
        if (strindex > max_path)
            strindex = max_path;

        memcpy(path, full_path, strindex);
        path[strindex-1] = '\0';
8001c18a:	f8 ca ff ff 	sub	r10,r12,-1
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
    {
        expectedchar = '/';
        path++;
8001c18e:	32 fc       	mov	r12,47
8001c190:	cc 3b       	rjmp	8001c116 <fatfs_split_path+0x2a>
8001c192:	aa 84       	st.b	r5[0x0],r4
    if (fatfs_get_substring(full_path, levels, filename, max_filename) != 0)
        return -1;

    // If root file
    if (levels == 0)
        path[0] = '\0';
8001c194:	08 9c       	mov	r12,r4
8001c196:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
8001c19a:	d7 03       	nop

8001c19c <fatfs_fat_writeback>:
}
//-----------------------------------------------------------------------------
// fatfs_fat_writeback: Writeback 'dirty' FAT sectors to disk
//-----------------------------------------------------------------------------
static int fatfs_fat_writeback(struct fatfs *fs, struct fat_buffer *pcur)
{
8001c19c:	eb cd 40 80 	pushm	r7,lr
8001c1a0:	16 97       	mov	r7,r11
    if (pcur)
8001c1a2:	58 0b       	cp.w	r11,0
8001c1a4:	c1 e0       	breq	8001c1e0 <fatfs_fat_writeback+0x44>
    {
        // Writeback sector if changed
        if (pcur->dirty) 
8001c1a6:	f6 f8 02 04 	ld.w	r8,r11[516]
8001c1aa:	58 08       	cp.w	r8,0
8001c1ac:	c1 80       	breq	8001c1dc <fatfs_fat_writeback+0x40>
        {
            if (fs->disk_io.write_media)
8001c1ae:	78 e8       	ld.w	r8,r12[0x38]
8001c1b0:	58 08       	cp.w	r8,0
8001c1b2:	c1 20       	breq	8001c1d6 <fatfs_fat_writeback+0x3a>
            {
                uint32 sectors = FAT_BUFFER_SECTORS;
                uint32 offset = pcur->address - fs->fat_begin_lba;

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
8001c1b4:	78 8b       	ld.w	r11,r12[0x20]
        if (pcur->dirty) 
        {
            if (fs->disk_io.write_media)
            {
                uint32 sectors = FAT_BUFFER_SECTORS;
                uint32 offset = pcur->address - fs->fat_begin_lba;
8001c1b6:	ee f9 02 00 	ld.w	r9,r7[512]
8001c1ba:	78 5a       	ld.w	r10,r12[0x14]
8001c1bc:	f2 0a 01 0a 	sub	r10,r9,r10

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
8001c1c0:	f4 cc ff ff 	sub	r12,r10,-1
8001c1c4:	16 3c       	cp.w	r12,r11
8001c1c6:	f9 ba 08 01 	movls	r10,1
                    sectors = FAT_BUFFER_SECTORS;
                else
                    sectors = fs->fat_sectors - offset;
8001c1ca:	f7 da eb 1a 	subhi	r10,r11,r10

                if (!fs->disk_io.write_media(pcur->address, pcur->sector, sectors))
8001c1ce:	12 9c       	mov	r12,r9
8001c1d0:	0e 9b       	mov	r11,r7
8001c1d2:	5d 18       	icall	r8
8001c1d4:	c0 60       	breq	8001c1e0 <fatfs_fat_writeback+0x44>
                    return 0;
            }
                
            pcur->dirty = 0;
8001c1d6:	30 08       	mov	r8,0
8001c1d8:	ef 48 02 04 	st.w	r7[516],r8
8001c1dc:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
8001c1e0:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0

8001c1e4 <fatfs_set_fs_info_next_free_cluster>:
} 
//-----------------------------------------------------------------------------
// fatfs_set_fs_info_next_free_cluster: Write the next free cluster to the FSINFO table
//-----------------------------------------------------------------------------
void fatfs_set_fs_info_next_free_cluster(struct fatfs *fs, uint32 newValue)
{
8001c1e4:	d4 21       	pushm	r4-r7,lr
8001c1e6:	18 96       	mov	r6,r12
8001c1e8:	16 95       	mov	r5,r11
    if (fs->fat_type == FAT_TYPE_16)
8001c1ea:	78 c8       	ld.w	r8,r12[0x30]
8001c1ec:	58 08       	cp.w	r8,0
8001c1ee:	c0 21       	brne	8001c1f2 <fatfs_set_fs_info_next_free_cluster+0xe>
8001c1f0:	d8 22       	popm	r4-r7,pc
        ;
    else
    {
        // Load sector to change it
        struct fat_buffer *pbuf = fatfs_fat_read_sector(fs, fs->lba_begin+fs->fs_info_sector);
8001c1f2:	f9 14 00 18 	ld.uh	r4,r12[24]
8001c1f6:	78 78       	ld.w	r8,r12[0x1c]
// fatfs_fat_read_sector: Read a FAT sector
//-----------------------------------------------------------------------------
static struct fat_buffer *fatfs_fat_read_sector(struct fatfs *fs, uint32 sector)
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;
8001c1f8:	f8 f7 02 54 	ld.w	r7,r12[596]
    if (fs->fat_type == FAT_TYPE_16)
        ;
    else
    {
        // Load sector to change it
        struct fat_buffer *pbuf = fatfs_fat_read_sector(fs, fs->lba_begin+fs->fs_info_sector);
8001c1fc:	10 04       	add	r4,r8
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001c1fe:	58 07       	cp.w	r7,0
8001c200:	c6 00       	breq	8001c2c0 <fatfs_set_fs_info_next_free_cluster+0xdc>
8001c202:	30 09       	mov	r9,0
8001c204:	c0 38       	rjmp	8001c20a <fatfs_set_fs_info_next_free_cluster+0x26>
8001c206:	0e 99       	mov	r9,r7
8001c208:	10 97       	mov	r7,r8
    {
        // Sector within this buffer?
        if ((sector >= pcur->address) && (sector < (pcur->address + FAT_BUFFER_SECTORS)))
8001c20a:	ee f8 02 00 	ld.w	r8,r7[512]
8001c20e:	10 34       	cp.w	r4,r8
8001c210:	c0 53       	brcs	8001c21a <fatfs_set_fs_info_next_free_cluster+0x36>
8001c212:	f0 ca ff ff 	sub	r10,r8,-1
8001c216:	14 34       	cp.w	r4,r10
8001c218:	c4 93       	brcs	8001c2aa <fatfs_set_fs_info_next_free_cluster+0xc6>
            break;

        // End of list?
        if (pcur->next == NULL)
8001c21a:	ee f8 02 0c 	ld.w	r8,r7[524]
8001c21e:	58 08       	cp.w	r8,0
8001c220:	cf 31       	brne	8001c206 <fatfs_set_fs_info_next_free_cluster+0x22>
        {
            // Remove buffer from list
            if (last)
                last->next = NULL;
8001c222:	58 09       	cp.w	r9,0
8001c224:	f3 f8 1a 83 	st.wne	r9[0x20c],r8
            // We the first and last buffer in the chain?
            else
                fs->fat_buffer_head = NULL;
8001c228:	ed f9 0a 95 	st.weq	r6[0x254],r9
        }

        last = pcur;
        pcur = pcur->next;
8001c22c:	ee f8 02 0c 	ld.w	r8,r7[524]
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001c230:	58 08       	cp.w	r8,0
8001c232:	ce a1       	brne	8001c206 <fatfs_set_fs_info_next_free_cluster+0x22>
8001c234:	ec f8 02 54 	ld.w	r8,r6[596]

    // Else, we removed the last item from the list
    pcur = last;

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
8001c238:	ef 48 02 0c 	st.w	r7[524],r8
    fs->fat_buffer_head = pcur;
8001c23c:	ed 47 02 54 	st.w	r6[596],r7

    // Writeback sector if changed
    if (pcur->dirty)
8001c240:	ee f8 02 04 	ld.w	r8,r7[516]
8001c244:	58 08       	cp.w	r8,0
8001c246:	c3 f1       	brne	8001c2c4 <fatfs_set_fs_info_next_free_cluster+0xe0>
        if (!fatfs_fat_writeback(fs, pcur))
            return 0;

    // Address is now new sector
    pcur->address = sector;
8001c248:	ef 44 02 00 	st.w	r7[512],r4

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
8001c24c:	08 9c       	mov	r12,r4
8001c24e:	6c d8       	ld.w	r8,r6[0x34]
8001c250:	0e 94       	mov	r4,r7
8001c252:	30 1a       	mov	r10,1
8001c254:	0e 9b       	mov	r11,r7
8001c256:	5d 18       	icall	r8
8001c258:	c3 00       	breq	8001c2b8 <fatfs_set_fs_info_next_free_cluster+0xd4>
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
        return NULL;
    }

    pcur->ptr = pcur->sector;
8001c25a:	ef 47 02 08 	st.w	r7[520],r7
        struct fat_buffer *pbuf = fatfs_fat_read_sector(fs, fs->lba_begin+fs->fs_info_sector);
        if (!pbuf)
            return ;

        // Change 
        FAT32_SET_32BIT_WORD(pbuf, 492, newValue);
8001c25e:	e9 65 01 ec 	st.b	r4[492],r5
8001c262:	ea 09 16 08 	lsr	r9,r5,0x8
8001c266:	ee f8 02 08 	ld.w	r8,r7[520]
8001c26a:	f1 69 01 ed 	st.b	r8[493],r9
8001c26e:	ea 09 16 10 	lsr	r9,r5,0x10
8001c272:	ee f8 02 08 	ld.w	r8,r7[520]
8001c276:	f1 69 01 ee 	st.b	r8[494],r9
8001c27a:	ea 09 16 18 	lsr	r9,r5,0x18
8001c27e:	ee f8 02 08 	ld.w	r8,r7[520]
8001c282:	f1 69 01 ef 	st.b	r8[495],r9
8001c286:	30 1a       	mov	r10,1
8001c288:	ef 4a 02 04 	st.w	r7[516],r10
        fs->next_free_cluster = newValue;
8001c28c:	8d 95       	st.w	r6[0x24],r5

        // Write back FSINFO sector to disk
        if (fs->disk_io.write_media)
8001c28e:	6c e8       	ld.w	r8,r6[0x38]
8001c290:	58 08       	cp.w	r8,0
8001c292:	c0 50       	breq	8001c29c <fatfs_set_fs_info_next_free_cluster+0xb8>
            fs->disk_io.write_media(pbuf->address, pbuf->sector, 1);    
8001c294:	0e 9b       	mov	r11,r7
8001c296:	ee fc 02 00 	ld.w	r12,r7[512]
8001c29a:	5d 18       	icall	r8

        // Invalidate cache entry
        pbuf->address = FAT32_INVALID_CLUSTER;
8001c29c:	3f f8       	mov	r8,-1
8001c29e:	ef 48 02 00 	st.w	r7[512],r8
        pbuf->dirty = 0;
8001c2a2:	30 08       	mov	r8,0
8001c2a4:	ef 48 02 04 	st.w	r7[516],r8
8001c2a8:	d8 22       	popm	r4-r7,pc
    }

    // We found the sector already in FAT buffer chain
    if (pcur)
    {
        pcur->ptr = (uint8 *)(pcur->sector + ((sector - pcur->address) * FAT_SECTOR_SIZE));
8001c2aa:	10 14       	sub	r4,r8
8001c2ac:	a9 74       	lsl	r4,0x9
8001c2ae:	ee 04 00 04 	add	r4,r7,r4
8001c2b2:	ef 44 02 08 	st.w	r7[520],r4
8001c2b6:	cd 4b       	rjmp	8001c25e <fatfs_set_fs_info_next_free_cluster+0x7a>

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
    {
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
8001c2b8:	3f f8       	mov	r8,-1
8001c2ba:	ef 48 02 00 	st.w	r7[512],r8
8001c2be:	d8 22       	popm	r4-r7,pc
        if (fs->disk_io.write_media)
            fs->disk_io.write_media(pbuf->address, pbuf->sector, 1);    

        // Invalidate cache entry
        pbuf->address = FAT32_INVALID_CLUSTER;
        pbuf->dirty = 0;
8001c2c0:	0e 98       	mov	r8,r7
8001c2c2:	cb bb       	rjmp	8001c238 <fatfs_set_fs_info_next_free_cluster+0x54>
    pcur->next = fs->fat_buffer_head;
    fs->fat_buffer_head = pcur;

    // Writeback sector if changed
    if (pcur->dirty)
        if (!fatfs_fat_writeback(fs, pcur))
8001c2c4:	0e 9b       	mov	r11,r7
8001c2c6:	0c 9c       	mov	r12,r6
8001c2c8:	c6 af       	rcall	8001c19c <fatfs_fat_writeback>
8001c2ca:	cb f1       	brne	8001c248 <fatfs_set_fs_info_next_free_cluster+0x64>
8001c2cc:	c9 2b       	rjmp	8001c1f0 <fatfs_set_fs_info_next_free_cluster+0xc>
8001c2ce:	d7 03       	nop

8001c2d0 <fatfs_fat_init>:
8001c2d0:	eb cd 40 e0 	pushm	r5-r7,lr
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
8001c2d4:	3f f8       	mov	r8,-1

//-----------------------------------------------------------------------------
// fatfs_fat_init:
//-----------------------------------------------------------------------------
void fatfs_fat_init(struct fatfs *fs)
{
8001c2d6:	18 97       	mov	r7,r12
    int i;

    // FAT buffer chain head
    fs->fat_buffer_head = NULL;
8001c2d8:	30 06       	mov	r6,0

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
8001c2da:	f9 48 04 58 	st.w	r12[1112],r8
void fatfs_fat_init(struct fatfs *fs)
{
    int i;

    // FAT buffer chain head
    fs->fat_buffer_head = NULL;
8001c2de:	f9 46 02 54 	st.w	r12[596],r6

    for (i=0;i<FAT_BUFFERS;i++)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
8001c2e2:	f9 46 04 5c 	st.w	r12[1116],r6
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
8001c2e6:	f8 c5 fd a8 	sub	r5,r12,-600
8001c2ea:	e0 6a 02 00 	mov	r10,512
8001c2ee:	0c 9b       	mov	r11,r6
8001c2f0:	0a 9c       	mov	r12,r5
8001c2f2:	e0 a0 28 13 	rcall	80021318 <memset>
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
8001c2f6:	ee f8 02 54 	ld.w	r8,r7[596]
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;
8001c2fa:	ef 46 04 60 	st.w	r7[1120],r6

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
        fs->fat_buffer_head = &fs->fat_buffers[i];
8001c2fe:	ef 45 02 54 	st.w	r7[596],r5
        fs->fat_buffers[i].dirty = 0;
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
        fs->fat_buffers[i].ptr = NULL;

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
8001c302:	ef 48 04 64 	st.w	r7[1124],r8
        fs->fat_buffer_head = &fs->fat_buffers[i];
    }
}
8001c306:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001c30a:	d7 03       	nop

8001c30c <fatfs_fat_purge>:
8001c30c:	eb cd 40 e0 	pushm	r5-r7,lr
}
//-----------------------------------------------------------------------------
// fatfs_fat_purge: Purge 'dirty' FAT sectors to disk
//-----------------------------------------------------------------------------
int fatfs_fat_purge(struct fatfs *fs)
{
8001c310:	18 96       	mov	r6,r12
    struct fat_buffer *pcur = fs->fat_buffer_head;
8001c312:	f8 f7 02 54 	ld.w	r7,r12[596]

    // Itterate through sector buffer list
    while (pcur)
8001c316:	58 07       	cp.w	r7,0
8001c318:	c2 30       	breq	8001c35e <fatfs_fat_purge+0x52>

                if (!fs->disk_io.write_media(pcur->address, pcur->sector, sectors))
                    return 0;
            }
                
            pcur->dirty = 0;
8001c31a:	30 05       	mov	r5,0
8001c31c:	c0 58       	rjmp	8001c326 <fatfs_fat_purge+0x1a>
        // Writeback sector if changed
        if (pcur->dirty) 
            if (!fatfs_fat_writeback(fs, pcur))
                return 0;
        
        pcur = pcur->next;
8001c31e:	ee f7 02 0c 	ld.w	r7,r7[524]
int fatfs_fat_purge(struct fatfs *fs)
{
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001c322:	58 07       	cp.w	r7,0
8001c324:	c1 d0       	breq	8001c35e <fatfs_fat_purge+0x52>
    {
        // Writeback sector if changed
        if (pcur->dirty) 
8001c326:	ee f8 02 04 	ld.w	r8,r7[516]
8001c32a:	58 08       	cp.w	r8,0
8001c32c:	cf 90       	breq	8001c31e <fatfs_fat_purge+0x12>
    if (pcur)
    {
        // Writeback sector if changed
        if (pcur->dirty) 
        {
            if (fs->disk_io.write_media)
8001c32e:	6c e8       	ld.w	r8,r6[0x38]
8001c330:	58 08       	cp.w	r8,0
8001c332:	c1 00       	breq	8001c352 <fatfs_fat_purge+0x46>
            {
                uint32 sectors = FAT_BUFFER_SECTORS;
                uint32 offset = pcur->address - fs->fat_begin_lba;

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
8001c334:	6c 89       	ld.w	r9,r6[0x20]
        if (pcur->dirty) 
        {
            if (fs->disk_io.write_media)
            {
                uint32 sectors = FAT_BUFFER_SECTORS;
                uint32 offset = pcur->address - fs->fat_begin_lba;
8001c336:	ee fc 02 00 	ld.w	r12,r7[512]
8001c33a:	6c 5b       	ld.w	r11,r6[0x14]
8001c33c:	f8 0b 01 0b 	sub	r11,r12,r11

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
                    sectors = FAT_BUFFER_SECTORS;
                else
                    sectors = fs->fat_sectors - offset;
8001c340:	f2 0b 01 0a 	sub	r10,r9,r11
            {
                uint32 sectors = FAT_BUFFER_SECTORS;
                uint32 offset = pcur->address - fs->fat_begin_lba;

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
8001c344:	2f fb       	sub	r11,-1
8001c346:	12 3b       	cp.w	r11,r9
8001c348:	f9 ba 08 01 	movls	r10,1
                    sectors = FAT_BUFFER_SECTORS;
                else
                    sectors = fs->fat_sectors - offset;

                if (!fs->disk_io.write_media(pcur->address, pcur->sector, sectors))
8001c34c:	0e 9b       	mov	r11,r7
8001c34e:	5d 18       	icall	r8
8001c350:	c0 80       	breq	8001c360 <fatfs_fat_purge+0x54>
                    return 0;
            }
                
            pcur->dirty = 0;
8001c352:	ef 45 02 04 	st.w	r7[516],r5
        // Writeback sector if changed
        if (pcur->dirty) 
            if (!fatfs_fat_writeback(fs, pcur))
                return 0;
        
        pcur = pcur->next;
8001c356:	ee f7 02 0c 	ld.w	r7,r7[524]
int fatfs_fat_purge(struct fatfs *fs)
{
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001c35a:	58 07       	cp.w	r7,0
8001c35c:	ce 51       	brne	8001c326 <fatfs_fat_purge+0x1a>
8001c35e:	30 1c       	mov	r12,1
        
        pcur = pcur->next;
    }

    return 1;
}
8001c360:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8001c364 <fatfs_find_next_cluster>:
//-----------------------------------------------------------------------------
// fatfs_find_next_cluster: Return cluster number of next cluster in chain by 
// reading FAT table and traversing it. Return 0xffffffff for end of chain.
//-----------------------------------------------------------------------------
uint32 fatfs_find_next_cluster(struct fatfs *fs, uint32 current_cluster)
{
8001c364:	eb cd 40 f8 	pushm	r3-r7,lr
8001c368:	18 96       	mov	r6,r12
    uint32 fat_sector_offset, position;
    uint32 nextcluster;
    struct fat_buffer *pbuf;

    // Why is '..' labelled with cluster 0 when it should be 2 ??
    if (current_cluster == 0) 
8001c36a:	58 0b       	cp.w	r11,0
8001c36c:	f6 03 17 10 	movne	r3,r11
8001c370:	f9 b3 00 02 	moveq	r3,2
        current_cluster = 2;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
8001c374:	78 c8       	ld.w	r8,r12[0x30]
8001c376:	58 08       	cp.w	r8,0
8001c378:	c5 a1       	brne	8001c42c <fatfs_find_next_cluster+0xc8>
        fat_sector_offset = current_cluster / 256;
8001c37a:	e6 04 16 08 	lsr	r4,r3,0x8
    else
        fat_sector_offset = current_cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001c37e:	6c 55       	ld.w	r5,r6[0x14]
// fatfs_fat_read_sector: Read a FAT sector
//-----------------------------------------------------------------------------
static struct fat_buffer *fatfs_fat_read_sector(struct fatfs *fs, uint32 sector)
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;
8001c380:	ec f7 02 54 	ld.w	r7,r6[596]
        fat_sector_offset = current_cluster / 256;
    else
        fat_sector_offset = current_cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001c384:	e8 05 00 05 	add	r5,r4,r5
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001c388:	58 07       	cp.w	r7,0
8001c38a:	c7 80       	breq	8001c47a <fatfs_find_next_cluster+0x116>
8001c38c:	30 09       	mov	r9,0
8001c38e:	c0 38       	rjmp	8001c394 <fatfs_find_next_cluster+0x30>
8001c390:	0e 99       	mov	r9,r7
8001c392:	10 97       	mov	r7,r8
    {
        // Sector within this buffer?
        if ((sector >= pcur->address) && (sector < (pcur->address + FAT_BUFFER_SECTORS)))
8001c394:	ee f8 02 00 	ld.w	r8,r7[512]
8001c398:	10 35       	cp.w	r5,r8
8001c39a:	c0 53       	brcs	8001c3a4 <fatfs_find_next_cluster+0x40>
8001c39c:	f0 ca ff ff 	sub	r10,r8,-1
8001c3a0:	14 35       	cp.w	r5,r10
8001c3a2:	c4 83       	brcs	8001c432 <fatfs_find_next_cluster+0xce>
            break;

        // End of list?
        if (pcur->next == NULL)
8001c3a4:	ee f8 02 0c 	ld.w	r8,r7[524]
8001c3a8:	58 08       	cp.w	r8,0
8001c3aa:	cf 31       	brne	8001c390 <fatfs_find_next_cluster+0x2c>
        {
            // Remove buffer from list
            if (last)
                last->next = NULL;
8001c3ac:	58 09       	cp.w	r9,0
8001c3ae:	f3 f8 1a 83 	st.wne	r9[0x20c],r8
            // We the first and last buffer in the chain?
            else
                fs->fat_buffer_head = NULL;
8001c3b2:	ed f9 0a 95 	st.weq	r6[0x254],r9
        }

        last = pcur;
        pcur = pcur->next;
8001c3b6:	ee f8 02 0c 	ld.w	r8,r7[524]
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001c3ba:	58 08       	cp.w	r8,0
8001c3bc:	ce a1       	brne	8001c390 <fatfs_find_next_cluster+0x2c>
8001c3be:	ec f8 02 54 	ld.w	r8,r6[596]

    // Else, we removed the last item from the list
    pcur = last;

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
8001c3c2:	ef 48 02 0c 	st.w	r7[524],r8
    fs->fat_buffer_head = pcur;
8001c3c6:	ed 47 02 54 	st.w	r6[596],r7

    // Writeback sector if changed
    if (pcur->dirty)
8001c3ca:	ee f8 02 04 	ld.w	r8,r7[516]
8001c3ce:	58 08       	cp.w	r8,0
8001c3d0:	c5 71       	brne	8001c47e <fatfs_find_next_cluster+0x11a>
        if (!fatfs_fat_writeback(fs, pcur))
            return 0;

    // Address is now new sector
    pcur->address = sector;
8001c3d2:	ef 45 02 00 	st.w	r7[512],r5

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
8001c3d6:	0a 9c       	mov	r12,r5
8001c3d8:	6c d8       	ld.w	r8,r6[0x34]
8001c3da:	0e 95       	mov	r5,r7
8001c3dc:	30 1a       	mov	r10,1
8001c3de:	0e 9b       	mov	r11,r7
8001c3e0:	5d 18       	icall	r8
8001c3e2:	c4 70       	breq	8001c470 <fatfs_find_next_cluster+0x10c>
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
        return NULL;
    }

    pcur->ptr = pcur->sector;
8001c3e4:	eb 47 02 08 	st.w	r5[520],r7
    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
    if (!pbuf)
        return (FAT32_LAST_CLUSTER); 

    if (fs->fat_type == FAT_TYPE_16)
8001c3e8:	6c c8       	ld.w	r8,r6[0x30]
8001c3ea:	58 08       	cp.w	r8,0
8001c3ec:	c2 c0       	breq	8001c444 <fatfs_find_next_cluster+0xe0>
    {
        // Find 32 bit entry of current sector relating to cluster number 
        position = (current_cluster - (fat_sector_offset * 128)) * 4; 

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);     
8001c3ee:	e8 08 15 07 	lsl	r8,r4,0x7
8001c3f2:	e6 08 01 08 	sub	r8,r3,r8
8001c3f6:	a3 68       	lsl	r8,0x2
8001c3f8:	5c 78       	castu.h	r8
8001c3fa:	ea 08 07 09 	ld.ub	r9,r5[r8]
8001c3fe:	10 05       	add	r5,r8
8001c400:	0b 98       	ld.ub	r8,r5[0x1]
8001c402:	a9 68       	lsl	r8,0x8
8001c404:	0b bc       	ld.ub	r12,r5[0x3]
8001c406:	0b aa       	ld.ub	r10,r5[0x2]
8001c408:	b9 6c       	lsl	r12,0x18
8001c40a:	b1 6a       	lsl	r10,0x10
8001c40c:	14 0c       	add	r12,r10
8001c40e:	12 0c       	add	r12,r9
8001c410:	10 0c       	add	r12,r8

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;        

        // If end of chain found
        if (nextcluster >= 0x0FFFFFF8 && nextcluster <= 0x0FFFFFFF) 
8001c412:	30 88       	mov	r8,8
8001c414:	ea 18 f0 00 	orh	r8,0xf000

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);     

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;        
8001c418:	f9 dc c0 1c 	bfextu	r12,r12,0x0,0x1c

        // If end of chain found
        if (nextcluster >= 0x0FFFFFF8 && nextcluster <= 0x0FFFFFFF) 
8001c41c:	f8 08 00 08 	add	r8,r12,r8
8001c420:	58 78       	cp.w	r8,7
8001c422:	e0 8b 00 25 	brhi	8001c46c <fatfs_find_next_cluster+0x108>
8001c426:	3f fc       	mov	r12,-1
            return (FAT32_LAST_CLUSTER); 
    }

    // Else return next cluster
    return (nextcluster);                         
} 
8001c428:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
        fat_sector_offset = current_cluster / 256;
    else
        fat_sector_offset = current_cluster / 128;
8001c42c:	e6 04 16 07 	lsr	r4,r3,0x7
8001c430:	ca 7b       	rjmp	8001c37e <fatfs_find_next_cluster+0x1a>
    }

    // We found the sector already in FAT buffer chain
    if (pcur)
    {
        pcur->ptr = (uint8 *)(pcur->sector + ((sector - pcur->address) * FAT_SECTOR_SIZE));
8001c432:	10 15       	sub	r5,r8
8001c434:	a9 75       	lsl	r5,0x9
8001c436:	ee 05 00 05 	add	r5,r7,r5
8001c43a:	ef 45 02 08 	st.w	r7[520],r5
    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
    if (!pbuf)
        return (FAT32_LAST_CLUSTER); 

    if (fs->fat_type == FAT_TYPE_16)
8001c43e:	6c c8       	ld.w	r8,r6[0x30]
8001c440:	58 08       	cp.w	r8,0
8001c442:	cd 61       	brne	8001c3ee <fatfs_find_next_cluster+0x8a>
    {
        // Find 32 bit entry of current sector relating to cluster number 
        position = (current_cluster - (fat_sector_offset * 256)) * 2; 

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);     
8001c444:	e8 08 15 08 	lsl	r8,r4,0x8
8001c448:	e6 08 01 08 	sub	r8,r3,r8
8001c44c:	a1 78       	lsl	r8,0x1
8001c44e:	5c 78       	castu.h	r8
8001c450:	ea 08 07 09 	ld.ub	r9,r5[r8]
8001c454:	ea 08 00 08 	add	r8,r5,r8
8001c458:	11 9c       	ld.ub	r12,r8[0x1]
8001c45a:	a9 6c       	lsl	r12,0x8
8001c45c:	12 0c       	add	r12,r9

        // If end of chain found
        if (nextcluster >= 0xFFF8 && nextcluster <= 0xFFFF) 
8001c45e:	fe 79 00 08 	mov	r9,-65528
8001c462:	f8 09 00 08 	add	r8,r12,r9
8001c466:	58 78       	cp.w	r8,7
8001c468:	fe 98 ff df 	brls	8001c426 <fatfs_find_next_cluster+0xc2>
            return (FAT32_LAST_CLUSTER); 
    }

    // Else return next cluster
    return (nextcluster);                         
} 
8001c46c:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
    {
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
8001c470:	3f fc       	mov	r12,-1
8001c472:	ef 4c 02 00 	st.w	r7[512],r12
8001c476:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;        

        // If end of chain found
        if (nextcluster >= 0x0FFFFFF8 && nextcluster <= 0x0FFFFFFF) 
8001c47a:	0e 98       	mov	r8,r7
8001c47c:	ca 3b       	rjmp	8001c3c2 <fatfs_find_next_cluster+0x5e>
    pcur->next = fs->fat_buffer_head;
    fs->fat_buffer_head = pcur;

    // Writeback sector if changed
    if (pcur->dirty)
        if (!fatfs_fat_writeback(fs, pcur))
8001c47e:	0e 9b       	mov	r11,r7
8001c480:	0c 9c       	mov	r12,r6
8001c482:	c8 de       	rcall	8001c19c <fatfs_fat_writeback>
8001c484:	ca 71       	brne	8001c3d2 <fatfs_find_next_cluster+0x6e>
8001c486:	3f fc       	mov	r12,-1

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;        

        // If end of chain found
        if (nextcluster >= 0x0FFFFFF8 && nextcluster <= 0x0FFFFFFF) 
8001c488:	cd 0b       	rjmp	8001c428 <fatfs_find_next_cluster+0xc4>
8001c48a:	d7 03       	nop

8001c48c <fatfs_fat_set_cluster>:
8001c48c:	eb cd 40 fc 	pushm	r2-r7,lr
// fatfs_fat_set_cluster: Set a cluster link in the chain. NOTE: Immediate
// write (slow).
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_fat_set_cluster(struct fatfs *fs, uint32 cluster, uint32 next_cluster)
{
8001c490:	18 96       	mov	r6,r12
8001c492:	16 93       	mov	r3,r11
8001c494:	14 95       	mov	r5,r10
    struct fat_buffer *pbuf;
    uint32 fat_sector_offset, position;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
8001c496:	78 c8       	ld.w	r8,r12[0x30]
8001c498:	58 08       	cp.w	r8,0
8001c49a:	c4 f1       	brne	8001c538 <fatfs_fat_set_cluster+0xac>
        fat_sector_offset = cluster / 256;
8001c49c:	f6 04 16 08 	lsr	r4,r11,0x8
    else
        fat_sector_offset = cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001c4a0:	6c 52       	ld.w	r2,r6[0x14]
// fatfs_fat_read_sector: Read a FAT sector
//-----------------------------------------------------------------------------
static struct fat_buffer *fatfs_fat_read_sector(struct fatfs *fs, uint32 sector)
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;
8001c4a2:	ec f7 02 54 	ld.w	r7,r6[596]
        fat_sector_offset = cluster / 256;
    else
        fat_sector_offset = cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001c4a6:	e8 02 00 02 	add	r2,r4,r2
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001c4aa:	58 07       	cp.w	r7,0
8001c4ac:	c7 70       	breq	8001c59a <fatfs_fat_set_cluster+0x10e>
8001c4ae:	30 09       	mov	r9,0
8001c4b0:	c0 38       	rjmp	8001c4b6 <fatfs_fat_set_cluster+0x2a>
8001c4b2:	0e 99       	mov	r9,r7
8001c4b4:	10 97       	mov	r7,r8
    {
        // Sector within this buffer?
        if ((sector >= pcur->address) && (sector < (pcur->address + FAT_BUFFER_SECTORS)))
8001c4b6:	ee f8 02 00 	ld.w	r8,r7[512]
8001c4ba:	10 32       	cp.w	r2,r8
8001c4bc:	c0 53       	brcs	8001c4c6 <fatfs_fat_set_cluster+0x3a>
8001c4be:	f0 ca ff ff 	sub	r10,r8,-1
8001c4c2:	14 32       	cp.w	r2,r10
8001c4c4:	c3 d3       	brcs	8001c53e <fatfs_fat_set_cluster+0xb2>
            break;

        // End of list?
        if (pcur->next == NULL)
8001c4c6:	ee f8 02 0c 	ld.w	r8,r7[524]
8001c4ca:	58 08       	cp.w	r8,0
8001c4cc:	cf 31       	brne	8001c4b2 <fatfs_fat_set_cluster+0x26>
        {
            // Remove buffer from list
            if (last)
                last->next = NULL;
8001c4ce:	58 09       	cp.w	r9,0
8001c4d0:	f3 f8 1a 83 	st.wne	r9[0x20c],r8
            // We the first and last buffer in the chain?
            else
                fs->fat_buffer_head = NULL;
8001c4d4:	ed f9 0a 95 	st.weq	r6[0x254],r9
        }

        last = pcur;
        pcur = pcur->next;
8001c4d8:	ee f8 02 0c 	ld.w	r8,r7[524]
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001c4dc:	58 08       	cp.w	r8,0
8001c4de:	ce a1       	brne	8001c4b2 <fatfs_fat_set_cluster+0x26>
8001c4e0:	ec f8 02 54 	ld.w	r8,r6[596]

    // Else, we removed the last item from the list
    pcur = last;

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
8001c4e4:	ef 48 02 0c 	st.w	r7[524],r8
    fs->fat_buffer_head = pcur;
8001c4e8:	ed 47 02 54 	st.w	r6[596],r7

    // Writeback sector if changed
    if (pcur->dirty)
8001c4ec:	ee f8 02 04 	ld.w	r8,r7[516]
8001c4f0:	58 08       	cp.w	r8,0
8001c4f2:	c5 61       	brne	8001c59e <fatfs_fat_set_cluster+0x112>
        if (!fatfs_fat_writeback(fs, pcur))
            return 0;

    // Address is now new sector
    pcur->address = sector;
8001c4f4:	ef 42 02 00 	st.w	r7[512],r2

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
8001c4f8:	04 9c       	mov	r12,r2
8001c4fa:	6c d8       	ld.w	r8,r6[0x34]
8001c4fc:	30 1a       	mov	r10,1
8001c4fe:	0e 9b       	mov	r11,r7
8001c500:	5d 18       	icall	r8
8001c502:	0e 99       	mov	r9,r7
8001c504:	c4 60       	breq	8001c590 <fatfs_fat_set_cluster+0x104>
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
        return NULL;
    }

    pcur->ptr = pcur->sector;
8001c506:	ef 47 02 08 	st.w	r7[520],r7
    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
    if (!pbuf)
        return 0;

    if (fs->fat_type == FAT_TYPE_16)
8001c50a:	6c c8       	ld.w	r8,r6[0x30]
8001c50c:	58 08       	cp.w	r8,0
8001c50e:	c2 21       	brne	8001c552 <fatfs_fat_set_cluster+0xc6>
    {
        // Find 16 bit entry of current sector relating to cluster number 
        position = (cluster - (fat_sector_offset * 256)) * 2; 

        // Write Next Clusters value to Sector Buffer
        FAT16_SET_16BIT_WORD(pbuf, (uint16)position, ((uint16)next_cluster));     
8001c510:	e8 08 15 08 	lsl	r8,r4,0x8
8001c514:	e6 08 01 08 	sub	r8,r3,r8
8001c518:	a1 78       	lsl	r8,0x1
8001c51a:	5c 78       	castu.h	r8
8001c51c:	f2 08 0b 05 	st.b	r9[r8],r5
8001c520:	eb d5 c1 08 	bfextu	r5,r5,0x8,0x8
8001c524:	ee f9 02 08 	ld.w	r9,r7[520]
8001c528:	f2 08 00 08 	add	r8,r9,r8
8001c52c:	b0 95       	st.b	r8[0x1],r5
8001c52e:	30 1c       	mov	r12,1
8001c530:	ef 4c 02 04 	st.w	r7[516],r12
8001c534:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
        fat_sector_offset = cluster / 256;
    else
        fat_sector_offset = cluster / 128;
8001c538:	f6 04 16 07 	lsr	r4,r11,0x7
8001c53c:	cb 2b       	rjmp	8001c4a0 <fatfs_fat_set_cluster+0x14>
    }

    // We found the sector already in FAT buffer chain
    if (pcur)
    {
        pcur->ptr = (uint8 *)(pcur->sector + ((sector - pcur->address) * FAT_SECTOR_SIZE));
8001c53e:	e4 08 01 09 	sub	r9,r2,r8
8001c542:	a9 79       	lsl	r9,0x9
8001c544:	ee 09 00 09 	add	r9,r7,r9
8001c548:	ef 49 02 08 	st.w	r7[520],r9
    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
    if (!pbuf)
        return 0;

    if (fs->fat_type == FAT_TYPE_16)
8001c54c:	6c c8       	ld.w	r8,r6[0x30]
8001c54e:	58 08       	cp.w	r8,0
8001c550:	ce 00       	breq	8001c510 <fatfs_fat_set_cluster+0x84>
    {
        // Find 32 bit entry of current sector relating to cluster number 
        position = (cluster - (fat_sector_offset * 128)) * 4; 

        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);     
8001c552:	ea 0a 16 08 	lsr	r10,r5,0x8
8001c556:	e8 08 15 07 	lsl	r8,r4,0x7
8001c55a:	e6 08 01 08 	sub	r8,r3,r8
8001c55e:	a3 68       	lsl	r8,0x2
8001c560:	5c 78       	castu.h	r8
8001c562:	f2 08 0b 05 	st.b	r9[r8],r5
8001c566:	ee f9 02 08 	ld.w	r9,r7[520]
8001c56a:	10 09       	add	r9,r8
8001c56c:	b2 9a       	st.b	r9[0x1],r10
8001c56e:	ea 0a 16 10 	lsr	r10,r5,0x10
8001c572:	ee f9 02 08 	ld.w	r9,r7[520]
8001c576:	10 09       	add	r9,r8
8001c578:	b2 aa       	st.b	r9[0x2],r10
8001c57a:	b9 85       	lsr	r5,0x18
8001c57c:	ee f9 02 08 	ld.w	r9,r7[520]
8001c580:	f2 08 00 08 	add	r8,r9,r8
8001c584:	b0 b5       	st.b	r8[0x3],r5
8001c586:	30 1c       	mov	r12,1
8001c588:	ef 4c 02 04 	st.w	r7[516],r12
    }

    return 1;                     
} 
8001c58c:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
    {
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
8001c590:	3f f8       	mov	r8,-1
8001c592:	ef 48 02 00 	st.w	r7[512],r8
8001c596:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
    {
        // Find 32 bit entry of current sector relating to cluster number 
        position = (cluster - (fat_sector_offset * 128)) * 4; 

        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);     
8001c59a:	0e 98       	mov	r8,r7
8001c59c:	ca 4b       	rjmp	8001c4e4 <fatfs_fat_set_cluster+0x58>
    pcur->next = fs->fat_buffer_head;
    fs->fat_buffer_head = pcur;

    // Writeback sector if changed
    if (pcur->dirty)
        if (!fatfs_fat_writeback(fs, pcur))
8001c59e:	0e 9b       	mov	r11,r7
8001c5a0:	0c 9c       	mov	r12,r6
8001c5a2:	fe b0 fd fd 	rcall	8001c19c <fatfs_fat_writeback>
8001c5a6:	ca 71       	brne	8001c4f4 <fatfs_fat_set_cluster+0x68>
8001c5a8:	cf 2b       	rjmp	8001c58c <fatfs_fat_set_cluster+0x100>
8001c5aa:	d7 03       	nop

8001c5ac <fatfs_fat_add_cluster_to_chain>:
8001c5ac:	d4 31       	pushm	r0-r7,lr
8001c5ae:	18 96       	mov	r6,r12
// fatfs_fat_add_cluster_to_chain: Follow a chain marking and then add a new entry
// to the current tail.
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_fat_add_cluster_to_chain(struct fatfs *fs, uint32 start_cluster, uint32 newEntry)
{
8001c5b0:	14 90       	mov	r0,r10
    uint32 last_cluster = FAT32_LAST_CLUSTER;
    uint32 next_cluster = start_cluster;

    if (start_cluster == FAT32_LAST_CLUSTER)
8001c5b2:	5b fb       	cp.w	r11,-1
8001c5b4:	e0 80 00 a5 	breq	8001c6fe <fatfs_fat_add_cluster_to_chain+0x152>
8001c5b8:	16 92       	mov	r2,r11
8001c5ba:	78 c8       	ld.w	r8,r12[0x30]

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;        

        // If end of chain found
        if (nextcluster >= 0x0FFFFFF8 && nextcluster <= 0x0FFFFFFF) 
8001c5bc:	30 81       	mov	r1,8
8001c5be:	ea 11 f0 00 	orh	r1,0xf000
    uint32 fat_sector_offset, position;
    uint32 nextcluster;
    struct fat_buffer *pbuf;

    // Why is '..' labelled with cluster 0 when it should be 2 ??
    if (current_cluster == 0) 
8001c5c2:	58 02       	cp.w	r2,0
8001c5c4:	e4 03 17 10 	movne	r3,r2
8001c5c8:	f9 b3 00 02 	moveq	r3,2
        current_cluster = 2;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
8001c5cc:	58 08       	cp.w	r8,0
8001c5ce:	c5 c1       	brne	8001c686 <fatfs_fat_add_cluster_to_chain+0xda>
        fat_sector_offset = current_cluster / 256;
8001c5d0:	e6 04 16 08 	lsr	r4,r3,0x8
    else
        fat_sector_offset = current_cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001c5d4:	6c 55       	ld.w	r5,r6[0x14]
// fatfs_fat_read_sector: Read a FAT sector
//-----------------------------------------------------------------------------
static struct fat_buffer *fatfs_fat_read_sector(struct fatfs *fs, uint32 sector)
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;
8001c5d6:	ec f7 02 54 	ld.w	r7,r6[596]
        fat_sector_offset = current_cluster / 256;
    else
        fat_sector_offset = current_cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001c5da:	e8 05 00 05 	add	r5,r4,r5
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001c5de:	58 07       	cp.w	r7,0
8001c5e0:	c5 c0       	breq	8001c698 <fatfs_fat_add_cluster_to_chain+0xec>
8001c5e2:	30 09       	mov	r9,0
8001c5e4:	c0 38       	rjmp	8001c5ea <fatfs_fat_add_cluster_to_chain+0x3e>
8001c5e6:	0e 99       	mov	r9,r7
8001c5e8:	10 97       	mov	r7,r8
    {
        // Sector within this buffer?
        if ((sector >= pcur->address) && (sector < (pcur->address + FAT_BUFFER_SECTORS)))
8001c5ea:	ee f8 02 00 	ld.w	r8,r7[512]
8001c5ee:	10 35       	cp.w	r5,r8
8001c5f0:	c0 63       	brcs	8001c5fc <fatfs_fat_add_cluster_to_chain+0x50>
8001c5f2:	f0 ca ff ff 	sub	r10,r8,-1
8001c5f6:	14 35       	cp.w	r5,r10
8001c5f8:	e0 83 00 84 	brlo	8001c700 <fatfs_fat_add_cluster_to_chain+0x154>
            break;

        // End of list?
        if (pcur->next == NULL)
8001c5fc:	ee f8 02 0c 	ld.w	r8,r7[524]
8001c600:	58 08       	cp.w	r8,0
8001c602:	cf 21       	brne	8001c5e6 <fatfs_fat_add_cluster_to_chain+0x3a>
        {
            // Remove buffer from list
            if (last)
                last->next = NULL;
8001c604:	58 09       	cp.w	r9,0
8001c606:	f3 f8 1a 83 	st.wne	r9[0x20c],r8
            // We the first and last buffer in the chain?
            else
                fs->fat_buffer_head = NULL;
8001c60a:	ed f9 0a 95 	st.weq	r6[0x254],r9
        }

        last = pcur;
        pcur = pcur->next;
8001c60e:	ee f8 02 0c 	ld.w	r8,r7[524]
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001c612:	58 08       	cp.w	r8,0
8001c614:	ce 91       	brne	8001c5e6 <fatfs_fat_add_cluster_to_chain+0x3a>
8001c616:	ec f8 02 54 	ld.w	r8,r6[596]

    // Else, we removed the last item from the list
    pcur = last;

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
8001c61a:	ef 48 02 0c 	st.w	r7[524],r8
    fs->fat_buffer_head = pcur;
8001c61e:	ed 47 02 54 	st.w	r6[596],r7

    // Writeback sector if changed
    if (pcur->dirty)
8001c622:	ee f8 02 04 	ld.w	r8,r7[516]
8001c626:	58 08       	cp.w	r8,0
8001c628:	c4 11       	brne	8001c6aa <fatfs_fat_add_cluster_to_chain+0xfe>
        if (!fatfs_fat_writeback(fs, pcur))
            return 0;

    // Address is now new sector
    pcur->address = sector;
8001c62a:	ef 45 02 00 	st.w	r7[512],r5

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
8001c62e:	0a 9c       	mov	r12,r5
8001c630:	6c d8       	ld.w	r8,r6[0x34]
8001c632:	0e 95       	mov	r5,r7
8001c634:	30 1a       	mov	r10,1
8001c636:	0e 9b       	mov	r11,r7
8001c638:	5d 18       	icall	r8
8001c63a:	c6 a0       	breq	8001c70e <fatfs_fat_add_cluster_to_chain+0x162>
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
        return NULL;
    }

    pcur->ptr = pcur->sector;
8001c63c:	ef 47 02 08 	st.w	r7[520],r7
    else
        fat_sector_offset = current_cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
    if (!pbuf)
8001c640:	58 07       	cp.w	r7,0
8001c642:	c3 90       	breq	8001c6b4 <fatfs_fat_add_cluster_to_chain+0x108>
        return (FAT32_LAST_CLUSTER); 

    if (fs->fat_type == FAT_TYPE_16)
8001c644:	6c c8       	ld.w	r8,r6[0x30]
8001c646:	58 08       	cp.w	r8,0
8001c648:	c3 f1       	brne	8001c6c6 <fatfs_fat_add_cluster_to_chain+0x11a>
    {
        // Find 32 bit entry of current sector relating to cluster number 
        position = (current_cluster - (fat_sector_offset * 256)) * 2; 

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);     
8001c64a:	e8 0a 15 08 	lsl	r10,r4,0x8
8001c64e:	e6 0a 01 0a 	sub	r10,r3,r10
8001c652:	a1 7a       	lsl	r10,0x1
8001c654:	5c 7a       	castu.h	r10
8001c656:	ea 0a 07 0b 	ld.ub	r11,r5[r10]
8001c65a:	ea 0a 00 0a 	add	r10,r5,r10
8001c65e:	15 99       	ld.ub	r9,r10[0x1]
8001c660:	a9 69       	lsl	r9,0x8
8001c662:	16 09       	add	r9,r11

        // If end of chain found
        if (nextcluster >= 0xFFF8 && nextcluster <= 0xFFFF) 
8001c664:	fe 7b 00 08 	mov	r11,-65528
8001c668:	f2 0b 00 0a 	add	r10,r9,r11
8001c66c:	58 7a       	cp.w	r10,7
8001c66e:	e0 88 00 23 	brls	8001c6b4 <fatfs_fat_add_cluster_to_chain+0x108>
    {
        last_cluster = next_cluster;

        // Find next link
        next_cluster = fatfs_find_next_cluster(fs, next_cluster);
        if (!next_cluster)
8001c672:	58 09       	cp.w	r9,0
8001c674:	c4 50       	breq	8001c6fe <fatfs_fat_add_cluster_to_chain+0x152>

    if (start_cluster == FAT32_LAST_CLUSTER)
        return 0;
    
    // Loop until end of chain
    while ( next_cluster != FAT32_LAST_CLUSTER )
8001c676:	12 92       	mov	r2,r9
    uint32 fat_sector_offset, position;
    uint32 nextcluster;
    struct fat_buffer *pbuf;

    // Why is '..' labelled with cluster 0 when it should be 2 ??
    if (current_cluster == 0) 
8001c678:	58 02       	cp.w	r2,0
8001c67a:	e4 03 17 10 	movne	r3,r2
8001c67e:	f9 b3 00 02 	moveq	r3,2
        current_cluster = 2;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
8001c682:	58 08       	cp.w	r8,0
8001c684:	ca 60       	breq	8001c5d0 <fatfs_fat_add_cluster_to_chain+0x24>
        fat_sector_offset = current_cluster / 256;
    else
        fat_sector_offset = current_cluster / 128;
8001c686:	e6 04 16 07 	lsr	r4,r3,0x7

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001c68a:	6c 55       	ld.w	r5,r6[0x14]
// fatfs_fat_read_sector: Read a FAT sector
//-----------------------------------------------------------------------------
static struct fat_buffer *fatfs_fat_read_sector(struct fatfs *fs, uint32 sector)
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;
8001c68c:	ec f7 02 54 	ld.w	r7,r6[596]
        fat_sector_offset = current_cluster / 256;
    else
        fat_sector_offset = current_cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001c690:	e8 05 00 05 	add	r5,r4,r5
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001c694:	58 07       	cp.w	r7,0
8001c696:	ca 61       	brne	8001c5e2 <fatfs_fat_add_cluster_to_chain+0x36>
    fatfs_fat_set_cluster(fs, last_cluster, newEntry);

    // Mark new cluster as end of chain
    fatfs_fat_set_cluster(fs, newEntry, FAT32_LAST_CLUSTER);

    return 1;
8001c698:	0e 98       	mov	r8,r7

    // Else, we removed the last item from the list
    pcur = last;

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
8001c69a:	ef 48 02 0c 	st.w	r7[524],r8
    fs->fat_buffer_head = pcur;
8001c69e:	ed 47 02 54 	st.w	r6[596],r7

    // Writeback sector if changed
    if (pcur->dirty)
8001c6a2:	ee f8 02 04 	ld.w	r8,r7[516]
8001c6a6:	58 08       	cp.w	r8,0
8001c6a8:	cc 10       	breq	8001c62a <fatfs_fat_add_cluster_to_chain+0x7e>
        if (!fatfs_fat_writeback(fs, pcur))
8001c6aa:	0e 9b       	mov	r11,r7
8001c6ac:	0c 9c       	mov	r12,r6
8001c6ae:	fe b0 fd 77 	rcall	8001c19c <fatfs_fat_writeback>
8001c6b2:	cb c1       	brne	8001c62a <fatfs_fat_add_cluster_to_chain+0x7e>
        if (!next_cluster)
            return 0;
    }

    // Add link in for new cluster
    fatfs_fat_set_cluster(fs, last_cluster, newEntry);
8001c6b4:	04 9b       	mov	r11,r2
8001c6b6:	00 9a       	mov	r10,r0
8001c6b8:	0c 9c       	mov	r12,r6
8001c6ba:	ce 9e       	rcall	8001c48c <fatfs_fat_set_cluster>
8001c6bc:	00 9b       	mov	r11,r0

    // Mark new cluster as end of chain
    fatfs_fat_set_cluster(fs, newEntry, FAT32_LAST_CLUSTER);
8001c6be:	0c 9c       	mov	r12,r6
8001c6c0:	3f fa       	mov	r10,-1
8001c6c2:	ce 5e       	rcall	8001c48c <fatfs_fat_set_cluster>
8001c6c4:	da 3a       	popm	r0-r7,pc,r12=1
8001c6c6:	e8 09 15 07 	lsl	r9,r4,0x7
    {
        // Find 32 bit entry of current sector relating to cluster number 
        position = (current_cluster - (fat_sector_offset * 128)) * 4; 

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);     
8001c6ca:	e6 09 01 09 	sub	r9,r3,r9
8001c6ce:	a3 69       	lsl	r9,0x2
8001c6d0:	5c 79       	castu.h	r9
8001c6d2:	ea 09 07 0b 	ld.ub	r11,r5[r9]

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;        
8001c6d6:	12 05       	add	r5,r9
8001c6d8:	0b 9a       	ld.ub	r10,r5[0x1]
8001c6da:	a9 6a       	lsl	r10,0x8
8001c6dc:	0b bc       	ld.ub	r12,r5[0x3]
8001c6de:	0b a9       	ld.ub	r9,r5[0x2]
8001c6e0:	b9 6c       	lsl	r12,0x18
8001c6e2:	b1 69       	lsl	r9,0x10
8001c6e4:	f8 09 00 09 	add	r9,r12,r9
8001c6e8:	16 09       	add	r9,r11
8001c6ea:	14 09       	add	r9,r10
8001c6ec:	f3 d9 c0 1c 	bfextu	r9,r9,0x0,0x1c
8001c6f0:	f2 01 00 0a 	add	r10,r9,r1

        // If end of chain found
        if (nextcluster >= 0x0FFFFFF8 && nextcluster <= 0x0FFFFFFF) 
8001c6f4:	58 7a       	cp.w	r10,7
8001c6f6:	fe 98 ff df 	brls	8001c6b4 <fatfs_fat_add_cluster_to_chain+0x108>
8001c6fa:	58 09       	cp.w	r9,0
8001c6fc:	cb d1       	brne	8001c676 <fatfs_fat_add_cluster_to_chain+0xca>
    {
        last_cluster = next_cluster;

        // Find next link
        next_cluster = fatfs_find_next_cluster(fs, next_cluster);
        if (!next_cluster)
8001c6fe:	d8 3a       	popm	r0-r7,pc,r12=0
8001c700:	10 15       	sub	r5,r8
    fatfs_fat_set_cluster(fs, last_cluster, newEntry);

    // Mark new cluster as end of chain
    fatfs_fat_set_cluster(fs, newEntry, FAT32_LAST_CLUSTER);

    return 1;
8001c702:	a9 75       	lsl	r5,0x9
    }

    // We found the sector already in FAT buffer chain
    if (pcur)
    {
        pcur->ptr = (uint8 *)(pcur->sector + ((sector - pcur->address) * FAT_SECTOR_SIZE));
8001c704:	ee 05 00 05 	add	r5,r7,r5
8001c708:	ef 45 02 08 	st.w	r7[520],r5
8001c70c:	c9 cb       	rjmp	8001c644 <fatfs_fat_add_cluster_to_chain+0x98>
8001c70e:	3f f8       	mov	r8,-1
8001c710:	ef 48 02 00 	st.w	r7[512],r8

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
    {
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
8001c714:	cd 0b       	rjmp	8001c6b4 <fatfs_fat_add_cluster_to_chain+0x108>
8001c716:	d7 03       	nop

8001c718 <fatfs_free_cluster_chain>:
8001c718:	d4 31       	pushm	r0-r7,lr
8001c71a:	30 10       	mov	r0,1
8001c71c:	16 94       	mov	r4,r11
8001c71e:	18 95       	mov	r5,r12
8001c720:	30 01       	mov	r1,0
8001c722:	e8 c8 00 01 	sub	r8,r4,1
{
    uint32 last_cluster;
    uint32 next_cluster = start_cluster;
    
    // Loop until end of chain
    while ( (next_cluster != FAT32_LAST_CLUSTER) && (next_cluster != 0x00000000) )
8001c726:	5b d8       	cp.w	r8,-3
8001c728:	e0 8b 00 b5 	brhi	8001c892 <fatfs_free_cluster_chain+0x17a>
    // Why is '..' labelled with cluster 0 when it should be 2 ??
    if (current_cluster == 0) 
        current_cluster = 2;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
8001c72c:	6a c8       	ld.w	r8,r5[0x30]
8001c72e:	58 08       	cp.w	r8,0
8001c730:	e0 81 00 b2 	brne	8001c894 <fatfs_free_cluster_chain+0x17c>
        fat_sector_offset = current_cluster / 256;
8001c734:	e8 03 16 08 	lsr	r3,r4,0x8
    else
        fat_sector_offset = current_cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001c738:	6a 56       	ld.w	r6,r5[0x14]
// fatfs_fat_read_sector: Read a FAT sector
//-----------------------------------------------------------------------------
static struct fat_buffer *fatfs_fat_read_sector(struct fatfs *fs, uint32 sector)
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;
8001c73a:	ea f7 02 54 	ld.w	r7,r5[596]
        fat_sector_offset = current_cluster / 256;
    else
        fat_sector_offset = current_cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001c73e:	e6 06 00 06 	add	r6,r3,r6
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001c742:	58 07       	cp.w	r7,0
8001c744:	e0 80 00 b2 	breq	8001c8a8 <fatfs_free_cluster_chain+0x190>
8001c748:	30 09       	mov	r9,0
8001c74a:	c0 38       	rjmp	8001c750 <fatfs_free_cluster_chain+0x38>
8001c74c:	0e 99       	mov	r9,r7
8001c74e:	10 97       	mov	r7,r8
    {
        // Sector within this buffer?
        if ((sector >= pcur->address) && (sector < (pcur->address + FAT_BUFFER_SECTORS)))
8001c750:	ee f8 02 00 	ld.w	r8,r7[512]
8001c754:	10 36       	cp.w	r6,r8
8001c756:	c0 63       	brcs	8001c762 <fatfs_free_cluster_chain+0x4a>
8001c758:	f0 ca ff ff 	sub	r10,r8,-1
8001c75c:	14 36       	cp.w	r6,r10
8001c75e:	e0 83 01 2a 	brlo	8001c9b2 <fatfs_free_cluster_chain+0x29a>
            break;

        // End of list?
        if (pcur->next == NULL)
8001c762:	ee f8 02 0c 	ld.w	r8,r7[524]
8001c766:	58 08       	cp.w	r8,0
8001c768:	cf 21       	brne	8001c74c <fatfs_free_cluster_chain+0x34>
        {
            // Remove buffer from list
            if (last)
                last->next = NULL;
8001c76a:	58 09       	cp.w	r9,0
8001c76c:	f3 f8 1a 83 	st.wne	r9[0x20c],r8
            // We the first and last buffer in the chain?
            else
                fs->fat_buffer_head = NULL;
8001c770:	eb f9 0a 95 	st.weq	r5[0x254],r9
        }

        last = pcur;
        pcur = pcur->next;
8001c774:	ee f8 02 0c 	ld.w	r8,r7[524]
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001c778:	58 08       	cp.w	r8,0
8001c77a:	ce 91       	brne	8001c74c <fatfs_free_cluster_chain+0x34>
8001c77c:	ea f8 02 54 	ld.w	r8,r5[596]

    // Else, we removed the last item from the list
    pcur = last;

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
8001c780:	ef 48 02 0c 	st.w	r7[524],r8
    fs->fat_buffer_head = pcur;
8001c784:	eb 47 02 54 	st.w	r5[596],r7

    // Writeback sector if changed
    if (pcur->dirty)
8001c788:	ee f8 02 04 	ld.w	r8,r7[516]
8001c78c:	58 08       	cp.w	r8,0
8001c78e:	e0 81 00 97 	brne	8001c8bc <fatfs_free_cluster_chain+0x1a4>
        if (!fatfs_fat_writeback(fs, pcur))
            return 0;

    // Address is now new sector
    pcur->address = sector;
8001c792:	ef 46 02 00 	st.w	r7[512],r6

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
8001c796:	0c 9c       	mov	r12,r6
8001c798:	6a d8       	ld.w	r8,r5[0x34]
8001c79a:	0e 96       	mov	r6,r7
8001c79c:	30 1a       	mov	r10,1
8001c79e:	0e 9b       	mov	r11,r7
8001c7a0:	5d 18       	icall	r8
8001c7a2:	e0 80 01 14 	breq	8001c9ca <fatfs_free_cluster_chain+0x2b2>
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
        return NULL;
    }

    pcur->ptr = pcur->sector;
8001c7a6:	ef 47 02 08 	st.w	r7[520],r7
    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
    if (!pbuf)
        return (FAT32_LAST_CLUSTER); 

    if (fs->fat_type == FAT_TYPE_16)
8001c7aa:	6a c8       	ld.w	r8,r5[0x30]
8001c7ac:	58 08       	cp.w	r8,0
8001c7ae:	e0 81 00 a1 	brne	8001c8f0 <fatfs_free_cluster_chain+0x1d8>
    {
        // Find 32 bit entry of current sector relating to cluster number 
        position = (current_cluster - (fat_sector_offset * 256)) * 2; 

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);     
8001c7b2:	e6 08 15 08 	lsl	r8,r3,0x8
8001c7b6:	e8 08 01 08 	sub	r8,r4,r8
8001c7ba:	a1 78       	lsl	r8,0x1
8001c7bc:	5c 78       	castu.h	r8
8001c7be:	ec 08 07 09 	ld.ub	r9,r6[r8]
8001c7c2:	ec 08 00 08 	add	r8,r6,r8
{
    struct fat_buffer *pbuf;
    uint32 fat_sector_offset, position;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
8001c7c6:	ea f7 02 54 	ld.w	r7,r5[596]
    {
        // Find 32 bit entry of current sector relating to cluster number 
        position = (current_cluster - (fat_sector_offset * 256)) * 2; 

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);     
8001c7ca:	11 93       	ld.ub	r3,r8[0x1]
8001c7cc:	a9 63       	lsl	r3,0x8
8001c7ce:	12 03       	add	r3,r9

        // If end of chain found
        if (nextcluster >= 0xFFF8 && nextcluster <= 0xFFFF) 
8001c7d0:	fe 79 00 08 	mov	r9,-65528
8001c7d4:	e6 09 00 08 	add	r8,r3,r9
8001c7d8:	58 78       	cp.w	r8,7
8001c7da:	f9 b3 08 ff 	movls	r3,-1
    struct fat_buffer *pbuf;
    uint32 fat_sector_offset, position;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
        fat_sector_offset = cluster / 256;
8001c7de:	e8 02 16 08 	lsr	r2,r4,0x8
    else
        fat_sector_offset = cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001c7e2:	6a 56       	ld.w	r6,r5[0x14]
8001c7e4:	e4 06 00 06 	add	r6,r2,r6
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001c7e8:	58 07       	cp.w	r7,0
8001c7ea:	e0 80 00 a9 	breq	8001c93c <fatfs_free_cluster_chain+0x224>
8001c7ee:	30 09       	mov	r9,0
8001c7f0:	c0 38       	rjmp	8001c7f6 <fatfs_free_cluster_chain+0xde>
8001c7f2:	0e 99       	mov	r9,r7
8001c7f4:	10 97       	mov	r7,r8
    {
        // Sector within this buffer?
        if ((sector >= pcur->address) && (sector < (pcur->address + FAT_BUFFER_SECTORS)))
8001c7f6:	ee f8 02 00 	ld.w	r8,r7[512]
8001c7fa:	10 36       	cp.w	r6,r8
8001c7fc:	c0 63       	brcs	8001c808 <fatfs_free_cluster_chain+0xf0>
8001c7fe:	f0 ca ff ff 	sub	r10,r8,-1
8001c802:	14 36       	cp.w	r6,r10
8001c804:	e0 83 00 d0 	brlo	8001c9a4 <fatfs_free_cluster_chain+0x28c>
            break;

        // End of list?
        if (pcur->next == NULL)
8001c808:	ee f8 02 0c 	ld.w	r8,r7[524]
8001c80c:	58 08       	cp.w	r8,0
8001c80e:	cf 21       	brne	8001c7f2 <fatfs_free_cluster_chain+0xda>
        {
            // Remove buffer from list
            if (last)
                last->next = NULL;
8001c810:	58 09       	cp.w	r9,0
8001c812:	f3 f8 1a 83 	st.wne	r9[0x20c],r8
            // We the first and last buffer in the chain?
            else
                fs->fat_buffer_head = NULL;
8001c816:	eb f9 0a 95 	st.weq	r5[0x254],r9
        }

        last = pcur;
        pcur = pcur->next;
8001c81a:	ee f8 02 0c 	ld.w	r8,r7[524]
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001c81e:	58 08       	cp.w	r8,0
8001c820:	ce 91       	brne	8001c7f2 <fatfs_free_cluster_chain+0xda>
8001c822:	ea f8 02 54 	ld.w	r8,r5[596]

    // Else, we removed the last item from the list
    pcur = last;

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
8001c826:	ef 48 02 0c 	st.w	r7[524],r8
    fs->fat_buffer_head = pcur;
8001c82a:	eb 47 02 54 	st.w	r5[596],r7

    // Writeback sector if changed
    if (pcur->dirty)
8001c82e:	ee f8 02 04 	ld.w	r8,r7[516]
8001c832:	58 08       	cp.w	r8,0
8001c834:	e0 81 00 8e 	brne	8001c950 <fatfs_free_cluster_chain+0x238>
        if (!fatfs_fat_writeback(fs, pcur))
            return 0;

    // Address is now new sector
    pcur->address = sector;
8001c838:	ef 46 02 00 	st.w	r7[512],r6

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
8001c83c:	0c 9c       	mov	r12,r6
8001c83e:	6a d8       	ld.w	r8,r5[0x34]
8001c840:	0e 96       	mov	r6,r7
8001c842:	30 1a       	mov	r10,1
8001c844:	0e 9b       	mov	r11,r7
8001c846:	5d 18       	icall	r8
8001c848:	e0 80 00 bc 	breq	8001c9c0 <fatfs_free_cluster_chain+0x2a8>
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
        return NULL;
    }

    pcur->ptr = pcur->sector;
8001c84c:	ef 47 02 08 	st.w	r7[520],r7
    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
    if (!pbuf)
        return 0;

    if (fs->fat_type == FAT_TYPE_16)
8001c850:	6a c8       	ld.w	r8,r5[0x30]
8001c852:	58 08       	cp.w	r8,0
8001c854:	e0 80 00 97 	breq	8001c982 <fatfs_free_cluster_chain+0x26a>
    {
        // Find 32 bit entry of current sector relating to cluster number 
        position = (cluster - (fat_sector_offset * 128)) * 4; 

        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);     
8001c858:	e4 08 15 07 	lsl	r8,r2,0x7
8001c85c:	e8 08 01 08 	sub	r8,r4,r8
8001c860:	a3 68       	lsl	r8,0x2
8001c862:	5c 78       	castu.h	r8
8001c864:	ec 08 0b 01 	st.b	r6[r8],r1
8001c868:	ee f9 02 08 	ld.w	r9,r7[520]
8001c86c:	10 09       	add	r9,r8
8001c86e:	b2 91       	st.b	r9[0x1],r1
8001c870:	ee f9 02 08 	ld.w	r9,r7[520]
8001c874:	10 09       	add	r9,r8
8001c876:	b2 a1       	st.b	r9[0x2],r1
8001c878:	ee f9 02 08 	ld.w	r9,r7[520]
8001c87c:	f2 08 00 08 	add	r8,r9,r8
8001c880:	b0 b1       	st.b	r8[0x3],r1
8001c882:	ef 40 02 04 	st.w	r7[516],r0
8001c886:	06 94       	mov	r4,r3
{
    uint32 last_cluster;
    uint32 next_cluster = start_cluster;
    
    // Loop until end of chain
    while ( (next_cluster != FAT32_LAST_CLUSTER) && (next_cluster != 0x00000000) )
8001c888:	e8 c8 00 01 	sub	r8,r4,1
8001c88c:	5b d8       	cp.w	r8,-3
8001c88e:	fe 98 ff 4f 	brls	8001c72c <fatfs_free_cluster_chain+0x14>
        // Clear last link
        fatfs_fat_set_cluster(fs, last_cluster, 0x00000000);
    }

    return 1;
} 
8001c892:	da 3a       	popm	r0-r7,pc,r12=1

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
        fat_sector_offset = current_cluster / 256;
    else
        fat_sector_offset = current_cluster / 128;
8001c894:	e8 03 16 07 	lsr	r3,r4,0x7

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001c898:	6a 56       	ld.w	r6,r5[0x14]
// fatfs_fat_read_sector: Read a FAT sector
//-----------------------------------------------------------------------------
static struct fat_buffer *fatfs_fat_read_sector(struct fatfs *fs, uint32 sector)
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;
8001c89a:	ea f7 02 54 	ld.w	r7,r5[596]
        fat_sector_offset = current_cluster / 256;
    else
        fat_sector_offset = current_cluster / 128;

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001c89e:	e6 06 00 06 	add	r6,r3,r6
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001c8a2:	58 07       	cp.w	r7,0
8001c8a4:	fe 91 ff 52 	brne	8001c748 <fatfs_free_cluster_chain+0x30>
{
    uint32 last_cluster;
    uint32 next_cluster = start_cluster;
    
    // Loop until end of chain
    while ( (next_cluster != FAT32_LAST_CLUSTER) && (next_cluster != 0x00000000) )
8001c8a8:	0e 98       	mov	r8,r7

    // Else, we removed the last item from the list
    pcur = last;

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
8001c8aa:	ef 48 02 0c 	st.w	r7[524],r8
    fs->fat_buffer_head = pcur;
8001c8ae:	eb 47 02 54 	st.w	r5[596],r7

    // Writeback sector if changed
    if (pcur->dirty)
8001c8b2:	ee f8 02 04 	ld.w	r8,r7[516]
8001c8b6:	58 08       	cp.w	r8,0
8001c8b8:	fe 90 ff 6d 	breq	8001c792 <fatfs_free_cluster_chain+0x7a>
//-----------------------------------------------------------------------------
// fatfs_fat_writeback: Writeback 'dirty' FAT sectors to disk
//-----------------------------------------------------------------------------
static int fatfs_fat_writeback(struct fatfs *fs, struct fat_buffer *pcur)
{
    if (pcur)
8001c8bc:	58 07       	cp.w	r7,0
8001c8be:	e0 80 00 8b 	breq	8001c9d4 <fatfs_free_cluster_chain+0x2bc>
    {
        // Writeback sector if changed
        if (pcur->dirty) 
        {
            if (fs->disk_io.write_media)
8001c8c2:	6a e8       	ld.w	r8,r5[0x38]
8001c8c4:	58 08       	cp.w	r8,0
8001c8c6:	c1 10       	breq	8001c8e8 <fatfs_free_cluster_chain+0x1d0>
            {
                uint32 sectors = FAT_BUFFER_SECTORS;
                uint32 offset = pcur->address - fs->fat_begin_lba;
8001c8c8:	ee fc 02 00 	ld.w	r12,r7[512]
8001c8cc:	6a 59       	ld.w	r9,r5[0x14]
8001c8ce:	f8 09 01 09 	sub	r9,r12,r9

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
8001c8d2:	f2 cb ff ff 	sub	r11,r9,-1
8001c8d6:	6a 8a       	ld.w	r10,r5[0x20]
8001c8d8:	14 3b       	cp.w	r11,r10
8001c8da:	f9 ba 08 01 	movls	r10,1
                    sectors = FAT_BUFFER_SECTORS;
                else
                    sectors = fs->fat_sectors - offset;
8001c8de:	f5 d9 eb 1a 	subhi	r10,r10,r9

                if (!fs->disk_io.write_media(pcur->address, pcur->sector, sectors))
8001c8e2:	0e 9b       	mov	r11,r7
8001c8e4:	5d 18       	icall	r8
8001c8e6:	c7 50       	breq	8001c9d0 <fatfs_free_cluster_chain+0x2b8>
                    return 0;
            }
                
            pcur->dirty = 0;
8001c8e8:	30 09       	mov	r9,0
8001c8ea:	ef 49 02 04 	st.w	r7[516],r9
8001c8ee:	c5 2b       	rjmp	8001c792 <fatfs_free_cluster_chain+0x7a>
    {
        // Find 32 bit entry of current sector relating to cluster number 
        position = (current_cluster - (fat_sector_offset * 128)) * 4; 

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);     
8001c8f0:	e6 08 15 07 	lsl	r8,r3,0x7
8001c8f4:	e8 08 01 08 	sub	r8,r4,r8
8001c8f8:	a3 68       	lsl	r8,0x2
8001c8fa:	5c 78       	castu.h	r8

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;        
8001c8fc:	ec 08 07 09 	ld.ub	r9,r6[r8]
8001c900:	10 06       	add	r6,r8
8001c902:	0d 98       	ld.ub	r8,r6[0x1]
8001c904:	a9 68       	lsl	r8,0x8
8001c906:	0d b3       	ld.ub	r3,r6[0x3]
8001c908:	0d aa       	ld.ub	r10,r6[0x2]
8001c90a:	b9 63       	lsl	r3,0x18
8001c90c:	b1 6a       	lsl	r10,0x10
{
    struct fat_buffer *pbuf;
    uint32 fat_sector_offset, position;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
8001c90e:	ea f7 02 54 	ld.w	r7,r5[596]

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);     

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;        
8001c912:	14 03       	add	r3,r10
8001c914:	12 03       	add	r3,r9

        // If end of chain found
        if (nextcluster >= 0x0FFFFFF8 && nextcluster <= 0x0FFFFFFF) 
8001c916:	30 89       	mov	r9,8
8001c918:	ea 19 f0 00 	orh	r9,0xf000

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);     

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;        
8001c91c:	10 03       	add	r3,r8
8001c91e:	e7 d3 c0 1c 	bfextu	r3,r3,0x0,0x1c

        // If end of chain found
        if (nextcluster >= 0x0FFFFFF8 && nextcluster <= 0x0FFFFFFF) 
8001c922:	e6 09 00 08 	add	r8,r3,r9
8001c926:	58 78       	cp.w	r8,7
8001c928:	f9 b3 08 ff 	movls	r3,-1

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
        fat_sector_offset = cluster / 256;
    else
        fat_sector_offset = cluster / 128;
8001c92c:	e8 02 16 07 	lsr	r2,r4,0x7

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001c930:	6a 56       	ld.w	r6,r5[0x14]
8001c932:	e4 06 00 06 	add	r6,r2,r6
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001c936:	58 07       	cp.w	r7,0
8001c938:	fe 91 ff 5b 	brne	8001c7ee <fatfs_free_cluster_chain+0xd6>
{
    struct fat_buffer *pbuf;
    uint32 fat_sector_offset, position;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
8001c93c:	0e 98       	mov	r8,r7

    // Else, we removed the last item from the list
    pcur = last;

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
8001c93e:	ef 48 02 0c 	st.w	r7[524],r8
    fs->fat_buffer_head = pcur;
8001c942:	eb 47 02 54 	st.w	r5[596],r7

    // Writeback sector if changed
    if (pcur->dirty)
8001c946:	ee f8 02 04 	ld.w	r8,r7[516]
8001c94a:	58 08       	cp.w	r8,0
8001c94c:	fe 90 ff 76 	breq	8001c838 <fatfs_free_cluster_chain+0x120>
//-----------------------------------------------------------------------------
// fatfs_fat_writeback: Writeback 'dirty' FAT sectors to disk
//-----------------------------------------------------------------------------
static int fatfs_fat_writeback(struct fatfs *fs, struct fat_buffer *pcur)
{
    if (pcur)
8001c950:	58 07       	cp.w	r7,0
8001c952:	c9 a0       	breq	8001c886 <fatfs_free_cluster_chain+0x16e>
    {
        // Writeback sector if changed
        if (pcur->dirty) 
        {
            if (fs->disk_io.write_media)
8001c954:	6a e8       	ld.w	r8,r5[0x38]
8001c956:	58 08       	cp.w	r8,0
8001c958:	c1 10       	breq	8001c97a <fatfs_free_cluster_chain+0x262>
            {
                uint32 sectors = FAT_BUFFER_SECTORS;
                uint32 offset = pcur->address - fs->fat_begin_lba;
8001c95a:	ee fc 02 00 	ld.w	r12,r7[512]
8001c95e:	6a 59       	ld.w	r9,r5[0x14]
8001c960:	f8 09 01 09 	sub	r9,r12,r9

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
8001c964:	f2 cb ff ff 	sub	r11,r9,-1
8001c968:	6a 8a       	ld.w	r10,r5[0x20]
8001c96a:	14 3b       	cp.w	r11,r10
8001c96c:	f9 ba 08 01 	movls	r10,1
                    sectors = FAT_BUFFER_SECTORS;
                else
                    sectors = fs->fat_sectors - offset;
8001c970:	f5 d9 eb 1a 	subhi	r10,r10,r9

                if (!fs->disk_io.write_media(pcur->address, pcur->sector, sectors))
8001c974:	0e 9b       	mov	r11,r7
8001c976:	5d 18       	icall	r8
8001c978:	c8 70       	breq	8001c886 <fatfs_free_cluster_chain+0x16e>
                    return 0;
            }
                
            pcur->dirty = 0;
8001c97a:	30 08       	mov	r8,0
8001c97c:	ef 48 02 04 	st.w	r7[516],r8
8001c980:	c5 cb       	rjmp	8001c838 <fatfs_free_cluster_chain+0x120>
    {
        // Find 16 bit entry of current sector relating to cluster number 
        position = (cluster - (fat_sector_offset * 256)) * 2; 

        // Write Next Clusters value to Sector Buffer
        FAT16_SET_16BIT_WORD(pbuf, (uint16)position, ((uint16)next_cluster));     
8001c982:	e4 09 15 08 	lsl	r9,r2,0x8
8001c986:	e8 09 01 09 	sub	r9,r4,r9
8001c98a:	a1 79       	lsl	r9,0x1
8001c98c:	5c 79       	castu.h	r9
8001c98e:	ec 09 0b 08 	st.b	r6[r9],r8
8001c992:	ee fa 02 08 	ld.w	r10,r7[520]
8001c996:	f4 09 00 09 	add	r9,r10,r9
8001c99a:	b2 98       	st.b	r9[0x1],r8
8001c99c:	ef 40 02 04 	st.w	r7[516],r0
    {
        // Find 32 bit entry of current sector relating to cluster number 
        position = (cluster - (fat_sector_offset * 128)) * 4; 

        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);     
8001c9a0:	06 94       	mov	r4,r3
8001c9a2:	c7 3b       	rjmp	8001c888 <fatfs_free_cluster_chain+0x170>
    }

    // We found the sector already in FAT buffer chain
    if (pcur)
    {
        pcur->ptr = (uint8 *)(pcur->sector + ((sector - pcur->address) * FAT_SECTOR_SIZE));
8001c9a4:	10 16       	sub	r6,r8
8001c9a6:	a9 76       	lsl	r6,0x9
8001c9a8:	ee 06 00 06 	add	r6,r7,r6
8001c9ac:	ef 46 02 08 	st.w	r7[520],r6
8001c9b0:	c5 0b       	rjmp	8001c850 <fatfs_free_cluster_chain+0x138>
8001c9b2:	10 16       	sub	r6,r8
8001c9b4:	a9 76       	lsl	r6,0x9
8001c9b6:	ee 06 00 06 	add	r6,r7,r6
8001c9ba:	ef 46 02 08 	st.w	r7[520],r6
8001c9be:	cf 6a       	rjmp	8001c7aa <fatfs_free_cluster_chain+0x92>

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
    {
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
8001c9c0:	3f f9       	mov	r9,-1
    {
        // Find 32 bit entry of current sector relating to cluster number 
        position = (cluster - (fat_sector_offset * 128)) * 4; 

        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);     
8001c9c2:	06 94       	mov	r4,r3

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
    {
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
8001c9c4:	ef 49 02 00 	st.w	r7[512],r9
8001c9c8:	c6 0b       	rjmp	8001c888 <fatfs_free_cluster_chain+0x170>
8001c9ca:	3f f8       	mov	r8,-1
8001c9cc:	ef 48 02 00 	st.w	r7[512],r8
8001c9d0:	ea f7 02 54 	ld.w	r7,r5[596]
{
    struct fat_buffer *pbuf;
    uint32 fat_sector_offset, position;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
8001c9d4:	6a c8       	ld.w	r8,r5[0x30]
8001c9d6:	58 08       	cp.w	r8,0
8001c9d8:	c0 31       	brne	8001c9de <fatfs_free_cluster_chain+0x2c6>

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;        

        // If end of chain found
        if (nextcluster >= 0x0FFFFFF8 && nextcluster <= 0x0FFFFFFF) 
8001c9da:	3f f3       	mov	r3,-1
8001c9dc:	c0 1b       	rjmp	8001c7de <fatfs_free_cluster_chain+0xc6>
    struct fat_buffer *pbuf;
    uint32 fat_sector_offset, position;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
        fat_sector_offset = cluster / 256;
8001c9de:	3f f3       	mov	r3,-1
8001c9e0:	ca 6b       	rjmp	8001c92c <fatfs_free_cluster_chain+0x214>

8001c9e2 <fatfs_find_blank_cluster>:
//-----------------------------------------------------------------------------
// fatfs_find_blank_cluster: Find a free cluster entry by reading the FAT
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_find_blank_cluster(struct fatfs *fs, uint32 start_cluster, uint32 *free_cluster)
{
8001c9e2:	eb cd 40 fe 	pushm	r1-r7,lr

                if (!fs->disk_io.write_media(pcur->address, pcur->sector, sectors))
                    return 0;
            }
                
            pcur->dirty = 0;
8001c9e6:	30 01       	mov	r1,0
//-----------------------------------------------------------------------------
// fatfs_find_blank_cluster: Find a free cluster entry by reading the FAT
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_find_blank_cluster(struct fatfs *fs, uint32 start_cluster, uint32 *free_cluster)
{
8001c9e8:	18 95       	mov	r5,r12
8001c9ea:	14 92       	mov	r2,r10
8001c9ec:	16 93       	mov	r3,r11
8001c9ee:	78 c8       	ld.w	r8,r12[0x30]
    struct fat_buffer *pbuf;

    do
    {
        // Find which sector of FAT table to read
        if (fs->fat_type == FAT_TYPE_16)
8001c9f0:	58 08       	cp.w	r8,0
8001c9f2:	c5 11       	brne	8001ca94 <fatfs_find_blank_cluster+0xb2>
            fat_sector_offset = current_cluster / 256;
8001c9f4:	e6 04 16 08 	lsr	r4,r3,0x8
        else
            fat_sector_offset = current_cluster / 128;

        if ( fat_sector_offset < fs->fat_sectors)
8001c9f8:	6a 88       	ld.w	r8,r5[0x20]
8001c9fa:	10 34       	cp.w	r4,r8
8001c9fc:	c5 12       	brcc	8001ca9e <fatfs_find_blank_cluster+0xbc>
        {
            // Read FAT sector into buffer
            pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001c9fe:	6a 56       	ld.w	r6,r5[0x14]
// fatfs_fat_read_sector: Read a FAT sector
//-----------------------------------------------------------------------------
static struct fat_buffer *fatfs_fat_read_sector(struct fatfs *fs, uint32 sector)
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;
8001ca00:	ea f7 02 54 	ld.w	r7,r5[596]
            fat_sector_offset = current_cluster / 128;

        if ( fat_sector_offset < fs->fat_sectors)
        {
            // Read FAT sector into buffer
            pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
8001ca04:	e8 06 00 06 	add	r6,r4,r6
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001ca08:	58 07       	cp.w	r7,0
8001ca0a:	c6 d0       	breq	8001cae4 <fatfs_find_blank_cluster+0x102>
8001ca0c:	30 09       	mov	r9,0
8001ca0e:	c0 38       	rjmp	8001ca14 <fatfs_find_blank_cluster+0x32>
8001ca10:	0e 99       	mov	r9,r7
8001ca12:	10 97       	mov	r7,r8
    {
        // Sector within this buffer?
        if ((sector >= pcur->address) && (sector < (pcur->address + FAT_BUFFER_SECTORS)))
8001ca14:	ee f8 02 00 	ld.w	r8,r7[512]
8001ca18:	10 36       	cp.w	r6,r8
8001ca1a:	c0 53       	brcs	8001ca24 <fatfs_find_blank_cluster+0x42>
8001ca1c:	f0 ca ff ff 	sub	r10,r8,-1
8001ca20:	14 36       	cp.w	r6,r10
8001ca22:	c5 93       	brcs	8001cad4 <fatfs_find_blank_cluster+0xf2>
            break;

        // End of list?
        if (pcur->next == NULL)
8001ca24:	ee f8 02 0c 	ld.w	r8,r7[524]
8001ca28:	58 08       	cp.w	r8,0
8001ca2a:	cf 31       	brne	8001ca10 <fatfs_find_blank_cluster+0x2e>
        {
            // Remove buffer from list
            if (last)
                last->next = NULL;
8001ca2c:	58 09       	cp.w	r9,0
8001ca2e:	f3 f8 1a 83 	st.wne	r9[0x20c],r8
            // We the first and last buffer in the chain?
            else
                fs->fat_buffer_head = NULL;
8001ca32:	eb f9 0a 95 	st.weq	r5[0x254],r9
        }

        last = pcur;
        pcur = pcur->next;
8001ca36:	ee f8 02 0c 	ld.w	r8,r7[524]
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
8001ca3a:	58 08       	cp.w	r8,0
8001ca3c:	ce a1       	brne	8001ca10 <fatfs_find_blank_cluster+0x2e>
8001ca3e:	ea f8 02 54 	ld.w	r8,r5[596]

    // Else, we removed the last item from the list
    pcur = last;

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
8001ca42:	ef 48 02 0c 	st.w	r7[524],r8
    fs->fat_buffer_head = pcur;
8001ca46:	eb 47 02 54 	st.w	r5[596],r7

    // Writeback sector if changed
    if (pcur->dirty)
8001ca4a:	ee f8 02 04 	ld.w	r8,r7[516]
8001ca4e:	58 08       	cp.w	r8,0
8001ca50:	c5 31       	brne	8001caf6 <fatfs_find_blank_cluster+0x114>
        if (!fatfs_fat_writeback(fs, pcur))
            return 0;

    // Address is now new sector
    pcur->address = sector;
8001ca52:	ef 46 02 00 	st.w	r7[512],r6

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
8001ca56:	0c 9c       	mov	r12,r6
8001ca58:	6a d8       	ld.w	r8,r5[0x34]
8001ca5a:	30 1a       	mov	r10,1
8001ca5c:	0e 9b       	mov	r11,r7
8001ca5e:	5d 18       	icall	r8
8001ca60:	0e 99       	mov	r9,r7
8001ca62:	c6 20       	breq	8001cb26 <fatfs_find_blank_cluster+0x144>
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
        return NULL;
    }

    pcur->ptr = pcur->sector;
8001ca64:	ef 47 02 08 	st.w	r7[520],r7

        if ( fat_sector_offset < fs->fat_sectors)
        {
            // Read FAT sector into buffer
            pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
            if (!pbuf)
8001ca68:	58 07       	cp.w	r7,0
8001ca6a:	c1 a0       	breq	8001ca9e <fatfs_find_blank_cluster+0xbc>
                return 0;

            if (fs->fat_type == FAT_TYPE_16)
8001ca6c:	6a c8       	ld.w	r8,r5[0x30]
8001ca6e:	58 08       	cp.w	r8,0
8001ca70:	c1 c1       	brne	8001caa8 <fatfs_find_blank_cluster+0xc6>
            {
                // Find 32 bit entry of current sector relating to cluster number 
                position = (current_cluster - (fat_sector_offset * 256)) * 2; 

                // Read Next Clusters value from Sector Buffer
                nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);     
8001ca72:	e8 0a 15 08 	lsl	r10,r4,0x8
8001ca76:	e6 0a 01 0a 	sub	r10,r3,r10
8001ca7a:	a1 7a       	lsl	r10,0x1
8001ca7c:	5c 7a       	castu.h	r10
8001ca7e:	f2 0a 07 0b 	ld.ub	r11,r9[r10]
8001ca82:	14 09       	add	r9,r10
8001ca84:	13 99       	ld.ub	r9,r9[0x1]
8001ca86:	a9 69       	lsl	r9,0x8
8001ca88:	16 09       	add	r9,r11

                // Mask out MS 4 bits (its 28bit addressing)
                nextcluster = nextcluster & 0x0FFFFFFF;        
            }

            if (nextcluster !=0 )
8001ca8a:	58 09       	cp.w	r9,0
8001ca8c:	c0 b0       	breq	8001caa2 <fatfs_find_blank_cluster+0xc0>
                current_cluster++;
8001ca8e:	2f f3       	sub	r3,-1
    struct fat_buffer *pbuf;

    do
    {
        // Find which sector of FAT table to read
        if (fs->fat_type == FAT_TYPE_16)
8001ca90:	58 08       	cp.w	r8,0
8001ca92:	cb 10       	breq	8001c9f4 <fatfs_find_blank_cluster+0x12>
            fat_sector_offset = current_cluster / 256;
        else
            fat_sector_offset = current_cluster / 128;
8001ca94:	e6 04 16 07 	lsr	r4,r3,0x7

        if ( fat_sector_offset < fs->fat_sectors)
8001ca98:	6a 88       	ld.w	r8,r5[0x20]
8001ca9a:	10 34       	cp.w	r4,r8
8001ca9c:	cb 13       	brcs	8001c9fe <fatfs_find_blank_cluster+0x1c>
                // Mask out MS 4 bits (its 28bit addressing)
                nextcluster = nextcluster & 0x0FFFFFFF;        
            }

            if (nextcluster !=0 )
                current_cluster++;
8001ca9e:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
            return 0;
    }
    while (nextcluster != 0x0);

    // Found blank entry
    *free_cluster = current_cluster;
8001caa2:	85 03       	st.w	r2[0x0],r3
8001caa4:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
            {
                // Find 32 bit entry of current sector relating to cluster number 
                position = (current_cluster - (fat_sector_offset * 128)) * 4; 

                // Read Next Clusters value from Sector Buffer
                nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);     
8001caa8:	e8 0a 15 07 	lsl	r10,r4,0x7
8001caac:	e6 0a 01 0a 	sub	r10,r3,r10
8001cab0:	a3 6a       	lsl	r10,0x2
8001cab2:	5c 7a       	castu.h	r10
8001cab4:	f2 0a 07 0b 	ld.ub	r11,r9[r10]
8001cab8:	14 09       	add	r9,r10
8001caba:	13 9a       	ld.ub	r10,r9[0x1]
8001cabc:	13 bc       	ld.ub	r12,r9[0x3]
8001cabe:	a9 6a       	lsl	r10,0x8
8001cac0:	b9 6c       	lsl	r12,0x18
8001cac2:	13 a9       	ld.ub	r9,r9[0x2]
8001cac4:	b1 69       	lsl	r9,0x10
8001cac6:	f8 09 00 09 	add	r9,r12,r9
8001caca:	16 09       	add	r9,r11
8001cacc:	14 09       	add	r9,r10

                // Mask out MS 4 bits (its 28bit addressing)
                nextcluster = nextcluster & 0x0FFFFFFF;        
8001cace:	f3 d9 c0 1c 	bfextu	r9,r9,0x0,0x1c
8001cad2:	cd cb       	rjmp	8001ca8a <fatfs_find_blank_cluster+0xa8>
    }

    // We found the sector already in FAT buffer chain
    if (pcur)
    {
        pcur->ptr = (uint8 *)(pcur->sector + ((sector - pcur->address) * FAT_SECTOR_SIZE));
8001cad4:	ec 08 01 09 	sub	r9,r6,r8
8001cad8:	a9 79       	lsl	r9,0x9
8001cada:	ee 09 00 09 	add	r9,r7,r9
8001cade:	ef 49 02 08 	st.w	r7[520],r9
8001cae2:	cc 5b       	rjmp	8001ca6c <fatfs_find_blank_cluster+0x8a>
    }
    while (nextcluster != 0x0);

    // Found blank entry
    *free_cluster = current_cluster;
    return 1;
8001cae4:	0e 98       	mov	r8,r7

    // Else, we removed the last item from the list
    pcur = last;

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
8001cae6:	ef 48 02 0c 	st.w	r7[524],r8
    fs->fat_buffer_head = pcur;
8001caea:	eb 47 02 54 	st.w	r5[596],r7

    // Writeback sector if changed
    if (pcur->dirty)
8001caee:	ee f8 02 04 	ld.w	r8,r7[516]
8001caf2:	58 08       	cp.w	r8,0
8001caf4:	ca f0       	breq	8001ca52 <fatfs_find_blank_cluster+0x70>
//-----------------------------------------------------------------------------
// fatfs_fat_writeback: Writeback 'dirty' FAT sectors to disk
//-----------------------------------------------------------------------------
static int fatfs_fat_writeback(struct fatfs *fs, struct fat_buffer *pcur)
{
    if (pcur)
8001caf6:	58 07       	cp.w	r7,0
8001caf8:	cd 30       	breq	8001ca9e <fatfs_find_blank_cluster+0xbc>
    {
        // Writeback sector if changed
        if (pcur->dirty) 
        {
            if (fs->disk_io.write_media)
8001cafa:	6a e8       	ld.w	r8,r5[0x38]
8001cafc:	58 08       	cp.w	r8,0
8001cafe:	c1 10       	breq	8001cb20 <fatfs_find_blank_cluster+0x13e>
            {
                uint32 sectors = FAT_BUFFER_SECTORS;
                uint32 offset = pcur->address - fs->fat_begin_lba;
8001cb00:	ee fc 02 00 	ld.w	r12,r7[512]
8001cb04:	6a 59       	ld.w	r9,r5[0x14]
8001cb06:	f8 09 01 09 	sub	r9,r12,r9

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
8001cb0a:	f2 cb ff ff 	sub	r11,r9,-1
8001cb0e:	6a 8a       	ld.w	r10,r5[0x20]
8001cb10:	14 3b       	cp.w	r11,r10
8001cb12:	f9 ba 08 01 	movls	r10,1
                    sectors = FAT_BUFFER_SECTORS;
                else
                    sectors = fs->fat_sectors - offset;
8001cb16:	f5 d9 eb 1a 	subhi	r10,r10,r9

                if (!fs->disk_io.write_media(pcur->address, pcur->sector, sectors))
8001cb1a:	0e 9b       	mov	r11,r7
8001cb1c:	5d 18       	icall	r8
8001cb1e:	cc 00       	breq	8001ca9e <fatfs_find_blank_cluster+0xbc>
                    return 0;
            }
                
            pcur->dirty = 0;
8001cb20:	ef 41 02 04 	st.w	r7[516],r1
8001cb24:	c9 7b       	rjmp	8001ca52 <fatfs_find_blank_cluster+0x70>

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
    {
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
8001cb26:	3f f8       	mov	r8,-1
8001cb28:	ef 48 02 00 	st.w	r7[512],r8
8001cb2c:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc

8001cb30 <fatfs_add_file_entry>:
}
//-----------------------------------------------------------------------------
// fatfs_add_file_entry: Add a directory entry to a location found by FindFreeOffset
//-----------------------------------------------------------------------------
int fatfs_add_file_entry(struct fatfs *fs, uint32 dirCluster, char *filename, char *shortfilename, uint32 startCluster, uint32 size, int dir)
{
8001cb30:	d4 31       	pushm	r0-r7,lr
8001cb32:	fa cd 00 88 	sub	sp,sp,136
8001cb36:	50 2b       	stdsp	sp[0x8],r11
8001cb38:	50 4a       	stdsp	sp[0x10],r10
8001cb3a:	51 49       	stdsp	sp[0x50],r9
8001cb3c:	51 58       	stdsp	sp[0x54],r8
8001cb3e:	fa c4 ff 54 	sub	r4,sp,-172
8001cb42:	68 19       	ld.w	r9,r4[0x4]
8001cb44:	51 79       	stdsp	sp[0x5c],r9
8001cb46:	68 04       	ld.w	r4,r4[0x0]
8001cb48:	51 64       	stdsp	sp[0x58],r4
8001cb4a:	18 93       	mov	r3,r12

    uint8 checksum;
    uint8 *pSname;

    // No write access?
    if (!fs->disk_io.write_media)
8001cb4c:	78 e8       	ld.w	r8,r12[0x38]
8001cb4e:	58 08       	cp.w	r8,0
8001cb50:	c0 60       	breq	8001cb5c <fatfs_add_file_entry+0x2c>
        return 0;

#if FATFS_INC_LFN_SUPPORT
    // How many LFN entries are required?
    // NOTE: We always request one LFN even if it would fit in a SFN!
    entryCount = fatfs_lfn_entries_required(filename);
8001cb52:	14 9c       	mov	r12,r10
8001cb54:	fe b0 f7 46 	rcall	8001b9e0 <fatfs_lfn_entries_required>
8001cb58:	18 94       	mov	r4,r12
    if (!entryCount)
8001cb5a:	c0 31       	brne	8001cb60 <fatfs_add_file_entry+0x30>
                        // Short filename
                        fatfs_sfn_create_entry(shortfilename, size, startCluster, &shortEntry, dir);
                        memcpy(&fs->currentsector.sector[recordoffset], &shortEntry, sizeof(shortEntry));

                        // Writeback
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
8001cb5c:	2d ed       	sub	sp,-136
8001cb5e:	d8 3a       	popm	r0-r7,pc,r12=0
    entryCount = 0;    
#endif

    // Find space in the directory for this filename (or allocate some more)
    // NOTE: We need to find space for at least the LFN + SFN (or just the SFN if LFNs not supported).
    if (!fatfs_find_free_dir_offset(fs, dirCluster, entryCount + 1, &dirSector, &dirOffset))
8001cb60:	f8 c8 ff ff 	sub	r8,r12,-1
    int x=0;
    int possible_spaces = 0;
    int start_recorded = 0;

    // No entries required?
    if (entryCount == 0)
8001cb64:	cf c0       	breq	8001cb5c <fatfs_add_file_entry+0x2c>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001cb66:	e6 c9 ff bc 	sub	r9,r3,-68
8001cb6a:	50 39       	stdsp	sp[0xc],r9
8001cb6c:	e6 c9 ff 9c 	sub	r9,r3,-100
8001cb70:	50 59       	stdsp	sp[0x14],r9
8001cb72:	e6 c9 ff 7c 	sub	r9,r3,-132
8001cb76:	50 69       	stdsp	sp[0x18],r9
8001cb78:	e6 c9 ff 5c 	sub	r9,r3,-164
8001cb7c:	50 79       	stdsp	sp[0x1c],r9
8001cb7e:	e6 c9 ff 3c 	sub	r9,r3,-196
8001cb82:	50 89       	stdsp	sp[0x20],r9
8001cb84:	e6 c9 ff 1c 	sub	r9,r3,-228
8001cb88:	50 99       	stdsp	sp[0x24],r9
8001cb8a:	e6 c9 fe fc 	sub	r9,r3,-260
8001cb8e:	50 a9       	stdsp	sp[0x28],r9
8001cb90:	e6 c9 fe dc 	sub	r9,r3,-292
8001cb94:	50 b9       	stdsp	sp[0x2c],r9
8001cb96:	e6 c9 fe bc 	sub	r9,r3,-324
8001cb9a:	50 c9       	stdsp	sp[0x30],r9
8001cb9c:	e6 c9 fe 9c 	sub	r9,r3,-356
8001cba0:	50 d9       	stdsp	sp[0x34],r9
8001cba2:	e6 c9 fe 7c 	sub	r9,r3,-388
8001cba6:	50 e9       	stdsp	sp[0x38],r9
8001cba8:	e6 c9 fe 5c 	sub	r9,r3,-420
8001cbac:	50 f9       	stdsp	sp[0x3c],r9
8001cbae:	e6 c9 fe 3c 	sub	r9,r3,-452
8001cbb2:	51 19       	stdsp	sp[0x44],r9
8001cbb4:	e6 c9 fe 1c 	sub	r9,r3,-484
8001cbb8:	51 09       	stdsp	sp[0x40],r9
8001cbba:	e6 c9 fd fc 	sub	r9,r3,-516
8001cbbe:	30 06       	mov	r6,0
8001cbc0:	51 29       	stdsp	sp[0x48],r9
8001cbc2:	0c 95       	mov	r5,r6
8001cbc4:	e6 c9 fd dc 	sub	r9,r3,-548
8001cbc8:	0c 97       	mov	r7,r6
8001cbca:	51 39       	stdsp	sp[0x4c],r9
8001cbcc:	0c 90       	mov	r0,r6
8001cbce:	50 16       	stdsp	sp[0x4],r6
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001cbd0:	3e 51       	mov	r1,-27
8001cbd2:	51 8c       	stdsp	sp[0x60],r12
8001cbd4:	10 94       	mov	r4,r8
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001cbd6:	40 12       	lddsp	r2,sp[0x4]

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0)) 
8001cbd8:	04 98       	mov	r8,r2
8001cbda:	2f f8       	sub	r8,-1
8001cbdc:	30 09       	mov	r9,0
8001cbde:	50 18       	stdsp	sp[0x4],r8
8001cbe0:	04 9a       	mov	r10,r2
8001cbe2:	40 2b       	lddsp	r11,sp[0x8]
8001cbe4:	06 9c       	mov	r12,r3
8001cbe6:	fe b0 ed 21 	rcall	8001a628 <fatfs_sector_reader>
8001cbea:	e0 80 03 fd 	breq	8001d3e4 <fatfs_add_file_entry+0x8b4>

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001cbee:	40 3c       	lddsp	r12,sp[0xc]
8001cbf0:	fe b0 f4 ed 	rcall	8001b5ca <fatfs_entry_lfn_text>
8001cbf4:	e0 81 00 fe 	brne	8001cdf0 <fatfs_add_file_entry+0x2c0>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001cbf8:	e7 38 00 44 	ld.ub	r8,r3[68]
8001cbfc:	e2 08 18 00 	cp.b	r8,r1
8001cc00:	e0 80 01 89 	breq	8001cf12 <fatfs_add_file_entry+0x3e2>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001cc04:	58 08       	cp.w	r8,0
8001cc06:	e0 80 01 86 	breq	8001cf12 <fatfs_add_file_entry+0x3e2>
8001cc0a:	18 97       	mov	r7,r12
8001cc0c:	18 90       	mov	r0,r12

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001cc0e:	40 5c       	lddsp	r12,sp[0x14]
8001cc10:	fe b0 f4 dd 	rcall	8001b5ca <fatfs_entry_lfn_text>
8001cc14:	e0 81 01 00 	brne	8001ce14 <fatfs_add_file_entry+0x2e4>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001cc18:	e7 38 00 64 	ld.ub	r8,r3[100]
8001cc1c:	e2 08 18 00 	cp.b	r8,r1
8001cc20:	e0 80 03 13 	breq	8001d246 <fatfs_add_file_entry+0x716>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001cc24:	58 08       	cp.w	r8,0
8001cc26:	e0 80 03 10 	breq	8001d246 <fatfs_add_file_entry+0x716>
8001cc2a:	18 97       	mov	r7,r12
8001cc2c:	18 90       	mov	r0,r12

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001cc2e:	40 6c       	lddsp	r12,sp[0x18]
8001cc30:	fe b0 f4 cd 	rcall	8001b5ca <fatfs_entry_lfn_text>
8001cc34:	e0 81 00 e7 	brne	8001ce02 <fatfs_add_file_entry+0x2d2>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001cc38:	e7 38 00 84 	ld.ub	r8,r3[132]
8001cc3c:	e2 08 18 00 	cp.b	r8,r1
8001cc40:	e0 80 02 f7 	breq	8001d22e <fatfs_add_file_entry+0x6fe>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001cc44:	58 08       	cp.w	r8,0
8001cc46:	e0 80 02 f4 	breq	8001d22e <fatfs_add_file_entry+0x6fe>
8001cc4a:	18 97       	mov	r7,r12
8001cc4c:	18 90       	mov	r0,r12

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001cc4e:	40 7c       	lddsp	r12,sp[0x1c]
8001cc50:	fe b0 f4 bd 	rcall	8001b5ca <fatfs_entry_lfn_text>
8001cc54:	e0 81 00 e9 	brne	8001ce26 <fatfs_add_file_entry+0x2f6>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001cc58:	e7 38 00 a4 	ld.ub	r8,r3[164]
8001cc5c:	e2 08 18 00 	cp.b	r8,r1
8001cc60:	e0 80 03 00 	breq	8001d260 <fatfs_add_file_entry+0x730>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001cc64:	58 08       	cp.w	r8,0
8001cc66:	e0 80 02 fd 	breq	8001d260 <fatfs_add_file_entry+0x730>
8001cc6a:	18 97       	mov	r7,r12
8001cc6c:	18 90       	mov	r0,r12

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001cc6e:	40 8c       	lddsp	r12,sp[0x20]
8001cc70:	fe b0 f4 ad 	rcall	8001b5ca <fatfs_entry_lfn_text>
8001cc74:	e0 81 00 e2 	brne	8001ce38 <fatfs_add_file_entry+0x308>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001cc78:	e7 38 00 c4 	ld.ub	r8,r3[196]
8001cc7c:	e2 08 18 00 	cp.b	r8,r1
8001cc80:	e0 80 02 fd 	breq	8001d27a <fatfs_add_file_entry+0x74a>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001cc84:	58 08       	cp.w	r8,0
8001cc86:	e0 80 02 fa 	breq	8001d27a <fatfs_add_file_entry+0x74a>
8001cc8a:	18 97       	mov	r7,r12
8001cc8c:	18 90       	mov	r0,r12

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001cc8e:	40 9c       	lddsp	r12,sp[0x24]
8001cc90:	fe b0 f4 9d 	rcall	8001b5ca <fatfs_entry_lfn_text>
8001cc94:	e0 81 00 db 	brne	8001ce4a <fatfs_add_file_entry+0x31a>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001cc98:	e7 38 00 e4 	ld.ub	r8,r3[228]
8001cc9c:	e2 08 18 00 	cp.b	r8,r1
8001cca0:	e0 80 02 fa 	breq	8001d294 <fatfs_add_file_entry+0x764>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001cca4:	58 08       	cp.w	r8,0
8001cca6:	e0 80 02 f7 	breq	8001d294 <fatfs_add_file_entry+0x764>
8001ccaa:	18 97       	mov	r7,r12
8001ccac:	18 90       	mov	r0,r12

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001ccae:	40 ac       	lddsp	r12,sp[0x28]
8001ccb0:	fe b0 f4 8d 	rcall	8001b5ca <fatfs_entry_lfn_text>
8001ccb4:	e0 81 00 d4 	brne	8001ce5c <fatfs_add_file_entry+0x32c>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001ccb8:	e7 38 01 04 	ld.ub	r8,r3[260]
8001ccbc:	e2 08 18 00 	cp.b	r8,r1
8001ccc0:	e0 80 02 f7 	breq	8001d2ae <fatfs_add_file_entry+0x77e>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001ccc4:	58 08       	cp.w	r8,0
8001ccc6:	e0 80 02 f4 	breq	8001d2ae <fatfs_add_file_entry+0x77e>
8001ccca:	18 97       	mov	r7,r12
8001cccc:	18 90       	mov	r0,r12

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001ccce:	40 bc       	lddsp	r12,sp[0x2c]
8001ccd0:	fe b0 f4 7d 	rcall	8001b5ca <fatfs_entry_lfn_text>
8001ccd4:	e0 81 00 cd 	brne	8001ce6e <fatfs_add_file_entry+0x33e>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001ccd8:	e7 38 01 24 	ld.ub	r8,r3[292]
8001ccdc:	e2 08 18 00 	cp.b	r8,r1
8001cce0:	e0 80 02 f4 	breq	8001d2c8 <fatfs_add_file_entry+0x798>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001cce4:	58 08       	cp.w	r8,0
8001cce6:	e0 80 02 f1 	breq	8001d2c8 <fatfs_add_file_entry+0x798>
8001ccea:	18 97       	mov	r7,r12
8001ccec:	18 90       	mov	r0,r12

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001ccee:	40 cc       	lddsp	r12,sp[0x30]
8001ccf0:	fe b0 f4 6d 	rcall	8001b5ca <fatfs_entry_lfn_text>
8001ccf4:	e0 81 00 c6 	brne	8001ce80 <fatfs_add_file_entry+0x350>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001ccf8:	e7 38 01 44 	ld.ub	r8,r3[324]
8001ccfc:	e2 08 18 00 	cp.b	r8,r1
8001cd00:	e0 80 02 f1 	breq	8001d2e2 <fatfs_add_file_entry+0x7b2>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001cd04:	58 08       	cp.w	r8,0
8001cd06:	e0 80 02 ee 	breq	8001d2e2 <fatfs_add_file_entry+0x7b2>
8001cd0a:	18 97       	mov	r7,r12
8001cd0c:	18 90       	mov	r0,r12

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001cd0e:	40 dc       	lddsp	r12,sp[0x34]
8001cd10:	fe b0 f4 5d 	rcall	8001b5ca <fatfs_entry_lfn_text>
8001cd14:	e0 81 00 c8 	brne	8001cea4 <fatfs_add_file_entry+0x374>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001cd18:	e7 38 01 64 	ld.ub	r8,r3[356]
8001cd1c:	e2 08 18 00 	cp.b	r8,r1
8001cd20:	e0 80 02 ee 	breq	8001d2fc <fatfs_add_file_entry+0x7cc>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001cd24:	58 08       	cp.w	r8,0
8001cd26:	e0 80 02 eb 	breq	8001d2fc <fatfs_add_file_entry+0x7cc>
8001cd2a:	18 97       	mov	r7,r12
8001cd2c:	18 90       	mov	r0,r12

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001cd2e:	40 ec       	lddsp	r12,sp[0x38]
8001cd30:	fe b0 f4 4d 	rcall	8001b5ca <fatfs_entry_lfn_text>
8001cd34:	e0 81 00 af 	brne	8001ce92 <fatfs_add_file_entry+0x362>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001cd38:	e7 38 01 84 	ld.ub	r8,r3[388]
8001cd3c:	e2 08 18 00 	cp.b	r8,r1
8001cd40:	e0 80 02 eb 	breq	8001d316 <fatfs_add_file_entry+0x7e6>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001cd44:	58 08       	cp.w	r8,0
8001cd46:	e0 80 02 e8 	breq	8001d316 <fatfs_add_file_entry+0x7e6>
8001cd4a:	18 97       	mov	r7,r12
8001cd4c:	18 90       	mov	r0,r12

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001cd4e:	40 fc       	lddsp	r12,sp[0x3c]
8001cd50:	fe b0 f4 3d 	rcall	8001b5ca <fatfs_entry_lfn_text>
8001cd54:	e0 81 00 ba 	brne	8001cec8 <fatfs_add_file_entry+0x398>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001cd58:	e7 38 01 a4 	ld.ub	r8,r3[420]
8001cd5c:	e2 08 18 00 	cp.b	r8,r1
8001cd60:	e0 80 02 e8 	breq	8001d330 <fatfs_add_file_entry+0x800>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001cd64:	58 08       	cp.w	r8,0
8001cd66:	e0 80 02 e5 	breq	8001d330 <fatfs_add_file_entry+0x800>
8001cd6a:	18 97       	mov	r7,r12
8001cd6c:	18 90       	mov	r0,r12

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001cd6e:	41 1c       	lddsp	r12,sp[0x44]
8001cd70:	fe b0 f4 2d 	rcall	8001b5ca <fatfs_entry_lfn_text>
8001cd74:	e0 81 00 a1 	brne	8001ceb6 <fatfs_add_file_entry+0x386>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001cd78:	e7 38 01 c4 	ld.ub	r8,r3[452]
8001cd7c:	e2 08 18 00 	cp.b	r8,r1
8001cd80:	e0 80 02 e5 	breq	8001d34a <fatfs_add_file_entry+0x81a>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001cd84:	58 08       	cp.w	r8,0
8001cd86:	e0 80 02 e2 	breq	8001d34a <fatfs_add_file_entry+0x81a>
8001cd8a:	18 97       	mov	r7,r12
8001cd8c:	18 90       	mov	r0,r12

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001cd8e:	41 0c       	lddsp	r12,sp[0x40]
8001cd90:	fe b0 f4 1d 	rcall	8001b5ca <fatfs_entry_lfn_text>
8001cd94:	e0 81 00 ac 	brne	8001ceec <fatfs_add_file_entry+0x3bc>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001cd98:	e7 38 01 e4 	ld.ub	r8,r3[484]
8001cd9c:	e2 08 18 00 	cp.b	r8,r1
8001cda0:	e0 80 02 e2 	breq	8001d364 <fatfs_add_file_entry+0x834>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001cda4:	58 08       	cp.w	r8,0
8001cda6:	e0 80 02 df 	breq	8001d364 <fatfs_add_file_entry+0x834>
8001cdaa:	18 97       	mov	r7,r12
8001cdac:	18 90       	mov	r0,r12

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001cdae:	41 2c       	lddsp	r12,sp[0x48]
8001cdb0:	fe b0 f4 0d 	rcall	8001b5ca <fatfs_entry_lfn_text>
8001cdb4:	e0 81 00 93 	brne	8001ceda <fatfs_add_file_entry+0x3aa>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001cdb8:	e7 38 02 04 	ld.ub	r8,r3[516]
8001cdbc:	e2 08 18 00 	cp.b	r8,r1
8001cdc0:	e0 80 02 df 	breq	8001d37e <fatfs_add_file_entry+0x84e>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001cdc4:	58 08       	cp.w	r8,0
8001cdc6:	e0 80 02 dc 	breq	8001d37e <fatfs_add_file_entry+0x84e>
8001cdca:	18 97       	mov	r7,r12
8001cdcc:	18 90       	mov	r0,r12

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
8001cdce:	41 3c       	lddsp	r12,sp[0x4c]
8001cdd0:	fe b0 f3 fd 	rcall	8001b5ca <fatfs_entry_lfn_text>
8001cdd4:	e0 81 00 95 	brne	8001cefe <fatfs_add_file_entry+0x3ce>
                }
                // SFN Entry
                else 
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
8001cdd8:	e7 38 02 24 	ld.ub	r8,r3[548]
8001cddc:	e2 08 18 00 	cp.b	r8,r1
8001cde0:	e0 80 02 dc 	breq	8001d398 <fatfs_add_file_entry+0x868>
                            return 1;

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
8001cde4:	58 08       	cp.w	r8,0
8001cde6:	e0 80 02 d9 	breq	8001d398 <fatfs_add_file_entry+0x868>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
8001cdea:	18 97       	mov	r7,r12
8001cdec:	18 90       	mov	r0,r12
8001cdee:	cf 4a       	rjmp	8001cbd6 <fatfs_add_file_entry+0xa6>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001cdf0:	58 00       	cp.w	r0,0
8001cdf2:	e4 05 17 00 	moveq	r5,r2
8001cdf6:	e0 06 17 00 	moveq	r6,r0
8001cdfa:	f9 b7 00 01 	moveq	r7,1
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001cdfe:	2f f0       	sub	r0,-1
8001ce00:	c0 7b       	rjmp	8001cc0e <fatfs_add_file_entry+0xde>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001ce02:	58 00       	cp.w	r0,0
8001ce04:	e4 05 17 00 	moveq	r5,r2
8001ce08:	f9 b6 00 02 	moveq	r6,2
8001ce0c:	f9 b7 00 01 	moveq	r7,1
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001ce10:	2f f0       	sub	r0,-1
8001ce12:	c1 eb       	rjmp	8001cc4e <fatfs_add_file_entry+0x11e>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001ce14:	58 00       	cp.w	r0,0
8001ce16:	f9 b6 00 01 	moveq	r6,1
8001ce1a:	e4 05 17 00 	moveq	r5,r2
8001ce1e:	ec 07 17 00 	moveq	r7,r6
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001ce22:	2f f0       	sub	r0,-1
8001ce24:	c0 5b       	rjmp	8001cc2e <fatfs_add_file_entry+0xfe>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001ce26:	58 00       	cp.w	r0,0
8001ce28:	e4 05 17 00 	moveq	r5,r2
8001ce2c:	f9 b6 00 03 	moveq	r6,3
8001ce30:	f9 b7 00 01 	moveq	r7,1
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001ce34:	2f f0       	sub	r0,-1
8001ce36:	c1 cb       	rjmp	8001cc6e <fatfs_add_file_entry+0x13e>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001ce38:	58 00       	cp.w	r0,0
8001ce3a:	e4 05 17 00 	moveq	r5,r2
8001ce3e:	f9 b6 00 04 	moveq	r6,4
8001ce42:	f9 b7 00 01 	moveq	r7,1
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001ce46:	2f f0       	sub	r0,-1
8001ce48:	c2 3b       	rjmp	8001cc8e <fatfs_add_file_entry+0x15e>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001ce4a:	58 00       	cp.w	r0,0
8001ce4c:	e4 05 17 00 	moveq	r5,r2
8001ce50:	f9 b6 00 05 	moveq	r6,5
8001ce54:	f9 b7 00 01 	moveq	r7,1
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001ce58:	2f f0       	sub	r0,-1
8001ce5a:	c2 ab       	rjmp	8001ccae <fatfs_add_file_entry+0x17e>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001ce5c:	58 00       	cp.w	r0,0
8001ce5e:	e4 05 17 00 	moveq	r5,r2
8001ce62:	f9 b6 00 06 	moveq	r6,6
8001ce66:	f9 b7 00 01 	moveq	r7,1
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001ce6a:	2f f0       	sub	r0,-1
8001ce6c:	c3 1b       	rjmp	8001ccce <fatfs_add_file_entry+0x19e>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001ce6e:	58 00       	cp.w	r0,0
8001ce70:	e4 05 17 00 	moveq	r5,r2
8001ce74:	f9 b6 00 07 	moveq	r6,7
8001ce78:	f9 b7 00 01 	moveq	r7,1
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001ce7c:	2f f0       	sub	r0,-1
8001ce7e:	c3 8b       	rjmp	8001ccee <fatfs_add_file_entry+0x1be>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001ce80:	58 00       	cp.w	r0,0
8001ce82:	e4 05 17 00 	moveq	r5,r2
8001ce86:	f9 b6 00 08 	moveq	r6,8
8001ce8a:	f9 b7 00 01 	moveq	r7,1
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001ce8e:	2f f0       	sub	r0,-1
8001ce90:	c3 fb       	rjmp	8001cd0e <fatfs_add_file_entry+0x1de>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001ce92:	58 00       	cp.w	r0,0
8001ce94:	e4 05 17 00 	moveq	r5,r2
8001ce98:	f9 b6 00 0a 	moveq	r6,10
8001ce9c:	f9 b7 00 01 	moveq	r7,1
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001cea0:	2f f0       	sub	r0,-1
8001cea2:	c5 6b       	rjmp	8001cd4e <fatfs_add_file_entry+0x21e>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001cea4:	58 00       	cp.w	r0,0
8001cea6:	e4 05 17 00 	moveq	r5,r2
8001ceaa:	f9 b6 00 09 	moveq	r6,9
8001ceae:	f9 b7 00 01 	moveq	r7,1
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001ceb2:	2f f0       	sub	r0,-1
8001ceb4:	c3 db       	rjmp	8001cd2e <fatfs_add_file_entry+0x1fe>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001ceb6:	58 00       	cp.w	r0,0
8001ceb8:	e4 05 17 00 	moveq	r5,r2
8001cebc:	f9 b6 00 0c 	moveq	r6,12
8001cec0:	f9 b7 00 01 	moveq	r7,1
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001cec4:	2f f0       	sub	r0,-1
8001cec6:	c6 4b       	rjmp	8001cd8e <fatfs_add_file_entry+0x25e>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001cec8:	58 00       	cp.w	r0,0
8001ceca:	e4 05 17 00 	moveq	r5,r2
8001cece:	f9 b6 00 0b 	moveq	r6,11
8001ced2:	f9 b7 00 01 	moveq	r7,1
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001ced6:	2f f0       	sub	r0,-1
8001ced8:	c4 bb       	rjmp	8001cd6e <fatfs_add_file_entry+0x23e>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001ceda:	58 00       	cp.w	r0,0
8001cedc:	e4 05 17 00 	moveq	r5,r2
8001cee0:	f9 b6 00 0e 	moveq	r6,14
8001cee4:	f9 b7 00 01 	moveq	r7,1
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001cee8:	2f f0       	sub	r0,-1
8001ceea:	c7 2b       	rjmp	8001cdce <fatfs_add_file_entry+0x29e>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001ceec:	58 00       	cp.w	r0,0
8001ceee:	e4 05 17 00 	moveq	r5,r2
8001cef2:	f9 b6 00 0d 	moveq	r6,13
8001cef6:	f9 b7 00 01 	moveq	r7,1
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001cefa:	2f f0       	sub	r0,-1
8001cefc:	c5 9b       	rjmp	8001cdae <fatfs_add_file_entry+0x27e>

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
                {
                    // First entry?
                    if (possible_spaces == 0)
8001cefe:	58 00       	cp.w	r0,0
8001cf00:	e4 05 17 00 	moveq	r5,r2
8001cf04:	f9 b6 00 0f 	moveq	r6,15
8001cf08:	f9 b7 00 01 	moveq	r7,1
                        start_recorded = 1;
                    }

                    // Increment the count in-case the file turns 
                    // out to be deleted...
                    possible_spaces++;
8001cf0c:	2f f0       	sub	r0,-1
8001cf0e:	fe 9f fe 64 	bral	8001cbd6 <fatfs_add_file_entry+0xa6>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001cf12:	58 00       	cp.w	r0,0
8001cf14:	e4 05 17 00 	moveq	r5,r2
8001cf18:	e0 06 17 00 	moveq	r6,r0
8001cf1c:	f9 b7 00 01 	moveq	r7,1
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001cf20:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001cf22:	00 34       	cp.w	r4,r0
8001cf24:	fe 99 fe 75 	brgt	8001cc0e <fatfs_add_file_entry+0xde>
8001cf28:	41 84       	lddsp	r4,sp[0x60]
        return 0;

    // Generate checksum of short filename
    pSname = (uint8*)shortfilename;
    checksum = 0;
    for (i=11; i!=0; i--) checksum = ((checksum & 1) ? 0x80 : 0) + (checksum >> 1) + *pSname++;
8001cf2a:	41 49       	lddsp	r9,sp[0x50]
8001cf2c:	13 3a       	ld.ub	r10,r9++
8001cf2e:	13 3c       	ld.ub	r12,r9++
8001cf30:	f4 0b 16 01 	lsr	r11,r10,0x1
8001cf34:	f8 0b 00 0b 	add	r11,r12,r11
8001cf38:	e0 68 00 80 	mov	r8,128
8001cf3c:	13 3c       	ld.ub	r12,r9++
8001cf3e:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8001cf42:	f0 0a 17 10 	movne	r10,r8
8001cf46:	f6 0a 00 0a 	add	r10,r11,r10
8001cf4a:	5c 5a       	castu.b	r10
8001cf4c:	f4 0b 16 01 	lsr	r11,r10,0x1
8001cf50:	f8 0b 00 0b 	add	r11,r12,r11
8001cf54:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8001cf58:	13 3c       	ld.ub	r12,r9++
8001cf5a:	f0 0a 17 10 	movne	r10,r8
8001cf5e:	f6 0a 00 0a 	add	r10,r11,r10
8001cf62:	5c 5a       	castu.b	r10
8001cf64:	f4 0b 16 01 	lsr	r11,r10,0x1
8001cf68:	f8 0b 00 0b 	add	r11,r12,r11
8001cf6c:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8001cf70:	13 3c       	ld.ub	r12,r9++
8001cf72:	f0 0a 17 10 	movne	r10,r8
8001cf76:	f6 0a 00 0a 	add	r10,r11,r10
8001cf7a:	5c 5a       	castu.b	r10
8001cf7c:	f4 0b 16 01 	lsr	r11,r10,0x1
8001cf80:	f8 0b 00 0b 	add	r11,r12,r11
8001cf84:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8001cf88:	13 3c       	ld.ub	r12,r9++
8001cf8a:	f0 0a 17 10 	movne	r10,r8
8001cf8e:	f6 0a 00 0a 	add	r10,r11,r10
8001cf92:	5c 5a       	castu.b	r10
8001cf94:	f4 0b 16 01 	lsr	r11,r10,0x1
8001cf98:	f8 0b 00 0b 	add	r11,r12,r11
8001cf9c:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8001cfa0:	13 3c       	ld.ub	r12,r9++
8001cfa2:	f0 0a 17 10 	movne	r10,r8
8001cfa6:	f6 0a 00 0a 	add	r10,r11,r10
8001cfaa:	5c 5a       	castu.b	r10
8001cfac:	f4 0b 16 01 	lsr	r11,r10,0x1
8001cfb0:	f8 0b 00 0b 	add	r11,r12,r11
8001cfb4:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8001cfb8:	13 3c       	ld.ub	r12,r9++
8001cfba:	f0 0a 17 10 	movne	r10,r8
8001cfbe:	f6 0a 00 0a 	add	r10,r11,r10
8001cfc2:	5c 5a       	castu.b	r10
8001cfc4:	f4 0b 16 01 	lsr	r11,r10,0x1
8001cfc8:	f8 0b 00 0b 	add	r11,r12,r11
8001cfcc:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8001cfd0:	13 3c       	ld.ub	r12,r9++
8001cfd2:	f0 0a 17 10 	movne	r10,r8
8001cfd6:	f6 0a 00 0a 	add	r10,r11,r10
8001cfda:	5c 5a       	castu.b	r10
8001cfdc:	f4 0b 16 01 	lsr	r11,r10,0x1
8001cfe0:	f8 0b 00 0b 	add	r11,r12,r11
8001cfe4:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8001cfe8:	13 3c       	ld.ub	r12,r9++
8001cfea:	f0 0a 17 10 	movne	r10,r8
8001cfee:	f6 0a 00 0a 	add	r10,r11,r10
8001cff2:	5c 5a       	castu.b	r10
8001cff4:	f4 0b 16 01 	lsr	r11,r10,0x1
8001cff8:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8001cffc:	f0 0a 17 10 	movne	r10,r8
8001d000:	f8 0b 00 0b 	add	r11,r12,r11
                    else
                    {
                        entryCount--;

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001d004:	0a 92       	mov	r2,r5
        return 0;

    // Generate checksum of short filename
    pSname = (uint8*)shortfilename;
    checksum = 0;
    for (i=11; i!=0; i--) checksum = ((checksum & 1) ? 0x80 : 0) + (checksum >> 1) + *pSname++;
8001d006:	13 8c       	ld.ub	r12,r9[0x0]
                    else
                    {
                        entryCount--;

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001d008:	30 01       	mov	r1,0
        return 0;

    // Generate checksum of short filename
    pSname = (uint8*)shortfilename;
    checksum = 0;
    for (i=11; i!=0; i--) checksum = ((checksum & 1) ? 0x80 : 0) + (checksum >> 1) + *pSname++;
8001d00a:	f6 0a 00 09 	add	r9,r11,r10
8001d00e:	50 15       	stdsp	sp[0x4],r5
8001d010:	5c 59       	castu.b	r9
8001d012:	0c 95       	mov	r5,r6
8001d014:	f2 0a 16 01 	lsr	r10,r9,0x1
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // If the start position for the entry has been found
                if (foundEnd==0)
                    if ( (dirSector==(x-1)) && (dirOffset==item) )
8001d018:	30 10       	mov	r0,1
        return 0;

    // Generate checksum of short filename
    pSname = (uint8*)shortfilename;
    checksum = 0;
    for (i=11; i!=0; i--) checksum = ((checksum & 1) ? 0x80 : 0) + (checksum >> 1) + *pSname++;
8001d01a:	f8 0a 00 0a 	add	r10,r12,r10
8001d01e:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
8001d022:	40 46       	lddsp	r6,sp[0x10]
8001d024:	f0 09 17 10 	movne	r9,r8
8001d028:	f4 09 00 09 	add	r9,r10,r9
8001d02c:	ef d9 c0 08 	bfextu	r7,r9,0x0,0x8

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0)) 
8001d030:	30 09       	mov	r9,0
8001d032:	04 9a       	mov	r10,r2
8001d034:	40 2b       	lddsp	r11,sp[0x8]
8001d036:	06 9c       	mov	r12,r3
8001d038:	fe b0 ea f8 	rcall	8001a628 <fatfs_sector_reader>
8001d03c:	fe 90 fd 90 	breq	8001cb5c <fatfs_add_file_entry+0x2c>
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // If the start position for the entry has been found
                if (foundEnd==0)
8001d040:	58 01       	cp.w	r1,0
8001d042:	c4 b1       	brne	8001d0d8 <fatfs_add_file_entry+0x5a8>
                    if ( (dirSector==(x-1)) && (dirOffset==item) )
8001d044:	40 19       	lddsp	r9,sp[0x4]
8001d046:	12 32       	cp.w	r2,r9
8001d048:	c0 30       	breq	8001d04e <fatfs_add_file_entry+0x51e>
                if (!fatfs_write_sector(fs, newCluster, i, 0))
                    return 0;
            }

            // If non of the name fitted on previous sectors
            if (!start_recorded) 
8001d04a:	2f f2       	sub	r2,-1
8001d04c:	cf 2b       	rjmp	8001d030 <fatfs_add_file_entry+0x500>
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;

                // If the start position for the entry has been found
                if (foundEnd==0)
                    if ( (dirSector==(x-1)) && (dirOffset==item) )
8001d04e:	58 05       	cp.w	r5,0
8001d050:	c4 40       	breq	8001d0d8 <fatfs_add_file_entry+0x5a8>
8001d052:	e0 05 18 00 	cp.b	r5,r0
8001d056:	c4 b0       	breq	8001d0ec <fatfs_add_file_entry+0x5bc>
8001d058:	30 28       	mov	r8,2
8001d05a:	f0 05 18 00 	cp.b	r5,r8
8001d05e:	c5 10       	breq	8001d100 <fatfs_add_file_entry+0x5d0>
8001d060:	30 39       	mov	r9,3
8001d062:	f2 05 18 00 	cp.b	r5,r9
8001d066:	c5 70       	breq	8001d114 <fatfs_add_file_entry+0x5e4>
8001d068:	30 48       	mov	r8,4
8001d06a:	f0 05 18 00 	cp.b	r5,r8
8001d06e:	c5 d0       	breq	8001d128 <fatfs_add_file_entry+0x5f8>
8001d070:	30 59       	mov	r9,5
8001d072:	f2 05 18 00 	cp.b	r5,r9
8001d076:	c6 30       	breq	8001d13c <fatfs_add_file_entry+0x60c>
8001d078:	30 68       	mov	r8,6
8001d07a:	f0 05 18 00 	cp.b	r5,r8
8001d07e:	c6 90       	breq	8001d150 <fatfs_add_file_entry+0x620>
8001d080:	30 79       	mov	r9,7
8001d082:	f2 05 18 00 	cp.b	r5,r9
8001d086:	c6 f0       	breq	8001d164 <fatfs_add_file_entry+0x634>
8001d088:	30 88       	mov	r8,8
8001d08a:	f0 05 18 00 	cp.b	r5,r8
8001d08e:	c7 50       	breq	8001d178 <fatfs_add_file_entry+0x648>
8001d090:	30 98       	mov	r8,9
8001d092:	f0 05 18 00 	cp.b	r5,r8
8001d096:	c7 b0       	breq	8001d18c <fatfs_add_file_entry+0x65c>
8001d098:	30 a8       	mov	r8,10
8001d09a:	f0 05 18 00 	cp.b	r5,r8
8001d09e:	e0 80 00 81 	breq	8001d1a0 <fatfs_add_file_entry+0x670>
8001d0a2:	30 b8       	mov	r8,11
8001d0a4:	f0 05 18 00 	cp.b	r5,r8
8001d0a8:	e0 80 00 86 	breq	8001d1b4 <fatfs_add_file_entry+0x684>
8001d0ac:	30 c8       	mov	r8,12
8001d0ae:	f0 05 18 00 	cp.b	r5,r8
8001d0b2:	e0 80 00 8b 	breq	8001d1c8 <fatfs_add_file_entry+0x698>
8001d0b6:	30 d8       	mov	r8,13
8001d0b8:	f0 05 18 00 	cp.b	r5,r8
8001d0bc:	e0 80 00 90 	breq	8001d1dc <fatfs_add_file_entry+0x6ac>
8001d0c0:	30 e8       	mov	r8,14
8001d0c2:	f0 05 18 00 	cp.b	r5,r8
8001d0c6:	e0 80 00 95 	breq	8001d1f0 <fatfs_add_file_entry+0x6c0>
8001d0ca:	30 f8       	mov	r8,15
8001d0cc:	f0 05 18 00 	cp.b	r5,r8
8001d0d0:	e0 80 00 9a 	breq	8001d204 <fatfs_add_file_entry+0x6d4>
                if (!fatfs_write_sector(fs, newCluster, i, 0))
                    return 0;
            }

            // If non of the name fitted on previous sectors
            if (!start_recorded) 
8001d0d4:	2f f2       	sub	r2,-1
8001d0d6:	ca db       	rjmp	8001d030 <fatfs_add_file_entry+0x500>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001d0d8:	58 04       	cp.w	r4,0
8001d0da:	e0 80 01 6e 	breq	8001d3b6 <fatfs_add_file_entry+0x886>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001d0de:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001d0e0:	0e 99       	mov	r9,r7
8001d0e2:	08 9a       	mov	r10,r4
8001d0e4:	40 3b       	lddsp	r11,sp[0xc]
8001d0e6:	0c 9c       	mov	r12,r6
8001d0e8:	fe b0 f4 8e 	rcall	8001ba04 <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001d0ec:	58 04       	cp.w	r4,0
8001d0ee:	e0 80 01 b0 	breq	8001d44e <fatfs_add_file_entry+0x91e>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001d0f2:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001d0f4:	0e 99       	mov	r9,r7
8001d0f6:	08 9a       	mov	r10,r4
8001d0f8:	40 5b       	lddsp	r11,sp[0x14]
8001d0fa:	0c 9c       	mov	r12,r6
8001d0fc:	fe b0 f4 84 	rcall	8001ba04 <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001d100:	58 04       	cp.w	r4,0
8001d102:	e0 80 01 a4 	breq	8001d44a <fatfs_add_file_entry+0x91a>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001d106:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001d108:	0e 99       	mov	r9,r7
8001d10a:	08 9a       	mov	r10,r4
8001d10c:	40 6b       	lddsp	r11,sp[0x18]
8001d10e:	0c 9c       	mov	r12,r6
8001d110:	fe b0 f4 7a 	rcall	8001ba04 <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001d114:	58 04       	cp.w	r4,0
8001d116:	e0 80 01 9e 	breq	8001d452 <fatfs_add_file_entry+0x922>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001d11a:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001d11c:	0e 99       	mov	r9,r7
8001d11e:	08 9a       	mov	r10,r4
8001d120:	40 7b       	lddsp	r11,sp[0x1c]
8001d122:	0c 9c       	mov	r12,r6
8001d124:	fe b0 f4 70 	rcall	8001ba04 <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001d128:	58 04       	cp.w	r4,0
8001d12a:	e0 80 01 8d 	breq	8001d444 <fatfs_add_file_entry+0x914>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001d12e:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001d130:	0e 99       	mov	r9,r7
8001d132:	08 9a       	mov	r10,r4
8001d134:	40 8b       	lddsp	r11,sp[0x20]
8001d136:	0c 9c       	mov	r12,r6
8001d138:	fe b0 f4 66 	rcall	8001ba04 <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001d13c:	58 04       	cp.w	r4,0
8001d13e:	e0 80 01 9e 	breq	8001d47a <fatfs_add_file_entry+0x94a>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001d142:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001d144:	0e 99       	mov	r9,r7
8001d146:	08 9a       	mov	r10,r4
8001d148:	40 9b       	lddsp	r11,sp[0x24]
8001d14a:	0c 9c       	mov	r12,r6
8001d14c:	fe b0 f4 5c 	rcall	8001ba04 <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001d150:	58 04       	cp.w	r4,0
8001d152:	e0 80 01 91 	breq	8001d474 <fatfs_add_file_entry+0x944>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001d156:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001d158:	0e 99       	mov	r9,r7
8001d15a:	08 9a       	mov	r10,r4
8001d15c:	40 ab       	lddsp	r11,sp[0x28]
8001d15e:	0c 9c       	mov	r12,r6
8001d160:	fe b0 f4 52 	rcall	8001ba04 <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001d164:	58 04       	cp.w	r4,0
8001d166:	e0 80 01 84 	breq	8001d46e <fatfs_add_file_entry+0x93e>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001d16a:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001d16c:	0e 99       	mov	r9,r7
8001d16e:	08 9a       	mov	r10,r4
8001d170:	40 bb       	lddsp	r11,sp[0x2c]
8001d172:	0c 9c       	mov	r12,r6
8001d174:	fe b0 f4 48 	rcall	8001ba04 <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001d178:	58 04       	cp.w	r4,0
8001d17a:	e0 80 01 77 	breq	8001d468 <fatfs_add_file_entry+0x938>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001d17e:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001d180:	0e 99       	mov	r9,r7
8001d182:	08 9a       	mov	r10,r4
8001d184:	40 cb       	lddsp	r11,sp[0x30]
8001d186:	0c 9c       	mov	r12,r6
8001d188:	fe b0 f4 3e 	rcall	8001ba04 <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001d18c:	58 04       	cp.w	r4,0
8001d18e:	e0 80 01 6a 	breq	8001d462 <fatfs_add_file_entry+0x932>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001d192:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001d194:	0e 99       	mov	r9,r7
8001d196:	08 9a       	mov	r10,r4
8001d198:	40 db       	lddsp	r11,sp[0x34]
8001d19a:	0c 9c       	mov	r12,r6
8001d19c:	fe b0 f4 34 	rcall	8001ba04 <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001d1a0:	58 04       	cp.w	r4,0
8001d1a2:	e0 80 01 5d 	breq	8001d45c <fatfs_add_file_entry+0x92c>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001d1a6:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001d1a8:	0e 99       	mov	r9,r7
8001d1aa:	08 9a       	mov	r10,r4
8001d1ac:	40 eb       	lddsp	r11,sp[0x38]
8001d1ae:	0c 9c       	mov	r12,r6
8001d1b0:	fe b0 f4 2a 	rcall	8001ba04 <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001d1b4:	58 04       	cp.w	r4,0
8001d1b6:	e0 80 01 50 	breq	8001d456 <fatfs_add_file_entry+0x926>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001d1ba:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001d1bc:	0e 99       	mov	r9,r7
8001d1be:	08 9a       	mov	r10,r4
8001d1c0:	40 fb       	lddsp	r11,sp[0x3c]
8001d1c2:	0c 9c       	mov	r12,r6
8001d1c4:	fe b0 f4 20 	rcall	8001ba04 <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001d1c8:	58 04       	cp.w	r4,0
8001d1ca:	e0 80 01 5b 	breq	8001d480 <fatfs_add_file_entry+0x950>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001d1ce:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001d1d0:	0e 99       	mov	r9,r7
8001d1d2:	08 9a       	mov	r10,r4
8001d1d4:	41 1b       	lddsp	r11,sp[0x44]
8001d1d6:	0c 9c       	mov	r12,r6
8001d1d8:	fe b0 f4 16 	rcall	8001ba04 <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001d1dc:	58 04       	cp.w	r4,0
8001d1de:	e0 80 01 57 	breq	8001d48c <fatfs_add_file_entry+0x95c>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001d1e2:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001d1e4:	0e 99       	mov	r9,r7
8001d1e6:	08 9a       	mov	r10,r4
8001d1e8:	41 0b       	lddsp	r11,sp[0x40]
8001d1ea:	0c 9c       	mov	r12,r6
8001d1ec:	fe b0 f4 0c 	rcall	8001ba04 <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001d1f0:	58 04       	cp.w	r4,0
8001d1f2:	e0 80 01 4a 	breq	8001d486 <fatfs_add_file_entry+0x956>
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001d1f6:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001d1f8:	0e 99       	mov	r9,r7
8001d1fa:	08 9a       	mov	r10,r4
8001d1fc:	41 2b       	lddsp	r11,sp[0x48]
8001d1fe:	0c 9c       	mov	r12,r6
8001d200:	fe b0 f4 02 	rcall	8001ba04 <fatfs_filename_to_lfn>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001d204:	58 04       	cp.w	r4,0
8001d206:	e0 80 00 d6 	breq	8001d3b2 <fatfs_add_file_entry+0x882>
                    else
                    {
                        entryCount--;

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001d20a:	41 3b       	lddsp	r11,sp[0x4c]
8001d20c:	0c 9c       	mov	r12,r6
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
8001d20e:	20 14       	sub	r4,1

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum); 
8001d210:	0e 99       	mov	r9,r7
8001d212:	08 9a       	mov	r10,r4
8001d214:	fe b0 f3 f8 	rcall	8001ba04 <fatfs_filename_to_lfn>
            } // End of if

            // Write back to disk before loading another sector
            if (dirtySector)
            {
                if (!fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1))
8001d218:	30 1a       	mov	r10,1
8001d21a:	66 e8       	ld.w	r8,r3[0x38]
8001d21c:	40 3b       	lddsp	r11,sp[0xc]
8001d21e:	e6 fc 02 44 	ld.w	r12,r3[580]
8001d222:	5d 18       	icall	r8
8001d224:	fe 90 fc 9c 	breq	8001cb5c <fatfs_add_file_entry+0x2c>
                if (!fatfs_write_sector(fs, newCluster, i, 0))
                    return 0;
            }

            // If non of the name fitted on previous sectors
            if (!start_recorded) 
8001d228:	30 11       	mov	r1,1
8001d22a:	2f f2       	sub	r2,-1
8001d22c:	c0 2b       	rjmp	8001d030 <fatfs_add_file_entry+0x500>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001d22e:	58 00       	cp.w	r0,0
8001d230:	e4 05 17 00 	moveq	r5,r2
8001d234:	f9 b6 00 02 	moveq	r6,2
8001d238:	f9 b7 00 01 	moveq	r7,1
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001d23c:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001d23e:	00 34       	cp.w	r4,r0
8001d240:	fe 99 fd 07 	brgt	8001cc4e <fatfs_add_file_entry+0x11e>
8001d244:	c7 2a       	rjmp	8001cf28 <fatfs_add_file_entry+0x3f8>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001d246:	58 00       	cp.w	r0,0
8001d248:	f9 b6 00 01 	moveq	r6,1
8001d24c:	e4 05 17 00 	moveq	r5,r2
8001d250:	ec 07 17 00 	moveq	r7,r6
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001d254:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001d256:	00 34       	cp.w	r4,r0
8001d258:	fe 99 fc eb 	brgt	8001cc2e <fatfs_add_file_entry+0xfe>
8001d25c:	fe 9f fe 66 	bral	8001cf28 <fatfs_add_file_entry+0x3f8>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001d260:	58 00       	cp.w	r0,0
8001d262:	e4 05 17 00 	moveq	r5,r2
8001d266:	f9 b6 00 03 	moveq	r6,3
8001d26a:	f9 b7 00 01 	moveq	r7,1
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001d26e:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001d270:	00 34       	cp.w	r4,r0
8001d272:	fe 99 fc fe 	brgt	8001cc6e <fatfs_add_file_entry+0x13e>
8001d276:	fe 9f fe 59 	bral	8001cf28 <fatfs_add_file_entry+0x3f8>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001d27a:	58 00       	cp.w	r0,0
8001d27c:	e4 05 17 00 	moveq	r5,r2
8001d280:	f9 b6 00 04 	moveq	r6,4
8001d284:	f9 b7 00 01 	moveq	r7,1
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001d288:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001d28a:	00 34       	cp.w	r4,r0
8001d28c:	fe 99 fd 01 	brgt	8001cc8e <fatfs_add_file_entry+0x15e>
8001d290:	fe 9f fe 4c 	bral	8001cf28 <fatfs_add_file_entry+0x3f8>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001d294:	58 00       	cp.w	r0,0
8001d296:	e4 05 17 00 	moveq	r5,r2
8001d29a:	f9 b6 00 05 	moveq	r6,5
8001d29e:	f9 b7 00 01 	moveq	r7,1
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001d2a2:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001d2a4:	00 34       	cp.w	r4,r0
8001d2a6:	fe 99 fd 04 	brgt	8001ccae <fatfs_add_file_entry+0x17e>
8001d2aa:	fe 9f fe 3f 	bral	8001cf28 <fatfs_add_file_entry+0x3f8>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001d2ae:	58 00       	cp.w	r0,0
8001d2b0:	e4 05 17 00 	moveq	r5,r2
8001d2b4:	f9 b6 00 06 	moveq	r6,6
8001d2b8:	f9 b7 00 01 	moveq	r7,1
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001d2bc:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001d2be:	00 34       	cp.w	r4,r0
8001d2c0:	fe 99 fd 07 	brgt	8001ccce <fatfs_add_file_entry+0x19e>
8001d2c4:	fe 9f fe 32 	bral	8001cf28 <fatfs_add_file_entry+0x3f8>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001d2c8:	58 00       	cp.w	r0,0
8001d2ca:	e4 05 17 00 	moveq	r5,r2
8001d2ce:	f9 b6 00 07 	moveq	r6,7
8001d2d2:	f9 b7 00 01 	moveq	r7,1
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001d2d6:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001d2d8:	00 34       	cp.w	r4,r0
8001d2da:	fe 99 fd 0a 	brgt	8001ccee <fatfs_add_file_entry+0x1be>
8001d2de:	fe 9f fe 25 	bral	8001cf28 <fatfs_add_file_entry+0x3f8>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001d2e2:	58 00       	cp.w	r0,0
8001d2e4:	e4 05 17 00 	moveq	r5,r2
8001d2e8:	f9 b6 00 08 	moveq	r6,8
8001d2ec:	f9 b7 00 01 	moveq	r7,1
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001d2f0:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001d2f2:	00 34       	cp.w	r4,r0
8001d2f4:	fe 99 fd 0d 	brgt	8001cd0e <fatfs_add_file_entry+0x1de>
8001d2f8:	fe 9f fe 18 	bral	8001cf28 <fatfs_add_file_entry+0x3f8>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001d2fc:	58 00       	cp.w	r0,0
8001d2fe:	e4 05 17 00 	moveq	r5,r2
8001d302:	f9 b6 00 09 	moveq	r6,9
8001d306:	f9 b7 00 01 	moveq	r7,1
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001d30a:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001d30c:	00 34       	cp.w	r4,r0
8001d30e:	fe 99 fd 10 	brgt	8001cd2e <fatfs_add_file_entry+0x1fe>
8001d312:	fe 9f fe 0b 	bral	8001cf28 <fatfs_add_file_entry+0x3f8>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001d316:	58 00       	cp.w	r0,0
8001d318:	e4 05 17 00 	moveq	r5,r2
8001d31c:	f9 b6 00 0a 	moveq	r6,10
8001d320:	f9 b7 00 01 	moveq	r7,1
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001d324:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001d326:	00 34       	cp.w	r4,r0
8001d328:	fe 99 fd 13 	brgt	8001cd4e <fatfs_add_file_entry+0x21e>
8001d32c:	fe 9f fd fe 	bral	8001cf28 <fatfs_add_file_entry+0x3f8>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001d330:	58 00       	cp.w	r0,0
8001d332:	e4 05 17 00 	moveq	r5,r2
8001d336:	f9 b6 00 0b 	moveq	r6,11
8001d33a:	f9 b7 00 01 	moveq	r7,1
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001d33e:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001d340:	00 34       	cp.w	r4,r0
8001d342:	fe 99 fd 16 	brgt	8001cd6e <fatfs_add_file_entry+0x23e>
8001d346:	fe 9f fd f1 	bral	8001cf28 <fatfs_add_file_entry+0x3f8>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001d34a:	58 00       	cp.w	r0,0
8001d34c:	e4 05 17 00 	moveq	r5,r2
8001d350:	f9 b6 00 0c 	moveq	r6,12
8001d354:	f9 b7 00 01 	moveq	r7,1
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001d358:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001d35a:	00 34       	cp.w	r4,r0
8001d35c:	fe 99 fd 19 	brgt	8001cd8e <fatfs_add_file_entry+0x25e>
8001d360:	fe 9f fd e4 	bral	8001cf28 <fatfs_add_file_entry+0x3f8>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001d364:	58 00       	cp.w	r0,0
8001d366:	e4 05 17 00 	moveq	r5,r2
8001d36a:	f9 b6 00 0d 	moveq	r6,13
8001d36e:	f9 b7 00 01 	moveq	r7,1
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001d372:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001d374:	00 34       	cp.w	r4,r0
8001d376:	fe 99 fd 1c 	brgt	8001cdae <fatfs_add_file_entry+0x27e>
8001d37a:	fe 9f fd d7 	bral	8001cf28 <fatfs_add_file_entry+0x3f8>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001d37e:	58 00       	cp.w	r0,0
8001d380:	e4 05 17 00 	moveq	r5,r2
8001d384:	f9 b6 00 0e 	moveq	r6,14
8001d388:	f9 b7 00 01 	moveq	r7,1
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001d38c:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001d38e:	00 34       	cp.w	r4,r0
8001d390:	fe 99 fd 1f 	brgt	8001cdce <fatfs_add_file_entry+0x29e>
8001d394:	fe 9f fd ca 	bral	8001cf28 <fatfs_add_file_entry+0x3f8>
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
                    {
                        // First entry?
                        if (possible_spaces == 0)
8001d398:	58 00       	cp.w	r0,0
8001d39a:	e4 05 17 00 	moveq	r5,r2
8001d39e:	f9 b6 00 0f 	moveq	r6,15
8001d3a2:	f9 b7 00 01 	moveq	r7,1
                            *pSector = x-1;
                            *pOffset = item;
                            start_recorded = 1;
                        }

                        possible_spaces++;
8001d3a6:	2f f0       	sub	r0,-1

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
8001d3a8:	00 34       	cp.w	r4,r0
8001d3aa:	fe 99 fc 16 	brgt	8001cbd6 <fatfs_add_file_entry+0xa6>
8001d3ae:	fe 9f fd bd 	bral	8001cf28 <fatfs_add_file_entry+0x3f8>
            } // End of if

            // Write back to disk before loading another sector
            if (dirtySector)
            {
                if (!fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1))
8001d3b2:	e0 64 01 e0 	mov	r4,480
                if (foundEnd)
                {                
                    if (entryCount==0)
                    {
                        // Short filename
                        fatfs_sfn_create_entry(shortfilename, size, startCluster, &shortEntry, dir);
8001d3b6:	fa c7 ff 9c 	sub	r7,sp,-100
8001d3ba:	41 78       	lddsp	r8,sp[0x5c]
8001d3bc:	41 5a       	lddsp	r10,sp[0x54]
8001d3be:	41 6b       	lddsp	r11,sp[0x58]
8001d3c0:	41 4c       	lddsp	r12,sp[0x50]
8001d3c2:	0e 99       	mov	r9,r7
8001d3c4:	fe b0 f1 5e 	rcall	8001b680 <fatfs_sfn_create_entry>
                        memcpy(&fs->currentsector.sector[recordoffset], &shortEntry, sizeof(shortEntry));
8001d3c8:	0e 9b       	mov	r11,r7
8001d3ca:	40 3c       	lddsp	r12,sp[0xc]
8001d3cc:	32 0a       	mov	r10,32
8001d3ce:	08 0c       	add	r12,r4
8001d3d0:	e0 a0 1f 00 	rcall	800211d0 <memcpy>

                        // Writeback
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
8001d3d4:	40 3b       	lddsp	r11,sp[0xc]
8001d3d6:	e6 fc 02 44 	ld.w	r12,r3[580]
8001d3da:	66 e8       	ld.w	r8,r3[0x38]
8001d3dc:	30 1a       	mov	r10,1
8001d3de:	5d 18       	icall	r8
        else
            return 0;
    } // End of while loop

    return 0;
}
8001d3e0:	2d ed       	sub	sp,-136
8001d3e2:	d8 32       	popm	r0-r7,pc
8001d3e4:	18 98       	mov	r8,r12
        else
        {
            uint32 newCluster;

            // Get a new cluster for directory
            if (!fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &newCluster))
8001d3e6:	66 2b       	ld.w	r11,r3[0x8]
8001d3e8:	41 84       	lddsp	r4,sp[0x60]
8001d3ea:	fa ca ff 7c 	sub	r10,sp,-132
8001d3ee:	06 9c       	mov	r12,r3
8001d3f0:	50 08       	stdsp	sp[0x0],r8
8001d3f2:	fe b0 fa f8 	rcall	8001c9e2 <fatfs_find_blank_cluster>
8001d3f6:	fe 90 fb b3 	breq	8001cb5c <fatfs_add_file_entry+0x2c>
                return 0;

            // Add cluster to end of directory tree
            if (!fatfs_fat_add_cluster_to_chain(fs, dirCluster, newCluster))
8001d3fa:	42 1a       	lddsp	r10,sp[0x84]
8001d3fc:	40 2b       	lddsp	r11,sp[0x8]
8001d3fe:	06 9c       	mov	r12,r3
8001d400:	fe b0 f8 d6 	rcall	8001c5ac <fatfs_fat_add_cluster_to_chain>
8001d404:	40 08       	lddsp	r8,sp[0x0]
8001d406:	fe 90 fb ab 	breq	8001cb5c <fatfs_add_file_entry+0x2c>
                return 0;

            // Erase new directory cluster
            memset(fs->currentsector.sector, 0x00, FAT_SECTOR_SIZE);
8001d40a:	e0 6a 02 00 	mov	r10,512
8001d40e:	10 9b       	mov	r11,r8
8001d410:	40 3c       	lddsp	r12,sp[0xc]
8001d412:	e0 a0 1f 83 	rcall	80021318 <memset>
            for (i=0;i<fs->sectors_per_cluster;i++)
8001d416:	07 8a       	ld.ub	r10,r3[0x0]
8001d418:	40 08       	lddsp	r8,sp[0x0]
8001d41a:	f0 0a 18 00 	cp.b	r10,r8
8001d41e:	c3 a0       	breq	8001d492 <fatfs_add_file_entry+0x962>
8001d420:	10 91       	mov	r1,r8
8001d422:	c0 88       	rjmp	8001d432 <fatfs_add_file_entry+0x902>
8001d424:	2f f1       	sub	r1,-1
8001d426:	07 88       	ld.ub	r8,r3[0x0]
8001d428:	5c 51       	castu.b	r1
8001d42a:	e2 08 18 00 	cp.b	r8,r1
8001d42e:	e0 88 00 32 	brls	8001d492 <fatfs_add_file_entry+0x962>
            {
                if (!fatfs_write_sector(fs, newCluster, i, 0))
8001d432:	02 9a       	mov	r10,r1
8001d434:	30 09       	mov	r9,0
8001d436:	42 1b       	lddsp	r11,sp[0x84]
8001d438:	06 9c       	mov	r12,r3
8001d43a:	fe b0 e8 a9 	rcall	8001a58c <fatfs_write_sector>
8001d43e:	cf 31       	brne	8001d424 <fatfs_add_file_entry+0x8f4>
8001d440:	fe 9f fb 8e 	bral	8001cb5c <fatfs_add_file_entry+0x2c>
                        foundEnd = 1;

                // Start adding filename
                if (foundEnd)
                {                
                    if (entryCount==0)
8001d444:	e0 64 00 80 	mov	r4,128
8001d448:	cb 7b       	rjmp	8001d3b6 <fatfs_add_file_entry+0x886>
8001d44a:	34 04       	mov	r4,64
8001d44c:	cb 5b       	rjmp	8001d3b6 <fatfs_add_file_entry+0x886>
8001d44e:	32 04       	mov	r4,32
8001d450:	cb 3b       	rjmp	8001d3b6 <fatfs_add_file_entry+0x886>
8001d452:	36 04       	mov	r4,96
8001d454:	cb 1b       	rjmp	8001d3b6 <fatfs_add_file_entry+0x886>
8001d456:	e0 64 01 60 	mov	r4,352
8001d45a:	ca eb       	rjmp	8001d3b6 <fatfs_add_file_entry+0x886>
8001d45c:	e0 64 01 40 	mov	r4,320
8001d460:	ca bb       	rjmp	8001d3b6 <fatfs_add_file_entry+0x886>
8001d462:	e0 64 01 20 	mov	r4,288
8001d466:	ca 8b       	rjmp	8001d3b6 <fatfs_add_file_entry+0x886>
8001d468:	e0 64 01 00 	mov	r4,256
8001d46c:	ca 5b       	rjmp	8001d3b6 <fatfs_add_file_entry+0x886>
8001d46e:	e0 64 00 e0 	mov	r4,224
8001d472:	ca 2b       	rjmp	8001d3b6 <fatfs_add_file_entry+0x886>
8001d474:	e0 64 00 c0 	mov	r4,192
8001d478:	c9 fb       	rjmp	8001d3b6 <fatfs_add_file_entry+0x886>
8001d47a:	e0 64 00 a0 	mov	r4,160
8001d47e:	c9 cb       	rjmp	8001d3b6 <fatfs_add_file_entry+0x886>
8001d480:	e0 64 01 80 	mov	r4,384
8001d484:	c9 9b       	rjmp	8001d3b6 <fatfs_add_file_entry+0x886>
8001d486:	e0 64 01 c0 	mov	r4,448
8001d48a:	c9 6b       	rjmp	8001d3b6 <fatfs_add_file_entry+0x886>
8001d48c:	e0 64 01 a0 	mov	r4,416
8001d490:	c9 3b       	rjmp	8001d3b6 <fatfs_add_file_entry+0x886>
                        // Short filename
                        fatfs_sfn_create_entry(shortfilename, size, startCluster, &shortEntry, dir);
                        memcpy(&fs->currentsector.sector[recordoffset], &shortEntry, sizeof(shortEntry));

                        // Writeback
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
8001d492:	58 07       	cp.w	r7,0
8001d494:	e4 05 17 00 	moveq	r5,r2
8001d498:	ee 06 17 00 	moveq	r6,r7
8001d49c:	fe 9f fd 47 	bral	8001cf2a <fatfs_add_file_entry+0x3fa>

8001d4a0 <fatfs_add_free_space>:
8001d4a0:	eb cd 40 fc 	pushm	r2-r7,lr
8001d4a4:	20 1d       	sub	sp,4
8001d4a6:	16 92       	mov	r2,r11
8001d4a8:	14 94       	mov	r4,r10
8001d4aa:	18 97       	mov	r7,r12
8001d4ac:	76 05       	ld.w	r5,r11[0x0]
8001d4ae:	78 98       	ld.w	r8,r12[0x24]
8001d4b0:	5b f8       	cp.w	r8,-1
8001d4b2:	c0 40       	breq	8001d4ba <fatfs_add_free_space+0x1a>
8001d4b4:	3f fb       	mov	r11,-1
8001d4b6:	fe b0 f6 97 	rcall	8001c1e4 <fatfs_set_fs_info_next_free_cluster>
8001d4ba:	58 04       	cp.w	r4,0
8001d4bc:	c2 20       	breq	8001d500 <fatfs_add_free_space+0x60>
8001d4be:	30 06       	mov	r6,0
8001d4c0:	1a 93       	mov	r3,sp
8001d4c2:	c1 18       	rjmp	8001d4e4 <fatfs_add_free_space+0x44>
8001d4c4:	40 0a       	lddsp	r10,sp[0x0]
8001d4c6:	fe b0 f7 e3 	rcall	8001c48c <fatfs_fat_set_cluster>
        {
            // Point last to this
            fatfs_fat_set_cluster(fs, start, nextcluster);
            
            // Point this to end of file
            fatfs_fat_set_cluster(fs, nextcluster, FAT32_LAST_CLUSTER);
8001d4ca:	3f fa       	mov	r10,-1
8001d4cc:	40 0b       	lddsp	r11,sp[0x0]
8001d4ce:	0e 9c       	mov	r12,r7
8001d4d0:	fe b0 f7 de 	rcall	8001c48c <fatfs_fat_set_cluster>

            // Adjust argument reference
            start = nextcluster;
8001d4d4:	40 05       	lddsp	r5,sp[0x0]
            if (i == 0)
                *startCluster = nextcluster;
8001d4d6:	58 06       	cp.w	r6,0
8001d4d8:	e5 f5 0a 00 	st.weq	r2[0x0],r5

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER); 

    for (i=0;i<clusters;i++)
8001d4dc:	2f f6       	sub	r6,-1
8001d4de:	0c 34       	cp.w	r4,r6
8001d4e0:	e0 88 00 10 	brls	8001d500 <fatfs_add_free_space+0x60>
    {
        // Start looking for free clusters from the beginning
        if (fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
8001d4e4:	6e 2b       	ld.w	r11,r7[0x8]
8001d4e6:	1a 9a       	mov	r10,sp
8001d4e8:	0e 9c       	mov	r12,r7
8001d4ea:	fe b0 fa 7c 	rcall	8001c9e2 <fatfs_find_blank_cluster>
        {
            // Point last to this
            fatfs_fat_set_cluster(fs, start, nextcluster);
8001d4ee:	0a 9b       	mov	r11,r5
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER); 

    for (i=0;i<clusters;i++)
    {
        // Start looking for free clusters from the beginning
        if (fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
8001d4f0:	18 98       	mov	r8,r12
        {
            // Point last to this
            fatfs_fat_set_cluster(fs, start, nextcluster);
8001d4f2:	0e 9c       	mov	r12,r7
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER); 

    for (i=0;i<clusters;i++)
    {
        // Start looking for free clusters from the beginning
        if (fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
8001d4f4:	58 08       	cp.w	r8,0
8001d4f6:	ce 71       	brne	8001d4c4 <fatfs_add_free_space+0x24>
8001d4f8:	10 9c       	mov	r12,r8
        else
            return 0;
    }

    return 1;
}
8001d4fa:	2f fd       	sub	sp,-4
8001d4fc:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER); 

    for (i=0;i<clusters;i++)
8001d500:	2f fd       	sub	sp,-4
8001d502:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
8001d506:	d7 03       	nop

8001d508 <fatfs_allocate_free_space>:
8001d508:	eb cd 40 f8 	pushm	r3-r7,lr
8001d50c:	20 3d       	sub	sp,12
8001d50e:	16 97       	mov	r7,r11
8001d510:	14 96       	mov	r6,r10
8001d512:	18 95       	mov	r5,r12
{
    uint32 clusterSize;
    uint32 clusterCount;
    uint32 nextcluster;

    if (size==0)
8001d514:	58 09       	cp.w	r9,0
8001d516:	c3 c0       	breq	8001d58e <fatfs_allocate_free_space+0x86>
        return 0;

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
8001d518:	78 98       	ld.w	r8,r12[0x24]
8001d51a:	5b f8       	cp.w	r8,-1
8001d51c:	c0 60       	breq	8001d528 <fatfs_allocate_free_space+0x20>
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER); 
8001d51e:	50 09       	stdsp	sp[0x0],r9
8001d520:	3f fb       	mov	r11,-1
8001d522:	fe b0 f6 61 	rcall	8001c1e4 <fatfs_set_fs_info_next_free_cluster>
8001d526:	40 09       	lddsp	r9,sp[0x0]

    // Work out size and clusters
    clusterSize = fs->sectors_per_cluster * FAT_SECTOR_SIZE;
8001d528:	0b 88       	ld.ub	r8,r5[0x0]
8001d52a:	a9 78       	lsl	r8,0x9
    clusterCount = (size / clusterSize);
8001d52c:	f2 08 0d 0a 	divu	r10,r9,r8
8001d530:	14 94       	mov	r4,r10

    // If any left over
    if (size-(clusterSize*clusterCount))
8001d532:	f4 08 02 48 	mul	r8,r10,r8
        clusterCount++;
8001d536:	12 38       	cp.w	r8,r9
8001d538:	f7 b4 01 ff 	subne	r4,-1

    // Allocated first link in the chain if a new file
    if (newFile)
8001d53c:	58 07       	cp.w	r7,0
8001d53e:	c2 f1       	brne	8001d59c <fatfs_allocate_free_space+0x94>
            return 1;
        }
    }
    // Allocate from end of current chain (startCluster is end of chain)
    else
        nextcluster = *startCluster;
8001d540:	6c 06       	ld.w	r6,r6[0x0]
8001d542:	50 26       	stdsp	sp[0x8],r6
    uint32 i;
    uint32 nextcluster;
    uint32 start = *startCluster;

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
8001d544:	6a 98       	ld.w	r8,r5[0x24]
8001d546:	5b f8       	cp.w	r8,-1
8001d548:	c0 50       	breq	8001d552 <fatfs_allocate_free_space+0x4a>
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER); 
8001d54a:	3f fb       	mov	r11,-1
8001d54c:	0a 9c       	mov	r12,r5
8001d54e:	fe b0 f6 4b 	rcall	8001c1e4 <fatfs_set_fs_info_next_free_cluster>

    for (i=0;i<clusters;i++)
8001d552:	58 04       	cp.w	r4,0
8001d554:	c2 10       	breq	8001d596 <fatfs_allocate_free_space+0x8e>
8001d556:	30 07       	mov	r7,0
8001d558:	fa c3 ff fc 	sub	r3,sp,-4
8001d55c:	c1 28       	rjmp	8001d580 <fatfs_allocate_free_space+0x78>
    {
        // Start looking for free clusters from the beginning
        if (fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
        {
            // Point last to this
            fatfs_fat_set_cluster(fs, start, nextcluster);
8001d55e:	40 1a       	lddsp	r10,sp[0x4]
8001d560:	0a 9c       	mov	r12,r5
8001d562:	fe b0 f7 95 	rcall	8001c48c <fatfs_fat_set_cluster>
            
            // Point this to end of file
            fatfs_fat_set_cluster(fs, nextcluster, FAT32_LAST_CLUSTER);
8001d566:	3f fa       	mov	r10,-1
8001d568:	40 1b       	lddsp	r11,sp[0x4]
8001d56a:	0a 9c       	mov	r12,r5
8001d56c:	fe b0 f7 90 	rcall	8001c48c <fatfs_fat_set_cluster>

            // Adjust argument reference
            start = nextcluster;
8001d570:	40 16       	lddsp	r6,sp[0x4]
            if (i == 0)
                *startCluster = nextcluster;
8001d572:	58 07       	cp.w	r7,0
8001d574:	fb f6 0a 02 	st.weq	sp[0x8],r6

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER); 

    for (i=0;i<clusters;i++)
8001d578:	2f f7       	sub	r7,-1
8001d57a:	0e 34       	cp.w	r4,r7
8001d57c:	e0 88 00 0d 	brls	8001d596 <fatfs_allocate_free_space+0x8e>
    {
        // Start looking for free clusters from the beginning
        if (fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
8001d580:	6a 2b       	ld.w	r11,r5[0x8]
8001d582:	06 9a       	mov	r10,r3
8001d584:	0a 9c       	mov	r12,r5
8001d586:	fe b0 fa 2e 	rcall	8001c9e2 <fatfs_find_blank_cluster>
        {
            // Point last to this
            fatfs_fat_set_cluster(fs, start, nextcluster);
8001d58a:	0c 9b       	mov	r11,r6
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER); 

    for (i=0;i<clusters;i++)
    {
        // Start looking for free clusters from the beginning
        if (fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
8001d58c:	ce 91       	brne	8001d55e <fatfs_allocate_free_space+0x56>

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER); 

    for (i=0;i<clusters;i++)
8001d58e:	30 0c       	mov	r12,0

    if (!fatfs_add_free_space(fs, &nextcluster, clusterCount))
            return 0;

    return 1;
}
8001d590:	2f dd       	sub	sp,-12
8001d592:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER); 

    for (i=0;i<clusters;i++)
8001d596:	2f dd       	sub	sp,-12
8001d598:	e3 cf 90 f8 	ldm	sp++,r3-r7,pc,r12=1
        clusterCount++;

    // Allocated first link in the chain if a new file
    if (newFile)
    {
        if (!fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
8001d59c:	fa ca ff f8 	sub	r10,sp,-8
8001d5a0:	6a 2b       	ld.w	r11,r5[0x8]
8001d5a2:	0a 9c       	mov	r12,r5
8001d5a4:	fe b0 fa 1f 	rcall	8001c9e2 <fatfs_find_blank_cluster>
8001d5a8:	cf 30       	breq	8001d58e <fatfs_allocate_free_space+0x86>
            return 0;

        // If this is all that is needed then all done
        if (clusterCount==1)
8001d5aa:	58 14       	cp.w	r4,1
8001d5ac:	c0 30       	breq	8001d5b2 <fatfs_allocate_free_space+0xaa>
8001d5ae:	40 26       	lddsp	r6,sp[0x8]
8001d5b0:	cc ab       	rjmp	8001d544 <fatfs_allocate_free_space+0x3c>
        {
            fatfs_fat_set_cluster(fs, nextcluster, FAT32_LAST_CLUSTER);
8001d5b2:	0a 9c       	mov	r12,r5
8001d5b4:	3f fa       	mov	r10,-1
8001d5b6:	40 2b       	lddsp	r11,sp[0x8]
8001d5b8:	fe b0 f7 6a 	rcall	8001c48c <fatfs_fat_set_cluster>
            *startCluster = nextcluster;
8001d5bc:	40 28       	lddsp	r8,sp[0x8]
8001d5be:	08 9c       	mov	r12,r4
8001d5c0:	8d 08       	st.w	r6[0x0],r8
            return 1;
8001d5c2:	ce 7b       	rjmp	8001d590 <fatfs_allocate_free_space+0x88>

8001d5c4 <itoa_whole>:
    i++; p++;
  }
}

// format whole part, right justified
void itoa_whole(int val, char* buf, int len) {
8001d5c4:	eb cd 40 fe 	pushm	r1-r7,lr
  static char* p;
  p = buf + len - 1; // right justify; start at end
8001d5c8:	e0 69 37 24 	mov	r9,14116
8001d5cc:	f4 c8 00 01 	sub	r8,r10,1
8001d5d0:	f6 08 00 08 	add	r8,r11,r8
  if(val == 0) {
8001d5d4:	93 08       	st.w	r9[0x0],r8
8001d5d6:	58 0c       	cp.w	r12,0
    *p = '0'; p--;
8001d5d8:	c2 11       	brne	8001d61a <itoa_whole+0x56>
8001d5da:	33 0a       	mov	r10,48
8001d5dc:	b0 8a       	st.b	r8[0x0],r10
8001d5de:	f0 ce 00 01 	sub	lr,r8,1
    while(p >= buf) {
8001d5e2:	93 0e       	st.w	r9[0x0],lr
8001d5e4:	1c 3b       	cp.w	r11,lr
8001d5e6:	e0 8b 00 18 	brhi	8001d616 <itoa_whole+0x52>
      *p = ' ';
8001d5ea:	1c 9a       	mov	r10,lr
8001d5ec:	32 0c       	mov	r12,32
8001d5ee:	b4 8c       	st.b	r10[0x0],r12
void itoa_whole(int val, char* buf, int len) {
  static char* p;
  p = buf + len - 1; // right justify; start at end
  if(val == 0) {
    *p = '0'; p--;
    while(p >= buf) {
8001d5f0:	20 1a       	sub	r10,1
8001d5f2:	14 3b       	cp.w	r11,r10
8001d5f4:	fe 98 ff fd 	brls	8001d5ee <itoa_whole+0x2a>
8001d5f8:	10 1b       	sub	r11,r8
8001d5fa:	16 0e       	add	lr,r11
8001d5fc:	93 0e       	st.w	r9[0x0],lr
8001d5fe:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
    val = BIT_INVERT(val) + 1; // FIXME: this will wrap at 0xffffffff
  }

  u = (unsigned int)val;

  while(p >= buf) {
8001d602:	f6 c8 00 01 	sub	r8,r11,1
8001d606:	83 0a       	st.w	r1[0x0],r10
8001d608:	85 0c       	st.w	r2[0x0],r12
      *p = ' '; 
    }
    p--;

  }
  if(sign) { *buf = '-'; }
8001d60a:	93 08       	st.w	r9[0x0],r8
8001d60c:	58 03       	cp.w	r3,0
8001d60e:	f9 b8 01 2d 	movne	r8,45
8001d612:	f7 f8 1e 00 	st.bne	r11[0x0],r8
8001d616:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
      *p = ' ';
      p--;
    }
    return;
  }
  sign = BIT_SIGN(val);
8001d61a:	18 93       	mov	r3,r12
8001d61c:	e0 6a 37 3c 	mov	r10,14140
  if ( sign ) {
    len--;
    val = BIT_INVERT(val) + 1; // FIXME: this will wrap at 0xffffffff
  }

  u = (unsigned int)val;
8001d620:	e6 13 80 00 	andh	r3,0x8000,COH
    }
    return;
  }
  sign = BIT_SIGN(val);

  if ( sign ) {
8001d624:	e0 62 37 28 	mov	r2,14120
      *p = ' ';
      p--;
    }
    return;
  }
  sign = BIT_SIGN(val);
8001d628:	58 03       	cp.w	r3,0
  if ( sign ) {
    len--;
    val = BIT_INVERT(val) + 1; // FIXME: this will wrap at 0xffffffff
  }

  u = (unsigned int)val;
8001d62a:	fb bc 01 01 	rsubne	r12,1

  while(p >= buf) {
8001d62e:	95 03       	st.w	r10[0x0],r3
8001d630:	85 0c       	st.w	r2[0x0],r12
8001d632:	10 3b       	cp.w	r11,r8
    if (u > 0) {
      a = u % 10;
      u /= 10;
      *p = '0' + a;
    } else {
      *p = ' '; 
8001d634:	fe 9b ff ec 	brhi	8001d60c <itoa_whole+0x48>

  u = (unsigned int)val;

  while(p >= buf) {
    if (u > 0) {
      a = u % 10;
8001d638:	e0 61 37 30 	mov	r1,14128
8001d63c:	32 04       	mov	r4,32
8001d63e:	62 0a       	ld.w	r10,r1[0x0]
8001d640:	e0 65 cc cd 	mov	r5,52429
8001d644:	ea 15 cc cc 	orh	r5,0xcccc
8001d648:	c1 08       	rjmp	8001d668 <itoa_whole+0xa4>
8001d64a:	0e 9a       	mov	r10,r7
8001d64c:	a3 9a       	lsr	r10,0x3
8001d64e:	14 9e       	mov	lr,r10
      u /= 10;
8001d650:	f4 0a 00 2a 	add	r10,r10,r10<<0x2
      *p = '0' + a;
8001d654:	f8 0a 01 1a 	sub	r10,r12,r10<<0x1
    } else {
      *p = ' '; 
8001d658:	1c 9c       	mov	r12,lr
    val = BIT_INVERT(val) + 1; // FIXME: this will wrap at 0xffffffff
  }

  u = (unsigned int)val;

  while(p >= buf) {
8001d65a:	f4 ce ff d0 	sub	lr,r10,-48
8001d65e:	b0 8e       	st.b	r8[0x0],lr
    if (u > 0) {
      a = u % 10;
8001d660:	20 18       	sub	r8,1
8001d662:	10 3b       	cp.w	r11,r8
  }

  u = (unsigned int)val;

  while(p >= buf) {
    if (u > 0) {
8001d664:	fe 9b ff cf 	brhi	8001d602 <itoa_whole+0x3e>
      a = u % 10;
      u /= 10;
      *p = '0' + a;
    } else {
      *p = ' '; 
8001d668:	f8 05 06 46 	mulu.d	r6,r12,r5
8001d66c:	58 0c       	cp.w	r12,0
8001d66e:	ce e1       	brne	8001d64a <itoa_whole+0x86>
8001d670:	b0 84       	st.b	r8[0x0],r4
8001d672:	cf 7b       	rjmp	8001d660 <itoa_whole+0x9c>

8001d674 <itoa_whole_lj>:
8001d674:	eb cd 40 fc 	pushm	r2-r7,lr
8001d678:	58 0c       	cp.w	r12,0
8001d67a:	c4 b0       	breq	8001d710 <itoa_whole_lj+0x9c>
  if(val == 0) {
    *buf = '0';
    return 1;
  }

  sign = BIT_SIGN(val);
8001d67c:	18 94       	mov	r4,r12
8001d67e:	e0 69 37 3c 	mov	r9,14140
8001d682:	e6 14 80 00 	andh	r4,0x8000,COH
8001d686:	93 04       	st.w	r9[0x0],r4
  p = buf;
8001d688:	18 98       	mov	r8,r12

  if ( sign ) {
8001d68a:	e0 62 37 38 	mov	r2,14136
    p++;
    len++;
    val = BIT_INVERT(val) + 1; // FIXME: this will wrap at 0xffffffff
  }

  u = (unsigned int)val;
8001d68e:	58 04       	cp.w	r4,0
8001d690:	c3 31       	brne	8001d6f6 <itoa_whole_lj+0x82>
8001d692:	e0 63 37 28 	mov	r3,14120

  while (u > 0) {
    a = u % 10;
8001d696:	16 9e       	mov	lr,r11
8001d698:	87 0c       	st.w	r3[0x0],r12
8001d69a:	08 9c       	mov	r12,r4
8001d69c:	e0 65 cc cd 	mov	r5,52429
8001d6a0:	ea 15 cc cc 	orh	r5,0xcccc
8001d6a4:	f0 05 06 46 	mulu.d	r6,r8,r5
8001d6a8:	0e 99       	mov	r9,r7
8001d6aa:	a3 99       	lsr	r9,0x3
8001d6ac:	12 9a       	mov	r10,r9
8001d6ae:	f2 09 00 29 	add	r9,r9,r9<<0x2
    u /= 10;
    *p = '0' + a;
8001d6b2:	f0 09 01 19 	sub	r9,r8,r9<<0x1
    p++;
    len++;
8001d6b6:	f2 c8 ff d0 	sub	r8,r9,-48
    val = BIT_INVERT(val) + 1; // FIXME: this will wrap at 0xffffffff
  }

  u = (unsigned int)val;

  while (u > 0) {
8001d6ba:	1c c8       	st.b	lr++,r8
8001d6bc:	2f fc       	sub	r12,-1
8001d6be:	14 98       	mov	r8,r10
8001d6c0:	58 0a       	cp.w	r10,0
8001d6c2:	cf 11       	brne	8001d6a4 <itoa_whole_lj+0x30>
8001d6c4:	e0 68 37 30 	mov	r8,14128
    len++;
  }

  //// FIXME
  /// ugh, swap digits
  if(sign) {
8001d6c8:	87 0a       	st.w	r3[0x0],r10
      tmp = buf[i];
      buf[i] = buf[len - i];
      buf[len - i + 1] = tmp;
    }
  } else {
    for (i=0; i<len; i++) {
8001d6ca:	85 0e       	st.w	r2[0x0],lr
8001d6cc:	91 09       	st.w	r8[0x0],r9
8001d6ce:	58 04       	cp.w	r4,0
  }

  //// FIXME
  /// ugh, swap digits
  if(sign) {
    for (i=1; i<len; i++) {
8001d6d0:	c2 51       	brne	8001d71a <itoa_whole_lj+0xa6>
8001d6d2:	58 0c       	cp.w	r12,0
8001d6d4:	e0 8a 00 37 	brle	8001d742 <itoa_whole_lj+0xce>
8001d6d8:	f8 c8 00 01 	sub	r8,r12,1
      buf[len - i + 1] = tmp;
    }
  } else {
    for (i=0; i<len; i++) {
      tmp = buf[i];
      buf[i] = buf[len - i - 1];
8001d6dc:	08 99       	mov	r9,r4
8001d6de:	f6 08 00 08 	add	r8,r11,r8
      tmp = buf[i];
      buf[i] = buf[len - i];
      buf[len - i + 1] = tmp;
    }
  } else {
    for (i=0; i<len; i++) {
8001d6e2:	17 8a       	ld.ub	r10,r11[0x0]
8001d6e4:	11 8e       	ld.ub	lr,r8[0x0]
8001d6e6:	16 ce       	st.b	r11++,lr
8001d6e8:	b0 aa       	st.b	r8[0x2],r10
      buf[len - i + 1] = tmp;
    }
  }

  return len;
}
8001d6ea:	2f f9       	sub	r9,-1
8001d6ec:	20 18       	sub	r8,1

  sign = BIT_SIGN(val);
  p = buf;

  if ( sign ) {
    *p = '-';
8001d6ee:	12 3c       	cp.w	r12,r9
8001d6f0:	cf 91       	brne	8001d6e2 <itoa_whole_lj+0x6e>
8001d6f2:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
    p++;
8001d6f6:	16 9e       	mov	lr,r11
    len++;
    val = BIT_INVERT(val) + 1; // FIXME: this will wrap at 0xffffffff
  }

  u = (unsigned int)val;
8001d6f8:	32 d9       	mov	r9,45
  sign = BIT_SIGN(val);
  p = buf;

  if ( sign ) {
    *p = '-';
    p++;
8001d6fa:	1c c9       	st.b	lr++,r9
    len++;
    val = BIT_INVERT(val) + 1; // FIXME: this will wrap at 0xffffffff
  }

  u = (unsigned int)val;
8001d6fc:	f8 08 11 01 	rsub	r8,r12,1

  while (u > 0) {
8001d700:	e0 63 37 28 	mov	r3,14120
8001d704:	85 0e       	st.w	r2[0x0],lr
  char tmp;
  int i;
  int len = 0;
  
  if(val == 0) {
    *buf = '0';
8001d706:	87 08       	st.w	r3[0x0],r8
8001d708:	58 08       	cp.w	r8,0
8001d70a:	c1 a0       	breq	8001d73e <itoa_whole_lj+0xca>
    return 1;
8001d70c:	30 1c       	mov	r12,1
8001d70e:	cc 7b       	rjmp	8001d69c <itoa_whole_lj+0x28>
  }

  //// FIXME
  /// ugh, swap digits
  if(sign) {
    for (i=1; i<len; i++) {
8001d710:	33 08       	mov	r8,48
8001d712:	30 1c       	mov	r12,1
8001d714:	b6 88       	st.b	r11[0x0],r8
8001d716:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
8001d71a:	58 1c       	cp.w	r12,1
8001d71c:	fe 9a ff eb 	brle	8001d6f2 <itoa_whole_lj+0x7e>
      tmp = buf[i];
      buf[i] = buf[len - i];
8001d720:	f6 0c 00 08 	add	r8,r11,r12
8001d724:	30 19       	mov	r9,1
      buf[len - i + 1] = tmp;
8001d726:	2f fb       	sub	r11,-1
  }

  //// FIXME
  /// ugh, swap digits
  if(sign) {
    for (i=1; i<len; i++) {
8001d728:	17 8a       	ld.ub	r10,r11[0x0]
8001d72a:	f1 3e ff ff 	ld.ub	lr,r8[-1]
8001d72e:	16 ce       	st.b	r11++,lr
8001d730:	b0 8a       	st.b	r8[0x0],r10
8001d732:	2f f9       	sub	r9,-1
      tmp = buf[i];
      buf[i] = buf[len - i];
      buf[len - i + 1] = tmp;
    }
  } else {
    for (i=0; i<len; i++) {
8001d734:	20 18       	sub	r8,1
8001d736:	18 39       	cp.w	r9,r12
8001d738:	cf 81       	brne	8001d728 <itoa_whole_lj+0xb4>
8001d73a:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
8001d73e:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
8001d742:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
8001d746:	d7 03       	nop

8001d748 <print_fix16>:
8001d748:	d4 31       	pushm	r0-r7,lr
8001d74a:	e0 69 37 3c 	mov	r9,14140
  int y, i;

  //  print_dbg("\r\n printing a fix16: ");
  //  print_dbg_hex(x);

  sign = BIT_SIGN(x);
8001d74e:	16 98       	mov	r8,r11
8001d750:	e6 18 80 00 	andh	r8,0x8000,COH
8001d754:	93 08       	st.w	r9[0x0],r8
  //  bufHi = p + 1;
  //bufLo  = bufHi + FIX_DIG_HI + 1;

  p = buf;

  if(sign == 0)  {
8001d756:	c5 c1       	brne	8001d80e <print_fix16+0xc6>
}

// format whole part, right justified
void itoa_whole(int val, char* buf, int len) {
  static char* p;
  p = buf + len - 1; // right justify; start at end
8001d758:	e0 6a 37 24 	mov	r10,14116
8001d75c:	31 48       	mov	r8,20
8001d75e:	f0 ce ff fc 	sub	lr,r8,-4
8001d762:	95 0e       	st.w	r10[0x0],lr
8001d764:	f6 0e 14 10 	asr	lr,r11,0x10

  p = buf;

  if(sign == 0)  {
    // whole
    y = x >> 16;
8001d768:	e0 81 01 12 	brne	8001d98c <print_fix16+0x244>

// format whole part, right justified
void itoa_whole(int val, char* buf, int len) {
  static char* p;
  p = buf + len - 1; // right justify; start at end
  if(val == 0) {
8001d76c:	32 09       	mov	r9,32
    *p = '0'; p--;
    while(p >= buf) {
      *p = ' ';
8001d76e:	b0 89       	st.b	r8[0x0],r9
8001d770:	b0 b9       	st.b	r8[0x3],r9
8001d772:	b0 a9       	st.b	r8[0x2],r9
8001d774:	b0 99       	st.b	r8[0x1],r9
8001d776:	33 09       	mov	r9,48
// format whole part, right justified
void itoa_whole(int val, char* buf, int len) {
  static char* p;
  p = buf + len - 1; // right justify; start at end
  if(val == 0) {
    *p = '0'; p--;
8001d778:	e0 6e 37 28 	mov	lr,14120
8001d77c:	b0 c9       	st.b	r8[0x4],r9
8001d77e:	e0 67 37 30 	mov	r7,14128
8001d782:	f0 c9 00 01 	sub	r9,r8,1
    while(p >= buf) {
      *p = ' ';
8001d786:	95 09       	st.w	r10[0x0],r9
8001d788:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
  static char* p;
  int i;
  unsigned int mul;

  p = buf;
  u = (unsigned int)val;
8001d78c:	e0 66 19 99 	mov	r6,6553
  
  for(i=0; i<FIX_DIG_LO; i++) {
    mul = places[i];
8001d790:	f6 06 0d 04 	divu	r4,r11,r6
    a = (u / mul);
8001d794:	08 9a       	mov	r10,r4
8001d796:	58 94       	cp.w	r4,9
    if (a > 9) { a = 9; }
8001d798:	e0 88 01 3f 	brls	8001da16 <print_fix16+0x2ce>
8001d79c:	33 95       	mov	r5,57
8001d79e:	30 9a       	mov	r10,9
8001d7a0:	ad 3a       	mul	r10,r6
    u -= (mul * a);
8001d7a2:	31 09       	mov	r9,16
    *p++ = a + '0';
8001d7a4:	b2 85       	st.b	r9[0x0],r5
8001d7a6:	14 1b       	sub	r11,r10
8001d7a8:	e0 66 02 8f 	mov	r6,655

  p = buf;
  u = (unsigned int)val;
  
  for(i=0; i<FIX_DIG_LO; i++) {
    mul = places[i];
8001d7ac:	f6 06 0d 04 	divu	r4,r11,r6
    a = (u / mul);
8001d7b0:	08 9a       	mov	r10,r4
8001d7b2:	58 94       	cp.w	r4,9
8001d7b4:	e0 88 01 2d 	brls	8001da0e <print_fix16+0x2c6>
    if (a > 9) { a = 9; }
8001d7b8:	33 95       	mov	r5,57
8001d7ba:	30 9a       	mov	r10,9
8001d7bc:	ad 3a       	mul	r10,r6
8001d7be:	b2 95       	st.b	r9[0x1],r5
    u -= (mul * a);
8001d7c0:	14 1b       	sub	r11,r10
    *p++ = a + '0';
8001d7c2:	34 15       	mov	r5,65
  
  for(i=0; i<FIX_DIG_LO; i++) {
    mul = places[i];
    a = (u / mul);
    if (a > 9) { a = 9; }
    u -= (mul * a);
8001d7c4:	f6 05 0d 04 	divu	r4,r11,r5
  p = buf;
  u = (unsigned int)val;
  
  for(i=0; i<FIX_DIG_LO; i++) {
    mul = places[i];
    a = (u / mul);
8001d7c8:	08 9a       	mov	r10,r4
8001d7ca:	58 94       	cp.w	r4,9
8001d7cc:	e0 88 01 1d 	brls	8001da06 <print_fix16+0x2be>
    if (a > 9) { a = 9; }
8001d7d0:	33 96       	mov	r6,57
8001d7d2:	30 9a       	mov	r10,9
8001d7d4:	f4 0a 10 41 	mul	r10,r10,65
    u -= (mul * a);
8001d7d8:	b2 a6       	st.b	r9[0x2],r6
8001d7da:	14 1b       	sub	r11,r10
    *p++ = a + '0';
8001d7dc:	30 75       	mov	r5,7
  
  for(i=0; i<FIX_DIG_LO; i++) {
    mul = places[i];
    a = (u / mul);
    if (a > 9) { a = 9; }
    u -= (mul * a);
8001d7de:	f6 05 0d 04 	divu	r4,r11,r5
  p = buf;
  u = (unsigned int)val;
  
  for(i=0; i<FIX_DIG_LO; i++) {
    mul = places[i];
    a = (u / mul);
8001d7e2:	08 9a       	mov	r10,r4
8001d7e4:	58 94       	cp.w	r4,9
8001d7e6:	e0 88 01 0b 	brls	8001d9fc <print_fix16+0x2b4>
    if (a > 9) { a = 9; }
8001d7ea:	30 9a       	mov	r10,9
8001d7ec:	33 95       	mov	r5,57
8001d7ee:	14 96       	mov	r6,r10
8001d7f0:	8f 0a       	st.w	r7[0x0],r10
8001d7f2:	ec 0a 10 07 	mul	r10,r6,7
    u -= (mul * a);
    *p++ = a + '0';
8001d7f6:	f6 0a 01 0a 	sub	r10,r11,r10
8001d7fa:	b2 b5       	st.b	r9[0x3],r5
8001d7fc:	9d 0a       	st.w	lr[0x0],r10
8001d7fe:	f2 cb ff fc 	sub	r11,r9,-4
8001d802:	e0 6a 37 34 	mov	r10,14132
8001d806:	95 0b       	st.w	r10[0x0],r11
8001d808:	32 0a       	mov	r10,32
8001d80a:	18 ca       	st.b	r12++,r10
    y = x >> 16;
    itoa_whole(y, bufHi, FIX_DIG_HI);
    // fract
    y = x & 0xffff;
    itoa_fract(y, bufLo);
    *p = ' '; p++;
8001d80c:	c6 08       	rjmp	8001d8cc <print_fix16+0x184>
8001d80e:	e0 6a 37 24 	mov	r10,14116
}

// format whole part, right justified
void itoa_whole(int val, char* buf, int len) {
  static char* p;
  p = buf + len - 1; // right justify; start at end
8001d812:	31 48       	mov	r8,20
8001d814:	f0 ce ff fc 	sub	lr,r8,-4
8001d818:	95 0e       	st.w	r10[0x0],lr
8001d81a:	16 97       	mov	r7,r11
8001d81c:	ee 17 ff ff 	eorh	r7,0xffff
    *p = ' '; p++;
  } else {
    //    print_dbg("\r\n <0 : ");
    //    print_dbg_hex(x);
    // whole
    y = ( (x >> 16) ^ 0xffff ) & 0xffff;
8001d820:	b1 87       	lsr	r7,0x10
8001d822:	e0 81 00 8c 	brne	8001d93a <print_fix16+0x1f2>
8001d826:	32 09       	mov	r9,32

// format whole part, right justified
void itoa_whole(int val, char* buf, int len) {
  static char* p;
  p = buf + len - 1; // right justify; start at end
  if(val == 0) {
8001d828:	b0 89       	st.b	r8[0x0],r9
8001d82a:	b0 b9       	st.b	r8[0x3],r9
    *p = '0'; p--;
    while(p >= buf) {
      *p = ' ';
8001d82c:	b0 a9       	st.b	r8[0x2],r9
8001d82e:	b0 99       	st.b	r8[0x1],r9
8001d830:	33 09       	mov	r9,48
8001d832:	e0 6e 37 28 	mov	lr,14120
// format whole part, right justified
void itoa_whole(int val, char* buf, int len) {
  static char* p;
  p = buf + len - 1; // right justify; start at end
  if(val == 0) {
    *p = '0'; p--;
8001d836:	b0 c9       	st.b	r8[0x4],r9
8001d838:	e0 67 37 30 	mov	r7,14128
8001d83c:	f0 c9 00 01 	sub	r9,r8,1
8001d840:	95 09       	st.w	r10[0x0],r9
    while(p >= buf) {
      *p = ' ';
8001d842:	5c db       	com	r11
8001d844:	ed db c0 10 	bfextu	r6,r11,0x0,0x10
  static char* p;
  int i;
  unsigned int mul;

  p = buf;
  u = (unsigned int)val;
8001d848:	e0 6b 19 99 	mov	r11,6553
8001d84c:	ec 0b 0d 04 	divu	r4,r6,r11
  
  for(i=0; i<FIX_DIG_LO; i++) {
    mul = places[i];
8001d850:	08 9a       	mov	r10,r4
    a = (u / mul);
8001d852:	58 94       	cp.w	r4,9
8001d854:	e0 88 00 d0 	brls	8001d9f4 <print_fix16+0x2ac>
    if (a > 9) { a = 9; }
8001d858:	33 95       	mov	r5,57
8001d85a:	30 9a       	mov	r10,9
8001d85c:	31 09       	mov	r9,16
8001d85e:	b2 85       	st.b	r9[0x0],r5
8001d860:	f4 0b 02 4b 	mul	r11,r10,r11
    u -= (mul * a);
    *p++ = a + '0';
8001d864:	ec 0b 01 0b 	sub	r11,r6,r11
  
  for(i=0; i<FIX_DIG_LO; i++) {
    mul = places[i];
    a = (u / mul);
    if (a > 9) { a = 9; }
    u -= (mul * a);
8001d868:	e0 66 02 8f 	mov	r6,655
8001d86c:	f6 06 0d 04 	divu	r4,r11,r6

  p = buf;
  u = (unsigned int)val;
  
  for(i=0; i<FIX_DIG_LO; i++) {
    mul = places[i];
8001d870:	08 9a       	mov	r10,r4
8001d872:	58 94       	cp.w	r4,9
    a = (u / mul);
8001d874:	e0 88 00 bc 	brls	8001d9ec <print_fix16+0x2a4>
8001d878:	33 95       	mov	r5,57
    if (a > 9) { a = 9; }
8001d87a:	30 9a       	mov	r10,9
8001d87c:	ad 3a       	mul	r10,r6
8001d87e:	b2 95       	st.b	r9[0x1],r5
8001d880:	14 1b       	sub	r11,r10
8001d882:	34 15       	mov	r5,65
    u -= (mul * a);
8001d884:	f6 05 0d 04 	divu	r4,r11,r5
8001d888:	08 9a       	mov	r10,r4

  p = buf;
  u = (unsigned int)val;
  
  for(i=0; i<FIX_DIG_LO; i++) {
    mul = places[i];
8001d88a:	58 94       	cp.w	r4,9
    a = (u / mul);
8001d88c:	e0 88 00 ac 	brls	8001d9e4 <print_fix16+0x29c>
8001d890:	33 96       	mov	r6,57
    if (a > 9) { a = 9; }
8001d892:	30 9a       	mov	r10,9
8001d894:	f4 0a 10 41 	mul	r10,r10,65
8001d898:	b2 a6       	st.b	r9[0x2],r6
8001d89a:	14 1b       	sub	r11,r10
    u -= (mul * a);
8001d89c:	30 75       	mov	r5,7
8001d89e:	f6 05 0d 04 	divu	r4,r11,r5
8001d8a2:	08 9a       	mov	r10,r4

  p = buf;
  u = (unsigned int)val;
  
  for(i=0; i<FIX_DIG_LO; i++) {
    mul = places[i];
8001d8a4:	58 94       	cp.w	r4,9
    a = (u / mul);
8001d8a6:	e0 88 00 9a 	brls	8001d9da <print_fix16+0x292>
8001d8aa:	30 9a       	mov	r10,9
    if (a > 9) { a = 9; }
8001d8ac:	33 95       	mov	r5,57
8001d8ae:	14 96       	mov	r6,r10
8001d8b0:	8f 0a       	st.w	r7[0x0],r10
8001d8b2:	ec 0a 10 07 	mul	r10,r6,7
8001d8b6:	f6 0a 01 0a 	sub	r10,r11,r10
    u -= (mul * a);
    *p++ = a + '0';
8001d8ba:	b2 b5       	st.b	r9[0x3],r5
8001d8bc:	9d 0a       	st.w	lr[0x0],r10
8001d8be:	f2 cb ff fc 	sub	r11,r9,-4
8001d8c2:	e0 6a 37 34 	mov	r10,14132
8001d8c6:	95 0b       	st.w	r10[0x0],r11
8001d8c8:	32 da       	mov	r10,45
8001d8ca:	18 ca       	st.b	r12++,r10
8001d8cc:	11 8a       	ld.ub	r10,r8[0x0]
8001d8ce:	58 0a       	cp.w	r10,0
    y = ( (x >> 16) ^ 0xffff ) & 0xffff;
    itoa_whole(y, bufHi, FIX_DIG_HI);
    // fract
    y = (x ^ 0xffff) & 0xffff;
    itoa_fract(y, bufLo);
    *p = '-'; p++;
8001d8d0:	f9 ba 00 20 	moveq	r10,32
  } 
  // fixme: shouldn't need to copy if pointers are set up correctly
  i = 0;
  while (i < FIX_DIG_HI) {
    *p = bufHi[i] ? bufHi[i] : ' ';
8001d8d4:	18 9b       	mov	r11,r12
8001d8d6:	16 ca       	st.b	r11++,r10
8001d8d8:	11 9a       	ld.ub	r10,r8[0x1]
8001d8da:	58 0a       	cp.w	r10,0
8001d8dc:	f9 ba 00 20 	moveq	r10,32
8001d8e0:	16 ca       	st.b	r11++,r10
8001d8e2:	11 aa       	ld.ub	r10,r8[0x2]
8001d8e4:	58 0a       	cp.w	r10,0
8001d8e6:	f9 ba 00 20 	moveq	r10,32
8001d8ea:	16 ca       	st.b	r11++,r10
8001d8ec:	11 ba       	ld.ub	r10,r8[0x3]
8001d8ee:	58 0a       	cp.w	r10,0
8001d8f0:	f9 ba 00 20 	moveq	r10,32
8001d8f4:	16 ca       	st.b	r11++,r10
8001d8f6:	11 c8       	ld.ub	r8,r8[0x4]
8001d8f8:	58 08       	cp.w	r8,0
8001d8fa:	f9 b8 00 20 	moveq	r8,32
8001d8fe:	b6 88       	st.b	r11[0x0],r8
8001d900:	32 e8       	mov	r8,46
8001d902:	b8 d8       	st.b	r12[0x5],r8
8001d904:	13 88       	ld.ub	r8,r9[0x0]
8001d906:	58 08       	cp.w	r8,0
    i++; p++;
  } 
  *p = '.'; p++;
8001d908:	f9 b8 00 20 	moveq	r8,32
  i = 0;
  while (i < FIX_DIG_LO) {
    *p = bufLo[i] ? bufLo[i] : ' '; 
8001d90c:	b8 e8       	st.b	r12[0x6],r8
8001d90e:	13 98       	ld.ub	r8,r9[0x1]
8001d910:	58 08       	cp.w	r8,0
8001d912:	f9 b8 00 20 	moveq	r8,32
8001d916:	b8 f8       	st.b	r12[0x7],r8
8001d918:	13 a8       	ld.ub	r8,r9[0x2]
8001d91a:	58 08       	cp.w	r8,0
8001d91c:	f9 b8 00 20 	moveq	r8,32
8001d920:	f9 68 00 08 	st.b	r12[8],r8
8001d924:	13 b8       	ld.ub	r8,r9[0x3]
8001d926:	58 08       	cp.w	r8,0
8001d928:	f9 b8 00 20 	moveq	r8,32
8001d92c:	f9 68 00 09 	st.b	r12[9],r8
8001d930:	2f 6c       	sub	r12,-10
8001d932:	e0 68 37 2c 	mov	r8,14124
8001d936:	91 0c       	st.w	r8[0x0],r12
8001d938:	d8 32       	popm	r0-r7,pc
8001d93a:	30 0e       	mov	lr,0
8001d93c:	e0 64 cc cd 	mov	r4,52429
    i++; p++;
  }
}
8001d940:	ea 14 cc cc 	orh	r4,0xcccc

  u = (unsigned int)val;

  while(p >= buf) {
    if (u > 0) {
      a = u % 10;
8001d944:	93 0e       	st.w	r9[0x0],lr
8001d946:	ee 04 06 42 	mulu.d	r2,r7,r4
8001d94a:	e0 6e 37 28 	mov	lr,14120
8001d94e:	e6 06 16 03 	lsr	r6,r3,0x3
  if ( sign ) {
    len--;
    val = BIT_INVERT(val) + 1; // FIXME: this will wrap at 0xffffffff
  }

  u = (unsigned int)val;
8001d952:	9d 07       	st.w	lr[0x0],r7

  while(p >= buf) {
    if (u > 0) {
      a = u % 10;
8001d954:	0c 95       	mov	r5,r6
8001d956:	ec 06 00 26 	add	r6,r6,r6<<0x2
8001d95a:	ee 06 01 16 	sub	r6,r7,r6<<0x1
8001d95e:	ec c9 ff d0 	sub	r9,r6,-48
8001d962:	b0 c9       	st.b	r8[0x4],r9
      u /= 10;
      *p = '0' + a;
8001d964:	58 05       	cp.w	r5,0
8001d966:	e0 81 00 aa 	brne	8001daba <print_fix16+0x372>
  }

  u = (unsigned int)val;

  while(p >= buf) {
    if (u > 0) {
8001d96a:	32 09       	mov	r9,32
8001d96c:	b0 b9       	st.b	r8[0x3],r9
8001d96e:	32 09       	mov	r9,32
      a = u % 10;
      u /= 10;
      *p = '0' + a;
    } else {
      *p = ' '; 
8001d970:	b0 a9       	st.b	r8[0x2],r9
8001d972:	32 09       	mov	r9,32
8001d974:	b0 99       	st.b	r8[0x1],r9
8001d976:	32 09       	mov	r9,32
8001d978:	30 07       	mov	r7,0
8001d97a:	b0 89       	st.b	r8[0x0],r9
8001d97c:	9d 07       	st.w	lr[0x0],r7
8001d97e:	f0 c9 00 01 	sub	r9,r8,1
8001d982:	e0 67 37 30 	mov	r7,14128
8001d986:	95 09       	st.w	r10[0x0],r9
8001d988:	8f 06       	st.w	r7[0x0],r6
8001d98a:	c5 cb       	rjmp	8001d842 <print_fix16+0xfa>
8001d98c:	1c 96       	mov	r6,lr
8001d98e:	e6 16 80 00 	andh	r6,0x8000,COH
      *p = ' ';
      p--;
    }
    return;
  }
  sign = BIT_SIGN(val);
8001d992:	93 06       	st.w	r9[0x0],r6
8001d994:	1c 99       	mov	r9,lr
8001d996:	c4 40       	breq	8001da1e <print_fix16+0x2d6>
8001d998:	fc 09 11 01 	rsub	r9,lr,1

  if ( sign ) {
8001d99c:	e0 6e 37 28 	mov	lr,14120
    len--;
    val = BIT_INVERT(val) + 1; // FIXME: this will wrap at 0xffffffff
  }

  u = (unsigned int)val;
8001d9a0:	9d 09       	st.w	lr[0x0],r9
8001d9a2:	e0 67 37 30 	mov	r7,14128
8001d9a6:	6e 05       	ld.w	r5,r7[0x0]

  while(p >= buf) {
    if (u > 0) {
8001d9a8:	58 09       	cp.w	r9,0
8001d9aa:	c3 f1       	brne	8001da28 <print_fix16+0x2e0>
      a = u % 10;
      u /= 10;
      *p = '0' + a;
    } else {
      *p = ' '; 
8001d9ac:	32 09       	mov	r9,32
8001d9ae:	b0 c9       	st.b	r8[0x4],r9
8001d9b0:	32 09       	mov	r9,32
8001d9b2:	b0 b9       	st.b	r8[0x3],r9
8001d9b4:	32 09       	mov	r9,32
8001d9b6:	b0 a9       	st.b	r8[0x2],r9
8001d9b8:	32 09       	mov	r9,32
8001d9ba:	b0 99       	st.b	r8[0x1],r9
8001d9bc:	32 09       	mov	r9,32
8001d9be:	30 04       	mov	r4,0
8001d9c0:	b0 89       	st.b	r8[0x0],r9
8001d9c2:	f0 c9 00 01 	sub	r9,r8,1
8001d9c6:	8f 05       	st.w	r7[0x0],r5
8001d9c8:	9d 04       	st.w	lr[0x0],r4
8001d9ca:	95 09       	st.w	r10[0x0],r9
    }
    p--;

  }
  if(sign) { *buf = '-'; }
8001d9cc:	58 06       	cp.w	r6,0
8001d9ce:	fe 90 fe dd 	breq	8001d788 <print_fix16+0x40>
8001d9d2:	32 da       	mov	r10,45
8001d9d4:	31 49       	mov	r9,20
8001d9d6:	b2 8a       	st.b	r9[0x0],r10
8001d9d8:	cd 8a       	rjmp	8001d788 <print_fix16+0x40>
  u = (unsigned int)val;
  
  for(i=0; i<FIX_DIG_LO; i++) {
    mul = places[i];
    a = (u / mul);
    if (a > 9) { a = 9; }
8001d9da:	e8 c5 ff d0 	sub	r5,r4,-48
8001d9de:	08 96       	mov	r6,r4
8001d9e0:	5c 55       	castu.b	r5
8001d9e2:	c6 7b       	rjmp	8001d8b0 <print_fix16+0x168>
8001d9e4:	e8 c6 ff d0 	sub	r6,r4,-48
8001d9e8:	5c 56       	castu.b	r6
8001d9ea:	c5 5b       	rjmp	8001d894 <print_fix16+0x14c>
8001d9ec:	e8 c5 ff d0 	sub	r5,r4,-48
8001d9f0:	5c 55       	castu.b	r5
8001d9f2:	c4 5b       	rjmp	8001d87c <print_fix16+0x134>
8001d9f4:	e8 c5 ff d0 	sub	r5,r4,-48
8001d9f8:	5c 55       	castu.b	r5
8001d9fa:	c3 1b       	rjmp	8001d85c <print_fix16+0x114>
8001d9fc:	e8 c5 ff d0 	sub	r5,r4,-48
8001da00:	08 96       	mov	r6,r4
8001da02:	5c 55       	castu.b	r5
8001da04:	cf 6a       	rjmp	8001d7f0 <print_fix16+0xa8>
8001da06:	e8 c6 ff d0 	sub	r6,r4,-48
8001da0a:	5c 56       	castu.b	r6
8001da0c:	ce 4a       	rjmp	8001d7d4 <print_fix16+0x8c>
8001da0e:	e8 c5 ff d0 	sub	r5,r4,-48
8001da12:	5c 55       	castu.b	r5
8001da14:	cd 4a       	rjmp	8001d7bc <print_fix16+0x74>
8001da16:	e8 c5 ff d0 	sub	r5,r4,-48
8001da1a:	5c 55       	castu.b	r5
8001da1c:	cc 2a       	rjmp	8001d7a0 <print_fix16+0x58>
  if ( sign ) {
    len--;
    val = BIT_INVERT(val) + 1; // FIXME: this will wrap at 0xffffffff
  }

  u = (unsigned int)val;
8001da1e:	e0 6e 37 28 	mov	lr,14120
8001da22:	e0 67 37 30 	mov	r7,14128

  while(p >= buf) {
    if (u > 0) {
      a = u % 10;
8001da26:	9d 09       	st.w	lr[0x0],r9
8001da28:	e0 64 cc cd 	mov	r4,52429
8001da2c:	ea 14 cc cc 	orh	r4,0xcccc
8001da30:	f2 04 06 42 	mulu.d	r2,r9,r4
8001da34:	e6 05 16 03 	lsr	r5,r3,0x3
8001da38:	0a 93       	mov	r3,r5
8001da3a:	ea 05 00 25 	add	r5,r5,r5<<0x2
      u /= 10;
      *p = '0' + a;
8001da3e:	f2 05 01 15 	sub	r5,r9,r5<<0x1
8001da42:	ea c9 ff d0 	sub	r9,r5,-48
  }

  u = (unsigned int)val;

  while(p >= buf) {
    if (u > 0) {
8001da46:	b0 c9       	st.b	r8[0x4],r9
8001da48:	31 42       	mov	r2,20
      a = u % 10;
8001da4a:	58 03       	cp.w	r3,0
8001da4c:	cb 20       	breq	8001d9b0 <print_fix16+0x268>
8001da4e:	e6 04 06 40 	mulu.d	r0,r3,r4
8001da52:	e2 05 16 03 	lsr	r5,r1,0x3
8001da56:	0a 99       	mov	r9,r5
8001da58:	ea 05 00 25 	add	r5,r5,r5<<0x2
      u /= 10;
      *p = '0' + a;
8001da5c:	e6 05 01 15 	sub	r5,r3,r5<<0x1
8001da60:	ea c3 ff d0 	sub	r3,r5,-48
  }

  u = (unsigned int)val;

  while(p >= buf) {
    if (u > 0) {
8001da64:	a4 b3       	st.b	r2[0x3],r3
      a = u % 10;
8001da66:	58 09       	cp.w	r9,0
8001da68:	ca 60       	breq	8001d9b4 <print_fix16+0x26c>
8001da6a:	f2 04 06 40 	mulu.d	r0,r9,r4
8001da6e:	e2 05 16 03 	lsr	r5,r1,0x3
8001da72:	0a 93       	mov	r3,r5
8001da74:	ea 05 00 25 	add	r5,r5,r5<<0x2
      u /= 10;
      *p = '0' + a;
8001da78:	f2 05 01 15 	sub	r5,r9,r5<<0x1
8001da7c:	ea c9 ff d0 	sub	r9,r5,-48
  }

  u = (unsigned int)val;

  while(p >= buf) {
    if (u > 0) {
8001da80:	a4 a9       	st.b	r2[0x2],r9
      a = u % 10;
8001da82:	58 03       	cp.w	r3,0
8001da84:	c9 a0       	breq	8001d9b8 <print_fix16+0x270>
8001da86:	e6 04 06 40 	mulu.d	r0,r3,r4
8001da8a:	e2 05 16 03 	lsr	r5,r1,0x3
8001da8e:	0a 99       	mov	r9,r5
8001da90:	ea 05 00 25 	add	r5,r5,r5<<0x2
      u /= 10;
      *p = '0' + a;
8001da94:	e6 05 01 15 	sub	r5,r3,r5<<0x1
8001da98:	ea c3 ff d0 	sub	r3,r5,-48
  }

  u = (unsigned int)val;

  while(p >= buf) {
    if (u > 0) {
8001da9c:	a4 93       	st.b	r2[0x1],r3
      a = u % 10;
8001da9e:	58 09       	cp.w	r9,0
8001daa0:	c8 e0       	breq	8001d9bc <print_fix16+0x274>
8001daa2:	f2 04 06 44 	mulu.d	r4,r9,r4
8001daa6:	a3 95       	lsr	r5,0x3
8001daa8:	0a 94       	mov	r4,r5
8001daaa:	ea 05 00 25 	add	r5,r5,r5<<0x2
      u /= 10;
      *p = '0' + a;
8001daae:	f2 05 01 15 	sub	r5,r9,r5<<0x1
8001dab2:	ea c9 ff d0 	sub	r9,r5,-48

  u = (unsigned int)val;

  while(p >= buf) {
    if (u > 0) {
      a = u % 10;
8001dab6:	a4 89       	st.b	r2[0x0],r9
8001dab8:	c8 5b       	rjmp	8001d9c2 <print_fix16+0x27a>
8001daba:	ea 04 06 46 	mulu.d	r6,r5,r4
8001dabe:	0e 96       	mov	r6,r7
8001dac0:	a3 96       	lsr	r6,0x3
8001dac2:	0c 99       	mov	r9,r6
8001dac4:	ec 06 00 26 	add	r6,r6,r6<<0x2
      u /= 10;
      *p = '0' + a;
8001dac8:	ea 06 01 16 	sub	r6,r5,r6<<0x1
8001dacc:	ec c7 ff d0 	sub	r7,r6,-48
  }

  u = (unsigned int)val;

  while(p >= buf) {
    if (u > 0) {
8001dad0:	b0 b7       	st.b	r8[0x3],r7
8001dad2:	58 09       	cp.w	r9,0
      a = u % 10;
8001dad4:	fe 90 ff 4d 	breq	8001d96e <print_fix16+0x226>
8001dad8:	f2 04 06 46 	mulu.d	r6,r9,r4
8001dadc:	0e 96       	mov	r6,r7
8001dade:	a3 96       	lsr	r6,0x3
8001dae0:	0c 97       	mov	r7,r6
8001dae2:	ec 06 00 26 	add	r6,r6,r6<<0x2
      u /= 10;
      *p = '0' + a;
8001dae6:	f2 06 01 16 	sub	r6,r9,r6<<0x1
8001daea:	ec c9 ff d0 	sub	r9,r6,-48
  }

  u = (unsigned int)val;

  while(p >= buf) {
    if (u > 0) {
8001daee:	b0 a9       	st.b	r8[0x2],r9
8001daf0:	58 07       	cp.w	r7,0
      a = u % 10;
8001daf2:	fe 90 ff 40 	breq	8001d972 <print_fix16+0x22a>
8001daf6:	ee 04 06 42 	mulu.d	r2,r7,r4
8001dafa:	e6 06 16 03 	lsr	r6,r3,0x3
8001dafe:	0c 99       	mov	r9,r6
8001db00:	ec 06 00 26 	add	r6,r6,r6<<0x2
      u /= 10;
      *p = '0' + a;
8001db04:	ee 06 01 16 	sub	r6,r7,r6<<0x1
8001db08:	ec c7 ff d0 	sub	r7,r6,-48
  }

  u = (unsigned int)val;

  while(p >= buf) {
    if (u > 0) {
8001db0c:	b0 97       	st.b	r8[0x1],r7
8001db0e:	58 09       	cp.w	r9,0
      a = u % 10;
8001db10:	fe 90 ff 33 	breq	8001d976 <print_fix16+0x22e>
8001db14:	f2 04 06 46 	mulu.d	r6,r9,r4
      u /= 10;
8001db18:	0e 96       	mov	r6,r7

  u = (unsigned int)val;

  while(p >= buf) {
    if (u > 0) {
      a = u % 10;
8001db1a:	a3 96       	lsr	r6,0x3
8001db1c:	0c 97       	mov	r7,r6
8001db1e:	ec 06 00 26 	add	r6,r6,r6<<0x2
      u /= 10;
      *p = '0' + a;
8001db22:	f2 06 01 16 	sub	r6,r9,r6<<0x1
8001db26:	ec c9 ff d0 	sub	r9,r6,-48
8001db2a:	b0 89       	st.b	r8[0x0],r9
8001db2c:	c2 8b       	rjmp	8001d97c <print_fix16+0x234>
8001db2e:	d7 03       	nop

8001db30 <fix16_add>:
  uint32_t _a = a, _b = b;
  uint32_t sum = _a + _b;

  // Overflow can only happen if sign of a == sibfin/commgn of b, and then
  // it causes sign of sum != sign of a.
  if (!((_a ^ _b) & 0x80000000) && ((_a ^ sum) & 0x80000000))
8001db30:	f7 ec 20 08 	eor	r8,r11,r12
fix16_t fix16_add(fix16_t a, fix16_t b)
{
  // Use unsigned integers because overflow with signed integers is
  // an undefined operation (http://www.airs.com/blog/archives/120).
  uint32_t _a = a, _b = b;
  uint32_t sum = _a + _b;
8001db34:	18 0b       	add	r11,r12

  // Overflow can only happen if sign of a == sibfin/commgn of b, and then
  // it causes sign of sum != sign of a.
  if (!((_a ^ _b) & 0x80000000) && ((_a ^ sum) & 0x80000000))
8001db36:	58 08       	cp.w	r8,0
8001db38:	c0 24       	brge	8001db3c <fix16_add+0xc>
    return fix16_overflow;
  
  return sum;
8001db3a:	5e fb       	retal	r11
  uint32_t _a = a, _b = b;
  uint32_t sum = _a + _b;

  // Overflow can only happen if sign of a == sibfin/commgn of b, and then
  // it causes sign of sum != sign of a.
  if (!((_a ^ _b) & 0x80000000) && ((_a ^ sum) & 0x80000000))
8001db3c:	f7 ec 20 0c 	eor	r12,r11,r12
8001db40:	58 0c       	cp.w	r12,0
8001db42:	cf c4       	brge	8001db3a <fix16_add+0xa>
8001db44:	fc 1c 80 00 	movh	r12,0x8000
8001db48:	5e fc       	retal	r12

8001db4a <fix16_sub>:
  uint32_t _a = a, _b = b;
  uint32_t diff = _a - _b;

  // Overflow can only happen if sign of a != sign of b, and then
  // it causes sign of diff != sign of a.
  if (((_a ^ _b) & 0x80000000) && ((_a ^ diff) & 0x80000000))
8001db4a:	f7 ec 20 08 	eor	r8,r11,r12
}

fix16_t fix16_sub(fix16_t a, fix16_t b)
{
  uint32_t _a = a, _b = b;
  uint32_t diff = _a - _b;
8001db4e:	f8 0b 01 0b 	sub	r11,r12,r11

  // Overflow can only happen if sign of a != sign of b, and then
  // it causes sign of diff != sign of a.
  if (((_a ^ _b) & 0x80000000) && ((_a ^ diff) & 0x80000000))
8001db52:	58 08       	cp.w	r8,0
8001db54:	c0 25       	brlt	8001db58 <fix16_sub+0xe>
    return fix16_overflow;
  
  return diff;
8001db56:	5e fb       	retal	r11
  uint32_t _a = a, _b = b;
  uint32_t diff = _a - _b;

  // Overflow can only happen if sign of a != sign of b, and then
  // it causes sign of diff != sign of a.
  if (((_a ^ _b) & 0x80000000) && ((_a ^ diff) & 0x80000000))
8001db58:	f7 ec 20 0c 	eor	r12,r11,r12
8001db5c:	58 0c       	cp.w	r12,0
8001db5e:	cf c4       	brge	8001db56 <fix16_sub+0xc>
8001db60:	fc 1c 80 00 	movh	r12,0x8000
8001db64:	5e fc       	retal	r12

8001db66 <fix16_mul>:
 * detection.
 */
 
#if !defined(FIXMATH_NO_64BIT) && !defined(FIXMATH_OPTIMIZE_8BIT)
fix16_t fix16_mul(fix16_t inArg0, fix16_t inArg1)
{
8001db66:	eb cd 00 c0 	pushm	r6-r7
  int64_t product = (int64_t)inArg0 * inArg1;
8001db6a:	f6 0c 04 4a 	muls.d	r10,r11,r12
  
  #ifndef FIXMATH_NO_OVERFLOW
  // The upper 17 bits should all be the same (the sign).
  uint32_t upper = (product >> 47);
8001db6e:	f6 08 14 0f 	asr	r8,r11,0xf
  #endif
  
  if (product < 0)
8001db72:	58 0a       	cp.w	r10,0
8001db74:	5c 2b       	cpc	r11
8001db76:	c1 65       	brlt	8001dba2 <fix16_mul+0x3c>
    #endif
  }
  else
  {
    #ifndef FIXMATH_NO_OVERFLOW
    if (upper)
8001db78:	58 08       	cp.w	r8,0
8001db7a:	c1 61       	brne	8001dba6 <fix16_mul+0x40>
  
  #ifdef FIXMATH_NO_ROUNDING
  return product >> 16;
  #else
  fix16_t result = product >> 16;
  result += (product & 0x8000) >> 15;
8001db7c:	e0 68 80 00 	mov	r8,32768
8001db80:	f4 0c 16 10 	lsr	r12,r10,0x10
8001db84:	30 09       	mov	r9,0
8001db86:	f9 eb 11 0c 	or	r12,r12,r11<<0x10
8001db8a:	f5 e8 00 06 	and	r6,r10,r8
8001db8e:	f7 e9 00 07 	and	r7,r11,r9
8001db92:	0c 98       	mov	r8,r6
8001db94:	af 98       	lsr	r8,0xf
8001db96:	f1 e7 11 18 	or	r8,r8,r7<<0x11
8001db9a:	10 0c       	add	r12,r8
  
  return result;
  #endif
}
8001db9c:	e3 cd 00 c0 	ldm	sp++,r6-r7
8001dba0:	5e fc       	retal	r12
  #endif
  
  if (product < 0)
  {
    #ifndef FIXMATH_NO_OVERFLOW
    if (~upper)
8001dba2:	5b f8       	cp.w	r8,-1
8001dba4:	c0 60       	breq	8001dbb0 <fix16_mul+0x4a>
  return product >> 16;
  #else
  fix16_t result = product >> 16;
  result += (product & 0x8000) >> 15;
  
  return result;
8001dba6:	fc 1c 80 00 	movh	r12,0x8000
  #endif
}
8001dbaa:	e3 cd 00 c0 	ldm	sp++,r6-r7
8001dbae:	5e fc       	retal	r12
        return fix16_overflow;
    #endif
    
    #ifndef FIXMATH_NO_ROUNDING
    // This adjustment is required in order to round -1/2 correctly
    product--;
8001dbb0:	3f f8       	mov	r8,-1
8001dbb2:	3f f9       	mov	r9,-1
8001dbb4:	10 0a       	add	r10,r8
8001dbb6:	f6 09 00 4b 	adc	r11,r11,r9
8001dbba:	ce 1b       	rjmp	8001db7c <fix16_mul+0x16>

8001dbbc <key_handler_dsp>:
  }  
  (*(curPage->redraw))();
}

//--- DSP
extern void key_handler_dsp(uiKey_t key, s16 val) {
8001dbbc:	eb cd 40 80 	pushm	r7,lr
8001dbc0:	18 97       	mov	r7,r12
  print_dbg("\r\n key_handler_dsp");
8001dbc2:	fe cc ac ca 	sub	r12,pc,-21302
8001dbc6:	fe b0 aa 43 	rcall	8001304c <print_dbg>
  switch(key) {
8001dbca:	58 a7       	cp.w	r7,10
8001dbcc:	c4 20       	breq	8001dc50 <key_handler_dsp+0x94>
8001dbce:	e0 88 00 0d 	brls	8001dbe8 <key_handler_dsp+0x2c>
8001dbd2:	58 b7       	cp.w	r7,11
8001dbd4:	c2 50       	breq	8001dc1e <key_handler_dsp+0x62>
8001dbd6:	58 c7       	cp.w	r7,12
8001dbd8:	c1 60       	breq	8001dc04 <key_handler_dsp+0x48>
  case eKeyEncDownD:     
    break;
  default:
    ;; // nothing
  }  
  (*(curPage->redraw))();
8001dbda:	e0 67 3f bc 	mov	r7,16316
8001dbde:	6e 08       	ld.w	r8,r7[0x0]
}
8001dbe0:	70 28       	ld.w	r8,r8[0x8]
8001dbe2:	5d 18       	icall	r8
}

//--- DSP
extern void key_handler_dsp(uiKey_t key, s16 val) {
  print_dbg("\r\n key_handler_dsp");
  switch(key) {
8001dbe4:	e3 cd 80 80 	ldm	sp++,r7,pc
8001dbe8:	58 17       	cp.w	r7,1
8001dbea:	c2 70       	breq	8001dc38 <key_handler_dsp+0x7c>
    break;
  case eKeyFnDownD:
    break;
    //// encoder A: scroll pages
  case eKeyEncUpA:
    scroll_page(1);
8001dbec:	58 97       	cp.w	r7,9
8001dbee:	cf 61       	brne	8001dbda <key_handler_dsp+0x1e>
8001dbf0:	30 1c       	mov	r12,1
8001dbf2:	e0 a0 03 dd 	rcall	8001e3ac <scroll_page>
  case eKeyEncDownD:     
    break;
  default:
    ;; // nothing
  }  
  (*(curPage->redraw))();
8001dbf6:	e0 67 3f bc 	mov	r7,16316
}
8001dbfa:	6e 08       	ld.w	r8,r7[0x0]
8001dbfc:	70 28       	ld.w	r8,r8[0x8]
    //// encoder B: scroll selection
  case eKeyEncUpB:
    scroll_select_clip(1,  files_get_dsp_count() );
    break;
  case eKeyEncDownB:
    scroll_select_clip(-1, files_get_dsp_count() );
8001dbfe:	5d 18       	icall	r8
8001dc00:	e3 cd 80 80 	ldm	sp++,r7,pc
8001dc04:	fe b0 cd 08 	rcall	80017614 <files_get_dsp_count>
8001dc08:	e0 67 3f bc 	mov	r7,16316
  case eKeyEncDownD:     
    break;
  default:
    ;; // nothing
  }  
  (*(curPage->redraw))();
8001dc0c:	18 9b       	mov	r11,r12
8001dc0e:	3f fc       	mov	r12,-1
8001dc10:	e0 a0 03 6a 	rcall	8001e2e4 <scroll_select_clip>
}
8001dc14:	6e 08       	ld.w	r8,r7[0x0]
  case eKeyEncDownA:
    scroll_page (-1);
    break;
    //// encoder B: scroll selection
  case eKeyEncUpB:
    scroll_select_clip(1,  files_get_dsp_count() );
8001dc16:	70 28       	ld.w	r8,r8[0x8]
8001dc18:	5d 18       	icall	r8
8001dc1a:	e3 cd 80 80 	ldm	sp++,r7,pc
8001dc1e:	fe b0 cc fb 	rcall	80017614 <files_get_dsp_count>
8001dc22:	e0 67 3f bc 	mov	r7,16316
  case eKeyEncDownD:     
    break;
  default:
    ;; // nothing
  }  
  (*(curPage->redraw))();
8001dc26:	18 9b       	mov	r11,r12
8001dc28:	30 1c       	mov	r12,1
}
8001dc2a:	e0 a0 03 5d 	rcall	8001e2e4 <scroll_select_clip>
extern void key_handler_dsp(uiKey_t key, s16 val) {
  print_dbg("\r\n key_handler_dsp");
  switch(key) {
  case eKeyFnDownA:
    // load DSP (and update the parameter list)
    files_load_dsp(curPage->selected);
8001dc2e:	6e 08       	ld.w	r8,r7[0x0]
8001dc30:	70 28       	ld.w	r8,r8[0x8]
8001dc32:	5d 18       	icall	r8
8001dc34:	e3 cd 80 80 	ldm	sp++,r7,pc
8001dc38:	e0 67 3f bc 	mov	r7,16316
  case eKeyEncDownD:     
    break;
  default:
    ;; // nothing
  }  
  (*(curPage->redraw))();
8001dc3c:	6e 08       	ld.w	r8,r7[0x0]
8001dc3e:	f1 3c 00 0d 	ld.ub	r12,r8[13]
}
8001dc42:	fe b0 cd d5 	rcall	800177ec <files_load_dsp>
    //// encoder A: scroll pages
  case eKeyEncUpA:
    scroll_page(1);
    break;
  case eKeyEncDownA:
    scroll_page (-1);
8001dc46:	6e 08       	ld.w	r8,r7[0x0]
8001dc48:	70 28       	ld.w	r8,r8[0x8]
8001dc4a:	5d 18       	icall	r8
8001dc4c:	e3 cd 80 80 	ldm	sp++,r7,pc
8001dc50:	3f fc       	mov	r12,-1
8001dc52:	e0 a0 03 ad 	rcall	8001e3ac <scroll_page>
8001dc56:	cc 2b       	rjmp	8001dbda <key_handler_dsp+0x1e>

8001dc58 <key_handler_scenes>:
8001dc58:	eb cd 40 80 	pushm	r7,lr
8001dc5c:	20 1c       	sub	r12,1
8001dc5e:	58 fc       	cp.w	r12,15
8001dc60:	e0 88 00 09 	brls	8001dc72 <key_handler_scenes+0x1a>
8001dc64:	e0 68 3f bc 	mov	r8,16316
    
    break;
  default:
    ;; // nothing
  }  
  (*(curPage->redraw))();
8001dc68:	70 08       	ld.w	r8,r8[0x0]
8001dc6a:	70 28       	ld.w	r8,r8[0x8]
}
8001dc6c:	5d 18       	icall	r8
8001dc6e:	e3 cd 80 80 	ldm	sp++,r7,pc
  (*(curPage->redraw))();
}

//--- SCENES
extern void key_handler_scenes(uiKey_t key, s16 val) {
  switch(key) {
8001dc72:	fe c8 ae e2 	sub	r8,pc,-20766
    if (selectedLabelChar > NUM_LABEL_CHARS) {
      selectedLabelChar = 0;
    } 
    break;
  case eKeyEncDownD:     // scroll name char at pos
    curPage->cursor--;
8001dc76:	f0 0c 03 2f 	ld.w	pc,r8[r12<<0x2]
8001dc7a:	e0 69 3f bc 	mov	r9,16316
8001dc7e:	72 08       	ld.w	r8,r9[0x0]
8001dc80:	f1 3a 00 14 	ld.ub	r10,r8[20]
    if (curPage->cursor < 0) {
8001dc84:	20 1a       	sub	r10,1
8001dc86:	f1 6a 00 14 	st.b	r8[20],r10
8001dc8a:	30 0a       	mov	r10,0
      curPage->cursor = NUM_LABEL_CHARS - 1;
8001dc8c:	72 08       	ld.w	r8,r9[0x0]
8001dc8e:	f1 3b 00 14 	ld.ub	r11,r8[20]
8001dc92:	f4 0b 18 00 	cp.b	r11,r10
8001dc96:	f9 ba 05 2e 	movlt	r10,46
8001dc9a:	f1 fa 5e 14 	st.blt	r8[0x14],r10
    
    break;
  default:
    ;; // nothing
  }  
  (*(curPage->redraw))();
8001dc9e:	f3 f8 50 00 	ld.wlt	r8,r9[0x0]
}
8001dca2:	70 28       	ld.w	r8,r8[0x8]
    if (curPage->cursor < 0) {
      curPage->cursor = NUM_LABEL_CHARS - 1;
    } 
    break;
  case eKeyEncUpD:     // scroll name char at pos
    selectedLabelChar++;
8001dca4:	5d 18       	icall	r8
8001dca6:	e3 cd 80 80 	ldm	sp++,r7,pc
8001dcaa:	e0 68 37 44 	mov	r8,14148
    if (selectedLabelChar > NUM_LABEL_CHARS) {
      selectedLabelChar = 0;
8001dcae:	11 89       	ld.ub	r9,r8[0x0]
8001dcb0:	2f f9       	sub	r9,-1
8001dcb2:	b0 89       	st.b	r8[0x0],r9
8001dcb4:	32 fa       	mov	r10,47
8001dcb6:	f4 09 18 00 	cp.b	r9,r10
8001dcba:	f9 b9 09 00 	movgt	r9,0

//--- SCENES
extern void key_handler_scenes(uiKey_t key, s16 val) {
  switch(key) {
  case eKeyFnDownA: // clear
    switch(curPage->mode) {
8001dcbe:	f1 f9 9e 00 	st.bgt	r8[0x0],r9
8001dcc2:	cd 1b       	rjmp	8001dc64 <key_handler_scenes+0xc>
8001dcc4:	e0 68 3f bc 	mov	r8,16316
    case eModeNone:
      curPage->mode = eModeClear;
8001dcc8:	70 09       	ld.w	r9,r8[0x0]
8001dcca:	72 4a       	ld.w	r10,r9[0x10]
      break;
8001dccc:	58 0a       	cp.w	r10,0
    default:
      curPage->mode = eModeNone;
    }
    break;
  case eKeyFnDownB: // copy
    switch(curPage->mode) {
8001dcce:	c0 b1       	brne	8001dce4 <key_handler_scenes+0x8c>
8001dcd0:	30 1a       	mov	r10,1
8001dcd2:	93 4a       	st.w	r9[0x10],r10
8001dcd4:	70 08       	ld.w	r8,r8[0x0]
8001dcd6:	cc ab       	rjmp	8001dc6a <key_handler_scenes+0x12>
    case eModeCopy:
      //scene_copy(curPage->selected);
      curPage->mode = eModeNone;
      break;
    default:
      curPage->mode = eModeNone;
8001dcd8:	e0 68 3f bc 	mov	r8,16316
8001dcdc:	70 09       	ld.w	r9,r8[0x0]
    
    break;
  default:
    ;; // nothing
  }  
  (*(curPage->redraw))();
8001dcde:	72 4a       	ld.w	r10,r9[0x10]
8001dce0:	58 0a       	cp.w	r10,0
}
8001dce2:	c6 40       	breq	8001ddaa <key_handler_scenes+0x152>
8001dce4:	30 0a       	mov	r10,0
    default:
      curPage->mode = eModeNone;
    }
    break;
  case eKeyFnDownC: // store
    switch(curPage->mode) {
8001dce6:	93 4a       	st.w	r9[0x10],r10
8001dce8:	70 08       	ld.w	r8,r8[0x0]
8001dcea:	70 28       	ld.w	r8,r8[0x8]
8001dcec:	5d 18       	icall	r8
8001dcee:	e3 cd 80 80 	ldm	sp++,r7,pc
8001dcf2:	e0 67 3f bc 	mov	r7,16316
    case eModeNone:
      curPage->mode = eModeStore;
      break;
    case eModeStore:
      files_store_scene(curPage->selected);
8001dcf6:	6e 08       	ld.w	r8,r7[0x0]
8001dcf8:	70 49       	ld.w	r9,r8[0x10]
8001dcfa:	58 09       	cp.w	r9,0
      curPage->mode = eModeNone;
8001dcfc:	c5 30       	breq	8001dda2 <key_handler_scenes+0x14a>
8001dcfe:	58 39       	cp.w	r9,3
8001dd00:	c1 21       	brne	8001dd24 <key_handler_scenes+0xcc>
8001dd02:	f1 3c 00 0d 	ld.ub	r12,r8[13]
    default:
      curPage->mode = eModeNone;
    }
    break;
  case eKeyFnDownD: // recall
    switch(curPage->mode) {
8001dd06:	fe b0 cc 8d 	rcall	80017620 <files_store_scene>
8001dd0a:	6e 08       	ld.w	r8,r7[0x0]
8001dd0c:	30 09       	mov	r9,0
8001dd0e:	91 49       	st.w	r8[0x10],r9
8001dd10:	6e 08       	ld.w	r8,r7[0x0]
8001dd12:	ca cb       	rjmp	8001dc6a <key_handler_scenes+0x12>
    case eModeRecall:
      files_load_scene(curPage->selected);
      curPage->mode = eModeNone;
      break;
    default:
      curPage->mode = eModeNone;
8001dd14:	e0 67 3f bc 	mov	r7,16316
8001dd18:	6e 08       	ld.w	r8,r7[0x0]
8001dd1a:	70 49       	ld.w	r9,r8[0x10]
    }
    break;
    //// encoder A: scroll pages
  case eKeyEncUpA:
    scroll_page(1);
8001dd1c:	58 09       	cp.w	r9,0
8001dd1e:	c3 e0       	breq	8001dd9a <key_handler_scenes+0x142>
8001dd20:	58 49       	cp.w	r9,4
8001dd22:	c4 80       	breq	8001ddb2 <key_handler_scenes+0x15a>
8001dd24:	30 09       	mov	r9,0
    break;
8001dd26:	91 49       	st.w	r8[0x10],r9
  case eKeyEncDownA:
    scroll_page(0);
8001dd28:	6e 08       	ld.w	r8,r7[0x0]
8001dd2a:	ca 0b       	rjmp	8001dc6a <key_handler_scenes+0x12>
8001dd2c:	30 1c       	mov	r12,1
8001dd2e:	e0 a0 03 3f 	rcall	8001e3ac <scroll_page>
    break;
8001dd32:	e0 68 3f bc 	mov	r8,16316
    //// encoder B: scroll selection
  case eKeyEncUpB:
    /// fixme: shld be count-dependent like DSP
    scroll_select(1, files_get_scene_count() );
8001dd36:	70 08       	ld.w	r8,r8[0x0]
8001dd38:	c9 9b       	rjmp	8001dc6a <key_handler_scenes+0x12>
8001dd3a:	30 0c       	mov	r12,0
8001dd3c:	e0 a0 03 38 	rcall	8001e3ac <scroll_page>
8001dd40:	e0 68 3f bc 	mov	r8,16316
    break;
8001dd44:	70 08       	ld.w	r8,r8[0x0]
  case eKeyEncDownB:
    //
    scroll_select(-1, files_get_scene_count() );
8001dd46:	c9 2b       	rjmp	8001dc6a <key_handler_scenes+0x12>
8001dd48:	fe b0 cc 6e 	rcall	80017624 <files_get_scene_count>
8001dd4c:	18 9b       	mov	r11,r12
8001dd4e:	30 1c       	mov	r12,1
8001dd50:	e0 a0 03 ba 	rcall	8001e4c4 <scroll_select>
8001dd54:	e0 68 3f bc 	mov	r8,16316
    break;
  case eKeyEncUpC: // cursor: position in name
    curPage->cursor++;
8001dd58:	70 08       	ld.w	r8,r8[0x0]
8001dd5a:	c8 8b       	rjmp	8001dc6a <key_handler_scenes+0x12>
8001dd5c:	fe b0 cc 64 	rcall	80017624 <files_get_scene_count>
8001dd60:	18 9b       	mov	r11,r12
8001dd62:	3f fc       	mov	r12,-1
8001dd64:	e0 a0 03 b0 	rcall	8001e4c4 <scroll_select>
    if (curPage->cursor > NUM_LABEL_CHARS) {
8001dd68:	e0 68 3f bc 	mov	r8,16316
8001dd6c:	70 08       	ld.w	r8,r8[0x0]
8001dd6e:	c7 eb       	rjmp	8001dc6a <key_handler_scenes+0x12>
8001dd70:	e0 69 3f bc 	mov	r9,16316
8001dd74:	72 08       	ld.w	r8,r9[0x0]
      curPage->cursor = 0;
8001dd76:	f1 3a 00 14 	ld.ub	r10,r8[20]
8001dd7a:	2f fa       	sub	r10,-1
8001dd7c:	f1 6a 00 14 	st.b	r8[20],r10
    }
    break;
  case eKeyFnDownD: // recall
    switch(curPage->mode) {
    case eModeNone:
      curPage->mode = eModeRecall;
8001dd80:	32 fa       	mov	r10,47
8001dd82:	72 08       	ld.w	r8,r9[0x0]
8001dd84:	f1 3b 00 14 	ld.ub	r11,r8[20]
    }
    break;
  case eKeyFnDownC: // store
    switch(curPage->mode) {
    case eModeNone:
      curPage->mode = eModeStore;
8001dd88:	f4 0b 18 00 	cp.b	r11,r10
8001dd8c:	fe 9a ff 6f 	brle	8001dc6a <key_handler_scenes+0x12>
    }
    break;
  case eKeyFnDownB: // copy
    switch(curPage->mode) {
    case eModeNone:
      curPage->mode = eModeCopy;
8001dd90:	30 0a       	mov	r10,0
8001dd92:	f1 6a 00 14 	st.b	r8[20],r10
      break;
8001dd96:	72 08       	ld.w	r8,r9[0x0]
    switch(curPage->mode) {
    case eModeNone:
      curPage->mode = eModeRecall;
      break;
    case eModeRecall:
      files_load_scene(curPage->selected);
8001dd98:	c6 9b       	rjmp	8001dc6a <key_handler_scenes+0x12>
8001dd9a:	30 49       	mov	r9,4
8001dd9c:	91 49       	st.w	r8[0x10],r9
8001dd9e:	6e 08       	ld.w	r8,r7[0x0]
      curPage->mode = eModeNone;
8001dda0:	c6 5b       	rjmp	8001dc6a <key_handler_scenes+0x12>
8001dda2:	30 39       	mov	r9,3
8001dda4:	91 49       	st.w	r8[0x10],r9
8001dda6:	6e 08       	ld.w	r8,r7[0x0]
      break;
8001dda8:	c6 1b       	rjmp	8001dc6a <key_handler_scenes+0x12>
8001ddaa:	30 2a       	mov	r10,2
8001ddac:	93 4a       	st.w	r9[0x10],r10
8001ddae:	70 08       	ld.w	r8,r8[0x0]
8001ddb0:	c5 db       	rjmp	8001dc6a <key_handler_scenes+0x12>
8001ddb2:	f1 3c 00 0d 	ld.ub	r12,r8[13]
8001ddb6:	fe b0 cd 25 	rcall	80017800 <files_load_scene>
8001ddba:	6e 08       	ld.w	r8,r7[0x0]
8001ddbc:	30 09       	mov	r9,0
8001ddbe:	91 49       	st.w	r8[0x10],r9
8001ddc0:	6e 08       	ld.w	r8,r7[0x0]
8001ddc2:	c5 4b       	rjmp	8001dc6a <key_handler_scenes+0x12>

8001ddc4 <key_handler_presets>:
8001ddc4:	eb cd 40 80 	pushm	r7,lr
8001ddc8:	20 1c       	sub	r12,1
8001ddca:	58 bc       	cp.w	r12,11
}

//--- PRESETS
extern void key_handler_presets(uiKey_t key, s16 val) {
  //  s16 i;
  switch(key) {
8001ddcc:	e0 8b 00 0a 	brhi	8001dde0 <key_handler_presets+0x1c>
8001ddd0:	fe c8 b0 00 	sub	r8,pc,-20480
8001ddd4:	f0 0c 03 2f 	ld.w	pc,r8[r12<<0x2]
    //// encoder B: scroll selection
  case eKeyEncUpB:
    scroll_select(1, NET_PRESETS_MAX );
    break;
  case eKeyEncDownB:
    scroll_select(-1, NET_PRESETS_MAX ); 
8001ddd8:	31 0b       	mov	r11,16
8001ddda:	3f fc       	mov	r12,-1
8001dddc:	e0 a0 03 74 	rcall	8001e4c4 <scroll_select>
    // scroll name char
    break;
    default:
    ;; // nothing
  }  
  (*(curPage->redraw))();
8001dde0:	e0 67 3f bc 	mov	r7,16316
8001dde4:	6e 08       	ld.w	r8,r7[0x0]
}
8001dde6:	70 28       	ld.w	r8,r8[0x8]
8001dde8:	5d 18       	icall	r8
//--- PRESETS
extern void key_handler_presets(uiKey_t key, s16 val) {
  //  s16 i;
  switch(key) {
  case eKeyFnDownA: // clear
    switch(curPage->mode) {
8001ddea:	e3 cd 80 80 	ldm	sp++,r7,pc
8001ddee:	e0 67 3f bc 	mov	r7,16316
8001ddf2:	6e 08       	ld.w	r8,r7[0x0]
    case eModeNone:
      curPage->mode = eModeClear;
8001ddf4:	70 49       	ld.w	r9,r8[0x10]
8001ddf6:	58 09       	cp.w	r9,0
      break;
8001ddf8:	c4 01       	brne	8001de78 <key_handler_presets+0xb4>
    default:
      curPage->mode = eModeNone;
    }
    break;
  case eKeyFnDownB: // copy
    switch(curPage->mode) {
8001ddfa:	30 19       	mov	r9,1
8001ddfc:	91 49       	st.w	r8[0x10],r9
8001ddfe:	cf 3b       	rjmp	8001dde4 <key_handler_presets+0x20>
8001de00:	e0 67 3f bc 	mov	r7,16316
    case eModeNone:
      curPage->mode = eModeCopy;
8001de04:	6e 08       	ld.w	r8,r7[0x0]
8001de06:	70 49       	ld.w	r9,r8[0x10]
      break;
8001de08:	58 09       	cp.w	r9,0
    default:
      curPage->mode = eModeNone;
    }
    break;
  case eKeyFnDownC: // store
    switch(curPage->mode) {
8001de0a:	c3 71       	brne	8001de78 <key_handler_presets+0xb4>
8001de0c:	30 29       	mov	r9,2
8001de0e:	91 49       	st.w	r8[0x10],r9
8001de10:	ce ab       	rjmp	8001dde4 <key_handler_presets+0x20>
8001de12:	e0 67 3f bc 	mov	r7,16316
    case eModeNone:
      curPage->mode = eModeStore;
8001de16:	6e 08       	ld.w	r8,r7[0x0]
      break;
8001de18:	70 49       	ld.w	r9,r8[0x10]
    default:
      curPage->mode = eModeNone;
    }
    break;
  case eKeyFnDownD: // recall
    switch(curPage->mode) {
8001de1a:	58 09       	cp.w	r9,0
8001de1c:	c3 51       	brne	8001de86 <key_handler_presets+0xc2>
8001de1e:	30 39       	mov	r9,3
8001de20:	91 49       	st.w	r8[0x10],r9
8001de22:	ce 1b       	rjmp	8001dde4 <key_handler_presets+0x20>
    case eModeNone:
      curPage->mode = eModeRecall;
8001de24:	e0 67 3f bc 	mov	r7,16316
      break;
8001de28:	6e 08       	ld.w	r8,r7[0x0]
    //// encoder A: scroll pages
  case eKeyEncUpA:
    scroll_page(1);
    break;
  case eKeyEncDownA:
    scroll_page(0);
8001de2a:	70 49       	ld.w	r9,r8[0x10]
8001de2c:	58 09       	cp.w	r9,0
8001de2e:	c2 31       	brne	8001de74 <key_handler_presets+0xb0>
8001de30:	30 49       	mov	r9,4
    // scroll name char
    break;
    default:
    ;; // nothing
  }  
  (*(curPage->redraw))();
8001de32:	91 49       	st.w	r8[0x10],r9
8001de34:	cd 8b       	rjmp	8001dde4 <key_handler_presets+0x20>
8001de36:	30 0c       	mov	r12,0
}
8001de38:	e0 a0 02 ba 	rcall	8001e3ac <scroll_page>
      curPage->mode = eModeNone;
    }
    break;
    //// encoder A: scroll pages
  case eKeyEncUpA:
    scroll_page(1);
8001de3c:	e0 67 3f bc 	mov	r7,16316
8001de40:	6e 08       	ld.w	r8,r7[0x0]
8001de42:	70 28       	ld.w	r8,r8[0x8]
    // scroll name char
    break;
    default:
    ;; // nothing
  }  
  (*(curPage->redraw))();
8001de44:	5d 18       	icall	r8
8001de46:	e3 cd 80 80 	ldm	sp++,r7,pc
}
8001de4a:	30 1c       	mov	r12,1
8001de4c:	e0 a0 02 b0 	rcall	8001e3ac <scroll_page>
  case eKeyEncDownA:
    scroll_page(0);
    break;
    //// encoder B: scroll selection
  case eKeyEncUpB:
    scroll_select(1, NET_PRESETS_MAX );
8001de50:	e0 67 3f bc 	mov	r7,16316
8001de54:	6e 08       	ld.w	r8,r7[0x0]
8001de56:	70 28       	ld.w	r8,r8[0x8]
    // scroll name char
    break;
    default:
    ;; // nothing
  }  
  (*(curPage->redraw))();
8001de58:	5d 18       	icall	r8
8001de5a:	e3 cd 80 80 	ldm	sp++,r7,pc
}
8001de5e:	31 0b       	mov	r11,16
8001de60:	30 1c       	mov	r12,1
    default:
      curPage->mode = eModeNone;
    }
    break;
  case eKeyFnDownD: // recall
    switch(curPage->mode) {
8001de62:	e0 a0 03 31 	rcall	8001e4c4 <scroll_select>
    case eModeRecall:
      preset_recall(curPage->selected);
      curPage->mode = eModeNone;
      break;
    default:
      curPage->mode = eModeNone;
8001de66:	e0 67 3f bc 	mov	r7,16316
    // scroll name char
    break;
    default:
    ;; // nothing
  }  
  (*(curPage->redraw))();
8001de6a:	6e 08       	ld.w	r8,r7[0x0]
8001de6c:	70 28       	ld.w	r8,r8[0x8]
8001de6e:	5d 18       	icall	r8
}
8001de70:	e3 cd 80 80 	ldm	sp++,r7,pc
    default:
      curPage->mode = eModeNone;
    }
    break;
  case eKeyFnDownC: // store
    switch(curPage->mode) {
8001de74:	58 49       	cp.w	r9,4
8001de76:	c1 10       	breq	8001de98 <key_handler_presets+0xd4>
    case eModeNone:
      curPage->mode = eModeStore;
      break;
    case eModeStore:
      preset_store(curPage->selected);
8001de78:	30 09       	mov	r9,0
8001de7a:	91 49       	st.w	r8[0x10],r9
8001de7c:	6e 08       	ld.w	r8,r7[0x0]
      curPage->mode = eModeNone;
8001de7e:	70 28       	ld.w	r8,r8[0x8]
8001de80:	5d 18       	icall	r8
8001de82:	e3 cd 80 80 	ldm	sp++,r7,pc
    switch(curPage->mode) {
    case eModeNone:
      curPage->mode = eModeRecall;
      break;
    case eModeRecall:
      preset_recall(curPage->selected);
8001de86:	58 39       	cp.w	r9,3
8001de88:	cf 81       	brne	8001de78 <key_handler_presets+0xb4>
8001de8a:	90 6c       	ld.sh	r12,r8[0xc]
      curPage->mode = eModeNone;
8001de8c:	e0 a0 08 fe 	rcall	8001f088 <preset_store>
8001de90:	6e 08       	ld.w	r8,r7[0x0]
      break;
8001de92:	30 09       	mov	r9,0
8001de94:	91 49       	st.w	r8[0x10],r9
8001de96:	ca 7b       	rjmp	8001dde4 <key_handler_presets+0x20>
8001de98:	90 6c       	ld.sh	r12,r8[0xc]
8001de9a:	e0 a0 08 91 	rcall	8001efbc <preset_recall>
8001de9e:	6e 08       	ld.w	r8,r7[0x0]
8001dea0:	30 09       	mov	r9,0
8001dea2:	91 49       	st.w	r8[0x10],r9
8001dea4:	ca 0b       	rjmp	8001dde4 <key_handler_presets+0x20>
8001dea6:	d7 03       	nop

8001dea8 <key_handler_play>:
8001dea8:	d4 01       	pushm	lr
8001deaa:	20 1c       	sub	r12,1
     really should set up specialied apparatus in net.c
     to identify and use system output nodes.
     for now, we activate the 8 operators from
     net.c : add_sys_ops()
  */
  switch(key) {
8001deac:	58 fc       	cp.w	r12,15
8001deae:	e0 8b 00 14 	brhi	8001ded6 <key_handler_play+0x2e>
8001deb2:	fe c8 b0 b2 	sub	r8,pc,-20302
8001deb6:	f0 0c 03 2f 	ld.w	pc,r8[r12<<0x2]
   case eKeyEncDownC:
    inIdx = net_op_in_idx(2, 0); // op 2: enc, in 0: move
    val = -1;
    break;
   case eKeyEncUpD:
    inIdx = net_op_in_idx(3, 0); // op 3: enc, in 0: move
8001deba:	30 0b       	mov	r11,0
8001debc:	30 3c       	mov	r12,3
8001debe:	e0 a0 03 fb 	rcall	8001e6b4 <net_op_in_idx>
8001dec2:	30 1b       	mov	r11,1
    ;;
    break;
  }
  //  print_dbg("\r\n activating index from play mode: ");
  //  print_dbg_ulong(inIdx);
  if(inIdx >= 0) {
8001dec4:	5c 8c       	casts.h	r12
8001dec6:	30 08       	mov	r8,0
8001dec8:	f0 0c 19 00 	cp.h	r12,r8
    net_activate(inIdx, val);
8001decc:	c0 55       	brlt	8001ded6 <key_handler_play+0x2e>
8001dece:	e0 a0 05 17 	rcall	8001e8fc <net_activate>
    redraw_play();
8001ded2:	e0 a0 0b e9 	rcall	8001f6a4 <redraw_play>
   case eKeyEncUpD:
    inIdx = net_op_in_idx(3, 0); // op 3: enc, in 0: move
    val = 1;
    break;
   case eKeyEncDownD:
    inIdx = net_op_in_idx(3, 0); // op 3: enc, in 0: move
8001ded6:	d8 02       	popm	pc
8001ded8:	30 0b       	mov	r11,0
8001deda:	30 3c       	mov	r12,3
8001dedc:	e0 a0 03 ec 	rcall	8001e6b4 <net_op_in_idx>
8001dee0:	3f fb       	mov	r11,-1
8001dee2:	5c 8c       	casts.h	r12
  case eKeyFnUpA:
    inIdx = net_op_in_idx(4, 0); // op 4: switch, in 0: val
    val = 0;
    break;
  case eKeyFnDownA:
    inIdx = net_op_in_idx(4, 0); // op 4: switch, in 0: val
8001dee4:	cf 1b       	rjmp	8001dec6 <key_handler_play+0x1e>
8001dee6:	30 0b       	mov	r11,0
8001dee8:	30 4c       	mov	r12,4
8001deea:	e0 a0 03 e5 	rcall	8001e6b4 <net_op_in_idx>
8001deee:	30 1b       	mov	r11,1
    val = 1;
    break;
8001def0:	5c 8c       	casts.h	r12
     net.c : add_sys_ops()
  */
  switch(key) {
    ///// keys
  case eKeyFnUpA:
    inIdx = net_op_in_idx(4, 0); // op 4: switch, in 0: val
8001def2:	ce ab       	rjmp	8001dec6 <key_handler_play+0x1e>
8001def4:	30 0b       	mov	r11,0
8001def6:	30 4c       	mov	r12,4
8001def8:	e0 a0 03 de 	rcall	8001e6b4 <net_op_in_idx>
8001defc:	30 0b       	mov	r11,0
    val = 0;
    break;
8001defe:	5c 8c       	casts.h	r12
  case eKeyFnUpB:
    inIdx = net_op_in_idx(5, 0); // op 5: switch, in 0: val
    val = 0;
    break;
  case eKeyFnDownB:
    inIdx = net_op_in_idx(5, 0); // op 5: switch, in 0: val
8001df00:	ce 3b       	rjmp	8001dec6 <key_handler_play+0x1e>
8001df02:	30 0b       	mov	r11,0
8001df04:	30 5c       	mov	r12,5
8001df06:	e0 a0 03 d7 	rcall	8001e6b4 <net_op_in_idx>
8001df0a:	30 1b       	mov	r11,1
    val = 1;
    break;
8001df0c:	5c 8c       	casts.h	r12
  case eKeyFnDownA:
    inIdx = net_op_in_idx(4, 0); // op 4: switch, in 0: val
    val = 1;
    break;
  case eKeyFnUpB:
    inIdx = net_op_in_idx(5, 0); // op 5: switch, in 0: val
8001df0e:	cd cb       	rjmp	8001dec6 <key_handler_play+0x1e>
8001df10:	30 0b       	mov	r11,0
8001df12:	30 5c       	mov	r12,5
8001df14:	e0 a0 03 d0 	rcall	8001e6b4 <net_op_in_idx>
8001df18:	30 0b       	mov	r11,0
    val = 0;
    break;
8001df1a:	5c 8c       	casts.h	r12
  case eKeyFnUpC:
    inIdx = net_op_in_idx(6, 0); // op 6: switch, in 0: val
    val = 0;
    break;
  case eKeyFnDownC:
    inIdx = net_op_in_idx(6, 0); // op 6: switch, in 0: val
8001df1c:	cd 5b       	rjmp	8001dec6 <key_handler_play+0x1e>
8001df1e:	30 0b       	mov	r11,0
8001df20:	30 6c       	mov	r12,6
8001df22:	e0 a0 03 c9 	rcall	8001e6b4 <net_op_in_idx>
8001df26:	30 1b       	mov	r11,1
    val = 1;
    break;
8001df28:	5c 8c       	casts.h	r12
  case eKeyFnDownB:
    inIdx = net_op_in_idx(5, 0); // op 5: switch, in 0: val
    val = 1;
    break;
  case eKeyFnUpC:
    inIdx = net_op_in_idx(6, 0); // op 6: switch, in 0: val
8001df2a:	cc eb       	rjmp	8001dec6 <key_handler_play+0x1e>
8001df2c:	30 0b       	mov	r11,0
8001df2e:	30 6c       	mov	r12,6
8001df30:	e0 a0 03 c2 	rcall	8001e6b4 <net_op_in_idx>
8001df34:	30 0b       	mov	r11,0
    val = 0;
    break;
8001df36:	5c 8c       	casts.h	r12
  case eKeyFnUpD:
    inIdx = net_op_in_idx(7, 0); // op 7: switch, in 0: val
    val = 0;
    break;
  case eKeyFnDownD:
    inIdx = net_op_in_idx(7, 0); // op 7: switch, in 0: val
8001df38:	cc 7b       	rjmp	8001dec6 <key_handler_play+0x1e>
8001df3a:	30 0b       	mov	r11,0
8001df3c:	30 7c       	mov	r12,7
8001df3e:	e0 a0 03 bb 	rcall	8001e6b4 <net_op_in_idx>
8001df42:	30 1b       	mov	r11,1
    val = 1;
    break;
8001df44:	5c 8c       	casts.h	r12
  case eKeyFnDownC:
    inIdx = net_op_in_idx(6, 0); // op 6: switch, in 0: val
    val = 1;
    break;
  case eKeyFnUpD:
    inIdx = net_op_in_idx(7, 0); // op 7: switch, in 0: val
8001df46:	cc 0b       	rjmp	8001dec6 <key_handler_play+0x1e>
8001df48:	30 0b       	mov	r11,0
8001df4a:	30 7c       	mov	r12,7
8001df4c:	e0 a0 03 b4 	rcall	8001e6b4 <net_op_in_idx>
8001df50:	30 0b       	mov	r11,0
    val = 0;
    break;
8001df52:	5c 8c       	casts.h	r12
    inIdx = net_op_in_idx(7, 0); // op 7: switch, in 0: val
    val = 1;
    break;
    ///// encoders
   case eKeyEncUpA:
    inIdx = net_op_in_idx(0, 0); // op 0: enc, in 0: move
8001df54:	cb 9b       	rjmp	8001dec6 <key_handler_play+0x1e>
8001df56:	30 0b       	mov	r11,0
8001df58:	16 9c       	mov	r12,r11
8001df5a:	e0 a0 03 ad 	rcall	8001e6b4 <net_op_in_idx>
8001df5e:	30 1b       	mov	r11,1
    val = 1;
    break;
8001df60:	5c 8c       	casts.h	r12
   case eKeyEncDownA:
    inIdx = net_op_in_idx(0, 0); // op 0: enc, in 0: move
8001df62:	cb 2b       	rjmp	8001dec6 <key_handler_play+0x1e>
8001df64:	30 0b       	mov	r11,0
8001df66:	16 9c       	mov	r12,r11
8001df68:	e0 a0 03 a6 	rcall	8001e6b4 <net_op_in_idx>
8001df6c:	3f fb       	mov	r11,-1
    val = -1;
    break;
8001df6e:	5c 8c       	casts.h	r12
   case eKeyEncUpB:
    inIdx = net_op_in_idx(1, 0); // op 1: enc, in 0: move
8001df70:	ca bb       	rjmp	8001dec6 <key_handler_play+0x1e>
8001df72:	30 0b       	mov	r11,0
8001df74:	30 1c       	mov	r12,1
8001df76:	e0 a0 03 9f 	rcall	8001e6b4 <net_op_in_idx>
8001df7a:	30 1b       	mov	r11,1
    val = 1;
    break;
8001df7c:	5c 8c       	casts.h	r12
   case eKeyEncDownB:
    inIdx = net_op_in_idx(1, 0); // op 1: enc, in 0: move
8001df7e:	ca 4b       	rjmp	8001dec6 <key_handler_play+0x1e>
8001df80:	30 0b       	mov	r11,0
8001df82:	30 1c       	mov	r12,1
8001df84:	e0 a0 03 98 	rcall	8001e6b4 <net_op_in_idx>
8001df88:	3f fb       	mov	r11,-1
    val = -1;
    break;
8001df8a:	5c 8c       	casts.h	r12
   case eKeyEncUpC:
    inIdx = net_op_in_idx(2, 0); // op 2: enc, in 0: move
8001df8c:	c9 db       	rjmp	8001dec6 <key_handler_play+0x1e>
8001df8e:	30 0b       	mov	r11,0
8001df90:	30 2c       	mov	r12,2
8001df92:	e0 a0 03 91 	rcall	8001e6b4 <net_op_in_idx>
8001df96:	30 1b       	mov	r11,1
    val = 1;
    break;
8001df98:	5c 8c       	casts.h	r12
   case eKeyEncDownC:
    inIdx = net_op_in_idx(2, 0); // op 2: enc, in 0: move
8001df9a:	c9 6b       	rjmp	8001dec6 <key_handler_play+0x1e>
8001df9c:	30 0b       	mov	r11,0
8001df9e:	30 2c       	mov	r12,2
8001dfa0:	e0 a0 03 8a 	rcall	8001e6b4 <net_op_in_idx>
8001dfa4:	3f fb       	mov	r11,-1
    val = -1;
    break;
8001dfa6:	5c 8c       	casts.h	r12
8001dfa8:	c8 fb       	rjmp	8001dec6 <key_handler_play+0x1e>
8001dfaa:	d7 03       	nop

8001dfac <key_handler_outs>:
8001dfac:	eb cd 40 80 	pushm	r7,lr
8001dfb0:	20 1c       	sub	r12,1
8001dfb2:	58 dc       	cp.w	r12,13
8001dfb4:	e0 8b 00 08 	brhi	8001dfc4 <key_handler_outs+0x18>

//--- OUTS
void key_handler_outs(uiKey_t key, s16 val) {
  s16 i;
  static s32 target;
  switch(key) {
8001dfb8:	fe c8 b1 78 	sub	r8,pc,-20104
8001dfbc:	f0 0c 03 2f 	ld.w	pc,r8[r12<<0x2]
    i = net_get_target(curPage->selected);
    if(i>=0) { net_toggle_in_preset(i); }
    break;
    //// encoder A: scroll pages
  case eKeyEncUpA:
    scroll_page(1);
8001dfc0:	30 1c       	mov	r12,1
8001dfc2:	cf 5d       	rcall	8001e3ac <scroll_page>
8001dfc4:	e0 67 3f bc 	mov	r7,16316
    // nothing
    break;
    default:
    ;; // nothing
  }  
  (*(curPage->redraw))();
8001dfc8:	6e 08       	ld.w	r8,r7[0x0]
8001dfca:	70 28       	ld.w	r8,r8[0x8]
8001dfcc:	5d 18       	icall	r8
8001dfce:	e3 cd 80 80 	ldm	sp++,r7,pc
    //// encoder B: scroll selection
  case eKeyEncUpB:
    scroll_select(1, net_num_outs() );
    break;
  case eKeyEncDownB:
    scroll_select(-1, net_num_outs() );      
8001dfd2:	e0 a0 03 29 	rcall	8001e624 <net_num_outs>
8001dfd6:	e0 67 3f bc 	mov	r7,16316
8001dfda:	f7 dc c0 10 	bfextu	r11,r12,0x0,0x10
8001dfde:	3f fc       	mov	r12,-1
    break;
8001dfe0:	e0 a0 02 72 	rcall	8001e4c4 <scroll_select>
  s16 i;
  static s32 target;
  switch(key) {
  case eKeyFnDownA: 
    // follow
    i = net_get_target(curPage->selected);
8001dfe4:	cf 2b       	rjmp	8001dfc8 <key_handler_outs+0x1c>
8001dfe6:	e0 67 3f bc 	mov	r7,16316
8001dfea:	6e 08       	ld.w	r8,r7[0x0]
    if (i == -1) { return; } 
8001dfec:	90 ec       	ld.uh	r12,r8[0xc]
8001dfee:	e0 a0 03 ab 	rcall	8001e744 <net_get_target>
8001dff2:	3f f8       	mov	r8,-1
    pages[ePageIns].selected = i;
8001dff4:	f0 0c 19 00 	cp.h	r12,r8
    set_page(ePageIns);
8001dff8:	ce b0       	breq	8001dfce <key_handler_outs+0x22>
8001dffa:	31 c8       	mov	r8,28
8001dffc:	b0 6c       	st.h	r8[0xc],r12
    break;
8001dffe:	30 0c       	mov	r12,0
      target = -1;
    }
    net_connect(curPage->selected, target);
    break;
  case eKeyEncDownC:
    target--;
8001e000:	c9 cd       	rcall	8001e338 <set_page>
8001e002:	ce 3b       	rjmp	8001dfc8 <key_handler_outs+0x1c>
8001e004:	e0 67 37 40 	mov	r7,14144
    if (target == -2) {
8001e008:	6e 0b       	ld.w	r11,r7[0x0]
8001e00a:	20 1b       	sub	r11,1
      target = net_num_ins() - 1;
    }
    net_connect(curPage->selected, target);
8001e00c:	8f 0b       	st.w	r7[0x0],r11
8001e00e:	5b eb       	cp.w	r11,-2
8001e010:	c3 20       	breq	8001e074 <key_handler_outs+0xc8>
8001e012:	e0 67 3f bc 	mov	r7,16316
8001e016:	6e 08       	ld.w	r8,r7[0x0]
  case eKeyEncDownB:
    scroll_select(-1, net_num_outs() );      
    break;
    //// encoder C: scroll target
  case eKeyEncUpC:
    target++;
8001e018:	90 6c       	ld.sh	r12,r8[0xc]
8001e01a:	e0 a0 02 b1 	rcall	8001e57c <net_connect>
8001e01e:	cd 5b       	rjmp	8001dfc8 <key_handler_outs+0x1c>
    if (target == net_num_ins()) {
8001e020:	e0 67 37 40 	mov	r7,14144
8001e024:	6e 08       	ld.w	r8,r7[0x0]
8001e026:	2f f8       	sub	r8,-1
8001e028:	8f 08       	st.w	r7[0x0],r8
8001e02a:	e0 a0 02 ef 	rcall	8001e608 <net_num_ins>
      target = -1;
8001e02e:	6e 0b       	ld.w	r11,r7[0x0]
8001e030:	5c 7c       	castu.h	r12
  case eKeyFnDownC:
    // re-send? store?
    break;
  case eKeyFnDownD:
    // toggle preset (target)
    i = net_get_target(curPage->selected);
8001e032:	16 3c       	cp.w	r12,r11
8001e034:	ce f1       	brne	8001e012 <key_handler_outs+0x66>
8001e036:	3f fb       	mov	r11,-1
8001e038:	8f 0b       	st.w	r7[0x0],r11
8001e03a:	ce cb       	rjmp	8001e012 <key_handler_outs+0x66>
    if(i>=0) { net_toggle_in_preset(i); }
8001e03c:	e0 67 3f bc 	mov	r7,16316
8001e040:	6e 08       	ld.w	r8,r7[0x0]
8001e042:	90 ec       	ld.uh	r12,r8[0xc]
8001e044:	e0 a0 03 80 	rcall	8001e744 <net_get_target>
8001e048:	30 08       	mov	r8,0
    //// encoder A: scroll pages
  case eKeyEncUpA:
    scroll_page(1);
    break;
  case eKeyEncDownA:
    scroll_page(0);
8001e04a:	f0 0c 19 00 	cp.h	r12,r8
8001e04e:	cb d5       	brlt	8001dfc8 <key_handler_outs+0x1c>
8001e050:	e0 a0 03 ae 	rcall	8001e7ac <net_toggle_in_preset>
    break;
    //// encoder B: scroll selection
  case eKeyEncUpB:
    scroll_select(1, net_num_outs() );
8001e054:	cb ab       	rjmp	8001dfc8 <key_handler_outs+0x1c>
8001e056:	30 0c       	mov	r12,0
8001e058:	ca ad       	rcall	8001e3ac <scroll_page>
8001e05a:	e0 67 3f bc 	mov	r7,16316
8001e05e:	cb 5b       	rjmp	8001dfc8 <key_handler_outs+0x1c>
8001e060:	e0 a0 02 e2 	rcall	8001e624 <net_num_outs>
    break;
8001e064:	e0 67 3f bc 	mov	r7,16316
    net_connect(curPage->selected, target);
    break;
  case eKeyEncDownC:
    target--;
    if (target == -2) {
      target = net_num_ins() - 1;
8001e068:	f7 dc c0 10 	bfextu	r11,r12,0x0,0x10
8001e06c:	30 1c       	mov	r12,1
8001e06e:	e0 a0 02 2b 	rcall	8001e4c4 <scroll_select>
8001e072:	ca bb       	rjmp	8001dfc8 <key_handler_outs+0x1c>
8001e074:	e0 a0 02 ca 	rcall	8001e608 <net_num_ins>
8001e078:	f7 dc c0 10 	bfextu	r11,r12,0x0,0x10
8001e07c:	20 1b       	sub	r11,1
8001e07e:	8f 0b       	st.w	r7[0x0],r11
8001e080:	cc 9b       	rjmp	8001e012 <key_handler_outs+0x66>
8001e082:	d7 03       	nop

8001e084 <key_handler_gathered>:
8001e084:	d4 01       	pushm	lr
8001e086:	c9 3f       	rcall	8001dfac <key_handler_outs>
8001e088:	d8 02       	popm	pc
8001e08a:	d7 03       	nop

8001e08c <scale_knob_value>:
8001e08c:	eb cd 40 c0 	pushm	r6-r7,lr
8001e090:	18 97       	mov	r7,r12
8001e092:	fe cc b1 86 	sub	r12,pc,-20090
8001e096:	fe b0 a7 db 	rcall	8001304c <print_dbg>
8001e09a:	0e 96       	mov	r6,r7
8001e09c:	0e 9c       	mov	r12,r7
8001e09e:	5c 46       	abs	r6
8001e0a0:	fe b0 a7 7e 	rcall	80012f9c <print_dbg_hex>
// return param increment given encoder ticks
static fix16 scale_knob_value(const s32 v) {
  s32 vabs = BIT_ABS(v);
  print_dbg("\r\n knob acc, val: ");
  print_dbg_hex((u32)v);
  if(vabs == 1) {
8001e0a4:	58 16       	cp.w	r6,1
    //    print_dbg("\r\n ");
    return v;
  } else if (vabs < 4) {
8001e0a6:	c1 50       	breq	8001e0d0 <scale_knob_value+0x44>
8001e0a8:	58 36       	cp.w	r6,3
8001e0aa:	e0 8a 00 26 	brle	8001e0f6 <scale_knob_value+0x6a>
    print_dbg("\r\n knob acc 1");
    return v << 2;
    //  } else if (vabs < 8) {
    //    print_dbg("\r\n knob acc 2");
    //    return v << 2;
  } else if (vabs < 12) {
8001e0ae:	58 b6       	cp.w	r6,11
8001e0b0:	e0 8a 00 2b 	brle	8001e106 <scale_knob_value+0x7a>
    print_dbg("\r\n knob acc 2");
    return v << 4;
  } else if (vabs < 19) {
8001e0b4:	59 26       	cp.w	r6,18
8001e0b6:	e0 8a 00 18 	brle	8001e0e6 <scale_knob_value+0x5a>
    print_dbg("\r\n knob acc 3");
    return v << 5;
  } else if (vabs < 25) {
8001e0ba:	59 86       	cp.w	r6,24
8001e0bc:	e0 8a 00 0d 	brle	8001e0d6 <scale_knob_value+0x4a>
    print_dbg("\r\n knob acc 4");
    return v << 6;  } 
  else if (vabs < 32) {
8001e0c0:	59 f6       	cp.w	r6,31
8001e0c2:	e0 8a 00 0a 	brle	8001e0d6 <scale_knob_value+0x4a>
    print_dbg("\r\n knob acc 4");
    return v << 6;
  } else {
    print_dbg("\r\n knob acc max");
8001e0c6:	ad 67       	lsl	r7,0xc
8001e0c8:	fe cc b1 68 	sub	r12,pc,-20120
    return v << 12;
  }
}
8001e0cc:	fe b0 a7 c0 	rcall	8001304c <print_dbg>
8001e0d0:	0e 9c       	mov	r12,r7
  } else if (vabs < 25) {
    print_dbg("\r\n knob acc 4");
    return v << 6;  } 
  else if (vabs < 32) {
    print_dbg("\r\n knob acc 4");
    return v << 6;
8001e0d2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
    return v << 5;
  } else if (vabs < 25) {
    print_dbg("\r\n knob acc 4");
    return v << 6;  } 
  else if (vabs < 32) {
    print_dbg("\r\n knob acc 4");
8001e0d6:	a7 67       	lsl	r7,0x6
8001e0d8:	fe cc b1 88 	sub	r12,pc,-20088
    return v << 6;
  } else {
    print_dbg("\r\n knob acc max");
    return v << 12;
  }
}
8001e0dc:	fe b0 a7 b8 	rcall	8001304c <print_dbg>
  } else if (vabs < 12) {
    print_dbg("\r\n knob acc 2");
    return v << 4;
  } else if (vabs < 19) {
    print_dbg("\r\n knob acc 3");
    return v << 5;
8001e0e0:	0e 9c       	mov	r12,r7
    //    return v << 2;
  } else if (vabs < 12) {
    print_dbg("\r\n knob acc 2");
    return v << 4;
  } else if (vabs < 19) {
    print_dbg("\r\n knob acc 3");
8001e0e2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001e0e6:	a5 77       	lsl	r7,0x5
    return v << 6;
  } else {
    print_dbg("\r\n knob acc max");
    return v << 12;
  }
}
8001e0e8:	fe cc b1 a8 	sub	r12,pc,-20056
8001e0ec:	fe b0 a7 b0 	rcall	8001304c <print_dbg>
  print_dbg_hex((u32)v);
  if(vabs == 1) {
    //    print_dbg("\r\n ");
    return v;
  } else if (vabs < 4) {
    print_dbg("\r\n knob acc 1");
8001e0f0:	0e 9c       	mov	r12,r7
8001e0f2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
    return v << 6;
  } else {
    print_dbg("\r\n knob acc max");
    return v << 12;
  }
}
8001e0f6:	a3 67       	lsl	r7,0x2
8001e0f8:	fe cc b1 d8 	sub	r12,pc,-20008
    //  } else if (vabs < 8) {
    //    print_dbg("\r\n knob acc 2");
    //    return v << 2;
  } else if (vabs < 12) {
    print_dbg("\r\n knob acc 2");
    return v << 4;
8001e0fc:	fe b0 a7 a8 	rcall	8001304c <print_dbg>
    return v << 2;
    //  } else if (vabs < 8) {
    //    print_dbg("\r\n knob acc 2");
    //    return v << 2;
  } else if (vabs < 12) {
    print_dbg("\r\n knob acc 2");
8001e100:	0e 9c       	mov	r12,r7
8001e102:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
    return v << 6;
  } else {
    print_dbg("\r\n knob acc max");
    return v << 12;
  }
}
8001e106:	a5 67       	lsl	r7,0x4
8001e108:	fe cc b1 d8 	sub	r12,pc,-20008
8001e10c:	fe b0 a7 a0 	rcall	8001304c <print_dbg>
8001e110:	0e 9c       	mov	r12,r7
8001e112:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001e116:	d7 03       	nop

8001e118 <key_handler_ins>:
8001e118:	d4 21       	pushm	r4-r7,lr
8001e11a:	20 1c       	sub	r12,1
8001e11c:	58 fc       	cp.w	r12,15
8001e11e:	e0 8b 00 08 	brhi	8001e12e <key_handler_ins+0x16>
8001e122:	fe c8 b2 aa 	sub	r8,pc,-19798
8001e126:	f0 0c 03 2f 	ld.w	pc,r8[r12<<0x2]
8001e12a:	e0 a0 10 bf 	rcall	800202a8 <scene_write_default>
    net_inc_in_value(curPage->selected, scale_knob_value(val) << FAST_KNOB_LSHIFT);
    break;
  default:
    ;; // nothing
  }  
  (*(curPage->redraw))();
8001e12e:	e0 67 3f bc 	mov	r7,16316
8001e132:	6e 08       	ld.w	r8,r7[0x0]
}
8001e134:	70 28       	ld.w	r8,r8[0x8]
  case eKeyEncUpC:
    // encoder C : value slow
    net_inc_in_value(curPage->selected, scale_knob_value(val));
    break;
  case eKeyEncDownC:
    net_inc_in_value(curPage->selected, scale_knob_value(val));
8001e136:	5d 18       	icall	r8
8001e138:	d8 22       	popm	r4-r7,pc
8001e13a:	16 9c       	mov	r12,r11
8001e13c:	ca 8f       	rcall	8001e08c <scale_knob_value>
8001e13e:	e0 67 3f bc 	mov	r7,16316
8001e142:	6e 08       	ld.w	r8,r7[0x0]
8001e144:	18 9b       	mov	r11,r12
8001e146:	90 6c       	ld.sh	r12,r8[0xc]
    net_inc_in_value(curPage->selected, scale_knob_value(val) << FAST_KNOB_LSHIFT);
    break;
  default:
    ;; // nothing
  }  
  (*(curPage->redraw))();
8001e148:	e0 a0 05 d2 	rcall	8001ecec <net_inc_in_value>
8001e14c:	6e 08       	ld.w	r8,r7[0x0]
}
8001e14e:	70 28       	ld.w	r8,r8[0x8]
    break;
  case eKeyEncUpD:
    net_inc_in_value(curPage->selected, scale_knob_value(val) << FAST_KNOB_LSHIFT);
    break;
  case eKeyEncDownD:
    net_inc_in_value(curPage->selected, scale_knob_value(val) << FAST_KNOB_LSHIFT);
8001e150:	5d 18       	icall	r8
8001e152:	d8 22       	popm	r4-r7,pc
8001e154:	16 9c       	mov	r12,r11
8001e156:	c9 bf       	rcall	8001e08c <scale_knob_value>
8001e158:	e0 67 3f bc 	mov	r7,16316
8001e15c:	6e 08       	ld.w	r8,r7[0x0]
8001e15e:	f8 0b 15 04 	lsl	r11,r12,0x4
8001e162:	90 6c       	ld.sh	r12,r8[0xc]
    break;
  default:
    ;; // nothing
  }  
  (*(curPage->redraw))();
8001e164:	e0 a0 05 c4 	rcall	8001ecec <net_inc_in_value>
8001e168:	6e 08       	ld.w	r8,r7[0x0]
}
8001e16a:	70 28       	ld.w	r8,r8[0x8]
void key_handler_ins(uiKey_t key, s16 val) {
  u32 i;
  switch(key) {
  case eKeyFnDownA:
    // fnA : gather
    numGathered = net_gather(curPage->selected, gathered);
8001e16c:	5d 18       	icall	r8
8001e16e:	d8 22       	popm	r4-r7,pc
8001e170:	e0 68 3f c0 	mov	r8,16320
8001e174:	e0 67 3f bc 	mov	r7,16316
8001e178:	70 0b       	ld.w	r11,r8[0x0]
8001e17a:	6e 08       	ld.w	r8,r7[0x0]
8001e17c:	90 6c       	ld.sh	r12,r8[0xc]
    break;
8001e17e:	e0 a0 02 f7 	rcall	8001e76c <net_gather>
    //// encoder B: scroll selection
  case eKeyEncUpB:
    scroll_select(1, net_num_ins() );
    break;
  case eKeyEncDownB:
    scroll_select(-1, net_num_ins() );      
8001e182:	e0 68 3f c8 	mov	r8,16328
8001e186:	91 0c       	st.w	r8[0x0],r12
8001e188:	cd 5b       	rjmp	8001e132 <key_handler_ins+0x1a>
8001e18a:	e0 a0 02 3f 	rcall	8001e608 <net_num_ins>
8001e18e:	e0 67 3f bc 	mov	r7,16316
    //// encoder A: scroll pages
  case eKeyEncUpA:
    scroll_page(1);
    break;
  case eKeyEncDownA:
    scroll_page(0);
8001e192:	f7 dc c0 10 	bfextu	r11,r12,0x0,0x10
8001e196:	3f fc       	mov	r12,-1
8001e198:	c9 6d       	rcall	8001e4c4 <scroll_select>
    break;
8001e19a:	cc cb       	rjmp	8001e132 <key_handler_ins+0x1a>
    //// encoder B: scroll selection
  case eKeyEncUpB:
    scroll_select(1, net_num_ins() );
8001e19c:	30 0c       	mov	r12,0
8001e19e:	c0 7d       	rcall	8001e3ac <scroll_page>
8001e1a0:	e0 67 3f bc 	mov	r7,16316
8001e1a4:	cc 7b       	rjmp	8001e132 <key_handler_ins+0x1a>
8001e1a6:	e0 a0 02 31 	rcall	8001e608 <net_num_ins>
8001e1aa:	e0 67 3f bc 	mov	r7,16316
    // fnA : gather
    numGathered = net_gather(curPage->selected, gathered);
    break;
  case eKeyFnDownB:
    // fnB : disconnect
    numGathered = net_gather(curPage->selected, gathered);
8001e1ae:	f7 dc c0 10 	bfextu	r11,r12,0x0,0x10
8001e1b2:	30 1c       	mov	r12,1
8001e1b4:	c8 8d       	rcall	8001e4c4 <scroll_select>
8001e1b6:	cb eb       	rjmp	8001e132 <key_handler_ins+0x1a>
8001e1b8:	e0 67 3f bc 	mov	r7,16316
8001e1bc:	6e 08       	ld.w	r8,r7[0x0]
8001e1be:	e0 66 3f c0 	mov	r6,16320
    for(i=0; i<numGathered; i++) {
8001e1c2:	90 6c       	ld.sh	r12,r8[0xc]
      net_disconnect(*(gathered[i]));
8001e1c4:	6c 0b       	ld.w	r11,r6[0x0]
8001e1c6:	e0 65 3f c8 	mov	r5,16328
8001e1ca:	e0 a0 02 d1 	rcall	8001e76c <net_gather>
8001e1ce:	8b 0c       	st.w	r5[0x0],r12
8001e1d0:	cb 10       	breq	8001e132 <key_handler_ins+0x1a>
    numGathered = net_gather(curPage->selected, gathered);
    break;
  case eKeyFnDownB:
    // fnB : disconnect
    numGathered = net_gather(curPage->selected, gathered);
    for(i=0; i<numGathered; i++) {
8001e1d2:	30 04       	mov	r4,0
8001e1d4:	e8 08 15 09 	lsl	r8,r4,0x9
8001e1d8:	6c 09       	ld.w	r9,r6[0x0]
8001e1da:	f2 08 03 0c 	ld.w	r12,r9[r8]
    ////////

    break;
  case eKeyFnDownD:
    // toggle preset inclusion
    net_toggle_in_preset(curPage->selected);
8001e1de:	ce dd       	rcall	8001e5b8 <net_disconnect>
8001e1e0:	2f f4       	sub	r4,-1
8001e1e2:	6a 08       	ld.w	r8,r5[0x0]
8001e1e4:	08 38       	cp.w	r8,r4
8001e1e6:	fe 9b ff f7 	brhi	8001e1d4 <key_handler_ins+0xbc>
    break;
    //// encoder A: scroll pages
  case eKeyEncUpA:
    scroll_page(1);
8001e1ea:	ca 4b       	rjmp	8001e132 <key_handler_ins+0x1a>
8001e1ec:	e0 67 3f bc 	mov	r7,16316
8001e1f0:	6e 08       	ld.w	r8,r7[0x0]
    break;
8001e1f2:	90 6c       	ld.sh	r12,r8[0xc]
8001e1f4:	e0 a0 02 dc 	rcall	8001e7ac <net_toggle_in_preset>
8001e1f8:	c9 db       	rjmp	8001e132 <key_handler_ins+0x1a>
8001e1fa:	30 1c       	mov	r12,1
8001e1fc:	cd 8c       	rcall	8001e3ac <scroll_page>
8001e1fe:	e0 67 3f bc 	mov	r7,16316
8001e202:	c9 8b       	rjmp	8001e132 <key_handler_ins+0x1a>

8001e204 <key_handler_ops>:
8001e204:	d4 01       	pushm	lr
8001e206:	20 1c       	sub	r12,1
8001e208:	58 fc       	cp.w	r12,15
8001e20a:	e0 8b 00 12 	brhi	8001e22e <key_handler_ops+0x2a>
8001e20e:	fe c8 b3 56 	sub	r8,pc,-19626
8001e212:	f0 0c 03 2f 	ld.w	pc,r8[r12<<0x2]
8001e216:	e0 68 3f c4 	mov	r8,16324
8001e21a:	70 09       	ld.w	r9,r8[0x0]
8001e21c:	20 19       	sub	r9,1
8001e21e:	91 09       	st.w	r8[0x0],r9
8001e220:	58 59       	cp.w	r9,5
8001e222:	f9 b9 0b 05 	movhi	r9,5
8001e226:	f1 f9 ba 00 	st.whi	r8[0x0],r9
  case eKeyEncDownD:
    newOpType--;
    if (newOpType >= NUM_USER_OP_TYPES) {
      newOpType = NUM_USER_OP_TYPES_1;
    }
    redraw_ops();
8001e22a:	e0 a0 0c 47 	rcall	8001fab8 <redraw_ops>
  case eKeyEncDownC:
    // TODO
    break;
    //// encoder D: select new operator type for creation
  case eKeyEncUpD:
    newOpType++;
8001e22e:	d8 02       	popm	pc
8001e230:	e0 68 3f c4 	mov	r8,16324
    if (newOpType >= NUM_USER_OP_TYPES) {
      newOpType = 0;
8001e234:	70 09       	ld.w	r9,r8[0x0]
8001e236:	2f f9       	sub	r9,-1
8001e238:	91 09       	st.w	r8[0x0],r9
8001e23a:	58 59       	cp.w	r9,5
8001e23c:	f9 b9 0b 00 	movhi	r9,0
    }
    redraw_ops();
8001e240:	f1 f9 ba 00 	st.whi	r8[0x0],r9
void key_handler_ops(uiKey_t key, s16 val) {
  u16 n;
  switch(key) {
  case eKeyFnDownA: 
    // fnA go to selected operator's inputs on INS page
    pages[ePageIns].selected = net_op_in_idx(curPage->selected, 0);
8001e244:	e0 a0 0c 3a 	rcall	8001fab8 <redraw_ops>
8001e248:	d8 02       	popm	pc
8001e24a:	e0 68 3f bc 	mov	r8,16316
8001e24e:	70 08       	ld.w	r8,r8[0x0]
8001e250:	30 0b       	mov	r11,0
8001e252:	90 ec       	ld.uh	r12,r8[0xc]
    set_page(ePageIns);
8001e254:	e0 a0 02 30 	rcall	8001e6b4 <net_op_in_idx>
8001e258:	31 c8       	mov	r8,28
    break;
8001e25a:	b0 6c       	st.h	r8[0xc],r12
  case eKeyFnDownB:
    // fnB : go to this operator's outputs on OUTS page
    pages[ePageOuts].selected = net_op_out_idx(curPage->selected, 0);
8001e25c:	30 0c       	mov	r12,0
8001e25e:	c6 dc       	rcall	8001e338 <set_page>
8001e260:	d8 02       	popm	pc
8001e262:	e0 68 3f bc 	mov	r8,16316
8001e266:	70 08       	ld.w	r8,r8[0x0]
8001e268:	30 0b       	mov	r11,0
8001e26a:	90 ec       	ld.uh	r12,r8[0xc]
8001e26c:	e0 a0 02 48 	rcall	8001e6fc <net_op_out_idx>
    set_page(ePageOuts);
8001e270:	31 c8       	mov	r8,28
8001e272:	f1 5c 00 28 	st.h	r8[40],r12
    break;
  case eKeyFnDownC:
    // fnC : create new operator of specified type
    net_add_op(userOpTypes[newOpType]);
8001e276:	30 1c       	mov	r12,1
8001e278:	c6 0c       	rcall	8001e338 <set_page>
8001e27a:	d8 02       	popm	pc
8001e27c:	e0 68 3f c4 	mov	r8,16324
8001e280:	70 09       	ld.w	r9,r8[0x0]
8001e282:	fe c8 b2 f6 	sub	r8,pc,-19722
    redraw_ops();
8001e286:	f0 09 03 2c 	ld.w	r12,r8[r9<<0x2]
    // fnD : delete
    // FIXME: need to add arbitrary op deletion.
    //// 
    // right now this will destroy the last created op
    /////// + added the function, need to try it out
    if (net_op_status(net_num_ops() - 1) != eUserOp) {
8001e28a:	e0 a0 03 d3 	rcall	8001ea30 <net_add_op>
8001e28e:	e0 a0 0c 15 	rcall	8001fab8 <redraw_ops>
8001e292:	d8 02       	popm	pc
8001e294:	cb 2d       	rcall	8001e5f8 <net_num_ops>
8001e296:	20 1c       	sub	r12,1
      return;
    }
    net_pop_op();
8001e298:	5c 7c       	castu.h	r12
8001e29a:	e0 a0 02 61 	rcall	8001e75c <net_op_status>
    n = net_num_ops() - 1;
8001e29e:	cc 81       	brne	8001e22e <key_handler_ops+0x2a>
    if (curPage->selected > n) {
8001e2a0:	c3 8d       	rcall	8001e510 <net_pop_op>
    /////// + added the function, need to try it out
    if (net_op_status(net_num_ops() - 1) != eUserOp) {
      return;
    }
    net_pop_op();
    n = net_num_ops() - 1;
8001e2a2:	ca bd       	rcall	8001e5f8 <net_num_ops>
8001e2a4:	e0 68 3f bc 	mov	r8,16316
8001e2a8:	f8 c9 00 01 	sub	r9,r12,1
    if (curPage->selected > n) {
8001e2ac:	70 08       	ld.w	r8,r8[0x0]
8001e2ae:	5c 89       	casts.h	r9
8001e2b0:	90 6b       	ld.sh	r11,r8[0xc]
8001e2b2:	f5 d9 c0 10 	bfextu	r10,r9,0x0,0x10
      curPage->selected = n;
8001e2b6:	14 3b       	cp.w	r11,r10
8001e2b8:	fe 9a ff c6 	brle	8001e244 <key_handler_ops+0x40>
    }
    redraw_ops();
    break;
    //// encoder A: scroll pages
  case eKeyEncUpA:
    scroll_page(1);
8001e2bc:	b0 69       	st.h	r8[0xc],r9
8001e2be:	cc 3b       	rjmp	8001e244 <key_handler_ops+0x40>
    break;
8001e2c0:	30 1c       	mov	r12,1
  case eKeyEncDownA:
    scroll_page(0);
8001e2c2:	c7 5c       	rcall	8001e3ac <scroll_page>
8001e2c4:	d8 02       	popm	pc
8001e2c6:	30 0c       	mov	r12,0
    break;
8001e2c8:	c7 2c       	rcall	8001e3ac <scroll_page>
    //// encoder B: scroll selection
  case eKeyEncUpB:
    scroll_select(1, net_num_ops() );
8001e2ca:	d8 02       	popm	pc
8001e2cc:	c9 6d       	rcall	8001e5f8 <net_num_ops>
8001e2ce:	f7 dc c0 10 	bfextu	r11,r12,0x0,0x10
8001e2d2:	30 1c       	mov	r12,1
8001e2d4:	cf 8c       	rcall	8001e4c4 <scroll_select>
8001e2d6:	d8 02       	popm	pc
    break;
8001e2d8:	c9 0d       	rcall	8001e5f8 <net_num_ops>
  case eKeyEncDownB:
    scroll_select(-1, net_num_ops() ); 
8001e2da:	f7 dc c0 10 	bfextu	r11,r12,0x0,0x10
8001e2de:	3f fc       	mov	r12,-1
8001e2e0:	cf 2c       	rcall	8001e4c4 <scroll_select>
8001e2e2:	d8 02       	popm	pc

8001e2e4 <scroll_select_clip>:



// scroll current page selection
//--  clipping variant
void scroll_select_clip(s8 dir, s32 max) {
8001e2e4:	eb cd 40 c0 	pushm	r6-r7,lr
  curPage->selected += dir;
8001e2e8:	e0 67 3f bc 	mov	r7,16316
8001e2ec:	f3 dc b0 08 	bfexts	r9,r12,0x0,0x8
8001e2f0:	6e 08       	ld.w	r8,r7[0x0]
8001e2f2:	90 6a       	ld.sh	r10,r8[0xc]
8001e2f4:	f4 09 00 09 	add	r9,r10,r9
8001e2f8:	16 96       	mov	r6,r11
  print_dbg("\r\n curPage->selected: ");
8001e2fa:	b0 69       	st.h	r8[0xc],r9
8001e2fc:	fe cc b3 58 	sub	r12,pc,-19624
  print_dbg_hex(curPage->selected);
8001e300:	fe b0 a6 a6 	rcall	8001304c <print_dbg>
8001e304:	6e 08       	ld.w	r8,r7[0x0]
8001e306:	90 6c       	ld.sh	r12,r8[0xc]

  if(curPage->selected >= max) {
8001e308:	fe b0 a6 4a 	rcall	80012f9c <print_dbg_hex>
8001e30c:	6e 08       	ld.w	r8,r7[0x0]
    curPage->selected = max - 1;
8001e30e:	30 0a       	mov	r10,0
8001e310:	90 69       	ld.sh	r9,r8[0xc]
8001e312:	0c 39       	cp.w	r9,r6
8001e314:	f7 b6 04 01 	subge	r6,1
8001e318:	f1 f6 4c 06 	st.hge	r8[0xc],r6
8001e31c:	ef f8 40 00 	ld.wge	r8,r7[0x0]
  }
  if(curPage->selected < 0) {
    curPage->selected = 0;
8001e320:	f1 f9 42 06 	ld.shge	r9,r8[0xc]
8001e324:	f4 09 19 00 	cp.h	r9,r10
8001e328:	f1 fa 5c 06 	st.hlt	r8[0xc],r10
  }
  curPage->redraw();
8001e32c:	ef f8 50 00 	ld.wlt	r8,r7[0x0]
}
8001e330:	70 28       	ld.w	r8,r8[0x8]
8001e332:	5d 18       	icall	r8
8001e334:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

8001e338 <set_page>:
8001e338:	eb cd 40 80 	pushm	r7,lr
8001e33c:	e0 67 37 46 	mov	r7,14150
8001e340:	ae 8c       	st.b	r7[0x0],r12
8001e342:	fe cc b3 86 	sub	r12,pc,-19578
// set current page
void set_page(ePage n) {
  u8 i;
  pageIdx = n;
  print_dbg("\r\n page set");
  curPage = &(pages[pageIdx]);
8001e346:	fe b0 a6 83 	rcall	8001304c <print_dbg>
8001e34a:	ef 28 00 00 	ld.sb	r8,r7[0]
8001e34e:	f0 09 15 03 	lsl	r9,r8,0x3
8001e352:	f2 08 01 08 	sub	r8,r9,r8
8001e356:	31 c9       	mov	r9,28
8001e358:	f2 08 00 28 	add	r8,r9,r8<<0x2
8001e35c:	e0 67 3f bc 	mov	r7,16316
  print_dbg("\r\n redraw after page set:");
8001e360:	fe cc b3 98 	sub	r12,pc,-19560
  curPage->redraw();
8001e364:	8f 08       	st.w	r7[0x0],r8
8001e366:	fe b0 a6 73 	rcall	8001304c <print_dbg>

#if ARCH_AVR32
  print_dbg("\r\n set enc sense");
8001e36a:	6e 08       	ld.w	r8,r7[0x0]
8001e36c:	70 28       	ld.w	r8,r8[0x8]
  // set encoder sensitivity
  for(i=0; i<4; i++) {
    set_enc_thresh(encMap[i], curPage->encSens[i]);
8001e36e:	5d 18       	icall	r8
8001e370:	fe cc b3 8c 	sub	r12,pc,-19572
8001e374:	fe b0 a6 6c 	rcall	8001304c <print_dbg>
8001e378:	6e 08       	ld.w	r8,r7[0x0]
8001e37a:	30 3c       	mov	r12,3
8001e37c:	f1 3b 00 15 	ld.ub	r11,r8[21]
8001e380:	fe b0 c8 b4 	rcall	800174e8 <set_enc_thresh>
8001e384:	6e 08       	ld.w	r8,r7[0x0]
8001e386:	30 2c       	mov	r12,2
8001e388:	f1 3b 00 16 	ld.ub	r11,r8[22]
8001e38c:	fe b0 c8 ae 	rcall	800174e8 <set_enc_thresh>
8001e390:	6e 08       	ld.w	r8,r7[0x0]
8001e392:	30 1c       	mov	r12,1
8001e394:	f1 3b 00 17 	ld.ub	r11,r8[23]
8001e398:	fe b0 c8 a8 	rcall	800174e8 <set_enc_thresh>
8001e39c:	6e 08       	ld.w	r8,r7[0x0]
  }
#endif
}
8001e39e:	30 0c       	mov	r12,0
8001e3a0:	f1 3b 00 18 	ld.ub	r11,r8[24]
8001e3a4:	fe b0 c8 a2 	rcall	800174e8 <set_enc_thresh>
8001e3a8:	e3 cd 80 80 	ldm	sp++,r7,pc

8001e3ac <scroll_page>:
8001e3ac:	eb cd 40 c0 	pushm	r6-r7,lr
8001e3b0:	18 96       	mov	r6,r12
8001e3b2:	fe cc b3 ba 	sub	r12,pc,-19526
8001e3b6:	fe b0 a6 4b 	rcall	8001304c <print_dbg>
8001e3ba:	e0 67 37 46 	mov	r7,14150
8001e3be:	ef 2c 00 00 	ld.sb	r12,r7[0]
8001e3c2:	fe b0 a5 ed 	rcall	80012f9c <print_dbg_hex>
//// ins -> outs -> (gathered) -> presets -> scenes -> dsp
// scroll current page
void scroll_page(s8 dir) {
  print_dbg("\r\nscroll page: ");
  print_dbg_hex(pageIdx);
  switch(pageIdx) {
8001e3c6:	ef 28 00 00 	ld.sb	r8,r7[0]
8001e3ca:	58 68       	cp.w	r8,6
8001e3cc:	e0 8b 00 0e 	brhi	8001e3e8 <scroll_page+0x3c>
8001e3d0:	fe c9 b4 60 	sub	r9,pc,-19360
    break;
  case ePageScenes:
    pageIdx = dir>0 ? ePageDsp : ePageOps ;
    break;
  case ePageDsp:
    pageIdx = dir>0 ? ePageIns : ePageScenes ;
8001e3d4:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
8001e3d8:	30 08       	mov	r8,0
8001e3da:	ec 08 18 00 	cp.b	r8,r6
8001e3de:	f9 b6 05 00 	movlt	r6,0
    break;
  }
  print_dbg("\r\n new page idx: ");
8001e3e2:	f9 b6 04 04 	movge	r6,4
8001e3e6:	ae 86       	st.b	r7[0x0],r6
  print_dbg_hex(pageIdx);
8001e3e8:	fe cc b3 e0 	sub	r12,pc,-19488
8001e3ec:	fe b0 a6 30 	rcall	8001304c <print_dbg>
  set_page(pageIdx);
8001e3f0:	ef 2c 00 00 	ld.sb	r12,r7[0]
8001e3f4:	fe b0 a5 d4 	rcall	80012f9c <print_dbg_hex>
}
8001e3f8:	ef 2c 00 00 	ld.sb	r12,r7[0]
    break;
  case ePageOuts:
    pageIdx = dir>0 ? ePagePresets : ePageIns ;
    break;
  case ePageGathered:
    pageIdx = dir>0 ? ePagePresets : ePageIns ;
8001e3fc:	c9 ef       	rcall	8001e338 <set_page>
8001e3fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001e402:	30 08       	mov	r8,0
8001e404:	ec 08 18 00 	cp.b	r8,r6
8001e408:	f9 b6 05 02 	movlt	r6,2
    break;
8001e40c:	f9 b6 04 00 	movge	r6,0
    break;
  case ePageOps:
    pageIdx = dir>0 ? ePageScenes : ePagePresets ;
    break;
  case ePageScenes:
    pageIdx = dir>0 ? ePageDsp : ePageOps ;
8001e410:	ae 86       	st.b	r7[0x0],r6
8001e412:	ce bb       	rjmp	8001e3e8 <scroll_page+0x3c>
8001e414:	30 08       	mov	r8,0
8001e416:	ec 08 18 00 	cp.b	r8,r6
8001e41a:	f9 b6 05 05 	movlt	r6,5
    break;
8001e41e:	f9 b6 04 03 	movge	r6,3
void scroll_page(s8 dir) {
  print_dbg("\r\nscroll page: ");
  print_dbg_hex(pageIdx);
  switch(pageIdx) {
  case ePageIns:
    pageIdx = dir>0 ? ePageOuts : ePageDsp ;
8001e422:	ae 86       	st.b	r7[0x0],r6
8001e424:	ce 2b       	rjmp	8001e3e8 <scroll_page+0x3c>
8001e426:	30 08       	mov	r8,0
8001e428:	ec 08 18 00 	cp.b	r8,r6
8001e42c:	f9 b6 05 01 	movlt	r6,1
    break;
8001e430:	f9 b6 04 05 	movge	r6,5
    break;
  case ePageGathered:
    pageIdx = dir>0 ? ePagePresets : ePageIns ;
    break;
  case ePagePresets:
    pageIdx = dir>0 ? ePageOps : ePageOuts ;
8001e434:	ae 86       	st.b	r7[0x0],r6
8001e436:	cd 9b       	rjmp	8001e3e8 <scroll_page+0x3c>
8001e438:	30 08       	mov	r8,0
8001e43a:	ec 08 18 00 	cp.b	r8,r6
8001e43e:	f9 b6 05 03 	movlt	r6,3
    break;
8001e442:	f9 b6 04 01 	movge	r6,1
  case ePageOps:
    pageIdx = dir>0 ? ePageScenes : ePagePresets ;
8001e446:	ae 86       	st.b	r7[0x0],r6
8001e448:	cd 0b       	rjmp	8001e3e8 <scroll_page+0x3c>
8001e44a:	30 08       	mov	r8,0
8001e44c:	ec 08 18 00 	cp.b	r8,r6
8001e450:	f9 b6 05 04 	movlt	r6,4
    break;
8001e454:	f9 b6 04 02 	movge	r6,2
8001e458:	ae 86       	st.b	r7[0x0],r6
8001e45a:	cc 7b       	rjmp	8001e3e8 <scroll_page+0x3c>

8001e45c <menu_handleKey>:
8001e45c:	eb cd 40 80 	pushm	r7,lr
8001e460:	20 1d       	sub	sp,4
8001e462:	18 97       	mov	r7,r12
8001e464:	58 0c       	cp.w	r12,0
8001e466:	c1 01       	brne	8001e486 <menu_handleKey+0x2a>
8001e468:	e0 68 37 46 	mov	r8,14150
8001e46c:	30 79       	mov	r9,7
8001e46e:	11 88       	ld.ub	r8,r8[0x0]
8001e470:	f2 08 18 00 	cp.b	r8,r9
    if (pageIdx == ePagePlay) {
      // restore saved page
      set_page(savedPageIdx);
    } else {
      // save the page and switch to Play mode
      savedPageIdx = pageIdx;
8001e474:	c1 80       	breq	8001e4a4 <menu_handleKey+0x48>
      set_page(ePagePlay);
8001e476:	e0 69 37 45 	mov	r9,14149
8001e47a:	30 7c       	mov	r12,7
8001e47c:	b2 88       	st.b	r9[0x0],r8
    
  }
#if ARCH_LINUX
  screen_refresh();
#endif
}
8001e47e:	c5 df       	rcall	8001e338 <set_page>
8001e480:	2f fd       	sub	sp,-4
8001e482:	e3 cd 80 80 	ldm	sp++,r7,pc
      // save the page and switch to Play mode
      savedPageIdx = pageIdx;
      set_page(ePagePlay);
    }
  } else {
    print_dbg("\r\n menu_handleKey");
8001e486:	50 0b       	stdsp	sp[0x0],r11
8001e488:	fe cc b4 6c 	sub	r12,pc,-19348
    curPage->keyHandler(key, val);
8001e48c:	fe b0 a5 e0 	rcall	8001304c <print_dbg>
8001e490:	40 0b       	lddsp	r11,sp[0x0]
8001e492:	0e 9c       	mov	r12,r7
8001e494:	e0 68 3f bc 	mov	r8,16316
    
  }
#if ARCH_LINUX
  screen_refresh();
#endif
}
8001e498:	70 08       	ld.w	r8,r8[0x0]
8001e49a:	70 18       	ld.w	r8,r8[0x4]
8001e49c:	5d 18       	icall	r8
// top level key handler
void menu_handleKey(uiKey_t key, s16 val) {
  if (key == eKeyMode) {
    if (pageIdx == ePagePlay) {
      // restore saved page
      set_page(savedPageIdx);
8001e49e:	2f fd       	sub	sp,-4
8001e4a0:	e3 cd 80 80 	ldm	sp++,r7,pc
8001e4a4:	e0 68 37 45 	mov	r8,14149
    
  }
#if ARCH_LINUX
  screen_refresh();
#endif
}
8001e4a8:	f1 2c 00 00 	ld.sb	r12,r8[0]
8001e4ac:	c4 6f       	rcall	8001e338 <set_page>
8001e4ae:	2f fd       	sub	sp,-4
8001e4b0:	e3 cd 80 80 	ldm	sp++,r7,pc

8001e4b4 <menu_init>:
8001e4b4:	d4 01       	pushm	lr
8001e4b6:	e0 68 37 46 	mov	r8,14150
8001e4ba:	f1 2c 00 00 	ld.sb	r12,r8[0]
8001e4be:	c3 df       	rcall	8001e338 <set_page>
8001e4c0:	d8 02       	popm	pc
8001e4c2:	d7 03       	nop

8001e4c4 <scroll_select>:
8001e4c4:	d4 01       	pushm	lr
8001e4c6:	e0 68 3f bc 	mov	r8,16316
//----- external function definitions

// init
extern void menu_init(void) {
  set_page(pageIdx);
}
8001e4ca:	5c 6c       	casts.b	r12
  curPage->redraw();
}

//--  wrapping variant
void scroll_select_wrap(s8 dir, s32 max) {
  curPage->selected += dir;
8001e4cc:	70 09       	ld.w	r9,r8[0x0]
8001e4ce:	92 6a       	ld.sh	r10,r9[0xc]
8001e4d0:	18 0a       	add	r10,r12
    while (curPage->selected < 0) {
8001e4d2:	b2 6a       	st.h	r9[0xc],r10
8001e4d4:	30 0e       	mov	lr,0
8001e4d6:	70 09       	ld.w	r9,r8[0x0]
8001e4d8:	92 6a       	ld.sh	r10,r9[0xc]
8001e4da:	fc 0a 19 00 	cp.h	r10,lr
8001e4de:	c0 a4       	brge	8001e4f2 <scroll_select+0x2e>
8001e4e0:	f9 db b0 10 	bfexts	r12,r11,0x0,0x10
      curPage->selected += max;
8001e4e4:	18 0a       	add	r10,r12
}

//--  wrapping variant
void scroll_select_wrap(s8 dir, s32 max) {
  curPage->selected += dir;
    while (curPage->selected < 0) {
8001e4e6:	b2 6a       	st.h	r9[0xc],r10
8001e4e8:	70 09       	ld.w	r9,r8[0x0]
8001e4ea:	92 6a       	ld.sh	r10,r9[0xc]
8001e4ec:	fc 0a 19 00 	cp.h	r10,lr
      curPage->selected += max;
    }
    while (curPage->selected >= max) {
8001e4f0:	cf a5       	brlt	8001e4e4 <scroll_select+0x20>
8001e4f2:	16 3a       	cp.w	r10,r11
8001e4f4:	c0 a5       	brlt	8001e508 <scroll_select+0x44>
8001e4f6:	f9 db b0 10 	bfexts	r12,r11,0x0,0x10
      curPage->selected -= max; 
8001e4fa:	18 1a       	sub	r10,r12
void scroll_select_wrap(s8 dir, s32 max) {
  curPage->selected += dir;
    while (curPage->selected < 0) {
      curPage->selected += max;
    }
    while (curPage->selected >= max) {
8001e4fc:	b2 6a       	st.h	r9[0xc],r10
8001e4fe:	70 09       	ld.w	r9,r8[0x0]
8001e500:	92 6a       	ld.sh	r10,r9[0xc]
8001e502:	14 3b       	cp.w	r11,r10
8001e504:	fe 9a ff fb 	brle	8001e4fa <scroll_select+0x36>
      curPage->selected -= max; 
    }
  curPage->redraw();
8001e508:	72 28       	ld.w	r8,r9[0x8]
}

//-- default: wrap
void scroll_select(s8 dir, s32 max) {
  scroll_select_wrap(dir, max);
}
8001e50a:	5d 18       	icall	r8
8001e50c:	d8 02       	popm	pc
8001e50e:	d7 03       	nop

8001e510 <net_pop_op>:
  }
  net->numOps++;
  return net->numOps - 1;
}
// destroy last operator created
s16 net_pop_op(void) {
8001e510:	eb cd 40 80 	pushm	r7,lr
  op_t* op = net->ops[net->numOps - 1];
8001e514:	e0 69 3f cc 	mov	r9,16332
8001e518:	e0 68 81 08 	mov	r8,33032
  net->numIns -= op->numInputs;
8001e51c:	72 0a       	ld.w	r10,r9[0x0]
8001e51e:	e0 6c 81 0a 	mov	r12,33034
  net->numOps++;
  return net->numOps - 1;
}
// destroy last operator created
s16 net_pop_op(void) {
  op_t* op = net->ops[net->numOps - 1];
8001e522:	f4 08 05 0b 	ld.uh	r11,r10[r8]
8001e526:	20 1b       	sub	r11,1
8001e528:	f4 0b 03 2b 	ld.w	r11,r10[r11<<0x2]
  net->numIns -= op->numInputs;
8001e52c:	17 8e       	ld.ub	lr,r11[0x0]
8001e52e:	f4 0c 04 07 	ld.sh	r7,r10[r12]
8001e532:	1c 17       	sub	r7,lr
8001e534:	f4 0c 0a 07 	st.h	r10[r12],r7
  net->numOuts -= op->numOutputs;
8001e538:	72 0c       	ld.w	r12,r9[0x0]
8001e53a:	17 9e       	ld.ub	lr,r11[0x1]
8001e53c:	e0 6a 81 0c 	mov	r10,33036
8001e540:	f8 0a 04 07 	ld.sh	r7,r12[r10]
8001e544:	1c 17       	sub	r7,lr
8001e546:	f8 0a 0a 07 	st.h	r12[r10],r7
  net->opPoolOffset += op_registry[op->type].size;
8001e54a:	fe cc b4 a6 	sub	r12,pc,-19290
8001e54e:	f7 3e 00 20 	ld.ub	lr,r11[32]
8001e552:	f8 0e 00 3c 	add	r12,r12,lr<<0x3
8001e556:	72 0b       	ld.w	r11,r9[0x0]
8001e558:	e0 6a 81 04 	mov	r10,33028
8001e55c:	78 1e       	ld.w	lr,r12[0x4]
8001e55e:	f6 0a 03 0c 	ld.w	r12,r11[r10]
8001e562:	fc 0c 00 0c 	add	r12,lr,r12
  net->numOps -= 1;
  return 0;

}
8001e566:	f6 0a 09 0c 	st.w	r11[r10],r12
s16 net_pop_op(void) {
  op_t* op = net->ops[net->numOps - 1];
  net->numIns -= op->numInputs;
  net->numOuts -= op->numOutputs;
  net->opPoolOffset += op_registry[op->type].size;
  net->numOps -= 1;
8001e56a:	30 0c       	mov	r12,0
8001e56c:	72 09       	ld.w	r9,r9[0x0]
8001e56e:	f2 08 04 0a 	ld.sh	r10,r9[r8]
8001e572:	20 1a       	sub	r10,1
  return 0;

}
8001e574:	f2 08 0a 0a 	st.h	r9[r8],r10
8001e578:	e3 cd 80 80 	ldm	sp++,r7,pc

8001e57c <net_connect>:
8001e57c:	eb cd 40 80 	pushm	r7,lr
}


// create a connection between given idx pairxs
void net_connect(u32 oIdx, u32 iIdx) {
  net->ops[net->outs[oIdx].opIdx]->out[net->outs[oIdx].opOutIdx] = iIdx;
8001e580:	e0 68 3f cc 	mov	r8,16332
8001e584:	70 09       	ld.w	r9,r8[0x0]
8001e586:	e0 67 85 10 	mov	r7,34064
8001e58a:	f8 0c 00 1c 	add	r12,r12,r12<<0x1
8001e58e:	a3 6c       	lsl	r12,0x2
8001e590:	f2 0c 00 0a 	add	r10,r9,r12
8001e594:	f4 07 00 0e 	add	lr,r10,r7
8001e598:	fe 3a 7a ec 	sub	r10,-34068
8001e59c:	1d 8e       	ld.ub	lr,lr[0x0]
8001e59e:	74 0a       	ld.w	r10,r10[0x0]
8001e5a0:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8001e5a4:	72 49       	ld.w	r9,r9[0x10]
8001e5a6:	f2 0e 0a 1b 	st.h	r9[lr<<0x1],r11
  net->outs[oIdx].target = iIdx;
8001e5aa:	70 08       	ld.w	r8,r8[0x0]
8001e5ac:	f0 0c 00 0c 	add	r12,r8,r12
8001e5b0:	0e 0c       	add	r12,r7
}
8001e5b2:	b8 1b       	st.h	r12[0x2],r11
8001e5b4:	e3 cd 80 80 	ldm	sp++,r7,pc

8001e5b8 <net_disconnect>:
8001e5b8:	eb cd 40 80 	pushm	r7,lr

// disconnect given output
void net_disconnect(u32 outIdx) {
  net->ops[net->outs[outIdx].opIdx]->out[net->outs[outIdx].opOutIdx] = -1;
8001e5bc:	e0 69 3f cc 	mov	r9,16332
8001e5c0:	3f f8       	mov	r8,-1
8001e5c2:	72 0a       	ld.w	r10,r9[0x0]
8001e5c4:	e0 67 85 10 	mov	r7,34064
8001e5c8:	f8 0c 00 1c 	add	r12,r12,r12<<0x1
8001e5cc:	a3 6c       	lsl	r12,0x2
8001e5ce:	f4 0c 00 0b 	add	r11,r10,r12
8001e5d2:	f6 07 00 0e 	add	lr,r11,r7
8001e5d6:	fe 3b 7a ec 	sub	r11,-34068
8001e5da:	1d 8e       	ld.ub	lr,lr[0x0]
8001e5dc:	76 0b       	ld.w	r11,r11[0x0]
8001e5de:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
8001e5e2:	74 4a       	ld.w	r10,r10[0x10]
8001e5e4:	f4 0e 0a 18 	st.h	r10[lr<<0x1],r8
  net->outs[outIdx].target = -1;
8001e5e8:	72 09       	ld.w	r9,r9[0x0]
8001e5ea:	f2 0c 00 0c 	add	r12,r9,r12
8001e5ee:	0e 0c       	add	r12,r7
}
8001e5f0:	b8 18       	st.h	r12[0x2],r8
8001e5f2:	e3 cd 80 80 	ldm	sp++,r7,pc
8001e5f6:	d7 03       	nop

8001e5f8 <net_num_ops>:

//---- queries
// get current count of operators
u16 net_num_ops(void) {
8001e5f8:	e0 68 3f cc 	mov	r8,16332
8001e5fc:	70 09       	ld.w	r9,r8[0x0]
8001e5fe:	e0 68 81 08 	mov	r8,33032
  return net->numOps;
}
8001e602:	f2 08 04 0c 	ld.sh	r12,r9[r8]
8001e606:	5e fc       	retal	r12

8001e608 <net_num_ins>:
8001e608:	e0 69 81 0e 	mov	r9,33038

// get current count of inputs
u16 net_num_ins(void) {
  return net->numIns + net->numParams;
8001e60c:	e0 68 3f cc 	mov	r8,16332
8001e610:	70 08       	ld.w	r8,r8[0x0]
8001e612:	f0 09 04 0c 	ld.sh	r12,r8[r9]
8001e616:	e0 69 81 0a 	mov	r9,33034
8001e61a:	f0 09 04 08 	ld.sh	r8,r8[r9]
}
8001e61e:	10 0c       	add	r12,r8
8001e620:	5c 8c       	casts.h	r12
8001e622:	5e fc       	retal	r12

8001e624 <net_num_outs>:
8001e624:	e0 68 3f cc 	mov	r8,16332

// get current count of outputs
u16 net_num_outs(void) {
8001e628:	70 09       	ld.w	r9,r8[0x0]
8001e62a:	e0 68 81 0c 	mov	r8,33036
  return net->numOuts;
}
8001e62e:	f2 08 04 0c 	ld.sh	r12,r9[r8]
8001e632:	5e fc       	retal	r12

8001e634 <net_param_idx>:
8001e634:	e0 68 3f cc 	mov	r8,16332
u16 net_num_params(void) {
  return net->numParams;
}

// get param index given idx in (input + params)
s16 net_param_idx(u16 inIdx) {
8001e638:	70 09       	ld.w	r9,r8[0x0]
8001e63a:	e0 68 81 0a 	mov	r8,33034
8001e63e:	f2 08 04 08 	ld.sh	r8,r9[r8]
  return inIdx - net->numIns;
}
8001e642:	10 1c       	sub	r12,r8
8001e644:	5c 8c       	casts.h	r12
8001e646:	5e fc       	retal	r12

8001e648 <net_op_name>:
8001e648:	30 08       	mov	r8,0
8001e64a:	f0 0c 19 00 	cp.h	r12,r8
  //  print_dbg_ulong(idx);

  //  print_dbg("\r\n op addr: @0x: ");
  //  print_dbg_hex( &(net->ops[idx] ) );

  if (idx < 0) {
8001e64e:	c0 85       	brlt	8001e65e <net_op_name+0x16>
    return "";
  }

  return net->ops[idx]->opString;
8001e650:	e0 68 3f cc 	mov	r8,16332
8001e654:	70 08       	ld.w	r8,r8[0x0]
8001e656:	f0 0c 03 28 	ld.w	r8,r8[r12<<0x2]
}
8001e65a:	70 5c       	ld.w	r12,r8[0x14]
  //  print_dbg_ulong(idx);

  //  print_dbg("\r\n op addr: @0x: ");
  //  print_dbg_hex( &(net->ops[idx] ) );

  if (idx < 0) {
8001e65c:	5e fc       	retal	r12
8001e65e:	fe cc c9 fe 	sub	r12,pc,-13826
8001e662:	5e fc       	retal	r12

8001e664 <net_in_op_idx>:
8001e664:	e0 68 3f cc 	mov	r8,16332
  return op_out_name(net->ops[net->outs[idx].opIdx], net->outs[idx].opOutIdx);
}

// get op index for input at given idx
s16 net_in_op_idx(const u16 idx) {
  if (idx >= net->numIns) return -1;
8001e668:	e0 69 81 0a 	mov	r9,33034
8001e66c:	70 08       	ld.w	r8,r8[0x0]
8001e66e:	f0 09 04 09 	ld.sh	r9,r8[r9]
8001e672:	f8 09 19 00 	cp.h	r9,r12
8001e676:	e0 88 00 09 	brls	8001e688 <net_in_op_idx+0x24>
  return net->ins[idx].opIdx;
8001e67a:	5c 7c       	castu.h	r12
8001e67c:	f8 cc ef de 	sub	r12,r12,-4130
8001e680:	f0 0c 03 3c 	ld.w	r12,r8[r12<<0x3]
}
8001e684:	5c 8c       	casts.h	r12
  return op_out_name(net->ops[net->outs[idx].opIdx], net->outs[idx].opOutIdx);
}

// get op index for input at given idx
s16 net_in_op_idx(const u16 idx) {
  if (idx >= net->numIns) return -1;
8001e686:	5e fc       	retal	r12
8001e688:	5e fe       	retal	-1
8001e68a:	d7 03       	nop

8001e68c <net_out_op_idx>:
  return net->ins[idx].opIdx;
}

// get op index for output at given idx
s16 net_out_op_idx(const u16 idx) {
  if (idx > net->numOuts) return -1;
8001e68c:	e0 68 3f cc 	mov	r8,16332
8001e690:	e0 69 81 0c 	mov	r9,33036
8001e694:	70 08       	ld.w	r8,r8[0x0]
8001e696:	f0 09 04 09 	ld.sh	r9,r8[r9]
8001e69a:	f8 09 19 00 	cp.h	r9,r12
  return net->outs[idx].opIdx;
8001e69e:	c0 a3       	brcs	8001e6b2 <net_out_op_idx+0x26>
8001e6a0:	5c 7c       	castu.h	r12
8001e6a2:	f8 0c 00 1c 	add	r12,r12,r12<<0x1
8001e6a6:	f0 0c 00 28 	add	r8,r8,r12<<0x2
8001e6aa:	fe 38 7a ec 	sub	r8,-34068
}
8001e6ae:	90 1c       	ld.sh	r12,r8[0x2]
  return net->ins[idx].opIdx;
}

// get op index for output at given idx
s16 net_out_op_idx(const u16 idx) {
  if (idx > net->numOuts) return -1;
8001e6b0:	5e fc       	retal	r12
8001e6b2:	5e fe       	retal	-1

8001e6b4 <net_op_in_idx>:
8001e6b4:	d4 01       	pushm	lr
8001e6b6:	e0 69 3f cc 	mov	r9,16332
}

// get global index for a given input of given op
u16 net_op_in_idx(const u16 opIdx, const u16 inIdx) {
  u16 which;
  for(which=0; which<net->numIns; which++) {
8001e6ba:	e0 6a 81 0a 	mov	r10,33034
8001e6be:	72 09       	ld.w	r9,r9[0x0]
8001e6c0:	f2 0a 04 0e 	ld.sh	lr,r9[r10]
8001e6c4:	58 0e       	cp.w	lr,0
    if(net->ins[which].opIdx == opIdx) {
8001e6c6:	c1 50       	breq	8001e6f0 <net_op_in_idx+0x3c>
8001e6c8:	e0 6a 81 10 	mov	r10,33040
8001e6cc:	5c 7c       	castu.h	r12
8001e6ce:	f2 0a 03 0a 	ld.w	r10,r9[r10]
8001e6d2:	18 3a       	cp.w	r10,r12
      return (which + inIdx);
8001e6d4:	c0 f0       	breq	8001e6f2 <net_op_in_idx+0x3e>
8001e6d6:	fe 39 7e e8 	sub	r9,-33048
8001e6da:	30 08       	mov	r8,0

// get global index for a given input of given op
u16 net_op_in_idx(const u16 opIdx, const u16 inIdx) {
  u16 which;
  for(which=0; which<net->numIns; which++) {
    if(net->ins[which].opIdx == opIdx) {
8001e6dc:	c0 58       	rjmp	8001e6e6 <net_op_in_idx+0x32>
8001e6de:	72 0a       	ld.w	r10,r9[0x0]
8001e6e0:	2f 89       	sub	r9,-8
8001e6e2:	18 3a       	cp.w	r10,r12
}

// get global index for a given input of given op
u16 net_op_in_idx(const u16 opIdx, const u16 inIdx) {
  u16 which;
  for(which=0; which<net->numIns; which++) {
8001e6e4:	c0 80       	breq	8001e6f4 <net_op_in_idx+0x40>
8001e6e6:	2f f8       	sub	r8,-1
8001e6e8:	5c 88       	casts.h	r8
8001e6ea:	fc 08 19 00 	cp.h	r8,lr
8001e6ee:	cf 83       	brcs	8001e6de <net_op_in_idx+0x2a>
    if(net->ins[which].opIdx == opIdx) {
8001e6f0:	d8 0a       	popm	pc,r12=0
      return (which + inIdx);
8001e6f2:	30 08       	mov	r8,0
8001e6f4:	16 08       	add	r8,r11
8001e6f6:	f9 d8 b0 10 	bfexts	r12,r8,0x0,0x10
8001e6fa:	d8 02       	popm	pc

8001e6fc <net_op_out_idx>:
8001e6fc:	d4 01       	pushm	lr
8001e6fe:	e0 69 3f cc 	mov	r9,16332
}

// get global index for a given output of given op
u16 net_op_out_idx(const u16 opIdx, const u16 outIdx) {
  u16 which;
  for(which=0; which<net->numOuts; which++) {
8001e702:	e0 6a 81 0c 	mov	r10,33036
8001e706:	72 09       	ld.w	r9,r9[0x0]
8001e708:	f2 0a 04 0e 	ld.sh	lr,r9[r10]
8001e70c:	58 0e       	cp.w	lr,0
    if(net->outs[which].opIdx == opIdx) {
8001e70e:	c1 50       	breq	8001e738 <net_op_out_idx+0x3c>
8001e710:	e0 6a 85 14 	mov	r10,34068
8001e714:	5c 7c       	castu.h	r12
8001e716:	f2 0a 03 0a 	ld.w	r10,r9[r10]
8001e71a:	18 3a       	cp.w	r10,r12
      return (which + outIdx);
8001e71c:	c0 f0       	breq	8001e73a <net_op_out_idx+0x3e>
8001e71e:	fe 39 7a e0 	sub	r9,-34080
8001e722:	30 08       	mov	r8,0

// get global index for a given output of given op
u16 net_op_out_idx(const u16 opIdx, const u16 outIdx) {
  u16 which;
  for(which=0; which<net->numOuts; which++) {
    if(net->outs[which].opIdx == opIdx) {
8001e724:	c0 58       	rjmp	8001e72e <net_op_out_idx+0x32>
8001e726:	72 0a       	ld.w	r10,r9[0x0]
8001e728:	2f 49       	sub	r9,-12
8001e72a:	18 3a       	cp.w	r10,r12
}

// get global index for a given output of given op
u16 net_op_out_idx(const u16 opIdx, const u16 outIdx) {
  u16 which;
  for(which=0; which<net->numOuts; which++) {
8001e72c:	c0 80       	breq	8001e73c <net_op_out_idx+0x40>
8001e72e:	2f f8       	sub	r8,-1
8001e730:	5c 88       	casts.h	r8
8001e732:	fc 08 19 00 	cp.h	r8,lr
8001e736:	cf 83       	brcs	8001e726 <net_op_out_idx+0x2a>
    if(net->outs[which].opIdx == opIdx) {
8001e738:	d8 0a       	popm	pc,r12=0
      return (which + outIdx);
8001e73a:	30 08       	mov	r8,0
8001e73c:	16 08       	add	r8,r11
8001e73e:	f9 d8 b0 10 	bfexts	r12,r8,0x0,0x10
8001e742:	d8 02       	popm	pc

8001e744 <net_get_target>:
8001e744:	5c 7c       	castu.h	r12
8001e746:	e0 68 3f cc 	mov	r8,16332
  }
  return 0; // shouldn't get here
}

// get connection index for output
s16 net_get_target(u16 outIdx) {
8001e74a:	f8 0c 00 1c 	add	r12,r12,r12<<0x1
8001e74e:	70 08       	ld.w	r8,r8[0x0]
8001e750:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
8001e754:	fe 3c 7a f0 	sub	r12,-34064
  return net->outs[outIdx].target;
}
8001e758:	98 1c       	ld.sh	r12,r12[0x2]
8001e75a:	5e fc       	retal	r12

8001e75c <net_op_status>:
8001e75c:	5c 7c       	castu.h	r12
8001e75e:	e0 68 3f cc 	mov	r8,16332
  }
  return f;
}

// get status (user/system) of op at given idx
opStatus_t net_op_status(u16 opIdx) {
8001e762:	70 08       	ld.w	r8,r8[0x0]
8001e764:	f0 0c 03 28 	ld.w	r8,r8[r12<<0x2]
  return net->ops[opIdx]->status;
}
8001e768:	70 9c       	ld.w	r12,r8[0x24]
8001e76a:	5e fc       	retal	r12

8001e76c <net_gather>:
8001e76c:	eb cd 40 80 	pushm	r7,lr

// populate an array with indices of all connected outputs for a given index
// returns count of connections
u32 net_gather(s32 iIdx, u32(*outs)[NET_OUTS_MAX]) {
8001e770:	e0 67 3f cc 	mov	r7,16332
8001e774:	18 98       	mov	r8,r12
8001e776:	30 0c       	mov	r12,0
8001e778:	18 99       	mov	r9,r12
  u32 iTest;
  u32 iOut=0;
  for(iTest=0; iTest<NET_OUTS_MAX; iTest++) {
8001e77a:	c0 58       	rjmp	8001e784 <net_gather+0x18>
8001e77c:	2f f9       	sub	r9,-1
8001e77e:	e0 49 00 80 	cp.w	r9,128
    if(net->outs[iTest].target == iIdx) {
8001e782:	c1 20       	breq	8001e7a6 <net_gather+0x3a>
8001e784:	6e 0a       	ld.w	r10,r7[0x0]
8001e786:	f2 09 00 1e 	add	lr,r9,r9<<0x1
8001e78a:	f4 0e 00 2a 	add	r10,r10,lr<<0x2
8001e78e:	fe 3a 7a f0 	sub	r10,-34064
8001e792:	94 1a       	ld.sh	r10,r10[0x2]
8001e794:	10 3a       	cp.w	r10,r8
      (*outs)[iOut] = iTest;
8001e796:	cf 31       	brne	8001e77c <net_gather+0x10>
8001e798:	f6 0c 09 29 	st.w	r11[r12<<0x2],r9
// populate an array with indices of all connected outputs for a given index
// returns count of connections
u32 net_gather(s32 iIdx, u32(*outs)[NET_OUTS_MAX]) {
  u32 iTest;
  u32 iOut=0;
  for(iTest=0; iTest<NET_OUTS_MAX; iTest++) {
8001e79c:	2f fc       	sub	r12,-1
8001e79e:	2f f9       	sub	r9,-1
8001e7a0:	e0 49 00 80 	cp.w	r9,128
      (*outs)[iOut] = iTest;
      iOut++;
    }
  }
  return iOut;
}
8001e7a4:	cf 01       	brne	8001e784 <net_gather+0x18>
8001e7a6:	e3 cd 80 80 	ldm	sp++,r7,pc
8001e7aa:	d7 03       	nop

8001e7ac <net_toggle_in_preset>:
  }
}

// toggle preset inclusion for input
u8 net_toggle_in_preset(u32 id) {
  net->ins[id].preset ^= 1;
8001e7ac:	e0 6a 3f cc 	mov	r10,16332
8001e7b0:	a3 7c       	lsl	r12,0x3
8001e7b2:	74 08       	ld.w	r8,r10[0x0]
8001e7b4:	18 08       	add	r8,r12
8001e7b6:	fe 38 7e ec 	sub	r8,-33044
8001e7ba:	11 99       	ld.ub	r9,r8[0x1]
8001e7bc:	ec 19 00 01 	eorl	r9,0x1
8001e7c0:	b0 99       	st.b	r8[0x1],r9
8001e7c2:	74 08       	ld.w	r8,r10[0x0]
8001e7c4:	f0 0c 00 0c 	add	r12,r8,r12
8001e7c8:	fe 3c 7e ec 	sub	r12,-33044
  return net->ins[id].preset;
}
8001e7cc:	19 9c       	ld.ub	r12,r12[0x1]
8001e7ce:	5e fc       	retal	r12

8001e7d0 <net_get_in_preset>:
8001e7d0:	e0 68 3f cc 	mov	r8,16332
void net_set_out_preset(u32 outIdx, u8 val) {
  net->outs[outIdx].preset = val;
}

// get preset inclusion for input
u8 net_get_in_preset(u32 id) {
8001e7d4:	70 08       	ld.w	r8,r8[0x0]
8001e7d6:	f0 0c 00 38 	add	r8,r8,r12<<0x3
8001e7da:	fe 38 7e ec 	sub	r8,-33044
  return net->ins[id].preset;
}
8001e7de:	11 9c       	ld.ub	r12,r8[0x1]
8001e7e0:	5e fc       	retal	r12
8001e7e2:	d7 03       	nop

8001e7e4 <net_get_out_preset>:

// get preset inclusion for output
u8 net_get_out_preset(u32 id) {
8001e7e4:	f8 0c 00 1c 	add	r12,r12,r12<<0x1
8001e7e8:	e0 68 3f cc 	mov	r8,16332
8001e7ec:	70 08       	ld.w	r8,r8[0x0]
8001e7ee:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
8001e7f2:	fe 3c 7a e8 	sub	r12,-34072
  return net->outs[id].preset;
}
8001e7f6:	19 8c       	ld.ub	r12,r12[0x0]
8001e7f8:	5e fc       	retal	r12
8001e7fa:	d7 03       	nop

8001e7fc <net_clear_params>:
  /* print_dbg_ulong(idx); */
}

// clear existing parameters
void net_clear_params(void) {
  net->numParams = 0;
8001e7fc:	e0 68 3f cc 	mov	r8,16332
8001e800:	30 0a       	mov	r10,0
8001e802:	70 09       	ld.w	r9,r8[0x0]
8001e804:	e0 68 81 0e 	mov	r8,33038
8001e808:	f2 08 0a 0a 	st.h	r9[r8],r10
}
8001e80c:	5e fc       	retal	r12
8001e80e:	d7 03       	nop

8001e810 <net_add_param>:

//------------------------------------
//------ params

// add a new parameter
void net_add_param(u32 idx, volatile ParamDesc * pdesc) {
8001e810:	d4 21       	pushm	r4-r7,lr
  //net->params[net->numParams].desc = *pdesc;  
  memcpy( &(net->params[net->numParams].desc), (const void*)pdesc, sizeof(ParamDesc) );
8001e812:	e0 67 81 0e 	mov	r7,33038
8001e816:	e0 66 3f cc 	mov	r6,16332
8001e81a:	18 94       	mov	r4,r12
8001e81c:	6c 0c       	ld.w	r12,r6[0x0]
8001e81e:	f8 07 05 08 	ld.uh	r8,r12[r7]
8001e822:	f0 08 00 28 	add	r8,r8,r8<<0x2
8001e826:	a3 78       	lsl	r8,0x3
8001e828:	fe 38 74 f0 	sub	r8,-35600
8001e82c:	16 95       	mov	r5,r11
8001e82e:	32 1a       	mov	r10,33
8001e830:	10 0c       	add	r12,r8
8001e832:	e0 a0 14 cf 	rcall	800211d0 <memcpy>
  /* print_dbg("\r\n src label: "); */
  /* print_dbg( pdesc->label ); */
  /* print_dbg("\r\n dst label: "); */
  /* print_dbg( &(net->params[net->numParams].desc.label) ); */

  net->params[net->numParams].idx = idx; 
8001e836:	6c 09       	ld.w	r9,r6[0x0]
8001e838:	f2 07 05 08 	ld.uh	r8,r9[r7]
8001e83c:	f0 08 00 28 	add	r8,r8,r8<<0x2
8001e840:	f2 08 00 38 	add	r8,r9,r8<<0x3
8001e844:	fe 38 74 cc 	sub	r8,-35636
  net->params[net->numParams].preset = 1; 
8001e848:	b0 a4       	st.b	r8[0x2],r4
8001e84a:	6c 09       	ld.w	r9,r6[0x0]
8001e84c:	f2 07 05 08 	ld.uh	r8,r9[r7]
8001e850:	f0 08 00 28 	add	r8,r8,r8<<0x2
8001e854:	f2 08 00 38 	add	r8,r9,r8<<0x3
8001e858:	fe 38 74 cc 	sub	r8,-35636
8001e85c:	30 19       	mov	r9,1
  net->params[net->numParams].data.value.asInt = pdesc->min; //fix16_from_float(pdesc->min);
8001e85e:	b0 b9       	st.b	r8[0x3],r9
8001e860:	eb 38 00 19 	ld.ub	r8,r5[25]
8001e864:	eb 3a 00 1a 	ld.ub	r10,r5[26]
8001e868:	b1 6a       	lsl	r10,0x10
8001e86a:	f5 e8 11 8a 	or	r10,r10,r8<<0x18
8001e86e:	eb 38 00 1b 	ld.ub	r8,r5[27]
8001e872:	6c 09       	ld.w	r9,r6[0x0]
8001e874:	f5 e8 10 8a 	or	r10,r10,r8<<0x8
8001e878:	eb 38 00 1c 	ld.ub	r8,r5[28]
8001e87c:	f1 ea 10 0a 	or	r10,r8,r10
8001e880:	f2 07 05 08 	ld.uh	r8,r9[r7]
8001e884:	f0 08 00 28 	add	r8,r8,r8<<0x2
8001e888:	f2 08 00 38 	add	r8,r9,r8<<0x3
8001e88c:	fe 38 74 d0 	sub	r8,-35632
8001e890:	70 09       	ld.w	r9,r8[0x0]
8001e892:	e6 19 ff 00 	andh	r9,0xff00,COH
8001e896:	f3 ea 12 89 	or	r9,r9,r10>>0x8
8001e89a:	91 09       	st.w	r8[0x0],r9
8001e89c:	70 19       	ld.w	r9,r8[0x4]
8001e89e:	f3 d9 c0 18 	bfextu	r9,r9,0x0,0x18
8001e8a2:	f3 ea 11 8a 	or	r10,r9,r10<<0x18
  //  net->params[net->numParams].data.value.asInt = 0;
  net->numParams++;
8001e8a6:	91 1a       	st.w	r8[0x4],r10
8001e8a8:	6c 08       	ld.w	r8,r6[0x0]
8001e8aa:	f0 07 04 09 	ld.sh	r9,r8[r7]
8001e8ae:	2f f9       	sub	r9,-1
8001e8b0:	f0 07 0a 09 	st.h	r8[r7],r9

  /* print_dbg("\r\n ctlnet: added parameter at index "); */
  /* print_dbg_ulong(idx); */
}
8001e8b4:	d8 22       	popm	r4-r7,pc
8001e8b6:	d7 03       	nop

8001e8b8 <net_set_in_value>:
8001e8b8:	d4 01       	pushm	lr
8001e8ba:	18 98       	mov	r8,r12
    //return (net->ins[inIdx].val);
    return op_get_in_val(net->ops[net->ins[inIdx].opIdx], net->ins[inIdx].opInIdx);
  }
}

void net_set_in_value(s32 inIdx, io_t val) {
8001e8bc:	16 9a       	mov	r10,r11
  //net->ins[inIdx].val = val;
  if (inIdx < 0) return;
8001e8be:	58 0c       	cp.w	r12,0
8001e8c0:	c0 e5       	brlt	8001e8dc <net_set_in_value+0x24>
  if (inIdx < net->numIns) {
8001e8c2:	e0 69 3f cc 	mov	r9,16332
8001e8c6:	e0 6c 81 0a 	mov	r12,33034
8001e8ca:	72 09       	ld.w	r9,r9[0x0]
8001e8cc:	f2 0c 05 0c 	ld.uh	r12,r9[r12]
8001e8d0:	18 38       	cp.w	r8,r12
    op_set_in_val(net->ops[net->ins[inIdx].opIdx], net->ins[inIdx].opInIdx, val);
  } else {
    // parameter
    inIdx -= net->numIns;
    set_param_value(inIdx, val);
8001e8d2:	c0 65       	brlt	8001e8de <net_set_in_value+0x26>
8001e8d4:	f0 0c 01 0c 	sub	r12,r8,r12
8001e8d8:	e0 a0 02 ea 	rcall	8001eeac <set_param_value>

void net_set_in_value(s32 inIdx, io_t val) {
  //net->ins[inIdx].val = val;
  if (inIdx < 0) return;
  if (inIdx < net->numIns) {
    op_set_in_val(net->ops[net->ins[inIdx].opIdx], net->ins[inIdx].opInIdx, val);
8001e8dc:	d8 02       	popm	pc
8001e8de:	f0 cb ef de 	sub	r11,r8,-4130
8001e8e2:	f2 08 00 38 	add	r8,r9,r8<<0x3
8001e8e6:	f2 0b 03 3b 	ld.w	r11,r9[r11<<0x3]
8001e8ea:	fe 38 7e ec 	sub	r8,-33044
8001e8ee:	f2 0b 03 2c 	ld.w	r12,r9[r11<<0x2]
8001e8f2:	11 8b       	ld.ub	r11,r8[0x0]
8001e8f4:	e0 a0 02 a2 	rcall	8001ee38 <op_set_in_val>
8001e8f8:	d8 02       	popm	pc
8001e8fa:	d7 03       	nop

8001e8fc <net_activate>:
8001e8fc:	d4 01       	pushm	lr
8001e8fe:	30 09       	mov	r9,0
8001e900:	18 98       	mov	r8,r12
8001e902:	16 9a       	mov	r10,r11
  /* print_dbg_hex(net->ins[inIdx].opIdx); */
  /* print_dbg(" , op in idx: "); */
  /* print_dbg_hex(net->ins[inIdx].opInIdx); */

  //    param_feedback(inIdx, val);
  if(inIdx >= 0) {
8001e904:	f2 0c 19 00 	cp.h	r12,r9
8001e908:	c1 55       	brlt	8001e932 <net_activate+0x36>
    if(inIdx < net->numIns) {
8001e90a:	e0 69 3f cc 	mov	r9,16332
8001e90e:	e0 6c 81 0a 	mov	r12,33034
8001e912:	72 09       	ld.w	r9,r9[0x0]
8001e914:	f2 0c 04 0c 	ld.sh	r12,r9[r12]
8001e918:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
8001e91c:	1c 38       	cp.w	r8,lr
      op_set_in_val(net->ops[net->ins[inIdx].opIdx],
		    net->ins[inIdx].opInIdx,
		    val);
    } else { 
      // index in dsp param list
      inIdx -= net->numIns;
8001e91e:	c0 e5       	brlt	8001e93a <net_activate+0x3e>
8001e920:	f0 0c 01 0c 	sub	r12,r8,r12
      if (inIdx >= net->numParams) {
8001e924:	e0 68 81 0e 	mov	r8,33038
8001e928:	5c 8c       	casts.h	r12
8001e92a:	f2 08 05 08 	ld.uh	r8,r9[r8]
8001e92e:	10 3c       	cp.w	r12,r8
8001e930:	c0 25       	brlt	8001e934 <net_activate+0x38>
	return ;
      } else {
	set_param_value(inIdx, val);
8001e932:	d8 02       	popm	pc
8001e934:	e0 a0 02 bc 	rcall	8001eeac <set_param_value>

  //    param_feedback(inIdx, val);
  if(inIdx >= 0) {
    if(inIdx < net->numIns) {
      //(*(net->ins[inIdx].in))(net->ops[net->ins[inIdx].opIdx], val);
      op_set_in_val(net->ops[net->ins[inIdx].opIdx],
8001e938:	d8 02       	popm	pc
8001e93a:	f0 cb ef de 	sub	r11,r8,-4130
8001e93e:	f2 08 00 38 	add	r8,r9,r8<<0x3
8001e942:	f2 0b 03 3b 	ld.w	r11,r9[r11<<0x3]
8001e946:	fe 38 7e ec 	sub	r8,-33044
8001e94a:	f2 0b 03 2c 	ld.w	r12,r9[r11<<0x2]
8001e94e:	11 8b       	ld.ub	r11,r8[0x0]
8001e950:	e0 a0 02 74 	rcall	8001ee38 <op_set_in_val>
8001e954:	d8 02       	popm	pc
8001e956:	d7 03       	nop

8001e958 <net_get_in_value>:
8001e958:	d4 01       	pushm	lr
8001e95a:	18 98       	mov	r8,r12
8001e95c:	58 0c       	cp.w	r12,0
8001e95e:	c1 d5       	brlt	8001e998 <net_get_in_value+0x40>
  //  print_dbg(" , address: ");
  //  print_dbg_hex( &(net->ins[inIdx]) );
  if(inIdx < 0) {
    return 0;
  }
  if (inIdx >= net->numIns) {
8001e960:	e0 69 3f cc 	mov	r9,16332
8001e964:	e0 6a 81 0a 	mov	r10,33034
8001e968:	72 09       	ld.w	r9,r9[0x0]
8001e96a:	f2 0a 05 0c 	ld.uh	r12,r9[r10]
8001e96e:	18 38       	cp.w	r8,r12
    inIdx -= net->numIns;
    return get_param_value(inIdx);
  } else {
    //return (net->ins[inIdx].val);
    return op_get_in_val(net->ops[net->ins[inIdx].opIdx], net->ins[inIdx].opInIdx);
8001e970:	c0 f4       	brge	8001e98e <net_get_in_value+0x36>
8001e972:	f0 ca ef de 	sub	r10,r8,-4130
8001e976:	f2 08 00 38 	add	r8,r9,r8<<0x3
8001e97a:	f2 0a 03 3a 	ld.w	r10,r9[r10<<0x3]
8001e97e:	fe 38 7e ec 	sub	r8,-33044
8001e982:	f2 0a 03 2c 	ld.w	r12,r9[r10<<0x2]
8001e986:	11 8b       	ld.ub	r11,r8[0x0]
8001e988:	e0 a0 02 52 	rcall	8001ee2c <op_get_in_val>
  if(inIdx < 0) {
    return 0;
  }
  if (inIdx >= net->numIns) {
    inIdx -= net->numIns;
    return get_param_value(inIdx);
8001e98c:	d8 02       	popm	pc
8001e98e:	f0 0c 01 0c 	sub	r12,r8,r12
8001e992:	e0 a0 02 65 	rcall	8001ee5c <get_param_value>
io_t net_get_in_value(s32 inIdx) {
  //  print_dbg("\r\n retreiving input val at idx: ");
  //  print_dbg_hex(inIdx);
  //  print_dbg(" , address: ");
  //  print_dbg_hex( &(net->ins[inIdx]) );
  if(inIdx < 0) {
8001e996:	d8 02       	popm	pc
8001e998:	d8 0a       	popm	pc,r12=0
8001e99a:	d7 03       	nop

8001e99c <net_out_name>:
8001e99c:	d4 01       	pushm	lr
8001e99e:	e0 68 3f cc 	mov	r8,16332
8001e9a2:	e0 6b 85 14 	mov	r11,34068
  }
}

// get name for output at given idx
const char* net_out_name(const u16 idx) {
  return op_out_name(net->ops[net->outs[idx].opIdx], net->outs[idx].opOutIdx);
8001e9a6:	70 09       	ld.w	r9,r8[0x0]
8001e9a8:	5c 7c       	castu.h	r12
8001e9aa:	f8 0c 00 1c 	add	r12,r12,r12<<0x1
8001e9ae:	f2 0c 00 28 	add	r8,r9,r12<<0x2
8001e9b2:	f0 0b 00 0a 	add	r10,r8,r11
8001e9b6:	fe 38 7a f0 	sub	r8,-34064
8001e9ba:	74 0a       	ld.w	r10,r10[0x0]
8001e9bc:	11 8b       	ld.ub	r11,r8[0x0]
8001e9be:	f2 0a 03 2c 	ld.w	r12,r9[r10<<0x2]
8001e9c2:	e0 a0 02 0b 	rcall	8001edd8 <op_out_name>
}
8001e9c6:	d8 02       	popm	pc

8001e9c8 <net_in_name>:
8001e9c8:	d4 01       	pushm	lr
8001e9ca:	e0 68 3f cc 	mov	r8,16332
8001e9ce:	e0 69 81 0a 	mov	r9,33034
  return net->ops[idx]->opString;
}

// get name for input at given idx
const char* net_in_name(u16 idx) {
  if (idx >= net->numIns) {
8001e9d2:	70 08       	ld.w	r8,r8[0x0]
8001e9d4:	f0 09 04 09 	ld.sh	r9,r8[r9]
8001e9d8:	f8 09 19 00 	cp.h	r9,r12
8001e9dc:	e0 8b 00 1a 	brhi	8001ea10 <net_in_name+0x48>
    // not an operator input
    idx -= net->numIns;
8001e9e0:	f8 09 01 09 	sub	r9,r12,r9
    if (idx >= net->numParams) {
8001e9e4:	e0 6a 81 0e 	mov	r10,33038
8001e9e8:	5c 89       	casts.h	r9
8001e9ea:	f0 0a 04 0a 	ld.sh	r10,r8[r10]
8001e9ee:	f2 0a 19 00 	cp.h	r10,r9
8001e9f2:	e0 8b 00 05 	brhi	8001e9fc <net_in_name+0x34>
8001e9f6:	fe cc cd 96 	sub	r12,pc,-12906
      // not a param input either
      return "";
    } else {
      // param input
      return net->params[idx].desc.label;
8001e9fa:	d8 02       	popm	pc
8001e9fc:	5c 79       	castu.h	r9
8001e9fe:	f2 09 00 29 	add	r9,r9,r9<<0x2
8001ea02:	f2 0c 15 03 	lsl	r12,r9,0x3
8001ea06:	fe 3c 74 f0 	sub	r12,-35600
8001ea0a:	f0 0c 00 0c 	add	r12,r8,r12
    }
  } else {
    // op input
    return op_in_name(net->ops[net->ins[idx].opIdx], net->ins[idx].opInIdx);
8001ea0e:	d8 02       	popm	pc
8001ea10:	f3 dc c0 10 	bfextu	r9,r12,0x0,0x10
8001ea14:	f2 ca ef de 	sub	r10,r9,-4130
8001ea18:	f0 0a 03 3a 	ld.w	r10,r8[r10<<0x3]
8001ea1c:	f0 0a 03 2c 	ld.w	r12,r8[r10<<0x2]
8001ea20:	f0 09 00 38 	add	r8,r8,r9<<0x3
8001ea24:	fe 38 7e ec 	sub	r8,-33044
8001ea28:	11 8b       	ld.ub	r11,r8[0x0]
  }
}
8001ea2a:	ca dd       	rcall	8001ed84 <op_in_name>
8001ea2c:	d8 02       	popm	pc
8001ea2e:	d7 03       	nop

8001ea30 <net_add_op>:
8001ea30:	eb cd 40 f8 	pushm	r3-r7,lr
8001ea34:	e0 69 81 08 	mov	r9,33032
s16 net_add_op(opId_t opId) {
  u16 ins, outs;
  u8 i;
  op_t* op;

  if (net->numOps >= NET_OPS_MAX) {
8001ea38:	e0 67 3f cc 	mov	r7,16332
8001ea3c:	18 96       	mov	r6,r12
8001ea3e:	6e 08       	ld.w	r8,r7[0x0]
8001ea40:	f0 09 04 0a 	ld.sh	r10,r8[r9]
8001ea44:	33 f9       	mov	r9,63
8001ea46:	f2 0a 19 00 	cp.h	r10,r9
8001ea4a:	e0 88 00 04 	brls	8001ea52 <net_add_op+0x22>
    net->outs[net->numOuts].opOutIdx = i;
    net->outs[net->numOuts].target = -1;
    net->numOuts++;
  }
  net->numOps++;
  return net->numOps - 1;
8001ea4e:	e3 cf c0 f8 	ldm	sp++,r3-r7,pc,r12=-1

  if (net->numOps >= NET_OPS_MAX) {
    return -1;
  }

  if (op_registry[opId].size > NET_OP_POOL_SIZE - net->opPoolOffset) {
8001ea52:	e0 69 81 04 	mov	r9,33028
8001ea56:	fe c5 b9 b2 	sub	r5,pc,-17998
8001ea5a:	f0 09 03 09 	ld.w	r9,r8[r9]
8001ea5e:	f8 04 15 01 	lsl	r4,r12,0x1
8001ea62:	e0 6a 80 00 	mov	r10,32768
8001ea66:	e8 cb ff ff 	sub	r11,r4,-1
8001ea6a:	12 1a       	sub	r10,r9
8001ea6c:	ea 0b 03 2b 	ld.w	r11,r5[r11<<0x2]
8001ea70:	14 3b       	cp.w	r11,r10
    // not enough memory in op pool
    return -1;
  }
  op = (op_t*)((u8*)net->opPool + net->opPoolOffset);
8001ea72:	fe 9b ff ee 	brhi	8001ea4e <net_add_op+0x1e>
8001ea76:	e0 6a 81 00 	mov	r10,33024
8001ea7a:	f0 0a 03 03 	ld.w	r3,r8[r10]
  // use the class ID to initialize a new object in scratch
  switch(opId) {
8001ea7e:	12 03       	add	r3,r9
8001ea80:	58 2c       	cp.w	r12,2
8001ea82:	c6 50       	breq	8001eb4c <net_add_op+0x11c>
8001ea84:	e0 8b 00 5c 	brhi	8001eb3c <net_add_op+0x10c>
8001ea88:	58 0c       	cp.w	r12,0
8001ea8a:	c6 90       	breq	8001eb5c <net_add_op+0x12c>
  case eOpSwitch:
    op_sw_init((void*) op);
    break;
  case eOpEnc:
    op_enc_init((void*)op);
8001ea8c:	58 1c       	cp.w	r12,1
8001ea8e:	ce 01       	brne	8001ea4e <net_add_op+0x1e>
8001ea90:	06 9c       	mov	r12,r3
    return -1;
  }

  ins = op->numInputs;
  outs = op->numOutputs;
  op->type = opId;
8001ea92:	e0 a0 0c c1 	rcall	80020414 <op_enc_init>
 
  if (ins > (NET_INS_MAX - net->numIns)) {
8001ea96:	e7 66 00 20 	st.b	r3[32],r6
#endif
  default:
    return -1;
  }

  ins = op->numInputs;
8001ea9a:	e0 6b 00 80 	mov	r11,128
  outs = op->numOutputs;
  op->type = opId;
 
  if (ins > (NET_INS_MAX - net->numIns)) {
8001ea9e:	07 86       	ld.ub	r6,r3[0x0]
8001eaa0:	6e 08       	ld.w	r8,r7[0x0]
  default:
    return -1;
  }

  ins = op->numInputs;
  outs = op->numOutputs;
8001eaa2:	e0 69 81 0a 	mov	r9,33034
  op->type = opId;
 
  if (ins > (NET_INS_MAX - net->numIns)) {
8001eaa6:	07 9c       	ld.ub	r12,r3[0x1]
8001eaa8:	f0 09 05 0a 	ld.uh	r10,r8[r9]
8001eaac:	f6 0a 01 0a 	sub	r10,r11,r10
8001eab0:	f7 d6 c0 10 	bfextu	r11,r6,0x0,0x10
8001eab4:	14 3b       	cp.w	r11,r10
    return -1;
  }

  if (outs > (NET_OUTS_MAX - net->numOuts)) {
8001eab6:	fe 99 ff cc 	brgt	8001ea4e <net_add_op+0x1e>
8001eaba:	e0 6b 00 80 	mov	r11,128
8001eabe:	e0 6a 81 0c 	mov	r10,33036
8001eac2:	f0 0a 05 0a 	ld.uh	r10,r8[r10]
8001eac6:	f6 0a 01 0a 	sub	r10,r11,r10
8001eaca:	f7 dc c0 10 	bfextu	r11,r12,0x0,0x10
8001eace:	14 3b       	cp.w	r11,r10
    return -1;
  }

  // add op pointer to list
  net->ops[net->numOps] = op;
8001ead0:	fe 99 ff bf 	brgt	8001ea4e <net_add_op+0x1e>
  net->opPoolOffset += op_registry[opId].size;
8001ead4:	e0 6a 81 08 	mov	r10,33032
  if (outs > (NET_OUTS_MAX - net->numOuts)) {
    return -1;
  }

  // add op pointer to list
  net->ops[net->numOps] = op;
8001ead8:	2f f4       	sub	r4,-1
8001eada:	f0 0a 05 0b 	ld.uh	r11,r8[r10]
  net->opPoolOffset += op_registry[opId].size;
8001eade:	f0 0b 09 23 	st.w	r8[r11<<0x2],r3
8001eae2:	e0 68 3f cc 	mov	r8,16332

  //---- add inputs and outputs to node list
    for(i=0; i<ins; i++) {
      net->ins[net->numIns].opIdx = net->numOps;
8001eae6:	ea 04 03 23 	ld.w	r3,r5[r4<<0x2]
    return -1;
  }

  // add op pointer to list
  net->ops[net->numOps] = op;
  net->opPoolOffset += op_registry[opId].size;
8001eaea:	70 0b       	ld.w	r11,r8[0x0]
8001eaec:	14 94       	mov	r4,r10
8001eaee:	30 08       	mov	r8,0
8001eaf0:	e0 6a 81 04 	mov	r10,33028
8001eaf4:	f6 0a 03 05 	ld.w	r5,r11[r10]
8001eaf8:	e6 05 00 05 	add	r5,r3,r5

  //---- add inputs and outputs to node list
    for(i=0; i<ins; i++) {
8001eafc:	f6 0a 09 05 	st.w	r11[r10],r5
8001eb00:	f0 06 19 00 	cp.h	r6,r8
      net->ins[net->numIns].opIdx = net->numOps;
8001eb04:	e0 88 00 30 	brls	8001eb64 <net_add_op+0x134>
8001eb08:	6e 0a       	ld.w	r10,r7[0x0]
8001eb0a:	f4 09 05 0b 	ld.uh	r11,r10[r9]
8001eb0e:	f4 04 05 05 	ld.uh	r5,r10[r4]
8001eb12:	f6 cb ef de 	sub	r11,r11,-4130
      net->ins[net->numIns].opInIdx = i;
8001eb16:	f4 0b 09 35 	st.w	r10[r11<<0x3],r5
8001eb1a:	6e 0b       	ld.w	r11,r7[0x0]
8001eb1c:	f6 09 05 0a 	ld.uh	r10,r11[r9]
8001eb20:	f6 0a 00 3a 	add	r10,r11,r10<<0x3
  // add op pointer to list
  net->ops[net->numOps] = op;
  net->opPoolOffset += op_registry[opId].size;

  //---- add inputs and outputs to node list
    for(i=0; i<ins; i++) {
8001eb24:	fe 3a 7e ec 	sub	r10,-33044
8001eb28:	b4 88       	st.b	r10[0x0],r8
      net->ins[net->numIns].opIdx = net->numOps;
      net->ins[net->numIns].opInIdx = i;
      net->numIns++;
8001eb2a:	2f f8       	sub	r8,-1
8001eb2c:	6e 0b       	ld.w	r11,r7[0x0]
8001eb2e:	5c 58       	castu.b	r8
8001eb30:	f6 09 04 0a 	ld.sh	r10,r11[r9]
8001eb34:	2f fa       	sub	r10,-1
    // not enough memory in op pool
    return -1;
  }
  op = (op_t*)((u8*)net->opPool + net->opPoolOffset);
  // use the class ID to initialize a new object in scratch
  switch(opId) {
8001eb36:	f6 09 0a 0a 	st.h	r11[r9],r10
8001eb3a:	ce 3b       	rjmp	8001eb00 <net_add_op+0xd0>
8001eb3c:	58 3c       	cp.w	r12,3
    break;
  case eOpMul:
    op_mul_init((void*)op);
    break;
  case eOpGate:
    op_gate_init((void*)op);
8001eb3e:	c0 b0       	breq	8001eb54 <net_add_op+0x124>
8001eb40:	58 4c       	cp.w	r12,4
8001eb42:	c8 61       	brne	8001ea4e <net_add_op+0x1e>
    break;
8001eb44:	06 9c       	mov	r12,r3
    break;
  case eOpEnc:
    op_enc_init((void*)op);
    break;
  case eOpAdd:
    op_add_init((void*)op);
8001eb46:	e0 a0 0d 7d 	rcall	80020640 <op_gate_init>
8001eb4a:	ca 6b       	rjmp	8001ea96 <net_add_op+0x66>
    break;
8001eb4c:	06 9c       	mov	r12,r3
  case eOpMul:
    op_mul_init((void*)op);
8001eb4e:	e0 a0 0b d1 	rcall	800202f0 <op_add_init>
8001eb52:	ca 2b       	rjmp	8001ea96 <net_add_op+0x66>
    break;
8001eb54:	06 9c       	mov	r12,r3
  }
  op = (op_t*)((u8*)net->opPool + net->opPoolOffset);
  // use the class ID to initialize a new object in scratch
  switch(opId) {
  case eOpSwitch:
    op_sw_init((void*) op);
8001eb56:	e0 a0 0e 0b 	rcall	8002076c <op_mul_init>
8001eb5a:	c9 eb       	rjmp	8001ea96 <net_add_op+0x66>
    break;
8001eb5c:	06 9c       	mov	r12,r3
  // add op pointer to list
  net->ops[net->numOps] = op;
  net->opPoolOffset += op_registry[opId].size;

  //---- add inputs and outputs to node list
    for(i=0; i<ins; i++) {
8001eb5e:	e0 a0 0e a1 	rcall	800208a0 <op_sw_init>
      net->ins[net->numIns].opIdx = net->numOps;
      net->ins[net->numIns].opInIdx = i;
      net->numIns++;
    }
  for(i=0; i<outs; i++) {
    net->outs[net->numOuts].opIdx = net->numOps;
8001eb62:	c9 ab       	rjmp	8001ea96 <net_add_op+0x66>
8001eb64:	30 09       	mov	r9,0
8001eb66:	e0 68 81 0c 	mov	r8,33036
    for(i=0; i<ins; i++) {
      net->ins[net->numIns].opIdx = net->numOps;
      net->ins[net->numIns].opInIdx = i;
      net->numIns++;
    }
  for(i=0; i<outs; i++) {
8001eb6a:	e0 65 81 08 	mov	r5,33032
8001eb6e:	3f f6       	mov	r6,-1
8001eb70:	f2 0c 19 00 	cp.h	r12,r9
    net->outs[net->numOuts].opIdx = net->numOps;
8001eb74:	e0 88 00 2b 	brls	8001ebca <net_add_op+0x19a>
8001eb78:	6e 0b       	ld.w	r11,r7[0x0]
8001eb7a:	f6 08 05 0a 	ld.uh	r10,r11[r8]
8001eb7e:	f4 0a 00 1a 	add	r10,r10,r10<<0x1
8001eb82:	f6 0a 00 2a 	add	r10,r11,r10<<0x2
8001eb86:	fe 3a 7a ec 	sub	r10,-34068
    net->outs[net->numOuts].opOutIdx = i;
8001eb8a:	f6 05 05 04 	ld.uh	r4,r11[r5]
8001eb8e:	95 04       	st.w	r10[0x0],r4
8001eb90:	6e 0b       	ld.w	r11,r7[0x0]
8001eb92:	f6 08 05 0a 	ld.uh	r10,r11[r8]
8001eb96:	f4 0a 00 1a 	add	r10,r10,r10<<0x1
8001eb9a:	f6 0a 00 2a 	add	r10,r11,r10<<0x2
    net->outs[net->numOuts].target = -1;
8001eb9e:	fe 3a 7a f0 	sub	r10,-34064
8001eba2:	b4 89       	st.b	r10[0x0],r9
8001eba4:	6e 0b       	ld.w	r11,r7[0x0]
8001eba6:	f6 08 05 0a 	ld.uh	r10,r11[r8]
8001ebaa:	f4 0a 00 1a 	add	r10,r10,r10<<0x1
8001ebae:	f6 0a 00 2a 	add	r10,r11,r10<<0x2
    for(i=0; i<ins; i++) {
      net->ins[net->numIns].opIdx = net->numOps;
      net->ins[net->numIns].opInIdx = i;
      net->numIns++;
    }
  for(i=0; i<outs; i++) {
8001ebb2:	fe 3a 7a f0 	sub	r10,-34064
8001ebb6:	b4 16       	st.h	r10[0x2],r6
    net->outs[net->numOuts].opIdx = net->numOps;
    net->outs[net->numOuts].opOutIdx = i;
    net->outs[net->numOuts].target = -1;
    net->numOuts++;
8001ebb8:	2f f9       	sub	r9,-1
8001ebba:	6e 0a       	ld.w	r10,r7[0x0]
8001ebbc:	5c 59       	castu.b	r9
8001ebbe:	f4 08 04 0b 	ld.sh	r11,r10[r8]
8001ebc2:	2f fb       	sub	r11,-1
  }
  net->numOps++;
8001ebc4:	f4 08 0a 0b 	st.h	r10[r8],r11
8001ebc8:	cd 4b       	rjmp	8001eb70 <net_add_op+0x140>
8001ebca:	6e 09       	ld.w	r9,r7[0x0]
8001ebcc:	e0 68 81 08 	mov	r8,33032
8001ebd0:	f2 08 04 0a 	ld.sh	r10,r9[r8]
  return net->numOps - 1;
8001ebd4:	2f fa       	sub	r10,-1
8001ebd6:	f2 08 0a 0a 	st.h	r9[r8],r10
8001ebda:	6e 09       	ld.w	r9,r7[0x0]
8001ebdc:	f2 08 04 0c 	ld.sh	r12,r9[r8]
8001ebe0:	20 1c       	sub	r12,1
8001ebe2:	5c 8c       	casts.h	r12
8001ebe4:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc

8001ebe8 <net_init>:
8001ebe8:	eb cd 40 80 	pushm	r7,lr
8001ebec:	e0 6c 95 10 	mov	r12,38160
8001ebf0:	fe b0 c9 ba 	rcall	80017f64 <alloc_mem>
8001ebf4:	e0 67 3f cc 	mov	r7,16332
8001ebf8:	8f 0c       	st.w	r7[0x0],r12
8001ebfa:	fe cc bb 92 	sub	r12,pc,-17518
8001ebfe:	fe b0 a2 27 	rcall	8001304c <print_dbg>
  //  u32 res;
  
  //  net = &netPrivate;
  net = (ctlnet_t*)alloc_mem(sizeof(ctlnet_t));
  print_dbg("\r\n network address: 0x");
  print_dbg_hex((u32)net);
8001ec02:	6e 0c       	ld.w	r12,r7[0x0]
8001ec04:	fe b0 a1 cc 	rcall	80012f9c <print_dbg_hex>
  /* print_dbg("\r\n ; reading... result: "); */
  /* res = *((u32*)net); */
  /* print_dbg_hex(res); */
 
  for(i=0; i<NET_OP_POOL_SIZE; i++) {
    net->opPoolMem[i] = (u8)0;
8001ec08:	30 08       	mov	r8,0
8001ec0a:	10 9a       	mov	r10,r8
8001ec0c:	6e 09       	ld.w	r9,r7[0x0]
8001ec0e:	10 09       	add	r9,r8
  /* *((u32*)net) = 0xDEADBEEF; */
  /* print_dbg("\r\n ; reading... result: "); */
  /* res = *((u32*)net); */
  /* print_dbg_hex(res); */
 
  for(i=0; i<NET_OP_POOL_SIZE; i++) {
8001ec10:	f3 6a 01 00 	st.b	r9[256],r10
8001ec14:	2f f8       	sub	r8,-1
8001ec16:	e0 69 3f cc 	mov	r9,16332
    net->opPoolMem[i] = (u8)0;
  }

  net->opPool = (void*)&(net->opPoolMem);
8001ec1a:	e0 48 80 00 	cp.w	r8,32768
8001ec1e:	cf 71       	brne	8001ec0c <net_init+0x24>
8001ec20:	72 08       	ld.w	r8,r9[0x0]
8001ec22:	f0 cb ff 00 	sub	r11,r8,-256
8001ec26:	e0 6a 81 00 	mov	r10,33024
  net->opPoolOffset = 0;
8001ec2a:	f0 0a 09 0b 	st.w	r8[r10],r11
8001ec2e:	72 0b       	ld.w	r11,r9[0x0]
8001ec30:	30 0a       	mov	r10,0
8001ec32:	e0 68 81 04 	mov	r8,33028

  net->numOps = 0;
8001ec36:	f6 08 09 0a 	st.w	r11[r8],r10
8001ec3a:	72 0b       	ld.w	r11,r9[0x0]
8001ec3c:	e0 68 81 08 	mov	r8,33032
  net->numIns = 0;
8001ec40:	f6 08 0a 0a 	st.h	r11[r8],r10
8001ec44:	72 0b       	ld.w	r11,r9[0x0]
8001ec46:	e0 68 81 0a 	mov	r8,33034
  net->numOuts = 0;
8001ec4a:	f6 08 0a 0a 	st.h	r11[r8],r10
8001ec4e:	72 0b       	ld.w	r11,r9[0x0]
8001ec50:	e0 68 81 0c 	mov	r8,33036
  net->numParams = 0;
8001ec54:	f6 08 0a 0a 	st.h	r11[r8],r10
8001ec58:	72 0b       	ld.w	r11,r9[0x0]
}

// initialize an input node
void net_init_inode(u16 idx) {
  net->ins[idx].opIdx = -1;
  net->ins[idx].preset = 0;
8001ec5a:	14 98       	mov	r8,r10
  net->opPoolOffset = 0;

  net->numOps = 0;
  net->numIns = 0;
  net->numOuts = 0;
  net->numParams = 0;
8001ec5c:	e0 69 81 0e 	mov	r9,33038
  ;;
}

// initialize an input node
void net_init_inode(u16 idx) {
  net->ins[idx].opIdx = -1;
8001ec60:	14 9c       	mov	r12,r10
8001ec62:	f6 09 0a 0a 	st.h	r11[r9],r10
8001ec66:	3f fb       	mov	r11,-1
8001ec68:	6e 09       	ld.w	r9,r7[0x0]
8001ec6a:	f0 ca ef de 	sub	r10,r8,-4130
  net->ins[idx].preset = 0;
8001ec6e:	f2 0a 09 3b 	st.w	r9[r10<<0x3],r11
8001ec72:	6e 09       	ld.w	r9,r7[0x0]
8001ec74:	f2 08 00 39 	add	r9,r9,r8<<0x3
  net->numOps = 0;
  net->numIns = 0;
  net->numOuts = 0;
  net->numParams = 0;
  // unassign all I/O nodes
  for(i=0; i<NET_INS_MAX; i++) {
8001ec78:	fe 39 7e ec 	sub	r9,-33044
8001ec7c:	b2 9c       	st.b	r9[0x1],r12
8001ec7e:	2f f8       	sub	r8,-1
8001ec80:	e0 48 00 80 	cp.w	r8,128
  net->ins[idx].preset = 0;
}

// initialize an output node
void net_init_onode(u16 idx) {
  net->outs[idx].opIdx = -1;
8001ec84:	cf 21       	brne	8001ec68 <net_init+0x80>
8001ec86:	30 08       	mov	r8,0
8001ec88:	10 9c       	mov	r12,r8
8001ec8a:	6e 0a       	ld.w	r10,r7[0x0]
8001ec8c:	f0 08 00 19 	add	r9,r8,r8<<0x1
8001ec90:	a3 69       	lsl	r9,0x2
8001ec92:	12 0a       	add	r10,r9
  net->outs[idx].target = -1;
8001ec94:	fe 3a 7a ec 	sub	r10,-34068
8001ec98:	95 0b       	st.w	r10[0x0],r11
8001ec9a:	6e 0a       	ld.w	r10,r7[0x0]
8001ec9c:	12 0a       	add	r10,r9
  net->outs[idx].preset = 0;
8001ec9e:	fe 3a 7a f0 	sub	r10,-34064
8001eca2:	b4 1b       	st.h	r10[0x2],r11
8001eca4:	6e 0a       	ld.w	r10,r7[0x0]
8001eca6:	f4 09 00 09 	add	r9,r10,r9
  net->numParams = 0;
  // unassign all I/O nodes
  for(i=0; i<NET_INS_MAX; i++) {
    net_init_inode(i);
  }
  for(i=0; i<NET_OUTS_MAX; i++) {
8001ecaa:	fe 39 7a e8 	sub	r9,-34072
8001ecae:	b2 8c       	st.b	r9[0x0],r12
8001ecb0:	2f f8       	sub	r8,-1
    net_init_onode(i);
  }
  print_dbg("\r\n initialized ctlnet, byte count: ");
8001ecb2:	e0 48 00 80 	cp.w	r8,128
8001ecb6:	ce a1       	brne	8001ec8a <net_init+0xa2>
  print_dbg_hex(sizeof(ctlnet_t));
8001ecb8:	fe cc bc 38 	sub	r12,pc,-17352
8001ecbc:	fe b0 a1 c8 	rcall	8001304c <print_dbg>
// create all system operators
static void add_sys_ops(void);
static void add_sys_ops(void) {
  // print_dbg("\r\n creating system operators.");
  // 4 encoders
  net_add_op(eOpEnc);
8001ecc0:	e0 6c 95 10 	mov	r12,38160
8001ecc4:	fe b0 a1 6c 	rcall	80012f9c <print_dbg_hex>
  net_add_op(eOpEnc);
8001ecc8:	30 1c       	mov	r12,1
8001ecca:	cb 3e       	rcall	8001ea30 <net_add_op>
  net_add_op(eOpEnc);
8001eccc:	30 1c       	mov	r12,1
8001ecce:	cb 1e       	rcall	8001ea30 <net_add_op>
8001ecd0:	30 1c       	mov	r12,1
  net_add_op(eOpEnc);
8001ecd2:	ca fe       	rcall	8001ea30 <net_add_op>
8001ecd4:	30 1c       	mov	r12,1
8001ecd6:	ca de       	rcall	8001ea30 <net_add_op>
  // 4 switches
  net_add_op(eOpSwitch);
8001ecd8:	30 0c       	mov	r12,0
8001ecda:	ca be       	rcall	8001ea30 <net_add_op>
8001ecdc:	30 0c       	mov	r12,0
  net_add_op(eOpSwitch);
8001ecde:	ca 9e       	rcall	8001ea30 <net_add_op>
8001ece0:	30 0c       	mov	r12,0
8001ece2:	ca 7e       	rcall	8001ea30 <net_add_op>
  net_add_op(eOpSwitch);
8001ece4:	30 0c       	mov	r12,0
8001ece6:	ca 5e       	rcall	8001ea30 <net_add_op>
8001ece8:	e3 cd 80 80 	ldm	sp++,r7,pc

8001ecec <net_inc_in_value>:
  net_add_op(eOpSwitch);
8001ecec:	eb cd 40 f8 	pushm	r3-r7,lr
    net_init_onode(i);
  }
  print_dbg("\r\n initialized ctlnet, byte count: ");
  print_dbg_hex(sizeof(ctlnet_t));
  add_sys_ops();
}
8001ecf0:	20 1d       	sub	sp,4
8001ecf2:	e0 65 3f cc 	mov	r5,16332
8001ecf6:	e0 66 81 0a 	mov	r6,33034
8001ecfa:	6a 08       	ld.w	r8,r5[0x0]
8001ecfc:	18 97       	mov	r7,r12
8001ecfe:	f0 06 05 09 	ld.uh	r9,r8[r6]
8001ed02:	18 39       	cp.w	r9,r12
8001ed04:	e0 8a 00 27 	brle	8001ed52 <net_inc_in_value+0x66>
8001ed08:	f8 03 15 03 	lsl	r3,r12,0x3
8001ed0c:	f0 03 00 09 	add	r9,r8,r3
    inIdx -= net->numIns;
    set_param_value(inIdx, OP_ADD(get_param_value(inIdx), inc));
    return get_param_value(inIdx);
  } else {
    op = net->ops[net->ins[inIdx].opIdx];
    (*(op->inc_func))(op, net->ins[inIdx].opInIdx, inc);
8001ed10:	fe 39 7e ec 	sub	r9,-33044
  if (inIdx >= net->numIns) {
    inIdx -= net->numIns;
    set_param_value(inIdx, OP_ADD(get_param_value(inIdx), inc));
    return get_param_value(inIdx);
  } else {
    op = net->ops[net->ins[inIdx].opIdx];
8001ed14:	f8 c4 ef de 	sub	r4,r12,-4130
    (*(op->inc_func))(op, net->ins[inIdx].opInIdx, inc);
8001ed18:	16 9a       	mov	r10,r11
  if (inIdx >= net->numIns) {
    inIdx -= net->numIns;
    set_param_value(inIdx, OP_ADD(get_param_value(inIdx), inc));
    return get_param_value(inIdx);
  } else {
    op = net->ops[net->ins[inIdx].opIdx];
8001ed1a:	13 8b       	ld.ub	r11,r9[0x0]
8001ed1c:	f0 04 03 39 	ld.w	r9,r8[r4<<0x3]
8001ed20:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
    (*(op->inc_func))(op, net->ins[inIdx].opInIdx, inc);
8001ed24:	10 9c       	mov	r12,r8
8001ed26:	70 18       	ld.w	r8,r8[0x4]
io_t net_get_in_value(s32 inIdx) {
  //  print_dbg("\r\n retreiving input val at idx: ");
  //  print_dbg_hex(inIdx);
  //  print_dbg(" , address: ");
  //  print_dbg_hex( &(net->ins[inIdx]) );
  if(inIdx < 0) {
8001ed28:	5d 18       	icall	r8
8001ed2a:	58 07       	cp.w	r7,0
    return 0;
  }
  if (inIdx >= net->numIns) {
8001ed2c:	c2 25       	brlt	8001ed70 <net_inc_in_value+0x84>
8001ed2e:	6a 08       	ld.w	r8,r5[0x0]
8001ed30:	f0 06 05 0c 	ld.uh	r12,r8[r6]
8001ed34:	18 37       	cp.w	r7,r12
    inIdx -= net->numIns;
    return get_param_value(inIdx);
  } else {
    //return (net->ins[inIdx].val);
    return op_get_in_val(net->ops[net->ins[inIdx].opIdx], net->ins[inIdx].opInIdx);
8001ed36:	c2 04       	brge	8001ed76 <net_inc_in_value+0x8a>
8001ed38:	f0 04 03 39 	ld.w	r9,r8[r4<<0x3]
8001ed3c:	f0 03 00 03 	add	r3,r8,r3
8001ed40:	f0 09 03 2c 	ld.w	r12,r8[r9<<0x2]
8001ed44:	fe 33 7e ec 	sub	r3,-33044
8001ed48:	07 8b       	ld.ub	r11,r3[0x0]
8001ed4a:	c7 1c       	rcall	8001ee2c <op_get_in_val>
  } else {
    op = net->ops[net->ins[inIdx].opIdx];
    (*(op->inc_func))(op, net->ins[inIdx].opInIdx, inc);
    return net_get_in_value(inIdx);
  }
}
8001ed4c:	2f fd       	sub	sp,-4
8001ed4e:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc

io_t net_inc_in_value(s32 inIdx, io_t inc) {
  op_t* op;
  if (inIdx >= net->numIns) {
    inIdx -= net->numIns;
    set_param_value(inIdx, OP_ADD(get_param_value(inIdx), inc));
8001ed52:	12 17       	sub	r7,r9
8001ed54:	50 0b       	stdsp	sp[0x0],r11
8001ed56:	0e 9c       	mov	r12,r7
8001ed58:	c8 2c       	rcall	8001ee5c <get_param_value>
8001ed5a:	40 0b       	lddsp	r11,sp[0x0]
8001ed5c:	fe b0 f6 ea 	rcall	8001db30 <fix16_add>
8001ed60:	18 9b       	mov	r11,r12
8001ed62:	0e 9c       	mov	r12,r7
8001ed64:	ca 4c       	rcall	8001eeac <set_param_value>
8001ed66:	0e 9c       	mov	r12,r7
8001ed68:	c7 ac       	rcall	8001ee5c <get_param_value>
    return get_param_value(inIdx);
8001ed6a:	2f fd       	sub	sp,-4
8001ed6c:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
  } else {
    op = net->ops[net->ins[inIdx].opIdx];
    (*(op->inc_func))(op, net->ins[inIdx].opInIdx, inc);
    return net_get_in_value(inIdx);
  }
}
8001ed70:	2f fd       	sub	sp,-4
8001ed72:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
io_t net_get_in_value(s32 inIdx) {
  //  print_dbg("\r\n retreiving input val at idx: ");
  //  print_dbg_hex(inIdx);
  //  print_dbg(" , address: ");
  //  print_dbg_hex( &(net->ins[inIdx]) );
  if(inIdx < 0) {
8001ed76:	ee 0c 01 0c 	sub	r12,r7,r12
8001ed7a:	c7 1c       	rcall	8001ee5c <get_param_value>
    return 0;
  }
  if (inIdx >= net->numIns) {
    inIdx -= net->numIns;
    return get_param_value(inIdx);
8001ed7c:	2f fd       	sub	sp,-4
8001ed7e:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8001ed82:	d7 03       	nop

8001ed84 <op_in_name>:
  }
  op->type = opId;
  return 0;
}

const char* op_in_name(op_t* op, const u8 idx) {
8001ed84:	18 98       	mov	r8,r12
8001ed86:	a3 7b       	lsl	r11,0x3
  static char str[16];
  u8 i;
  // str = (op->inString + (inStringChars * idx));
  for(i=0; i<inStringChars; i++) {
    str[i] = *(op->inString + (inStringChars * idx) + i);
8001ed88:	70 6a       	ld.w	r10,r8[0x18]
8001ed8a:	f4 0b 07 0a 	ld.ub	r10,r10[r11]
8001ed8e:	e0 69 37 48 	mov	r9,14152
8001ed92:	b2 8a       	st.b	r9[0x0],r10
8001ed94:	70 6a       	ld.w	r10,r8[0x18]
8001ed96:	16 0a       	add	r10,r11
8001ed98:	15 9a       	ld.ub	r10,r10[0x1]
8001ed9a:	b2 9a       	st.b	r9[0x1],r10
8001ed9c:	70 6a       	ld.w	r10,r8[0x18]
8001ed9e:	16 0a       	add	r10,r11
8001eda0:	15 aa       	ld.ub	r10,r10[0x2]
8001eda2:	b2 aa       	st.b	r9[0x2],r10
8001eda4:	70 6a       	ld.w	r10,r8[0x18]
8001eda6:	16 0a       	add	r10,r11
8001eda8:	15 ba       	ld.ub	r10,r10[0x3]
8001edaa:	b2 ba       	st.b	r9[0x3],r10
8001edac:	70 6a       	ld.w	r10,r8[0x18]
8001edae:	16 0a       	add	r10,r11
8001edb0:	15 ca       	ld.ub	r10,r10[0x4]
8001edb2:	b2 ca       	st.b	r9[0x4],r10
8001edb4:	70 6a       	ld.w	r10,r8[0x18]
8001edb6:	16 0a       	add	r10,r11
8001edb8:	15 da       	ld.ub	r10,r10[0x5]
8001edba:	b2 da       	st.b	r9[0x5],r10
8001edbc:	70 6a       	ld.w	r10,r8[0x18]
8001edbe:	16 0a       	add	r10,r11
8001edc0:	15 ea       	ld.ub	r10,r10[0x6]
8001edc2:	b2 ea       	st.b	r9[0x6],r10
  }
  str[inStringChars] = '\0';
8001edc4:	70 68       	ld.w	r8,r8[0x18]
const char* op_in_name(op_t* op, const u8 idx) {
  static char str[16];
  u8 i;
  // str = (op->inString + (inStringChars * idx));
  for(i=0; i<inStringChars; i++) {
    str[i] = *(op->inString + (inStringChars * idx) + i);
8001edc6:	30 0a       	mov	r10,0
8001edc8:	f0 0b 00 0b 	add	r11,r8,r11
8001edcc:	12 9c       	mov	r12,r9
  }
  str[inStringChars] = '\0';
8001edce:	17 f8       	ld.ub	r8,r11[0x7]
8001edd0:	f3 6a 00 08 	st.b	r9[8],r10
  return str;
}
8001edd4:	b2 f8       	st.b	r9[0x7],r8
8001edd6:	5e fc       	retal	r12

8001edd8 <op_out_name>:
8001edd8:	18 98       	mov	r8,r12
8001edda:	a3 7b       	lsl	r11,0x3

const char* op_out_name(op_t* op, const u8 idx) {
  static char str[16];
  u8 i;
  for(i=0; i<outStringChars; i++) {
    str[i] = *(op->outString + (outStringChars * idx) + i);
8001eddc:	70 7a       	ld.w	r10,r8[0x1c]
8001edde:	f4 0b 07 0a 	ld.ub	r10,r10[r11]
8001ede2:	e0 69 37 58 	mov	r9,14168
8001ede6:	b2 8a       	st.b	r9[0x0],r10
8001ede8:	70 7a       	ld.w	r10,r8[0x1c]
8001edea:	16 0a       	add	r10,r11
8001edec:	15 9a       	ld.ub	r10,r10[0x1]
8001edee:	b2 9a       	st.b	r9[0x1],r10
8001edf0:	70 7a       	ld.w	r10,r8[0x1c]
8001edf2:	16 0a       	add	r10,r11
8001edf4:	15 aa       	ld.ub	r10,r10[0x2]
8001edf6:	b2 aa       	st.b	r9[0x2],r10
8001edf8:	70 7a       	ld.w	r10,r8[0x1c]
8001edfa:	16 0a       	add	r10,r11
8001edfc:	15 ba       	ld.ub	r10,r10[0x3]
8001edfe:	b2 ba       	st.b	r9[0x3],r10
8001ee00:	70 7a       	ld.w	r10,r8[0x1c]
8001ee02:	16 0a       	add	r10,r11
8001ee04:	15 ca       	ld.ub	r10,r10[0x4]
8001ee06:	b2 ca       	st.b	r9[0x4],r10
8001ee08:	70 7a       	ld.w	r10,r8[0x1c]
8001ee0a:	16 0a       	add	r10,r11
8001ee0c:	15 da       	ld.ub	r10,r10[0x5]
8001ee0e:	b2 da       	st.b	r9[0x5],r10
8001ee10:	70 7a       	ld.w	r10,r8[0x1c]
8001ee12:	16 0a       	add	r10,r11
8001ee14:	15 ea       	ld.ub	r10,r10[0x6]
8001ee16:	b2 ea       	st.b	r9[0x6],r10
  }
  str[outStringChars] = '\0';
8001ee18:	70 78       	ld.w	r8,r8[0x1c]

const char* op_out_name(op_t* op, const u8 idx) {
  static char str[16];
  u8 i;
  for(i=0; i<outStringChars; i++) {
    str[i] = *(op->outString + (outStringChars * idx) + i);
8001ee1a:	30 0a       	mov	r10,0
8001ee1c:	f0 0b 00 0b 	add	r11,r8,r11
8001ee20:	12 9c       	mov	r12,r9
  }
  str[outStringChars] = '\0';
8001ee22:	17 f8       	ld.ub	r8,r11[0x7]
8001ee24:	f3 6a 00 08 	st.b	r9[8],r10
  return str;
}
8001ee28:	b2 f8       	st.b	r9[0x7],r8
8001ee2a:	5e fc       	retal	r12

8001ee2c <op_get_in_val>:
8001ee2c:	78 38       	ld.w	r8,r12[0xc]
8001ee2e:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]

// get input value
io_t op_get_in_val(op_t* op, s16 idx) {
  return *(op->in_val[idx]);
}
8001ee32:	70 0c       	ld.w	r12,r8[0x0]
8001ee34:	5e fc       	retal	r12
8001ee36:	d7 03       	nop

8001ee38 <op_set_in_val>:

// set input value
void op_set_in_val(op_t* op, s16 idx, io_t val) {
8001ee38:	eb cd 40 80 	pushm	r7,lr
8001ee3c:	16 97       	mov	r7,r11
  io_t * const pIn = (op->in_val[idx]);
8001ee3e:	f6 08 15 02 	lsl	r8,r11,0x2
8001ee42:	78 3b       	ld.w	r11,r12[0xc]
8001ee44:	f6 08 03 0b 	ld.w	r11,r11[r8]
  *pIn = val;
8001ee48:	97 0a       	st.w	r11[0x0],r10
  (*(op->in_func[idx]))(op, pIn);  
8001ee4a:	78 29       	ld.w	r9,r12[0x8]
8001ee4c:	f2 08 03 08 	ld.w	r8,r9[r8]
8001ee50:	5d 18       	icall	r8
  //  param_feedback(idx, val);
  play_param(idx);
8001ee52:	0e 9c       	mov	r12,r7
8001ee54:	5c 7c       	castu.h	r12
8001ee56:	c6 dc       	rcall	8001ef30 <play_param>
8001ee58:	e3 cd 80 80 	ldm	sp++,r7,pc

8001ee5c <get_param_value>:
#include "bfin.h"
#endif

// get value for param at given idx
io_t get_param_value(u32 idx) {
  return (io_t)(net->params[idx].data.value.asInt); 
8001ee5c:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
8001ee60:	e0 68 3f cc 	mov	r8,16332
8001ee64:	70 08       	ld.w	r8,r8[0x0]
8001ee66:	f0 0c 00 38 	add	r8,r8,r12<<0x3
8001ee6a:	fe 38 74 d0 	sub	r8,-35632
8001ee6e:	70 0c       	ld.w	r12,r8[0x0]
8001ee70:	70 18       	ld.w	r8,r8[0x4]
}
8001ee72:	b9 88       	lsr	r8,0x18
8001ee74:	f1 ec 10 8c 	or	r12,r8,r12<<0x8
8001ee78:	5e fc       	retal	r12
8001ee7a:	d7 03       	nop

8001ee7c <get_param_preset>:

// get preset-enabled flag for param at given idx
u8 get_param_preset(u32 idx) {
8001ee7c:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
8001ee80:	e0 68 3f cc 	mov	r8,16332
8001ee84:	70 08       	ld.w	r8,r8[0x0]
8001ee86:	f0 0c 00 3c 	add	r12,r8,r12<<0x3
8001ee8a:	fe 3c 74 cc 	sub	r12,-35636
  return net->params[idx].preset;
}
8001ee8e:	19 bc       	ld.ub	r12,r12[0x3]
8001ee90:	5e fc       	retal	r12
8001ee92:	d7 03       	nop

8001ee94 <get_param_name>:


// get name (label) for param at given idx
const char* get_param_name(u32 idx) {
8001ee94:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
8001ee98:	e0 68 3f cc 	mov	r8,16332
8001ee9c:	a3 7c       	lsl	r12,0x3
8001ee9e:	70 08       	ld.w	r8,r8[0x0]
8001eea0:	fe 3c 74 f0 	sub	r12,-35600
  return net->params[idx].desc.label;
}
8001eea4:	f0 0c 00 0c 	add	r12,r8,r12
8001eea8:	5e fc       	retal	r12
8001eeaa:	d7 03       	nop

8001eeac <set_param_value>:

// set value for param at given idx
//-- see also net_set_in_value()
void set_param_value(u32 idx, io_t val) {
8001eeac:	eb cd 40 80 	pushm	r7,lr
  net->params[idx].data.value.asInt = val;
8001eeb0:	e0 69 3f cc 	mov	r9,16332
8001eeb4:	f8 0c 00 28 	add	r8,r12,r12<<0x2
8001eeb8:	72 0a       	ld.w	r10,r9[0x0]
8001eeba:	a3 78       	lsl	r8,0x3
8001eebc:	10 0a       	add	r10,r8
8001eebe:	fe 3a 74 d0 	sub	r10,-35632
8001eec2:	74 0e       	ld.w	lr,r10[0x0]
8001eec4:	e6 1e ff 00 	andh	lr,0xff00,COH
8001eec8:	fd eb 12 8e 	or	lr,lr,r11>>0x8
8001eecc:	95 0e       	st.w	r10[0x0],lr
8001eece:	74 1e       	ld.w	lr,r10[0x4]
8001eed0:	fd de c0 18 	bfextu	lr,lr,0x0,0x18
8001eed4:	fd eb 11 87 	or	r7,lr,r11<<0x18
  net->params[idx].data.changed = 1;
8001eed8:	95 17       	st.w	r10[0x4],r7
8001eeda:	72 09       	ld.w	r9,r9[0x0]
8001eedc:	f2 08 00 08 	add	r8,r9,r8
8001eee0:	30 19       	mov	r9,1
8001eee2:	fe 38 74 cc 	sub	r8,-35636
8001eee6:	5c 5c       	castu.b	r12
#ifdef ARCH_AVR32
  bfin_set_param(idx, val);
8001eee8:	b0 99       	st.b	r8[0x1],r9
8001eeea:	fe b0 bd 69 	rcall	800169bc <bfin_set_param>
#endif
}
8001eeee:	e3 cd 80 80 	ldm	sp++,r7,pc
8001eef2:	d7 03       	nop

8001eef4 <play_get_entry>:
}

// return text buffer for given entry
const char * play_get_entry(u16 idx) {
  static u16 getIdx;
  getIdx = scrollIdx + 1 + idx;
8001eef4:	e0 68 37 68 	mov	r8,14184
8001eef8:	e0 69 37 6a 	mov	r9,14186
8001eefc:	90 08       	ld.sh	r8,r8[0x0]
8001eefe:	2f f8       	sub	r8,-1
8001ef00:	18 08       	add	r8,r12
  if(getIdx > PLAY_SCROLL_NUM) {
8001ef02:	5c 88       	casts.h	r8
8001ef04:	b2 08       	st.h	r9[0x0],r8
8001ef06:	30 ea       	mov	r10,14
8001ef08:	f4 08 19 00 	cp.h	r8,r10
    getIdx = 0;
8001ef0c:	e0 88 00 09 	brls	8001ef1e <play_get_entry+0x2a>
8001ef10:	30 08       	mov	r8,0
8001ef12:	e0 6c 37 6c 	mov	r12,14188
  }  
  return (const char*)( scrollBuf[getIdx] );
}
8001ef16:	b2 08       	st.h	r9[0x0],r8

// return text buffer for given entry
const char * play_get_entry(u16 idx) {
  static u16 getIdx;
  getIdx = scrollIdx + 1 + idx;
  if(getIdx > PLAY_SCROLL_NUM) {
8001ef18:	30 08       	mov	r8,0
    getIdx = 0;
8001ef1a:	10 0c       	add	r12,r8

// return text buffer for given entry
const char * play_get_entry(u16 idx) {
  static u16 getIdx;
  getIdx = scrollIdx + 1 + idx;
  if(getIdx > PLAY_SCROLL_NUM) {
8001ef1c:	5e fc       	retal	r12
8001ef1e:	5c 78       	castu.h	r8
8001ef20:	e0 6c 37 6c 	mov	r12,14188
    getIdx = 0;
  }  
  return (const char*)( scrollBuf[getIdx] );
}
8001ef24:	f0 08 00 28 	add	r8,r8,r8<<0x2
8001ef28:	f0 08 00 28 	add	r8,r8,r8<<0x2
8001ef2c:	10 0c       	add	r12,r8
8001ef2e:	5e fc       	retal	r12

8001ef30 <play_param>:
8001ef30:	eb cd 40 e0 	pushm	r5-r7,lr
  }
}

// add parameter data to the end of the scroll  
void play_param(u16 paramIdx) {
  itoa_whole( paramIdx, scrollBuf[scrollIdx] + kIdxOff, 3 ); 
8001ef34:	e0 67 37 68 	mov	r7,14184
8001ef38:	e0 66 37 6c 	mov	r6,14188
8001ef3c:	30 3a       	mov	r10,3
8001ef3e:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8001ef42:	8e 8b       	ld.uh	r11,r7[0x0]
8001ef44:	0a 9c       	mov	r12,r5
8001ef46:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8001ef4a:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8001ef4e:	ec 0b 00 0b 	add	r11,r6,r11
  memcpy( scrollBuf[scrollIdx] + kNameOff, get_param_name(paramIdx), PARAM_LABEL_LEN );
8001ef52:	fe b0 f3 39 	rcall	8001d5c4 <itoa_whole>
8001ef56:	0a 9c       	mov	r12,r5
8001ef58:	c9 ef       	rcall	8001ee94 <get_param_name>
8001ef5a:	8e 88       	ld.uh	r8,r7[0x0]
8001ef5c:	f0 08 00 28 	add	r8,r8,r8<<0x2
8001ef60:	f0 08 00 28 	add	r8,r8,r8<<0x2
8001ef64:	18 9b       	mov	r11,r12
8001ef66:	31 0a       	mov	r10,16
8001ef68:	f0 cc ff fc 	sub	r12,r8,-4
8001ef6c:	ec 0c 00 0c 	add	r12,r6,r12
8001ef70:	e0 a0 11 30 	rcall	800211d0 <memcpy>
  print_fix16( scrollBuf[scrollIdx] + kNameOff, get_param_value(paramIdx) );
8001ef74:	0a 9c       	mov	r12,r5
8001ef76:	c7 3f       	rcall	8001ee5c <get_param_value>
8001ef78:	8e 88       	ld.uh	r8,r7[0x0]
8001ef7a:	f0 08 00 28 	add	r8,r8,r8<<0x2
8001ef7e:	f0 08 00 28 	add	r8,r8,r8<<0x2
8001ef82:	18 9b       	mov	r11,r12
8001ef84:	f0 cc ff fc 	sub	r12,r8,-4
8001ef88:	ec 0c 00 0c 	add	r12,r6,r12
8001ef8c:	fe b0 f3 de 	rcall	8001d748 <print_fix16>
  scrollIdx++;
8001ef90:	8e 08       	ld.sh	r8,r7[0x0]
8001ef92:	2f f8       	sub	r8,-1
8001ef94:	ae 08       	st.h	r7[0x0],r8
  if(scrollIdx > PLAY_SCROLL_NUM) {
8001ef96:	30 e9       	mov	r9,14
    scrollIdx = 0;
8001ef98:	f2 08 19 00 	cp.h	r8,r9
8001ef9c:	f9 b8 0b 00 	movhi	r8,0
8001efa0:	ef f8 bc 00 	st.hhi	r7[0x0],r8
8001efa4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8001efa8 <preset_name>:
    }
  }
}

// preset name
char* preset_name(u32 id) {
8001efa8:	e0 68 09 10 	mov	r8,2320
8001efac:	f8 08 02 48 	mul	r8,r12,r8
8001efb0:	e0 6c 3f d0 	mov	r12,16336
8001efb4:	f0 c8 f7 00 	sub	r8,r8,-2304
  //  print_dbg("\r\n request for preset name at address: ");
  //  print_dbg_hex((u32)&(presets[id]));
  return presets[id].name;
}
8001efb8:	10 0c       	add	r12,r8
8001efba:	5e fc       	retal	r12

8001efbc <preset_recall>:
8001efbc:	eb cd 40 f8 	pushm	r3-r7,lr
    }
  }
}

// recall everything enabled in given preset
void preset_recall(u32 preIdx) {
8001efc0:	e0 66 02 44 	mov	r6,580
8001efc4:	e0 64 3f d0 	mov	r4,16336
8001efc8:	f8 06 02 46 	mul	r6,r12,r6
8001efcc:	30 07       	mov	r7,0
8001efce:	2f f6       	sub	r6,-1
8001efd0:	18 93       	mov	r3,r12
8001efd2:	e8 06 00 26 	add	r6,r4,r6<<0x2
8001efd6:	0e 95       	mov	r5,r7
8001efd8:	2f e6       	sub	r6,-2
  u16 i;
  // ins
  for(i=0; i<NET_INS_MAX; i++) {
    
    if(presets[preIdx].ins[i].enabled) {
      net_set_in_value( i, presets[preIdx].ins[i].value );
8001efda:	c0 68       	rjmp	8001efe6 <preset_recall+0x2a>
8001efdc:	2f f7       	sub	r7,-1

// recall everything enabled in given preset
void preset_recall(u32 preIdx) {
  u16 i;
  // ins
  for(i=0; i<NET_INS_MAX; i++) {
8001efde:	2f 86       	sub	r6,-8
8001efe0:	e0 47 00 80 	cp.w	r7,128
    
    if(presets[preIdx].ins[i].enabled) {
8001efe4:	c1 20       	breq	8001f008 <preset_recall+0x4c>
8001efe6:	0d 88       	ld.ub	r8,r6[0x0]
8001efe8:	ea 08 18 00 	cp.b	r8,r5
      net_set_in_value( i, presets[preIdx].ins[i].value );
8001efec:	cf 80       	breq	8001efdc <preset_recall+0x20>
8001efee:	ec fc ff fa 	ld.w	r12,r6[-6]
8001eff2:	e0 a0 0d 6f 	rcall	80020ad0 <__avr32_f32_to_s32>
8001eff6:	2f 86       	sub	r6,-8
8001eff8:	18 9b       	mov	r11,r12
8001effa:	0e 9c       	mov	r12,r7
8001effc:	fe b0 fc 5e 	rcall	8001e8b8 <net_set_in_value>

// recall everything enabled in given preset
void preset_recall(u32 preIdx) {
  u16 i;
  // ins
  for(i=0; i<NET_INS_MAX; i++) {
8001f000:	2f f7       	sub	r7,-1
8001f002:	e0 47 00 80 	cp.w	r7,128
8001f006:	cf 01       	brne	8001efe6 <preset_recall+0x2a>
8001f008:	e0 66 09 10 	mov	r6,2320
8001f00c:	30 07       	mov	r7,0
8001f00e:	e6 06 02 46 	mul	r6,r3,r6
8001f012:	0e 95       	mov	r5,r7
8001f014:	ec c6 fb fc 	sub	r6,r6,-1028
8001f018:	e8 06 00 06 	add	r6,r4,r6
    }
  }
  // outs
  for(i=0; i<NET_OUTS_MAX; i++) {
    if(presets[preIdx].outs[i].enabled) {
      net_connect( i, presets[preIdx].outs[i].target );
8001f01c:	c0 68       	rjmp	8001f028 <preset_recall+0x6c>
8001f01e:	2f f7       	sub	r7,-1
    if(presets[preIdx].ins[i].enabled) {
      net_set_in_value( i, presets[preIdx].ins[i].value );
    }
  }
  // outs
  for(i=0; i<NET_OUTS_MAX; i++) {
8001f020:	2f a6       	sub	r6,-6
8001f022:	e0 47 00 80 	cp.w	r7,128
    if(presets[preIdx].outs[i].enabled) {
8001f026:	c0 f0       	breq	8001f044 <preset_recall+0x88>
8001f028:	0d 88       	ld.ub	r8,r6[0x0]
8001f02a:	ea 08 18 00 	cp.b	r8,r5
      net_connect( i, presets[preIdx].outs[i].target );
8001f02e:	cf 80       	breq	8001f01e <preset_recall+0x62>
8001f030:	ed 0b ff fc 	ld.sh	r11,r6[-4]
8001f034:	0e 9c       	mov	r12,r7
8001f036:	2f a6       	sub	r6,-6
8001f038:	fe b0 fa a2 	rcall	8001e57c <net_connect>
    if(presets[preIdx].ins[i].enabled) {
      net_set_in_value( i, presets[preIdx].ins[i].value );
    }
  }
  // outs
  for(i=0; i<NET_OUTS_MAX; i++) {
8001f03c:	2f f7       	sub	r7,-1
8001f03e:	e0 47 00 80 	cp.w	r7,128
8001f042:	cf 31       	brne	8001f028 <preset_recall+0x6c>
8001f044:	e0 66 09 10 	mov	r6,2320
8001f048:	30 07       	mov	r7,0
8001f04a:	e6 06 02 46 	mul	r6,r3,r6
8001f04e:	0e 95       	mov	r5,r7
8001f050:	e8 06 00 06 	add	r6,r4,r6
8001f054:	ec c6 f8 fa 	sub	r6,r6,-1798
    }
  }
  // params
  for(i=0; i<NET_PARAMS_MAX; i++) {
    if(presets[preIdx].params[i].enabled) {
      set_param_value( i, presets[preIdx].params[i].value );
8001f058:	c0 68       	rjmp	8001f064 <preset_recall+0xa8>
8001f05a:	2f f7       	sub	r7,-1
    if(presets[preIdx].outs[i].enabled) {
      net_connect( i, presets[preIdx].outs[i].target );
    }
  }
  // params
  for(i=0; i<NET_PARAMS_MAX; i++) {
8001f05c:	2f 86       	sub	r6,-8
8001f05e:	e0 47 00 40 	cp.w	r7,64
    if(presets[preIdx].params[i].enabled) {
8001f062:	c1 10       	breq	8001f084 <preset_recall+0xc8>
8001f064:	0d 88       	ld.ub	r8,r6[0x0]
8001f066:	ea 08 18 00 	cp.b	r8,r5
      set_param_value( i, presets[preIdx].params[i].value );
8001f06a:	cf 80       	breq	8001f05a <preset_recall+0x9e>
8001f06c:	ec fc ff fa 	ld.w	r12,r6[-6]
8001f070:	e0 a0 0d 30 	rcall	80020ad0 <__avr32_f32_to_s32>
8001f074:	2f 86       	sub	r6,-8
8001f076:	18 9b       	mov	r11,r12
8001f078:	0e 9c       	mov	r12,r7
8001f07a:	c1 9f       	rcall	8001eeac <set_param_value>
8001f07c:	2f f7       	sub	r7,-1
    if(presets[preIdx].outs[i].enabled) {
      net_connect( i, presets[preIdx].outs[i].target );
    }
  }
  // params
  for(i=0; i<NET_PARAMS_MAX; i++) {
8001f07e:	e0 47 00 40 	cp.w	r7,64
8001f082:	cf 11       	brne	8001f064 <preset_recall+0xa8>
    if(presets[preIdx].params[i].enabled) {
      set_param_value( i, presets[preIdx].params[i].value );
    }
  }
}
8001f084:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc

8001f088 <preset_store>:
8001f088:	eb cd 40 f8 	pushm	r3-r7,lr
8001f08c:	e0 66 09 10 	mov	r6,2320
8001f090:	e0 64 3f d0 	mov	r4,16336
8001f094:	f8 06 02 46 	mul	r6,r12,r6
8001f098:	18 93       	mov	r3,r12
8001f09a:	e8 06 00 06 	add	r6,r4,r6
  u16 i;
  // ins
  for(i=0; i<NET_INS_MAX; i++) {
    if( net_get_in_preset(i) ) {
      presets[preIdx].ins[i].value = net_get_in_value(i);
      presets[preIdx].ins[i].enabled = 1;
8001f09e:	30 07       	mov	r7,0
8001f0a0:	30 15       	mov	r5,1
8001f0a2:	c0 68       	rjmp	8001f0ae <preset_store+0x26>
8001f0a4:	2f f7       	sub	r7,-1

// store everything enabled in given preset
void preset_store(u32 preIdx) {
  u16 i;
  // ins
  for(i=0; i<NET_INS_MAX; i++) {
8001f0a6:	2f 86       	sub	r6,-8
8001f0a8:	e0 47 00 80 	cp.w	r7,128
    if( net_get_in_preset(i) ) {
8001f0ac:	c1 10       	breq	8001f0ce <preset_store+0x46>
8001f0ae:	0e 9c       	mov	r12,r7
8001f0b0:	fe b0 fb 90 	rcall	8001e7d0 <net_get_in_preset>
      presets[preIdx].ins[i].value = net_get_in_value(i);
8001f0b4:	cf 80       	breq	8001f0a4 <preset_store+0x1c>
8001f0b6:	0e 9c       	mov	r12,r7
8001f0b8:	fe b0 fc 50 	rcall	8001e958 <net_get_in_value>
8001f0bc:	e0 a0 0c d0 	rcall	80020a5c <__avr32_s32_to_f32>
8001f0c0:	ac e5       	st.b	r6[0x6],r5
      presets[preIdx].ins[i].enabled = 1;
8001f0c2:	8d 0c       	st.w	r6[0x0],r12
8001f0c4:	2f f7       	sub	r7,-1

// store everything enabled in given preset
void preset_store(u32 preIdx) {
  u16 i;
  // ins
  for(i=0; i<NET_INS_MAX; i++) {
8001f0c6:	2f 86       	sub	r6,-8
8001f0c8:	e0 47 00 80 	cp.w	r7,128
8001f0cc:	cf 11       	brne	8001f0ae <preset_store+0x26>
8001f0ce:	e0 66 09 10 	mov	r6,2320
8001f0d2:	30 07       	mov	r7,0
8001f0d4:	e6 06 02 46 	mul	r6,r3,r6
8001f0d8:	30 15       	mov	r5,1
8001f0da:	ec c6 fc 00 	sub	r6,r6,-1024
8001f0de:	e8 06 00 06 	add	r6,r4,r6
  }
  // outs
  for(i=0; i<NET_OUTS_MAX; i++) {
    if(net_get_out_preset(i)) {
      presets[preIdx].outs[i].target = net_get_target(i);
      presets[preIdx].outs[i].enabled = 1;
8001f0e2:	c0 68       	rjmp	8001f0ee <preset_store+0x66>
8001f0e4:	2f f7       	sub	r7,-1
      presets[preIdx].ins[i].value = net_get_in_value(i);
      presets[preIdx].ins[i].enabled = 1;
    }
  }
  // outs
  for(i=0; i<NET_OUTS_MAX; i++) {
8001f0e6:	2f a6       	sub	r6,-6
8001f0e8:	e0 47 00 80 	cp.w	r7,128
    if(net_get_out_preset(i)) {
8001f0ec:	c0 f0       	breq	8001f10a <preset_store+0x82>
8001f0ee:	0e 9c       	mov	r12,r7
8001f0f0:	fe b0 fb 7a 	rcall	8001e7e4 <net_get_out_preset>
      presets[preIdx].outs[i].target = net_get_target(i);
8001f0f4:	cf 80       	breq	8001f0e4 <preset_store+0x5c>
8001f0f6:	0e 9c       	mov	r12,r7
8001f0f8:	fe b0 fb 26 	rcall	8001e744 <net_get_target>
8001f0fc:	ac c5       	st.b	r6[0x4],r5
      presets[preIdx].outs[i].enabled = 1;
8001f0fe:	ac 0c       	st.h	r6[0x0],r12
8001f100:	2f f7       	sub	r7,-1
      presets[preIdx].ins[i].value = net_get_in_value(i);
      presets[preIdx].ins[i].enabled = 1;
    }
  }
  // outs
  for(i=0; i<NET_OUTS_MAX; i++) {
8001f102:	2f a6       	sub	r6,-6
8001f104:	e0 47 00 80 	cp.w	r7,128
8001f108:	cf 31       	brne	8001f0ee <preset_store+0x66>
8001f10a:	e0 66 09 10 	mov	r6,2320
8001f10e:	30 07       	mov	r7,0
8001f110:	e6 06 02 46 	mul	r6,r3,r6
8001f114:	30 15       	mov	r5,1
8001f116:	ec c6 f9 00 	sub	r6,r6,-1792
8001f11a:	e8 06 00 06 	add	r6,r4,r6
  }
  // params
  for(i=0; i<NET_PARAMS_MAX; i++) {
    if(get_param_preset(i)) {
      presets[preIdx].params[i].value =  get_param_value( i );
      presets[preIdx].params[i].enabled = 1;
8001f11e:	c0 68       	rjmp	8001f12a <preset_store+0xa2>
8001f120:	2f f7       	sub	r7,-1
      presets[preIdx].outs[i].target = net_get_target(i);
      presets[preIdx].outs[i].enabled = 1;
    }
  }
  // params
  for(i=0; i<NET_PARAMS_MAX; i++) {
8001f122:	2f 86       	sub	r6,-8
8001f124:	e0 47 00 40 	cp.w	r7,64
    if(get_param_preset(i)) {
8001f128:	c0 f0       	breq	8001f146 <preset_store+0xbe>
8001f12a:	0e 9c       	mov	r12,r7
8001f12c:	ca 8e       	rcall	8001ee7c <get_param_preset>
8001f12e:	cf 90       	breq	8001f120 <preset_store+0x98>
      presets[preIdx].params[i].value =  get_param_value( i );
8001f130:	0e 9c       	mov	r12,r7
8001f132:	c9 5e       	rcall	8001ee5c <get_param_value>
8001f134:	e0 a0 0c 94 	rcall	80020a5c <__avr32_s32_to_f32>
8001f138:	ac e5       	st.b	r6[0x6],r5
      presets[preIdx].params[i].enabled = 1;
8001f13a:	8d 0c       	st.w	r6[0x0],r12
    }
  }
  // params
  for(i=0; i<NET_PARAMS_MAX; i++) {
    if(get_param_preset(i)) {
      presets[preIdx].params[i].value =  get_param_value( i );
8001f13c:	2f f7       	sub	r7,-1
      presets[preIdx].params[i].enabled = 1;
8001f13e:	2f 86       	sub	r6,-8
8001f140:	e0 47 00 40 	cp.w	r7,64
      presets[preIdx].outs[i].target = net_get_target(i);
      presets[preIdx].outs[i].enabled = 1;
    }
  }
  // params
  for(i=0; i<NET_PARAMS_MAX; i++) {
8001f144:	cf 31       	brne	8001f12a <preset_store+0xa2>
8001f146:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
    if(get_param_preset(i)) {
      presets[preIdx].params[i].value =  get_param_value( i );
      presets[preIdx].params[i].enabled = 1;
    }
  }
}
8001f14a:	d7 03       	nop

8001f14c <preset_init>:
8001f14c:	eb cd 40 e0 	pushm	r5-r7,lr
8001f150:	e0 67 3f d0 	mov	r7,16336
8001f154:	30 06       	mov	r6,0
8001f156:	fe c5 c0 72 	sub	r5,pc,-16270
8001f15a:	ee cb f7 00 	sub	r11,r7,-2304
8001f15e:	0a 9c       	mov	r12,r5
8001f160:	ef 66 09 00 	st.b	r7[2304],r6
8001f164:	ef 66 09 01 	st.b	r7[2305],r6
8001f168:	ef 66 09 02 	st.b	r7[2306],r6

  for(i=0; i<NET_PRESETS_MAX; i++) {
    //    snprintf(presets[i].name, PRESET_NAME_LEN, "preset_%d", i);
    // presets[i].name = "[empty]";
    for(j=0; j<PRESET_NAME_LEN; j++) {
      presets[i].name[j] = 0;
8001f16c:	ef 66 09 03 	st.b	r7[2307],r6
8001f170:	ef 66 09 04 	st.b	r7[2308],r6
8001f174:	ef 66 09 05 	st.b	r7[2309],r6
8001f178:	ef 66 09 06 	st.b	r7[2310],r6
8001f17c:	ef 66 09 07 	st.b	r7[2311],r6
8001f180:	ef 66 09 08 	st.b	r7[2312],r6
8001f184:	ef 66 09 09 	st.b	r7[2313],r6
8001f188:	ef 66 09 0a 	st.b	r7[2314],r6
8001f18c:	ef 66 09 0b 	st.b	r7[2315],r6
8001f190:	ef 66 09 0c 	st.b	r7[2316],r6
8001f194:	ef 66 09 0d 	st.b	r7[2317],r6
8001f198:	ef 66 09 0e 	st.b	r7[2318],r6
8001f19c:	ef 66 09 0f 	st.b	r7[2319],r6
    }
    str_copy("[empty]", presets[i].name, PRESET_NAME_LEN);
8001f1a0:	31 0a       	mov	r10,16
8001f1a2:	fe b0 cd bf 	rcall	80018d20 <str_copy>
8001f1a6:	ee cb ed f0 	sub	r11,r7,-4624
8001f1aa:	0a 9c       	mov	r12,r5

  for(i=0; i<NET_PRESETS_MAX; i++) {
    //    snprintf(presets[i].name, PRESET_NAME_LEN, "preset_%d", i);
    // presets[i].name = "[empty]";
    for(j=0; j<PRESET_NAME_LEN; j++) {
      presets[i].name[j] = 0;
8001f1ac:	ef 66 12 10 	st.b	r7[4624],r6
8001f1b0:	ef 66 12 11 	st.b	r7[4625],r6
8001f1b4:	ef 66 12 12 	st.b	r7[4626],r6
8001f1b8:	ef 66 12 13 	st.b	r7[4627],r6
8001f1bc:	ef 66 12 14 	st.b	r7[4628],r6
8001f1c0:	ef 66 12 15 	st.b	r7[4629],r6
8001f1c4:	ef 66 12 16 	st.b	r7[4630],r6
8001f1c8:	ef 66 12 17 	st.b	r7[4631],r6
8001f1cc:	ef 66 12 18 	st.b	r7[4632],r6
8001f1d0:	ef 66 12 19 	st.b	r7[4633],r6
8001f1d4:	ef 66 12 1a 	st.b	r7[4634],r6
8001f1d8:	ef 66 12 1b 	st.b	r7[4635],r6
8001f1dc:	ef 66 12 1c 	st.b	r7[4636],r6
8001f1e0:	ef 66 12 1d 	st.b	r7[4637],r6
8001f1e4:	ef 66 12 1e 	st.b	r7[4638],r6
8001f1e8:	ef 66 12 1f 	st.b	r7[4639],r6
    }
    str_copy("[empty]", presets[i].name, PRESET_NAME_LEN);
8001f1ec:	31 0a       	mov	r10,16
8001f1ee:	fe b0 cd 99 	rcall	80018d20 <str_copy>
8001f1f2:	ee cb e4 e0 	sub	r11,r7,-6944
8001f1f6:	0a 9c       	mov	r12,r5

  for(i=0; i<NET_PRESETS_MAX; i++) {
    //    snprintf(presets[i].name, PRESET_NAME_LEN, "preset_%d", i);
    // presets[i].name = "[empty]";
    for(j=0; j<PRESET_NAME_LEN; j++) {
      presets[i].name[j] = 0;
8001f1f8:	ef 66 1b 20 	st.b	r7[6944],r6
8001f1fc:	ef 66 1b 21 	st.b	r7[6945],r6
8001f200:	ef 66 1b 22 	st.b	r7[6946],r6
8001f204:	ef 66 1b 23 	st.b	r7[6947],r6
8001f208:	ef 66 1b 24 	st.b	r7[6948],r6
8001f20c:	ef 66 1b 25 	st.b	r7[6949],r6
8001f210:	ef 66 1b 26 	st.b	r7[6950],r6
8001f214:	ef 66 1b 27 	st.b	r7[6951],r6
8001f218:	ef 66 1b 28 	st.b	r7[6952],r6
8001f21c:	ef 66 1b 29 	st.b	r7[6953],r6
8001f220:	ef 66 1b 2a 	st.b	r7[6954],r6
8001f224:	ef 66 1b 2b 	st.b	r7[6955],r6
8001f228:	ef 66 1b 2c 	st.b	r7[6956],r6
8001f22c:	ef 66 1b 2d 	st.b	r7[6957],r6
8001f230:	ef 66 1b 2e 	st.b	r7[6958],r6
8001f234:	ef 66 1b 2f 	st.b	r7[6959],r6
    }
    str_copy("[empty]", presets[i].name, PRESET_NAME_LEN);
8001f238:	31 0a       	mov	r10,16
8001f23a:	fe b0 cd 73 	rcall	80018d20 <str_copy>
8001f23e:	ee cb db d0 	sub	r11,r7,-9264
8001f242:	0a 9c       	mov	r12,r5

  for(i=0; i<NET_PRESETS_MAX; i++) {
    //    snprintf(presets[i].name, PRESET_NAME_LEN, "preset_%d", i);
    // presets[i].name = "[empty]";
    for(j=0; j<PRESET_NAME_LEN; j++) {
      presets[i].name[j] = 0;
8001f244:	ef 66 24 30 	st.b	r7[9264],r6
8001f248:	ef 66 24 31 	st.b	r7[9265],r6
8001f24c:	ef 66 24 32 	st.b	r7[9266],r6
8001f250:	ef 66 24 33 	st.b	r7[9267],r6
8001f254:	ef 66 24 34 	st.b	r7[9268],r6
8001f258:	ef 66 24 35 	st.b	r7[9269],r6
8001f25c:	ef 66 24 36 	st.b	r7[9270],r6
8001f260:	ef 66 24 37 	st.b	r7[9271],r6
8001f264:	ef 66 24 38 	st.b	r7[9272],r6
8001f268:	ef 66 24 39 	st.b	r7[9273],r6
8001f26c:	ef 66 24 3a 	st.b	r7[9274],r6
8001f270:	ef 66 24 3b 	st.b	r7[9275],r6
8001f274:	ef 66 24 3c 	st.b	r7[9276],r6
8001f278:	ef 66 24 3d 	st.b	r7[9277],r6
8001f27c:	ef 66 24 3e 	st.b	r7[9278],r6
8001f280:	ef 66 24 3f 	st.b	r7[9279],r6
    }
    str_copy("[empty]", presets[i].name, PRESET_NAME_LEN);
8001f284:	31 0a       	mov	r10,16
8001f286:	fe b0 cd 4d 	rcall	80018d20 <str_copy>
8001f28a:	ee cb d2 c0 	sub	r11,r7,-11584
8001f28e:	0a 9c       	mov	r12,r5

  for(i=0; i<NET_PRESETS_MAX; i++) {
    //    snprintf(presets[i].name, PRESET_NAME_LEN, "preset_%d", i);
    // presets[i].name = "[empty]";
    for(j=0; j<PRESET_NAME_LEN; j++) {
      presets[i].name[j] = 0;
8001f290:	ef 66 2d 40 	st.b	r7[11584],r6
8001f294:	ef 66 2d 41 	st.b	r7[11585],r6
8001f298:	ef 66 2d 42 	st.b	r7[11586],r6
8001f29c:	ef 66 2d 43 	st.b	r7[11587],r6
8001f2a0:	ef 66 2d 44 	st.b	r7[11588],r6
8001f2a4:	ef 66 2d 45 	st.b	r7[11589],r6
8001f2a8:	ef 66 2d 46 	st.b	r7[11590],r6
8001f2ac:	ef 66 2d 47 	st.b	r7[11591],r6
8001f2b0:	ef 66 2d 48 	st.b	r7[11592],r6
8001f2b4:	ef 66 2d 49 	st.b	r7[11593],r6
8001f2b8:	ef 66 2d 4a 	st.b	r7[11594],r6
8001f2bc:	ef 66 2d 4b 	st.b	r7[11595],r6
8001f2c0:	ef 66 2d 4c 	st.b	r7[11596],r6
8001f2c4:	ef 66 2d 4d 	st.b	r7[11597],r6
8001f2c8:	ef 66 2d 4e 	st.b	r7[11598],r6
8001f2cc:	ef 66 2d 4f 	st.b	r7[11599],r6
    }
    str_copy("[empty]", presets[i].name, PRESET_NAME_LEN);
8001f2d0:	31 0a       	mov	r10,16
8001f2d2:	fe b0 cd 27 	rcall	80018d20 <str_copy>
8001f2d6:	ee cb c9 b0 	sub	r11,r7,-13904
8001f2da:	0a 9c       	mov	r12,r5

  for(i=0; i<NET_PRESETS_MAX; i++) {
    //    snprintf(presets[i].name, PRESET_NAME_LEN, "preset_%d", i);
    // presets[i].name = "[empty]";
    for(j=0; j<PRESET_NAME_LEN; j++) {
      presets[i].name[j] = 0;
8001f2dc:	ef 66 36 50 	st.b	r7[13904],r6
8001f2e0:	ef 66 36 51 	st.b	r7[13905],r6
8001f2e4:	ef 66 36 52 	st.b	r7[13906],r6
8001f2e8:	ef 66 36 53 	st.b	r7[13907],r6
8001f2ec:	ef 66 36 54 	st.b	r7[13908],r6
8001f2f0:	ef 66 36 55 	st.b	r7[13909],r6
8001f2f4:	ef 66 36 56 	st.b	r7[13910],r6
8001f2f8:	ef 66 36 57 	st.b	r7[13911],r6
8001f2fc:	ef 66 36 58 	st.b	r7[13912],r6
8001f300:	ef 66 36 59 	st.b	r7[13913],r6
8001f304:	ef 66 36 5a 	st.b	r7[13914],r6
8001f308:	ef 66 36 5b 	st.b	r7[13915],r6
8001f30c:	ef 66 36 5c 	st.b	r7[13916],r6
8001f310:	ef 66 36 5d 	st.b	r7[13917],r6
8001f314:	ef 66 36 5e 	st.b	r7[13918],r6
8001f318:	ef 66 36 5f 	st.b	r7[13919],r6
    }
    str_copy("[empty]", presets[i].name, PRESET_NAME_LEN);
8001f31c:	31 0a       	mov	r10,16
8001f31e:	fe b0 cd 01 	rcall	80018d20 <str_copy>
8001f322:	ee cb c0 a0 	sub	r11,r7,-16224
8001f326:	0a 9c       	mov	r12,r5

  for(i=0; i<NET_PRESETS_MAX; i++) {
    //    snprintf(presets[i].name, PRESET_NAME_LEN, "preset_%d", i);
    // presets[i].name = "[empty]";
    for(j=0; j<PRESET_NAME_LEN; j++) {
      presets[i].name[j] = 0;
8001f328:	ef 66 3f 60 	st.b	r7[16224],r6
8001f32c:	ef 66 3f 61 	st.b	r7[16225],r6
8001f330:	ef 66 3f 62 	st.b	r7[16226],r6
8001f334:	ef 66 3f 63 	st.b	r7[16227],r6
8001f338:	ef 66 3f 64 	st.b	r7[16228],r6
8001f33c:	ef 66 3f 65 	st.b	r7[16229],r6
8001f340:	ef 66 3f 66 	st.b	r7[16230],r6
8001f344:	ef 66 3f 67 	st.b	r7[16231],r6
8001f348:	ef 66 3f 68 	st.b	r7[16232],r6
8001f34c:	ef 66 3f 69 	st.b	r7[16233],r6
8001f350:	ef 66 3f 6a 	st.b	r7[16234],r6
8001f354:	ef 66 3f 6b 	st.b	r7[16235],r6
8001f358:	ef 66 3f 6c 	st.b	r7[16236],r6
8001f35c:	ef 66 3f 6d 	st.b	r7[16237],r6
8001f360:	ef 66 3f 6e 	st.b	r7[16238],r6
8001f364:	ef 66 3f 6f 	st.b	r7[16239],r6
    }
    str_copy("[empty]", presets[i].name, PRESET_NAME_LEN);
8001f368:	31 0a       	mov	r10,16
8001f36a:	fe b0 cc db 	rcall	80018d20 <str_copy>
8001f36e:	ee cb b7 90 	sub	r11,r7,-18544
8001f372:	0a 9c       	mov	r12,r5

  for(i=0; i<NET_PRESETS_MAX; i++) {
    //    snprintf(presets[i].name, PRESET_NAME_LEN, "preset_%d", i);
    // presets[i].name = "[empty]";
    for(j=0; j<PRESET_NAME_LEN; j++) {
      presets[i].name[j] = 0;
8001f374:	ef 66 48 70 	st.b	r7[18544],r6
8001f378:	ef 66 48 71 	st.b	r7[18545],r6
8001f37c:	ef 66 48 72 	st.b	r7[18546],r6
8001f380:	ef 66 48 73 	st.b	r7[18547],r6
8001f384:	ef 66 48 74 	st.b	r7[18548],r6
8001f388:	ef 66 48 75 	st.b	r7[18549],r6
8001f38c:	ef 66 48 76 	st.b	r7[18550],r6
8001f390:	ef 66 48 77 	st.b	r7[18551],r6
8001f394:	ef 66 48 78 	st.b	r7[18552],r6
8001f398:	ef 66 48 79 	st.b	r7[18553],r6
8001f39c:	ef 66 48 7a 	st.b	r7[18554],r6
8001f3a0:	ef 66 48 7b 	st.b	r7[18555],r6
8001f3a4:	ef 66 48 7c 	st.b	r7[18556],r6
8001f3a8:	ef 66 48 7d 	st.b	r7[18557],r6
8001f3ac:	ef 66 48 7e 	st.b	r7[18558],r6
8001f3b0:	ef 66 48 7f 	st.b	r7[18559],r6
    }
    str_copy("[empty]", presets[i].name, PRESET_NAME_LEN);
8001f3b4:	31 0a       	mov	r10,16
8001f3b6:	fe b0 cc b5 	rcall	80018d20 <str_copy>
8001f3ba:	ee cb ae 80 	sub	r11,r7,-20864
8001f3be:	0a 9c       	mov	r12,r5

  for(i=0; i<NET_PRESETS_MAX; i++) {
    //    snprintf(presets[i].name, PRESET_NAME_LEN, "preset_%d", i);
    // presets[i].name = "[empty]";
    for(j=0; j<PRESET_NAME_LEN; j++) {
      presets[i].name[j] = 0;
8001f3c0:	ef 66 51 80 	st.b	r7[20864],r6
8001f3c4:	ef 66 51 81 	st.b	r7[20865],r6
8001f3c8:	ef 66 51 82 	st.b	r7[20866],r6
8001f3cc:	ef 66 51 83 	st.b	r7[20867],r6
8001f3d0:	ef 66 51 84 	st.b	r7[20868],r6
8001f3d4:	ef 66 51 85 	st.b	r7[20869],r6
8001f3d8:	ef 66 51 86 	st.b	r7[20870],r6
8001f3dc:	ef 66 51 87 	st.b	r7[20871],r6
8001f3e0:	ef 66 51 88 	st.b	r7[20872],r6
8001f3e4:	ef 66 51 89 	st.b	r7[20873],r6
8001f3e8:	ef 66 51 8a 	st.b	r7[20874],r6
8001f3ec:	ef 66 51 8b 	st.b	r7[20875],r6
8001f3f0:	ef 66 51 8c 	st.b	r7[20876],r6
8001f3f4:	ef 66 51 8d 	st.b	r7[20877],r6
8001f3f8:	ef 66 51 8e 	st.b	r7[20878],r6
8001f3fc:	ef 66 51 8f 	st.b	r7[20879],r6
    }
    str_copy("[empty]", presets[i].name, PRESET_NAME_LEN);
8001f400:	31 0a       	mov	r10,16
8001f402:	fe b0 cc 8f 	rcall	80018d20 <str_copy>
8001f406:	ee cb a5 70 	sub	r11,r7,-23184
8001f40a:	0a 9c       	mov	r12,r5

  for(i=0; i<NET_PRESETS_MAX; i++) {
    //    snprintf(presets[i].name, PRESET_NAME_LEN, "preset_%d", i);
    // presets[i].name = "[empty]";
    for(j=0; j<PRESET_NAME_LEN; j++) {
      presets[i].name[j] = 0;
8001f40c:	ef 66 5a 90 	st.b	r7[23184],r6
8001f410:	ef 66 5a 91 	st.b	r7[23185],r6
8001f414:	ef 66 5a 92 	st.b	r7[23186],r6
8001f418:	ef 66 5a 93 	st.b	r7[23187],r6
8001f41c:	ef 66 5a 94 	st.b	r7[23188],r6
8001f420:	ef 66 5a 95 	st.b	r7[23189],r6
8001f424:	ef 66 5a 96 	st.b	r7[23190],r6
8001f428:	ef 66 5a 97 	st.b	r7[23191],r6
8001f42c:	ef 66 5a 98 	st.b	r7[23192],r6
8001f430:	ef 66 5a 99 	st.b	r7[23193],r6
8001f434:	ef 66 5a 9a 	st.b	r7[23194],r6
8001f438:	ef 66 5a 9b 	st.b	r7[23195],r6
8001f43c:	ef 66 5a 9c 	st.b	r7[23196],r6
8001f440:	ef 66 5a 9d 	st.b	r7[23197],r6
8001f444:	ef 66 5a 9e 	st.b	r7[23198],r6
8001f448:	ef 66 5a 9f 	st.b	r7[23199],r6
    }
    str_copy("[empty]", presets[i].name, PRESET_NAME_LEN);
8001f44c:	31 0a       	mov	r10,16
8001f44e:	fe b0 cc 69 	rcall	80018d20 <str_copy>
8001f452:	ee cb 9c 60 	sub	r11,r7,-25504
8001f456:	0a 9c       	mov	r12,r5

  for(i=0; i<NET_PRESETS_MAX; i++) {
    //    snprintf(presets[i].name, PRESET_NAME_LEN, "preset_%d", i);
    // presets[i].name = "[empty]";
    for(j=0; j<PRESET_NAME_LEN; j++) {
      presets[i].name[j] = 0;
8001f458:	ef 66 63 a0 	st.b	r7[25504],r6
8001f45c:	ef 66 63 a1 	st.b	r7[25505],r6
8001f460:	ef 66 63 a2 	st.b	r7[25506],r6
8001f464:	ef 66 63 a3 	st.b	r7[25507],r6
8001f468:	ef 66 63 a4 	st.b	r7[25508],r6
8001f46c:	ef 66 63 a5 	st.b	r7[25509],r6
8001f470:	ef 66 63 a6 	st.b	r7[25510],r6
8001f474:	ef 66 63 a7 	st.b	r7[25511],r6
8001f478:	ef 66 63 a8 	st.b	r7[25512],r6
8001f47c:	ef 66 63 a9 	st.b	r7[25513],r6
8001f480:	ef 66 63 aa 	st.b	r7[25514],r6
8001f484:	ef 66 63 ab 	st.b	r7[25515],r6
8001f488:	ef 66 63 ac 	st.b	r7[25516],r6
8001f48c:	ef 66 63 ad 	st.b	r7[25517],r6
8001f490:	ef 66 63 ae 	st.b	r7[25518],r6
8001f494:	ef 66 63 af 	st.b	r7[25519],r6
    }
    str_copy("[empty]", presets[i].name, PRESET_NAME_LEN);
8001f498:	31 0a       	mov	r10,16
8001f49a:	fe b0 cc 43 	rcall	80018d20 <str_copy>
8001f49e:	ee cb 93 50 	sub	r11,r7,-27824
8001f4a2:	0a 9c       	mov	r12,r5

  for(i=0; i<NET_PRESETS_MAX; i++) {
    //    snprintf(presets[i].name, PRESET_NAME_LEN, "preset_%d", i);
    // presets[i].name = "[empty]";
    for(j=0; j<PRESET_NAME_LEN; j++) {
      presets[i].name[j] = 0;
8001f4a4:	ef 66 6c b0 	st.b	r7[27824],r6
8001f4a8:	ef 66 6c b1 	st.b	r7[27825],r6
8001f4ac:	ef 66 6c b2 	st.b	r7[27826],r6
8001f4b0:	ef 66 6c b3 	st.b	r7[27827],r6
8001f4b4:	ef 66 6c b4 	st.b	r7[27828],r6
8001f4b8:	ef 66 6c b5 	st.b	r7[27829],r6
8001f4bc:	ef 66 6c b6 	st.b	r7[27830],r6
8001f4c0:	ef 66 6c b7 	st.b	r7[27831],r6
8001f4c4:	ef 66 6c b8 	st.b	r7[27832],r6
8001f4c8:	ef 66 6c b9 	st.b	r7[27833],r6
8001f4cc:	ef 66 6c ba 	st.b	r7[27834],r6
8001f4d0:	ef 66 6c bb 	st.b	r7[27835],r6
8001f4d4:	ef 66 6c bc 	st.b	r7[27836],r6
8001f4d8:	ef 66 6c bd 	st.b	r7[27837],r6
8001f4dc:	ef 66 6c be 	st.b	r7[27838],r6
8001f4e0:	ef 66 6c bf 	st.b	r7[27839],r6
    }
    str_copy("[empty]", presets[i].name, PRESET_NAME_LEN);
8001f4e4:	31 0a       	mov	r10,16
8001f4e6:	fe b0 cc 1d 	rcall	80018d20 <str_copy>
8001f4ea:	ee cb 8a 40 	sub	r11,r7,-30144
8001f4ee:	0a 9c       	mov	r12,r5

  for(i=0; i<NET_PRESETS_MAX; i++) {
    //    snprintf(presets[i].name, PRESET_NAME_LEN, "preset_%d", i);
    // presets[i].name = "[empty]";
    for(j=0; j<PRESET_NAME_LEN; j++) {
      presets[i].name[j] = 0;
8001f4f0:	ef 66 75 c0 	st.b	r7[30144],r6
8001f4f4:	ef 66 75 c1 	st.b	r7[30145],r6
8001f4f8:	ef 66 75 c2 	st.b	r7[30146],r6
8001f4fc:	ef 66 75 c3 	st.b	r7[30147],r6
8001f500:	ef 66 75 c4 	st.b	r7[30148],r6
8001f504:	ef 66 75 c5 	st.b	r7[30149],r6
8001f508:	ef 66 75 c6 	st.b	r7[30150],r6
8001f50c:	ef 66 75 c7 	st.b	r7[30151],r6
8001f510:	ef 66 75 c8 	st.b	r7[30152],r6
8001f514:	ef 66 75 c9 	st.b	r7[30153],r6
8001f518:	ef 66 75 ca 	st.b	r7[30154],r6
8001f51c:	ef 66 75 cb 	st.b	r7[30155],r6
8001f520:	ef 66 75 cc 	st.b	r7[30156],r6
8001f524:	ef 66 75 cd 	st.b	r7[30157],r6
8001f528:	ef 66 75 ce 	st.b	r7[30158],r6
8001f52c:	ef 66 75 cf 	st.b	r7[30159],r6
    }
    str_copy("[empty]", presets[i].name, PRESET_NAME_LEN);
8001f530:	31 0a       	mov	r10,16
8001f532:	fe b0 cb f7 	rcall	80018d20 <str_copy>
8001f536:	ee cb 81 30 	sub	r11,r7,-32464
8001f53a:	0a 9c       	mov	r12,r5

  for(i=0; i<NET_PRESETS_MAX; i++) {
    //    snprintf(presets[i].name, PRESET_NAME_LEN, "preset_%d", i);
    // presets[i].name = "[empty]";
    for(j=0; j<PRESET_NAME_LEN; j++) {
      presets[i].name[j] = 0;
8001f53c:	ef 66 7e d0 	st.b	r7[32464],r6
8001f540:	ef 66 7e d1 	st.b	r7[32465],r6
8001f544:	ef 66 7e d2 	st.b	r7[32466],r6
8001f548:	ef 66 7e d3 	st.b	r7[32467],r6
8001f54c:	ef 66 7e d4 	st.b	r7[32468],r6
8001f550:	ef 66 7e d5 	st.b	r7[32469],r6
8001f554:	ef 66 7e d6 	st.b	r7[32470],r6
8001f558:	ef 66 7e d7 	st.b	r7[32471],r6
8001f55c:	ef 66 7e d8 	st.b	r7[32472],r6
8001f560:	ef 66 7e d9 	st.b	r7[32473],r6
8001f564:	ef 66 7e da 	st.b	r7[32474],r6
8001f568:	ef 66 7e db 	st.b	r7[32475],r6
8001f56c:	ef 66 7e dc 	st.b	r7[32476],r6
8001f570:	ef 66 7e dd 	st.b	r7[32477],r6
8001f574:	ef 66 7e de 	st.b	r7[32478],r6
8001f578:	ef 66 7e df 	st.b	r7[32479],r6
    }
    str_copy("[empty]", presets[i].name, PRESET_NAME_LEN);
8001f57c:	31 0a       	mov	r10,16
8001f57e:	fe b0 cb d1 	rcall	80018d20 <str_copy>
8001f582:	e0 68 87 e0 	mov	r8,34784

  for(i=0; i<NET_PRESETS_MAX; i++) {
    //    snprintf(presets[i].name, PRESET_NAME_LEN, "preset_%d", i);
    // presets[i].name = "[empty]";
    for(j=0; j<PRESET_NAME_LEN; j++) {
      presets[i].name[j] = 0;
8001f586:	ee 08 0b 06 	st.b	r7[r8],r6
    }
    str_copy("[empty]", presets[i].name, PRESET_NAME_LEN);
8001f58a:	ee 08 00 0b 	add	r11,r7,r8

  for(i=0; i<NET_PRESETS_MAX; i++) {
    //    snprintf(presets[i].name, PRESET_NAME_LEN, "preset_%d", i);
    // presets[i].name = "[empty]";
    for(j=0; j<PRESET_NAME_LEN; j++) {
      presets[i].name[j] = 0;
8001f58e:	e0 68 87 e1 	mov	r8,34785
8001f592:	ee 08 0b 06 	st.b	r7[r8],r6
8001f596:	e0 68 87 e2 	mov	r8,34786
8001f59a:	ee 08 0b 06 	st.b	r7[r8],r6
8001f59e:	e0 68 87 e3 	mov	r8,34787
8001f5a2:	ee 08 0b 06 	st.b	r7[r8],r6
8001f5a6:	e0 68 87 e4 	mov	r8,34788
8001f5aa:	ee 08 0b 06 	st.b	r7[r8],r6
8001f5ae:	e0 68 87 e5 	mov	r8,34789
8001f5b2:	ee 08 0b 06 	st.b	r7[r8],r6
8001f5b6:	e0 68 87 e6 	mov	r8,34790
8001f5ba:	ee 08 0b 06 	st.b	r7[r8],r6
8001f5be:	e0 68 87 e7 	mov	r8,34791
8001f5c2:	ee 08 0b 06 	st.b	r7[r8],r6
8001f5c6:	e0 68 87 e8 	mov	r8,34792
8001f5ca:	ee 08 0b 06 	st.b	r7[r8],r6
8001f5ce:	e0 68 87 e9 	mov	r8,34793
8001f5d2:	ee 08 0b 06 	st.b	r7[r8],r6
8001f5d6:	e0 68 87 ea 	mov	r8,34794
8001f5da:	ee 08 0b 06 	st.b	r7[r8],r6
8001f5de:	e0 68 87 eb 	mov	r8,34795
8001f5e2:	ee 08 0b 06 	st.b	r7[r8],r6
8001f5e6:	e0 68 87 ec 	mov	r8,34796
8001f5ea:	ee 08 0b 06 	st.b	r7[r8],r6
8001f5ee:	e0 68 87 ed 	mov	r8,34797
8001f5f2:	ee 08 0b 06 	st.b	r7[r8],r6
8001f5f6:	e0 68 87 ee 	mov	r8,34798
8001f5fa:	ee 08 0b 06 	st.b	r7[r8],r6
8001f5fe:	e0 68 87 ef 	mov	r8,34799
    }
    str_copy("[empty]", presets[i].name, PRESET_NAME_LEN);
8001f602:	0a 9c       	mov	r12,r5

  for(i=0; i<NET_PRESETS_MAX; i++) {
    //    snprintf(presets[i].name, PRESET_NAME_LEN, "preset_%d", i);
    // presets[i].name = "[empty]";
    for(j=0; j<PRESET_NAME_LEN; j++) {
      presets[i].name[j] = 0;
8001f604:	ee 08 0b 06 	st.b	r7[r8],r6
    }
    str_copy("[empty]", presets[i].name, PRESET_NAME_LEN);
8001f608:	31 0a       	mov	r10,16
8001f60a:	fe b0 cb 8b 	rcall	80018d20 <str_copy>
8001f60e:	e0 68 90 f0 	mov	r8,37104

  for(i=0; i<NET_PRESETS_MAX; i++) {
    //    snprintf(presets[i].name, PRESET_NAME_LEN, "preset_%d", i);
    // presets[i].name = "[empty]";
    for(j=0; j<PRESET_NAME_LEN; j++) {
      presets[i].name[j] = 0;
8001f612:	ee 08 0b 06 	st.b	r7[r8],r6
    }
    str_copy("[empty]", presets[i].name, PRESET_NAME_LEN);
8001f616:	ee 08 00 0b 	add	r11,r7,r8

  for(i=0; i<NET_PRESETS_MAX; i++) {
    //    snprintf(presets[i].name, PRESET_NAME_LEN, "preset_%d", i);
    // presets[i].name = "[empty]";
    for(j=0; j<PRESET_NAME_LEN; j++) {
      presets[i].name[j] = 0;
8001f61a:	e0 68 90 f1 	mov	r8,37105
8001f61e:	ee 08 0b 06 	st.b	r7[r8],r6
8001f622:	e0 68 90 f2 	mov	r8,37106
8001f626:	ee 08 0b 06 	st.b	r7[r8],r6
8001f62a:	e0 68 90 f3 	mov	r8,37107
8001f62e:	ee 08 0b 06 	st.b	r7[r8],r6
8001f632:	e0 68 90 f4 	mov	r8,37108
8001f636:	ee 08 0b 06 	st.b	r7[r8],r6
8001f63a:	e0 68 90 f5 	mov	r8,37109
8001f63e:	ee 08 0b 06 	st.b	r7[r8],r6
8001f642:	e0 68 90 f6 	mov	r8,37110
8001f646:	ee 08 0b 06 	st.b	r7[r8],r6
8001f64a:	e0 68 90 f7 	mov	r8,37111
8001f64e:	ee 08 0b 06 	st.b	r7[r8],r6
8001f652:	e0 68 90 f8 	mov	r8,37112
8001f656:	ee 08 0b 06 	st.b	r7[r8],r6
8001f65a:	e0 68 90 f9 	mov	r8,37113
8001f65e:	ee 08 0b 06 	st.b	r7[r8],r6
8001f662:	e0 68 90 fa 	mov	r8,37114
8001f666:	ee 08 0b 06 	st.b	r7[r8],r6
8001f66a:	e0 68 90 fb 	mov	r8,37115
8001f66e:	ee 08 0b 06 	st.b	r7[r8],r6
8001f672:	e0 68 90 fc 	mov	r8,37116
8001f676:	ee 08 0b 06 	st.b	r7[r8],r6
8001f67a:	e0 68 90 fd 	mov	r8,37117
8001f67e:	ee 08 0b 06 	st.b	r7[r8],r6
8001f682:	e0 68 90 fe 	mov	r8,37118
8001f686:	ee 08 0b 06 	st.b	r7[r8],r6
8001f68a:	e0 68 90 ff 	mov	r8,37119
    }
    str_copy("[empty]", presets[i].name, PRESET_NAME_LEN);
8001f68e:	0a 9c       	mov	r12,r5

  for(i=0; i<NET_PRESETS_MAX; i++) {
    //    snprintf(presets[i].name, PRESET_NAME_LEN, "preset_%d", i);
    // presets[i].name = "[empty]";
    for(j=0; j<PRESET_NAME_LEN; j++) {
      presets[i].name[j] = 0;
8001f690:	ee 08 0b 06 	st.b	r7[r8],r6
    }
    str_copy("[empty]", presets[i].name, PRESET_NAME_LEN);
8001f694:	31 0a       	mov	r10,16
8001f696:	fe b0 cb 45 	rcall	80018d20 <str_copy>
  }
}
8001f69a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001f69e:	d7 03       	nop

8001f6a0 <redraw_gathered>:
}

/// redraw gathered outputs
void redraw_gathered(void) {
  //// TODO
}
8001f6a0:	5e fc       	retal	r12
8001f6a2:	d7 03       	nop

8001f6a4 <redraw_play>:
  screen_line(0, CHAR_ROWS_1, "LOAD DEFAULT", 10);
}

//==================================================
//==== redraw play page
void redraw_play(void) {
8001f6a4:	eb cd 40 c0 	pushm	r6-r7,lr
  //u8 idx;

  for(y = 1; y < CHAR_ROWS; y++ ) {
    //    println("", 0);
    //idx = touchedParams[n].idx;    
    screen_blank_line(0, y);
8001f6a8:	30 1b       	mov	r11,1
8001f6aa:	30 0c       	mov	r12,0
8001f6ac:	fe b0 c5 72 	rcall	80018190 <screen_blank_line>
    //    println_int(idx, 0);

    // first column
    str_copy(play_get_entry(y),    lineBuf, PLAY_SCROLL_BUF_LEN);
8001f6b0:	30 1c       	mov	r12,1
8001f6b2:	fe b0 fc 21 	rcall	8001eef4 <play_get_entry>
8001f6b6:	31 9a       	mov	r10,25
8001f6b8:	e0 67 38 cc 	mov	r7,14540
8001f6bc:	0e 9b       	mov	r11,r7
8001f6be:	fe b0 cb 31 	rcall	80018d20 <str_copy>
    // 2nd column
    str_copy(play_get_entry(y + PLAY_SCROLL_NUM__2), lineBuf + PLAY_SCROLL_BUF_LEN, PLAY_SCROLL_BUF_LEN);
8001f6c2:	30 8c       	mov	r12,8
8001f6c4:	fe b0 fc 18 	rcall	8001eef4 <play_get_entry>
8001f6c8:	ee c6 ff e7 	sub	r6,r7,-25
8001f6cc:	31 9a       	mov	r10,25
8001f6ce:	0c 9b       	mov	r11,r6
8001f6d0:	fe b0 cb 28 	rcall	80018d20 <str_copy>

    //endln(); 
    screen_line(0, y, lineBuf, 1);
8001f6d4:	30 19       	mov	r9,1
8001f6d6:	0e 9a       	mov	r10,r7
8001f6d8:	12 9b       	mov	r11,r9
8001f6da:	30 0c       	mov	r12,0
8001f6dc:	fe b0 c7 18 	rcall	8001850c <screen_line>
  //u8 idx;

  for(y = 1; y < CHAR_ROWS; y++ ) {
    //    println("", 0);
    //idx = touchedParams[n].idx;    
    screen_blank_line(0, y);
8001f6e0:	30 2b       	mov	r11,2
8001f6e2:	30 0c       	mov	r12,0
8001f6e4:	fe b0 c5 56 	rcall	80018190 <screen_blank_line>
    //    println_int(idx, 0);

    // first column
    str_copy(play_get_entry(y),    lineBuf, PLAY_SCROLL_BUF_LEN);
8001f6e8:	30 2c       	mov	r12,2
8001f6ea:	fe b0 fc 05 	rcall	8001eef4 <play_get_entry>
8001f6ee:	0e 9b       	mov	r11,r7
8001f6f0:	31 9a       	mov	r10,25
8001f6f2:	fe b0 cb 17 	rcall	80018d20 <str_copy>
    // 2nd column
    str_copy(play_get_entry(y + PLAY_SCROLL_NUM__2), lineBuf + PLAY_SCROLL_BUF_LEN, PLAY_SCROLL_BUF_LEN);
8001f6f6:	30 9c       	mov	r12,9
8001f6f8:	fe b0 fb fe 	rcall	8001eef4 <play_get_entry>
8001f6fc:	0c 9b       	mov	r11,r6
8001f6fe:	31 9a       	mov	r10,25
8001f700:	fe b0 cb 10 	rcall	80018d20 <str_copy>

    //endln(); 
    screen_line(0, y, lineBuf, 1);
8001f704:	30 19       	mov	r9,1
8001f706:	0e 9a       	mov	r10,r7
8001f708:	30 2b       	mov	r11,2
8001f70a:	30 0c       	mov	r12,0
8001f70c:	fe b0 c7 00 	rcall	8001850c <screen_line>
  //u8 idx;

  for(y = 1; y < CHAR_ROWS; y++ ) {
    //    println("", 0);
    //idx = touchedParams[n].idx;    
    screen_blank_line(0, y);
8001f710:	30 3b       	mov	r11,3
8001f712:	30 0c       	mov	r12,0
8001f714:	fe b0 c5 3e 	rcall	80018190 <screen_blank_line>
    //    println_int(idx, 0);

    // first column
    str_copy(play_get_entry(y),    lineBuf, PLAY_SCROLL_BUF_LEN);
8001f718:	30 3c       	mov	r12,3
8001f71a:	fe b0 fb ed 	rcall	8001eef4 <play_get_entry>
8001f71e:	0e 9b       	mov	r11,r7
8001f720:	31 9a       	mov	r10,25
8001f722:	fe b0 ca ff 	rcall	80018d20 <str_copy>
    // 2nd column
    str_copy(play_get_entry(y + PLAY_SCROLL_NUM__2), lineBuf + PLAY_SCROLL_BUF_LEN, PLAY_SCROLL_BUF_LEN);
8001f726:	30 ac       	mov	r12,10
8001f728:	fe b0 fb e6 	rcall	8001eef4 <play_get_entry>
8001f72c:	0c 9b       	mov	r11,r6
8001f72e:	31 9a       	mov	r10,25
8001f730:	fe b0 ca f8 	rcall	80018d20 <str_copy>

    //endln(); 
    screen_line(0, y, lineBuf, 1);
8001f734:	30 19       	mov	r9,1
8001f736:	0e 9a       	mov	r10,r7
8001f738:	30 3b       	mov	r11,3
8001f73a:	30 0c       	mov	r12,0
8001f73c:	fe b0 c6 e8 	rcall	8001850c <screen_line>
  //u8 idx;

  for(y = 1; y < CHAR_ROWS; y++ ) {
    //    println("", 0);
    //idx = touchedParams[n].idx;    
    screen_blank_line(0, y);
8001f740:	30 4b       	mov	r11,4
8001f742:	30 0c       	mov	r12,0
8001f744:	fe b0 c5 26 	rcall	80018190 <screen_blank_line>
    //    println_int(idx, 0);

    // first column
    str_copy(play_get_entry(y),    lineBuf, PLAY_SCROLL_BUF_LEN);
8001f748:	30 4c       	mov	r12,4
8001f74a:	fe b0 fb d5 	rcall	8001eef4 <play_get_entry>
8001f74e:	0e 9b       	mov	r11,r7
8001f750:	31 9a       	mov	r10,25
8001f752:	fe b0 ca e7 	rcall	80018d20 <str_copy>
    // 2nd column
    str_copy(play_get_entry(y + PLAY_SCROLL_NUM__2), lineBuf + PLAY_SCROLL_BUF_LEN, PLAY_SCROLL_BUF_LEN);
8001f756:	30 bc       	mov	r12,11
8001f758:	fe b0 fb ce 	rcall	8001eef4 <play_get_entry>
8001f75c:	0c 9b       	mov	r11,r6
8001f75e:	31 9a       	mov	r10,25
8001f760:	fe b0 ca e0 	rcall	80018d20 <str_copy>

    //endln(); 
    screen_line(0, y, lineBuf, 1);
8001f764:	30 19       	mov	r9,1
8001f766:	0e 9a       	mov	r10,r7
8001f768:	30 4b       	mov	r11,4
8001f76a:	30 0c       	mov	r12,0
8001f76c:	fe b0 c6 d0 	rcall	8001850c <screen_line>
  //u8 idx;

  for(y = 1; y < CHAR_ROWS; y++ ) {
    //    println("", 0);
    //idx = touchedParams[n].idx;    
    screen_blank_line(0, y);
8001f770:	30 5b       	mov	r11,5
8001f772:	30 0c       	mov	r12,0
8001f774:	fe b0 c5 0e 	rcall	80018190 <screen_blank_line>
    //    println_int(idx, 0);

    // first column
    str_copy(play_get_entry(y),    lineBuf, PLAY_SCROLL_BUF_LEN);
8001f778:	30 5c       	mov	r12,5
8001f77a:	fe b0 fb bd 	rcall	8001eef4 <play_get_entry>
8001f77e:	0e 9b       	mov	r11,r7
8001f780:	31 9a       	mov	r10,25
8001f782:	fe b0 ca cf 	rcall	80018d20 <str_copy>
    // 2nd column
    str_copy(play_get_entry(y + PLAY_SCROLL_NUM__2), lineBuf + PLAY_SCROLL_BUF_LEN, PLAY_SCROLL_BUF_LEN);
8001f786:	30 cc       	mov	r12,12
8001f788:	fe b0 fb b6 	rcall	8001eef4 <play_get_entry>
8001f78c:	0c 9b       	mov	r11,r6
8001f78e:	31 9a       	mov	r10,25
8001f790:	fe b0 ca c8 	rcall	80018d20 <str_copy>

    //endln(); 
    screen_line(0, y, lineBuf, 1);
8001f794:	30 19       	mov	r9,1
8001f796:	0e 9a       	mov	r10,r7
8001f798:	30 5b       	mov	r11,5
8001f79a:	30 0c       	mov	r12,0
8001f79c:	fe b0 c6 b8 	rcall	8001850c <screen_line>
  //u8 idx;

  for(y = 1; y < CHAR_ROWS; y++ ) {
    //    println("", 0);
    //idx = touchedParams[n].idx;    
    screen_blank_line(0, y);
8001f7a0:	30 6b       	mov	r11,6
8001f7a2:	30 0c       	mov	r12,0
8001f7a4:	fe b0 c4 f6 	rcall	80018190 <screen_blank_line>
    //    println_int(idx, 0);

    // first column
    str_copy(play_get_entry(y),    lineBuf, PLAY_SCROLL_BUF_LEN);
8001f7a8:	30 6c       	mov	r12,6
8001f7aa:	fe b0 fb a5 	rcall	8001eef4 <play_get_entry>
8001f7ae:	0e 9b       	mov	r11,r7
8001f7b0:	31 9a       	mov	r10,25
8001f7b2:	fe b0 ca b7 	rcall	80018d20 <str_copy>
    // 2nd column
    str_copy(play_get_entry(y + PLAY_SCROLL_NUM__2), lineBuf + PLAY_SCROLL_BUF_LEN, PLAY_SCROLL_BUF_LEN);
8001f7b6:	30 dc       	mov	r12,13
8001f7b8:	fe b0 fb 9e 	rcall	8001eef4 <play_get_entry>
8001f7bc:	0c 9b       	mov	r11,r6
8001f7be:	31 9a       	mov	r10,25
8001f7c0:	fe b0 ca b0 	rcall	80018d20 <str_copy>

    //endln(); 
    screen_line(0, y, lineBuf, 1);
8001f7c4:	30 19       	mov	r9,1
8001f7c6:	0e 9a       	mov	r10,r7
8001f7c8:	30 6b       	mov	r11,6
8001f7ca:	30 0c       	mov	r12,0
8001f7cc:	fe b0 c6 a0 	rcall	8001850c <screen_line>
  //u8 idx;

  for(y = 1; y < CHAR_ROWS; y++ ) {
    //    println("", 0);
    //idx = touchedParams[n].idx;    
    screen_blank_line(0, y);
8001f7d0:	30 7b       	mov	r11,7
8001f7d2:	30 0c       	mov	r12,0
8001f7d4:	fe b0 c4 de 	rcall	80018190 <screen_blank_line>
    //    println_int(idx, 0);

    // first column
    str_copy(play_get_entry(y),    lineBuf, PLAY_SCROLL_BUF_LEN);
8001f7d8:	30 7c       	mov	r12,7
8001f7da:	fe b0 fb 8d 	rcall	8001eef4 <play_get_entry>
8001f7de:	0e 9b       	mov	r11,r7
8001f7e0:	31 9a       	mov	r10,25
8001f7e2:	fe b0 ca 9f 	rcall	80018d20 <str_copy>
    // 2nd column
    str_copy(play_get_entry(y + PLAY_SCROLL_NUM__2), lineBuf + PLAY_SCROLL_BUF_LEN, PLAY_SCROLL_BUF_LEN);
8001f7e6:	30 ec       	mov	r12,14
8001f7e8:	fe b0 fb 86 	rcall	8001eef4 <play_get_entry>
8001f7ec:	0c 9b       	mov	r11,r6
8001f7ee:	31 9a       	mov	r10,25
8001f7f0:	fe b0 ca 98 	rcall	80018d20 <str_copy>

    //endln(); 
    screen_line(0, y, lineBuf, 1);
8001f7f4:	0e 9a       	mov	r10,r7
8001f7f6:	30 19       	mov	r9,1
8001f7f8:	30 7b       	mov	r11,7
8001f7fa:	30 0c       	mov	r12,0
8001f7fc:	fe b0 c6 88 	rcall	8001850c <screen_line>
    //    screen_line(0, 80, numBuf, 10);
    
    n--;
  }
  // draw the header
  screen_line(0, 0, "PLAY", 12);
8001f800:	30 0b       	mov	r11,0
8001f802:	30 c9       	mov	r9,12
8001f804:	fe ca c7 a4 	sub	r10,pc,-14428
8001f808:	16 9c       	mov	r12,r11
}
8001f80a:	fe b0 c6 81 	rcall	8001850c <screen_line>
8001f80e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f812:	d7 03       	nop

8001f814 <redraw_scenes>:
8001f814:	d4 01       	pushm	lr
8001f816:	fe b0 bf 07 	rcall	80017624 <files_get_scene_count>
8001f81a:	e0 68 3f bc 	mov	r8,16316
8001f81e:	70 08       	ld.w	r8,r8[0x0]
8001f820:	70 4b       	ld.w	r11,r8[0x10]
8001f822:	58 2b       	cp.w	r11,2
8001f824:	c4 40       	breq	8001f8ac <redraw_scenes+0x98>
8001f826:	e0 8b 00 30 	brhi	8001f886 <redraw_scenes+0x72>
    nCenter = num;
  }
  n = nCenter;
  y = SCREEN_ROW_CENTER;
  // modes
  switch(curPage->mode) { 
8001f82a:	58 1b       	cp.w	r11,1
    n += num;
  } else if (n >= num) {
    n -= num;
  } 

  screen_blank_line(0, y);
8001f82c:	c4 80       	breq	8001f8bc <redraw_scenes+0xa8>
8001f82e:	30 3b       	mov	r11,3
8001f830:	30 0c       	mov	r12,0
8001f832:	fe b0 c4 af 	rcall	80018190 <screen_blank_line>
  case eModeNone:
  default:
    draw_line_scenes(n, num, y, 15);  
    break;
  }
  screen_hl_line(0, y, 1);
8001f836:	30 1a       	mov	r10,1
8001f838:	30 3b       	mov	r11,3
8001f83a:	30 0c       	mov	r12,0
8001f83c:	fe b0 c3 fe 	rcall	80018038 <screen_hl_line>
    n += num;
  } else if (n >= num) {
    n -= num;
  } 

  screen_blank_line(0, y);
8001f840:	30 2b       	mov	r11,2
8001f842:	30 0c       	mov	r12,0
8001f844:	fe b0 c4 a6 	rcall	80018190 <screen_blank_line>
8001f848:	30 1b       	mov	r11,1
8001f84a:	30 0c       	mov	r12,0
8001f84c:	fe b0 c4 a2 	rcall	80018190 <screen_blank_line>
8001f850:	30 4b       	mov	r11,4
8001f852:	30 0c       	mov	r12,0
8001f854:	fe b0 c4 9e 	rcall	80018190 <screen_blank_line>
8001f858:	30 5b       	mov	r11,5
8001f85a:	30 0c       	mov	r12,0
8001f85c:	fe b0 c4 9a 	rcall	80018190 <screen_blank_line>
8001f860:	30 6b       	mov	r11,6
8001f862:	30 0c       	mov	r12,0
8001f864:	fe b0 c4 96 	rcall	80018190 <screen_blank_line>
    n++;
    y++;
    draw_line_scenes(n, num, y, 4);
  }
  // draw header
  screen_line(0, 0, "SCENES", 12);
8001f868:	30 0b       	mov	r11,0
8001f86a:	30 c9       	mov	r9,12
8001f86c:	fe ca c8 24 	sub	r10,pc,-14300
8001f870:	16 9c       	mov	r12,r11
  // draw footer (function labels)
  screen_line(0, CHAR_ROWS_1, "CLEAR COPY STORE RECALL", 10);
8001f872:	fe b0 c6 4d 	rcall	8001850c <screen_line>
8001f876:	30 a9       	mov	r9,10
8001f878:	fe ca c7 6c 	sub	r10,pc,-14484
8001f87c:	30 7b       	mov	r11,7
}
8001f87e:	30 0c       	mov	r12,0
    nCenter = num;
  }
  n = nCenter;
  y = SCREEN_ROW_CENTER;
  // modes
  switch(curPage->mode) { 
8001f880:	fe b0 c6 46 	rcall	8001850c <screen_line>
8001f884:	d8 02       	popm	pc
8001f886:	58 3b       	cp.w	r11,3
    break;
  case eModeStore:
    screen_line(0, y, "STORE?", 14);
    break;
  case eModeRecall:
    screen_line(0, y, "RECALL?", 14);
8001f888:	c0 b0       	breq	8001f89e <redraw_scenes+0x8a>
8001f88a:	58 4b       	cp.w	r11,4
8001f88c:	cd 11       	brne	8001f82e <redraw_scenes+0x1a>
8001f88e:	30 e9       	mov	r9,14
8001f890:	fe ca c7 8c 	sub	r10,pc,-14452
    break;
8001f894:	30 3b       	mov	r11,3
    break;
  case eModeCopy:
    screen_line(0, y, "COPY?", 14);
    break;
  case eModeStore:
    screen_line(0, y, "STORE?", 14);
8001f896:	30 0c       	mov	r12,0
8001f898:	fe b0 c6 3a 	rcall	8001850c <screen_line>
8001f89c:	cc db       	rjmp	8001f836 <redraw_scenes+0x22>
8001f89e:	30 e9       	mov	r9,14
    break;
8001f8a0:	fe ca c7 a4 	sub	r10,pc,-14428
  switch(curPage->mode) { 
  case eModeClear:
    screen_line(0, y, "CLEAR?", 14);
    break;
  case eModeCopy:
    screen_line(0, y, "COPY?", 14);
8001f8a4:	30 0c       	mov	r12,0
8001f8a6:	fe b0 c6 33 	rcall	8001850c <screen_line>
8001f8aa:	cc 6b       	rjmp	8001f836 <redraw_scenes+0x22>
8001f8ac:	30 e9       	mov	r9,14
    break;
8001f8ae:	fe ca c7 ba 	sub	r10,pc,-14406
  n = nCenter;
  y = SCREEN_ROW_CENTER;
  // modes
  switch(curPage->mode) { 
  case eModeClear:
    screen_line(0, y, "CLEAR?", 14);
8001f8b2:	30 3b       	mov	r11,3
8001f8b4:	30 0c       	mov	r12,0
8001f8b6:	fe b0 c6 2b 	rcall	8001850c <screen_line>
8001f8ba:	cb eb       	rjmp	8001f836 <redraw_scenes+0x22>
    break;
8001f8bc:	30 e9       	mov	r9,14
8001f8be:	fe ca c7 d2 	sub	r10,pc,-14382
8001f8c2:	30 3b       	mov	r11,3
8001f8c4:	30 0c       	mov	r12,0
8001f8c6:	fe b0 c6 23 	rcall	8001850c <screen_line>
8001f8ca:	cb 6b       	rjmp	8001f836 <redraw_scenes+0x22>

8001f8cc <T.66>:
8001f8cc:	eb cd 40 f8 	pushm	r3-r7,lr
8001f8d0:	18 96       	mov	r6,r12
8001f8d2:	16 94       	mov	r4,r11
8001f8d4:	14 93       	mov	r3,r10
8001f8d6:	58 0c       	cp.w	r12,0
8001f8d8:	c3 95       	brlt	8001f94a <T.66+0x7e>
8001f8da:	58 f6       	cp.w	r6,15
8001f8dc:	f7 b6 09 10 	subgt	r6,16
8001f8e0:	08 9b       	mov	r11,r4
8001f8e2:	30 0c       	mov	r12,0
8001f8e4:	fe b0 c4 56 	rcall	80018190 <screen_blank_line>
8001f8e8:	e0 65 01 08 	mov	r5,264
  pline += len; 
}

// append int to line buffer (left justified, no bounds)
static inline void appendln_int_lj(int val) {
  pline += itoa_whole_lj(val, pline); 
8001f8ec:	e0 67 38 cc 	mov	r7,14540
  }
}

// write int to top of line buffer
static inline void println_int(int val, int pos) {
  pline = lineBuf + pos;
8001f8f0:	0c 9c       	mov	r12,r6
  pline += len; 
}

// append int to line buffer (left justified, no bounds)
static inline void appendln_int_lj(int val) {
  pline += itoa_whole_lj(val, pline); 
8001f8f2:	0e 9b       	mov	r11,r7
8001f8f4:	8b 07       	st.w	r5[0x0],r7
static inline void clearln(void) {
  memset(pline, ' ', CHAR_COLS);
}

static inline void endln(void) {
  *(pline) = 0;
8001f8f6:	fe b0 ee bf 	rcall	8001d674 <itoa_whole_lj>
  pline += len; 
}

// append int to line buffer (left justified, no bounds)
static inline void appendln_int_lj(int val) {
  pline += itoa_whole_lj(val, pline); 
8001f8fa:	30 08       	mov	r8,0
8001f8fc:	ee 0c 00 0c 	add	r12,r7,r12
static inline void clearln(void) {
  memset(pline, ' ', CHAR_COLS);
}

static inline void endln(void) {
  *(pline) = 0;
8001f900:	8b 0c       	st.w	r5[0x0],r12
  } 
  
  screen_blank_line(0, y);

  println_int((int)n, 0);
  endln(); screen_string(0, y, lineBuf, hl);
8001f902:	06 99       	mov	r9,r3
8001f904:	b8 88       	st.b	r12[0x0],r8
8001f906:	0e 9a       	mov	r10,r7
8001f908:	08 9b       	mov	r11,r4
8001f90a:	30 0c       	mov	r12,0
  println(preset_name(n), 0);
8001f90c:	fe b0 c5 fa 	rcall	80018500 <screen_string>
8001f910:	0c 9c       	mov	r12,r6


///// snprintf replacement
// write to top of line buffer
static inline void println(const char* str, int pos) {
  pline = lineBuf + pos;
8001f912:	fe b0 fb 4b 	rcall	8001efa8 <preset_name>

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001f916:	8b 07       	st.w	r5[0x0],r7
8001f918:	19 89       	ld.ub	r9,r12[0x0]
    endln(); screen_string(16, y, lineBuf, hl);
  }
}

// draw line of presets page
void draw_line_presets(s32 n, u16 num, u8 y, u8 hl) {
8001f91a:	58 09       	cp.w	r9,0
8001f91c:	c1 90       	breq	8001f94e <T.66+0x82>
8001f91e:	0e 98       	mov	r8,r7

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001f920:	2c e7       	sub	r7,-50
8001f922:	c0 38       	rjmp	8001f928 <T.66+0x5c>
    *pline++ = *str++;
8001f924:	0e 38       	cp.w	r8,r7
8001f926:	c0 60       	breq	8001f932 <T.66+0x66>

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001f928:	10 c9       	st.b	r8++,r9
8001f92a:	2f fc       	sub	r12,-1
8001f92c:	19 89       	ld.ub	r9,r12[0x0]
8001f92e:	58 09       	cp.w	r9,0
static inline void clearln(void) {
  memset(pline, ' ', CHAR_COLS);
}

static inline void endln(void) {
  *(pline) = 0;
8001f930:	cf a1       	brne	8001f924 <T.66+0x58>
  screen_blank_line(0, y);

  println_int((int)n, 0);
  endln(); screen_string(0, y, lineBuf, hl);
  println(preset_name(n), 0);
  endln(); screen_string(16, y, lineBuf, hl);
8001f932:	8b 08       	st.w	r5[0x0],r8
static inline void clearln(void) {
  memset(pline, ' ', CHAR_COLS);
}

static inline void endln(void) {
  *(pline) = 0;
8001f934:	30 0a       	mov	r10,0
  screen_blank_line(0, y);

  println_int((int)n, 0);
  endln(); screen_string(0, y, lineBuf, hl);
  println(preset_name(n), 0);
  endln(); screen_string(16, y, lineBuf, hl);
8001f936:	06 99       	mov	r9,r3
8001f938:	b0 8a       	st.b	r8[0x0],r10
8001f93a:	08 9b       	mov	r11,r4
8001f93c:	e0 6a 38 cc 	mov	r10,14540
}
8001f940:	31 0c       	mov	r12,16
8001f942:	fe b0 c5 df 	rcall	80018500 <screen_string>
}

// draw line of presets page
void draw_line_presets(s32 n, u16 num, u8 y, u8 hl) {
  if (n < 0) {
    n += num;
8001f946:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001f94a:	2f 06       	sub	r6,-16
8001f94c:	cc ab       	rjmp	8001f8e0 <T.66+0x14>
8001f94e:	0e 98       	mov	r8,r7
8001f950:	cf 2b       	rjmp	8001f934 <T.66+0x68>
8001f952:	d7 03       	nop

8001f954 <redraw_presets>:
8001f954:	eb cd 40 e0 	pushm	r5-r7,lr
8001f958:	e0 68 3f bc 	mov	r8,16316
8001f95c:	70 08       	ld.w	r8,r8[0x0]
8001f95e:	90 67       	ld.sh	r7,r8[0xc]
8001f960:	58 f7       	cp.w	r7,15
8001f962:	e0 8a 00 3d 	brle	8001f9dc <redraw_presets+0x88>
  s32 n, nCenter;         // which list entry
  const u16 num = NET_PRESETS_MAX; // how many 

  // print selection at center
  nCenter = curPage->selected;
  if (nCenter >= num) {
8001f966:	30 e5       	mov	r5,14
8001f968:	30 f6       	mov	r6,15
    nCenter = num;
  }
  n = nCenter;
  y = SCREEN_ROW_CENTER;
  // modes
  switch(curPage->mode) { 
8001f96a:	31 07       	mov	r7,16
8001f96c:	70 4b       	ld.w	r11,r8[0x10]
8001f96e:	58 2b       	cp.w	r11,2
8001f970:	c3 d0       	breq	8001f9ea <redraw_presets+0x96>
8001f972:	58 2b       	cp.w	r11,2
8001f974:	e0 8b 00 43 	brhi	8001f9fa <redraw_presets+0xa6>
8001f978:	58 1b       	cp.w	r11,1
  case eModeRecall:
    screen_line(0, y, "RECALL?", 14);
    break;
  case eModeNone:
  default:
    draw_line_presets(n, num, y, 15);  
8001f97a:	c5 30       	breq	8001fa20 <redraw_presets+0xcc>
8001f97c:	30 fa       	mov	r10,15
8001f97e:	30 3b       	mov	r11,3
8001f980:	0e 9c       	mov	r12,r7
8001f982:	ca 5f       	rcall	8001f8cc <T.66>
    break;
  }
  screen_hl_line(0, y, 1);
8001f984:	30 1a       	mov	r10,1
8001f986:	30 3b       	mov	r11,3
8001f988:	30 0c       	mov	r12,0
8001f98a:	fe b0 c3 57 	rcall	80018038 <screen_hl_line>
  // print lower entries
  while (y > 1) {
    n--;
    y--;
    draw_line_presets(n, num, y, 4);
8001f98e:	0c 9c       	mov	r12,r6
8001f990:	30 4a       	mov	r10,4
8001f992:	30 2b       	mov	r11,2
8001f994:	c9 cf       	rcall	8001f8cc <T.66>
8001f996:	0a 9c       	mov	r12,r5
8001f998:	30 4a       	mov	r10,4
8001f99a:	30 1b       	mov	r11,1
8001f99c:	c9 8f       	rcall	8001f8cc <T.66>
8001f99e:	30 4a       	mov	r10,4
8001f9a0:	2f f7       	sub	r7,-1
  y = SCREEN_ROW_CENTER;
  // print higher entries
  while (y < CHAR_ROWS_2) {
    n++;
    y++;
    draw_line_presets(n, num, y, 4);
8001f9a2:	14 9b       	mov	r11,r10
  // re-center
  n = nCenter;
  y = SCREEN_ROW_CENTER;
  // print higher entries
  while (y < CHAR_ROWS_2) {
    n++;
8001f9a4:	0e 9c       	mov	r12,r7
    y++;
    draw_line_presets(n, num, y, 4);
8001f9a6:	c9 3f       	rcall	8001f8cc <T.66>
8001f9a8:	30 4a       	mov	r10,4
8001f9aa:	2f f7       	sub	r7,-1
8001f9ac:	30 5b       	mov	r11,5
8001f9ae:	0e 9c       	mov	r12,r7
  // re-center
  n = nCenter;
  y = SCREEN_ROW_CENTER;
  // print higher entries
  while (y < CHAR_ROWS_2) {
    n++;
8001f9b0:	c8 ef       	rcall	8001f8cc <T.66>
    y++;
    draw_line_presets(n, num, y, 4);
8001f9b2:	ee cc ff ff 	sub	r12,r7,-1
8001f9b6:	30 4a       	mov	r10,4
8001f9b8:	30 6b       	mov	r11,6
8001f9ba:	c8 9f       	rcall	8001f8cc <T.66>
8001f9bc:	30 a9       	mov	r9,10
8001f9be:	fe ca c8 b2 	sub	r10,pc,-14158
8001f9c2:	30 7b       	mov	r11,7
8001f9c4:	30 0c       	mov	r12,0
  }
  // draw footer (function labels)
  screen_line(0, CHAR_ROWS_1, "CLEAR COPY STORE RECALL", 10);
8001f9c6:	fe b0 c5 a3 	rcall	8001850c <screen_line>
8001f9ca:	30 0b       	mov	r11,0
8001f9cc:	30 c9       	mov	r9,12
8001f9ce:	fe ca c9 92 	sub	r10,pc,-13934
  // draw the header
  screen_line(0, 0, "PRESETS", 12);
8001f9d2:	16 9c       	mov	r12,r11
8001f9d4:	fe b0 c5 9c 	rcall	8001850c <screen_line>
8001f9d8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001f9dc:	ee c6 00 01 	sub	r6,r7,1
}
8001f9e0:	70 4b       	ld.w	r11,r8[0x10]
  s32 n, nCenter;         // which list entry
  const u16 num = NET_PRESETS_MAX; // how many 

  // print selection at center
  nCenter = curPage->selected;
  if (nCenter >= num) {
8001f9e2:	ec c5 00 01 	sub	r5,r6,1
    nCenter = num;
  }
  n = nCenter;
  y = SCREEN_ROW_CENTER;
  // modes
  switch(curPage->mode) { 
8001f9e6:	58 2b       	cp.w	r11,2
  s32 n, nCenter;         // which list entry
  const u16 num = NET_PRESETS_MAX; // how many 

  // print selection at center
  nCenter = curPage->selected;
  if (nCenter >= num) {
8001f9e8:	cc 51       	brne	8001f972 <redraw_presets+0x1e>
8001f9ea:	30 e9       	mov	r9,14
    nCenter = num;
  }
  n = nCenter;
  y = SCREEN_ROW_CENTER;
  // modes
  switch(curPage->mode) { 
8001f9ec:	fe ca c8 f8 	sub	r10,pc,-14088
  case eModeClear:
    screen_line(0, y, "CLEAR?", 14);
    break;
  case eModeCopy:
    screen_line(0, y, "COPY?", 14);
8001f9f0:	30 3b       	mov	r11,3
8001f9f2:	30 0c       	mov	r12,0
8001f9f4:	fe b0 c5 8c 	rcall	8001850c <screen_line>
8001f9f8:	cc 6b       	rjmp	8001f984 <redraw_presets+0x30>
8001f9fa:	58 3b       	cp.w	r11,3
    break;
8001f9fc:	c0 b0       	breq	8001fa12 <redraw_presets+0xbe>
    nCenter = num;
  }
  n = nCenter;
  y = SCREEN_ROW_CENTER;
  // modes
  switch(curPage->mode) { 
8001f9fe:	58 4b       	cp.w	r11,4
8001fa00:	cb e1       	brne	8001f97c <redraw_presets+0x28>
8001fa02:	30 e9       	mov	r9,14
8001fa04:	fe ca c9 00 	sub	r10,pc,-14080
    break;
  case eModeStore:
    screen_line(0, y, "STORE?", 14);
    break;
  case eModeRecall:
    screen_line(0, y, "RECALL?", 14);
8001fa08:	30 3b       	mov	r11,3
8001fa0a:	30 0c       	mov	r12,0
8001fa0c:	fe b0 c5 80 	rcall	8001850c <screen_line>
8001fa10:	cb ab       	rjmp	8001f984 <redraw_presets+0x30>
    break;
8001fa12:	30 e9       	mov	r9,14
    break;
  case eModeCopy:
    screen_line(0, y, "COPY?", 14);
    break;
  case eModeStore:
    screen_line(0, y, "STORE?", 14);
8001fa14:	fe ca c9 18 	sub	r10,pc,-14056
8001fa18:	30 0c       	mov	r12,0
8001fa1a:	fe b0 c5 79 	rcall	8001850c <screen_line>
    break;
8001fa1e:	cb 3b       	rjmp	8001f984 <redraw_presets+0x30>
  n = nCenter;
  y = SCREEN_ROW_CENTER;
  // modes
  switch(curPage->mode) { 
  case eModeClear:
    screen_line(0, y, "CLEAR?", 14);
8001fa20:	30 e9       	mov	r9,14
8001fa22:	fe ca c9 36 	sub	r10,pc,-14026
8001fa26:	30 3b       	mov	r11,3
8001fa28:	30 0c       	mov	r12,0
8001fa2a:	fe b0 c5 71 	rcall	8001850c <screen_line>
    break;
8001fa2e:	ca bb       	rjmp	8001f984 <redraw_presets+0x30>

8001fa30 <draw_line_ops>:
8001fa30:	eb cd 40 f8 	pushm	r3-r7,lr
8001fa34:	18 96       	mov	r6,r12
8001fa36:	14 94       	mov	r4,r10
8001fa38:	12 93       	mov	r3,r9
8001fa3a:	58 0c       	cp.w	r12,0
8001fa3c:	c3 b5       	brlt	8001fab2 <draw_line_ops+0x82>
8001fa3e:	5c 7b       	castu.h	r11
8001fa40:	16 36       	cp.w	r6,r11
8001fa42:	ed db e4 16 	subge	r6,r6,r11
8001fa46:	08 9b       	mov	r11,r4
8001fa48:	30 0c       	mov	r12,0
8001fa4a:	fe b0 c3 a3 	rcall	80018190 <screen_blank_line>
8001fa4e:	e0 65 01 08 	mov	r5,264
8001fa52:	e0 67 38 cc 	mov	r7,14540
8001fa56:	0c 9c       	mov	r12,r6
  pline += len; 
}

// append int to line buffer (left justified, no bounds)
static inline void appendln_int_lj(int val) {
  pline += itoa_whole_lj(val, pline); 
8001fa58:	0e 9b       	mov	r11,r7
8001fa5a:	8b 07       	st.w	r5[0x0],r7
static inline void clearln(void) {
  memset(pline, ' ', CHAR_COLS);
}

static inline void endln(void) {
  *(pline) = 0;
8001fa5c:	fe b0 ee 0c 	rcall	8001d674 <itoa_whole_lj>
  pline += len; 
}

// append int to line buffer (left justified, no bounds)
static inline void appendln_int_lj(int val) {
  pline += itoa_whole_lj(val, pline); 
8001fa60:	30 08       	mov	r8,0
8001fa62:	ee 0c 00 0c 	add	r12,r7,r12
  } 

  // clearln();
  screen_blank_line(0, y);
  println_int(n, 0); endln();
  screen_string(0, y, lineBuf, hl);
8001fa66:	8b 0c       	st.w	r5[0x0],r12
8001fa68:	b8 88       	st.b	r12[0x0],r8
8001fa6a:	06 99       	mov	r9,r3
8001fa6c:	0e 9a       	mov	r10,r7
8001fa6e:	08 9b       	mov	r11,r4
8001fa70:	30 0c       	mov	r12,0
  //  clearln();
  println(net_op_name(n), 0); endln();
8001fa72:	fe b0 c5 47 	rcall	80018500 <screen_string>
8001fa76:	f9 d6 b0 10 	bfexts	r12,r6,0x0,0x10


///// snprintf replacement
// write to top of line buffer
static inline void println(const char* str, int pos) {
  pline = lineBuf + pos;
8001fa7a:	fe b0 f5 e7 	rcall	8001e648 <net_op_name>

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001fa7e:	8b 07       	st.w	r5[0x0],r7
8001fa80:	19 88       	ld.ub	r8,r12[0x0]

/////---------------------------
/////  line redraws

// draw line of ops page
static void draw_line_ops(s32 n, u16 num, u8 y, u8 hl) {
8001fa82:	58 08       	cp.w	r8,0
8001fa84:	c0 c0       	breq	8001fa9c <draw_line_ops+0x6c>
8001fa86:	f8 c9 ff ce 	sub	r9,r12,-50

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001fa8a:	c0 38       	rjmp	8001fa90 <draw_line_ops+0x60>
    *pline++ = *str++;
8001fa8c:	12 3c       	cp.w	r12,r9
8001fa8e:	c0 60       	breq	8001fa9a <draw_line_ops+0x6a>

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001fa90:	0e c8       	st.b	r7++,r8
8001fa92:	2f fc       	sub	r12,-1
8001fa94:	19 88       	ld.ub	r8,r12[0x0]
8001fa96:	58 08       	cp.w	r8,0
static inline void clearln(void) {
  memset(pline, ' ', CHAR_COLS);
}

static inline void endln(void) {
  *(pline) = 0;
8001fa98:	cf a1       	brne	8001fa8c <draw_line_ops+0x5c>
  screen_blank_line(0, y);
  println_int(n, 0); endln();
  screen_string(0, y, lineBuf, hl);
  //  clearln();
  println(net_op_name(n), 0); endln();
  screen_line(16, y, lineBuf, hl);
8001fa9a:	8b 07       	st.w	r5[0x0],r7
8001fa9c:	30 08       	mov	r8,0
static inline void clearln(void) {
  memset(pline, ' ', CHAR_COLS);
}

static inline void endln(void) {
  *(pline) = 0;
8001fa9e:	06 99       	mov	r9,r3
  screen_blank_line(0, y);
  println_int(n, 0); endln();
  screen_string(0, y, lineBuf, hl);
  //  clearln();
  println(net_op_name(n), 0); endln();
  screen_line(16, y, lineBuf, hl);
8001faa0:	08 9b       	mov	r11,r4
8001faa2:	ae 88       	st.b	r7[0x0],r8
8001faa4:	e0 6a 38 cc 	mov	r10,14540
}
8001faa8:	31 0c       	mov	r12,16
8001faaa:	fe b0 c5 31 	rcall	8001850c <screen_line>

// draw line of ops page
static void draw_line_ops(s32 n, u16 num, u8 y, u8 hl) {
  // wrap
  if (n < 0) {
    n += num;
8001faae:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8001fab2:	5c 7b       	castu.h	r11
8001fab4:	16 06       	add	r6,r11
8001fab6:	cc 8b       	rjmp	8001fa46 <draw_line_ops+0x16>

8001fab8 <redraw_ops>:
8001fab8:	eb cd 40 e0 	pushm	r5-r7,lr
8001fabc:	fe b0 f5 9e 	rcall	8001e5f8 <net_num_ops>
8001fac0:	30 0b       	mov	r11,0
8001fac2:	ef dc b0 10 	bfexts	r7,r12,0x0,0x10
8001fac6:	30 f9       	mov	r9,15
8001fac8:	fe ca c9 a4 	sub	r10,pc,-13916
8001facc:	16 9c       	mov	r12,r11
8001face:	fe b0 c5 1f 	rcall	8001850c <screen_line>
  // total count of ops, including system-controlled
  const u16 num = net_num_ops();
  // draw the header
  screen_line(0, 0, "OPERATORS", 15);
  // print selection at center
  nCenter = curPage->selected;
8001fad2:	e0 68 3f bc 	mov	r8,16316
8001fad6:	70 08       	ld.w	r8,r8[0x0]
  if (nCenter >= num) {
    nCenter = num;
  }
  n = nCenter;
  y = SCREEN_ROW_CENTER;
  draw_line_ops(n, num, y, 15);
8001fad8:	5c 77       	castu.h	r7
  const u16 num = net_num_ops();
  // draw the header
  screen_line(0, 0, "OPERATORS", 15);
  // print selection at center
  nCenter = curPage->selected;
  if (nCenter >= num) {
8001fada:	90 66       	ld.sh	r6,r8[0xc]
8001fadc:	30 f9       	mov	r9,15
    nCenter = num;
  }
  n = nCenter;
  y = SCREEN_ROW_CENTER;
  draw_line_ops(n, num, y, 15);
8001fade:	ee 06 0d 46 	min	r6,r7,r6
8001fae2:	0e 9b       	mov	r11,r7
8001fae4:	0c 9c       	mov	r12,r6
8001fae6:	30 3a       	mov	r10,3
  screen_hl_line(0, y, 1);
8001fae8:	ca 4f       	rcall	8001fa30 <draw_line_ops>
8001faea:	30 1a       	mov	r10,1
8001faec:	30 3b       	mov	r11,3
8001faee:	30 0c       	mov	r12,0
8001faf0:	fe b0 c2 a4 	rcall	80018038 <screen_hl_line>
  // print lower entries
  while (y > 1) {
    draw_line_ops(--n, num, --y, 4);
8001faf4:	ec c5 00 01 	sub	r5,r6,1
8001faf8:	0e 9b       	mov	r11,r7
8001fafa:	30 49       	mov	r9,4
8001fafc:	30 2a       	mov	r10,2
8001fafe:	0a 9c       	mov	r12,r5
8001fb00:	c9 8f       	rcall	8001fa30 <draw_line_ops>
8001fb02:	0e 9b       	mov	r11,r7
8001fb04:	ea cc 00 01 	sub	r12,r5,1
8001fb08:	30 49       	mov	r9,4
8001fb0a:	30 1a       	mov	r10,1
8001fb0c:	c9 2f       	rcall	8001fa30 <draw_line_ops>
8001fb0e:	30 49       	mov	r9,4
  // re-center
  n = nCenter;
  y = SCREEN_ROW_CENTER;
  // print higher entries
  while (y < CHAR_ROWS_2) {
    draw_line_ops(++n, num, ++y, 4);
8001fb10:	0e 9b       	mov	r11,r7
8001fb12:	12 9a       	mov	r10,r9
8001fb14:	2f f6       	sub	r6,-1
8001fb16:	0c 9c       	mov	r12,r6
8001fb18:	c8 cf       	rcall	8001fa30 <draw_line_ops>
8001fb1a:	0e 9b       	mov	r11,r7
8001fb1c:	2f f6       	sub	r6,-1
8001fb1e:	30 49       	mov	r9,4
8001fb20:	30 5a       	mov	r10,5
8001fb22:	0c 9c       	mov	r12,r6
8001fb24:	c8 6f       	rcall	8001fa30 <draw_line_ops>
8001fb26:	0e 9b       	mov	r11,r7
8001fb28:	30 49       	mov	r9,4
8001fb2a:	30 6a       	mov	r10,6
8001fb2c:	ec cc ff ff 	sub	r12,r6,-1
8001fb30:	c8 0f       	rcall	8001fa30 <draw_line_ops>
8001fb32:	30 6b       	mov	r11,6
8001fb34:	30 0c       	mov	r12,0
8001fb36:	fe b0 c3 2d 	rcall	80018190 <screen_blank_line>
  }
  // draw footer 
  // (new op type)
  screen_blank_line(0, CHAR_ROWS_2);
8001fb3a:	fe cb ca 0a 	sub	r11,pc,-13814
8001fb3e:	e0 6c 38 cc 	mov	r12,14540
// dsp
static void draw_line_dsp(s32 n, u16 num, u8 y, u8 hl);

//==================================================
//==== redraw ops page
void redraw_ops(void) {
8001fb42:	16 99       	mov	r9,r11


///// snprintf replacement
// write to top of line buffer
static inline void println(const char* str, int pos) {
  pline = lineBuf + pos;
8001fb44:	e0 67 01 08 	mov	r7,264
8001fb48:	2c eb       	sub	r11,-50
// dsp
static void draw_line_dsp(s32 n, u16 num, u8 y, u8 hl);

//==================================================
//==== redraw ops page
void redraw_ops(void) {
8001fb4a:	18 98       	mov	r8,r12
8001fb4c:	32 0a       	mov	r10,32
8001fb4e:	c0 38       	rjmp	8001fb54 <redraw_ops+0x9c>
8001fb50:	16 39       	cp.w	r9,r11

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001fb52:	c0 60       	breq	8001fb5e <redraw_ops+0xa6>
8001fb54:	10 ca       	st.b	r8++,r10
    *pline++ = *str++;
8001fb56:	2f f9       	sub	r9,-1
8001fb58:	13 8a       	ld.ub	r10,r9[0x0]

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001fb5a:	58 0a       	cp.w	r10,0
8001fb5c:	cf a1       	brne	8001fb50 <redraw_ops+0x98>
8001fb5e:	e0 69 3f c4 	mov	r9,16324
  }
  // draw footer 
  // (new op type)
  screen_blank_line(0, CHAR_ROWS_2);
  println(" + ", 0);
  appendln(op_registry[userOpTypes[newOpType]].name);
8001fb62:	72 0a       	ld.w	r10,r9[0x0]
8001fb64:	fe c9 cb d8 	sub	r9,pc,-13352
8001fb68:	8f 08       	st.w	r7[0x0],r8
8001fb6a:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
8001fb6e:	fe c9 ca ca 	sub	r9,pc,-13622

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001fb72:	f2 0a 03 3a 	ld.w	r10,r9[r10<<0x3]
8001fb76:	15 89       	ld.ub	r9,r10[0x0]
8001fb78:	58 09       	cp.w	r9,0
8001fb7a:	c1 00       	breq	8001fb9a <redraw_ops+0xe2>
8001fb7c:	f8 cb ff cf 	sub	r11,r12,-49
8001fb80:	16 38       	cp.w	r8,r11
8001fb82:	e0 88 00 06 	brls	8001fb8e <redraw_ops+0xd6>
8001fb86:	c0 a8       	rjmp	8001fb9a <redraw_ops+0xe2>
8001fb88:	16 38       	cp.w	r8,r11
    *pline++ = *str++;
8001fb8a:	e0 8b 00 07 	brhi	8001fb98 <redraw_ops+0xe0>

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001fb8e:	10 c9       	st.b	r8++,r9
8001fb90:	2f fa       	sub	r10,-1
8001fb92:	15 89       	ld.ub	r9,r10[0x0]
8001fb94:	58 09       	cp.w	r9,0
static inline void clearln(void) {
  memset(pline, ' ', CHAR_COLS);
}

static inline void endln(void) {
  *(pline) = 0;
8001fb96:	cf 91       	brne	8001fb88 <redraw_ops+0xd0>
  // draw footer 
  // (new op type)
  screen_blank_line(0, CHAR_ROWS_2);
  println(" + ", 0);
  appendln(op_registry[userOpTypes[newOpType]].name);
  endln(); screen_line(0, CHAR_ROWS_2, lineBuf, 8);
8001fb98:	8f 08       	st.w	r7[0x0],r8
static inline void clearln(void) {
  memset(pline, ' ', CHAR_COLS);
}

static inline void endln(void) {
  *(pline) = 0;
8001fb9a:	30 0c       	mov	r12,0
  // draw footer 
  // (new op type)
  screen_blank_line(0, CHAR_ROWS_2);
  println(" + ", 0);
  appendln(op_registry[userOpTypes[newOpType]].name);
  endln(); screen_line(0, CHAR_ROWS_2, lineBuf, 8);
8001fb9c:	30 89       	mov	r9,8
8001fb9e:	b0 8c       	st.b	r8[0x0],r12
8001fba0:	e0 6a 38 cc 	mov	r10,14540
8001fba4:	30 6b       	mov	r11,6
  // (function labels)
  // don't allow deletion of system operators
  if (net_op_status(net_num_ops() - 1) == eUserOp) {
8001fba6:	30 0c       	mov	r12,0
8001fba8:	fe b0 c4 b2 	rcall	8001850c <screen_line>
8001fbac:	fe b0 f5 26 	rcall	8001e5f8 <net_num_ops>
8001fbb0:	20 1c       	sub	r12,1
8001fbb2:	5c 7c       	castu.h	r12
    screen_line(0, CHAR_ROWS_1, "PARAM ROUTE CREATE DELETE", 3);
  } else  { 
    screen_line(0, CHAR_ROWS_1, "PARAM ROUTE CREATE", 3);
8001fbb4:	fe b0 f5 d4 	rcall	8001e75c <net_op_status>
8001fbb8:	c0 a0       	breq	8001fbcc <redraw_ops+0x114>
8001fbba:	30 39       	mov	r9,3
8001fbbc:	fe ca ca 6c 	sub	r10,pc,-13716
8001fbc0:	30 7b       	mov	r11,7
8001fbc2:	30 0c       	mov	r12,0
  appendln(op_registry[userOpTypes[newOpType]].name);
  endln(); screen_line(0, CHAR_ROWS_2, lineBuf, 8);
  // (function labels)
  // don't allow deletion of system operators
  if (net_op_status(net_num_ops() - 1) == eUserOp) {
    screen_line(0, CHAR_ROWS_1, "PARAM ROUTE CREATE DELETE", 3);
8001fbc4:	fe b0 c4 a4 	rcall	8001850c <screen_line>
8001fbc8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001fbcc:	30 39       	mov	r9,3
8001fbce:	fe ca ca 9a 	sub	r10,pc,-13670
8001fbd2:	30 7b       	mov	r11,7
8001fbd4:	fe b0 c4 9c 	rcall	8001850c <screen_line>
8001fbd8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8001fbdc <draw_line_outs>:
8001fbdc:	eb cd 40 fe 	pushm	r1-r7,lr
8001fbe0:	14 94       	mov	r4,r10
8001fbe2:	12 92       	mov	r2,r9
8001fbe4:	58 0c       	cp.w	r12,0
8001fbe6:	e0 85 01 19 	brlt	8001fe18 <draw_line_outs+0x23c>
8001fbea:	5c 7b       	castu.h	r11
8001fbec:	16 3c       	cp.w	r12,r11
8001fbee:	f9 db e4 1c 	subge	r12,r12,r11
8001fbf2:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8001fbf6:	0a 9c       	mov	r12,r5
8001fbf8:	fe b0 f5 a6 	rcall	8001e744 <net_get_target>
8001fbfc:	08 9b       	mov	r11,r4
8001fbfe:	18 91       	mov	r1,r12
8001fc00:	30 03       	mov	r3,0
8001fc02:	30 0c       	mov	r12,0
8001fc04:	fe b0 c2 c6 	rcall	80018190 <screen_blank_line>
8001fc08:	e6 01 19 00 	cp.h	r1,r3
8001fc0c:	e0 85 00 b5 	brlt	8001fd76 <draw_line_outs+0x19a>
8001fc10:	0a 9c       	mov	r12,r5
8001fc12:	fe b0 f5 3d 	rcall	8001e68c <net_out_op_idx>
  }
}

// write int to top of line buffer
static inline void println_int(int val, int pos) {
  pline = lineBuf + pos;
8001fc16:	e0 66 38 cc 	mov	r6,14540
8001fc1a:	e0 67 01 08 	mov	r7,264
  pline += len; 
}

// append int to line buffer (left justified, no bounds)
static inline void appendln_int_lj(int val) {
  pline += itoa_whole_lj(val, pline); 
8001fc1e:	0c 9b       	mov	r11,r6
  }
}

// write int to top of line buffer
static inline void println_int(int val, int pos) {
  pline = lineBuf + pos;
8001fc20:	8f 06       	st.w	r7[0x0],r6
  pline += len; 
}

// append int to line buffer (left justified, no bounds)
static inline void appendln_int_lj(int val) {
  pline += itoa_whole_lj(val, pline); 
8001fc22:	fe b0 ed 29 	rcall	8001d674 <itoa_whole_lj>
8001fc26:	ec 0c 00 0c 	add	r12,r6,r12
static inline void clearln(void) {
  memset(pline, ' ', CHAR_COLS);
}

static inline void endln(void) {
  *(pline) = 0;
8001fc2a:	b8 83       	st.b	r12[0x0],r3
  target = net_get_target(n);
  //  if (net_get_out_preset(n)) { pch = '*'; } else { pch = '.'; }
  screen_blank_line(0, y);
  if (target >= 0) {
    println_int(net_out_op_idx(n), 0);
    endln(); screen_string(0, y, lineBuf, hl);
8001fc2c:	04 99       	mov	r9,r2
8001fc2e:	0c 9a       	mov	r10,r6
8001fc30:	08 9b       	mov	r11,r4
  pline += len; 
}

// append int to line buffer (left justified, no bounds)
static inline void appendln_int_lj(int val) {
  pline += itoa_whole_lj(val, pline); 
8001fc32:	8f 0c       	st.w	r7[0x0],r12
  target = net_get_target(n);
  //  if (net_get_out_preset(n)) { pch = '*'; } else { pch = '.'; }
  screen_blank_line(0, y);
  if (target >= 0) {
    println_int(net_out_op_idx(n), 0);
    endln(); screen_string(0, y, lineBuf, hl);
8001fc34:	30 0c       	mov	r12,0
8001fc36:	fe b0 c4 65 	rcall	80018500 <screen_string>
    println( net_op_name(net_out_op_idx(n)) , 0);
8001fc3a:	0a 9c       	mov	r12,r5
8001fc3c:	fe b0 f5 28 	rcall	8001e68c <net_out_op_idx>
8001fc40:	fe b0 f5 04 	rcall	8001e648 <net_op_name>


///// snprintf replacement
// write to top of line buffer
static inline void println(const char* str, int pos) {
  pline = lineBuf + pos;
8001fc44:	8f 06       	st.w	r7[0x0],r6

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001fc46:	19 89       	ld.ub	r9,r12[0x0]
8001fc48:	58 09       	cp.w	r9,0
8001fc4a:	e0 80 00 ec 	breq	8001fe22 <draw_line_outs+0x246>
  //  print_dbg("\r\n");

}

// draw line of outputs page
static void draw_line_outs(s32 n, u16 num, u8 y, u8 hl) {
8001fc4e:	ec ca ff ce 	sub	r10,r6,-50
8001fc52:	0c 98       	mov	r8,r6
8001fc54:	c0 38       	rjmp	8001fc5a <draw_line_outs+0x7e>

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001fc56:	14 38       	cp.w	r8,r10
8001fc58:	c0 60       	breq	8001fc64 <draw_line_outs+0x88>
    *pline++ = *str++;
8001fc5a:	10 c9       	st.b	r8++,r9
8001fc5c:	2f fc       	sub	r12,-1

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001fc5e:	19 89       	ld.ub	r9,r12[0x0]
8001fc60:	58 09       	cp.w	r9,0
8001fc62:	cf a1       	brne	8001fc56 <draw_line_outs+0x7a>
8001fc64:	8f 08       	st.w	r7[0x0],r8
8001fc66:	f0 c9 ff ff 	sub	r9,r8,-1
  pline += itoa_whole_lj(val, pline); 
}

// append char to line buffer
static inline void appendln_char(char c) {  
  *pline++ = c;
8001fc6a:	8f 09       	st.w	r7[0x0],r9
8001fc6c:	32 f9       	mov	r9,47
  if (target >= 0) {
    println_int(net_out_op_idx(n), 0);
    endln(); screen_string(0, y, lineBuf, hl);
    println( net_op_name(net_out_op_idx(n)) , 0);
    appendln_char('/');
    appendln( net_out_name(n) );
8001fc6e:	0a 9c       	mov	r12,r5
  pline += itoa_whole_lj(val, pline); 
}

// append char to line buffer
static inline void appendln_char(char c) {  
  *pline++ = c;
8001fc70:	b0 89       	st.b	r8[0x0],r9
8001fc72:	e0 65 01 08 	mov	r5,264
  if (target >= 0) {
    println_int(net_out_op_idx(n), 0);
    endln(); screen_string(0, y, lineBuf, hl);
    println( net_op_name(net_out_op_idx(n)) , 0);
    appendln_char('/');
    appendln( net_out_name(n) );
8001fc76:	fe b0 f6 93 	rcall	8001e99c <net_out_name>

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001fc7a:	19 89       	ld.ub	r9,r12[0x0]
8001fc7c:	58 09       	cp.w	r9,0
8001fc7e:	e0 80 00 d0 	breq	8001fe1e <draw_line_outs+0x242>
8001fc82:	6a 08       	ld.w	r8,r5[0x0]
8001fc84:	ec ca ff cf 	sub	r10,r6,-49
8001fc88:	14 38       	cp.w	r8,r10
8001fc8a:	e0 88 00 06 	brls	8001fc96 <draw_line_outs+0xba>
8001fc8e:	c0 a8       	rjmp	8001fca2 <draw_line_outs+0xc6>
8001fc90:	14 38       	cp.w	r8,r10
8001fc92:	e0 8b 00 07 	brhi	8001fca0 <draw_line_outs+0xc4>
    *pline++ = *str++;
8001fc96:	10 c9       	st.b	r8++,r9

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001fc98:	2f fc       	sub	r12,-1
8001fc9a:	19 89       	ld.ub	r9,r12[0x0]
8001fc9c:	58 09       	cp.w	r9,0
8001fc9e:	cf 91       	brne	8001fc90 <draw_line_outs+0xb4>
static inline void clearln(void) {
  memset(pline, ' ', CHAR_COLS);
}

static inline void endln(void) {
  *(pline) = 0;
8001fca0:	8f 08       	st.w	r7[0x0],r8
    println_int(net_out_op_idx(n), 0);
    endln(); screen_string(0, y, lineBuf, hl);
    println( net_op_name(net_out_op_idx(n)) , 0);
    appendln_char('/');
    appendln( net_out_name(n) );
    endln(); screen_string(16, y, lineBuf, hl);
8001fca2:	30 09       	mov	r9,0
static inline void clearln(void) {
  memset(pline, ' ', CHAR_COLS);
}

static inline void endln(void) {
  *(pline) = 0;
8001fca4:	e0 6a 38 cc 	mov	r10,14540
    println_int(net_out_op_idx(n), 0);
    endln(); screen_string(0, y, lineBuf, hl);
    println( net_op_name(net_out_op_idx(n)) , 0);
    appendln_char('/');
    appendln( net_out_name(n) );
    endln(); screen_string(16, y, lineBuf, hl);
8001fca8:	b0 89       	st.b	r8[0x0],r9
8001fcaa:	08 9b       	mov	r11,r4
8001fcac:	04 99       	mov	r9,r2
8001fcae:	31 0c       	mov	r12,16


///// snprintf replacement
// write to top of line buffer
static inline void println(const char* str, int pos) {
  pline = lineBuf + pos;
8001fcb0:	fe b0 c4 28 	rcall	80018500 <screen_string>
  //  print_dbg("\r\n");

}

// draw line of outputs page
static void draw_line_outs(s32 n, u16 num, u8 y, u8 hl) {
8001fcb4:	8f 06       	st.w	r7[0x0],r6
// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
    *pline++ = *str++;
8001fcb6:	32 d9       	mov	r9,45
  //  print_dbg("\r\n");

}

// draw line of outputs page
static void draw_line_outs(s32 n, u16 num, u8 y, u8 hl) {
8001fcb8:	0c 9a       	mov	r10,r6
8001fcba:	14 c9       	st.b	r10++,r9
8001fcbc:	fe cb cb 58 	sub	r11,pc,-13480

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001fcc0:	16 98       	mov	r8,r11
8001fcc2:	2c eb       	sub	r11,-50
8001fcc4:	2f f8       	sub	r8,-1
8001fcc6:	11 89       	ld.ub	r9,r8[0x0]
8001fcc8:	58 09       	cp.w	r9,0
    *pline++ = *str++;
8001fcca:	c0 80       	breq	8001fcda <draw_line_outs+0xfe>
8001fccc:	16 38       	cp.w	r8,r11

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001fcce:	c0 60       	breq	8001fcda <draw_line_outs+0xfe>
8001fcd0:	14 c9       	st.b	r10++,r9
8001fcd2:	2f f8       	sub	r8,-1
8001fcd4:	11 89       	ld.ub	r9,r8[0x0]
    println( net_op_name(net_out_op_idx(n)) , 0);
    appendln_char('/');
    appendln( net_out_name(n) );
    endln(); screen_string(16, y, lineBuf, hl);
    println("-> ", 0);
    appendln_int_lj( net_in_op_idx(target) );
8001fcd6:	58 09       	cp.w	r9,0
8001fcd8:	cf a1       	brne	8001fccc <draw_line_outs+0xf0>
8001fcda:	8f 0a       	st.w	r7[0x0],r10
8001fcdc:	5c 71       	castu.h	r1
  pline += len; 
}

// append int to line buffer (left justified, no bounds)
static inline void appendln_int_lj(int val) {
  pline += itoa_whole_lj(val, pline); 
8001fcde:	02 9c       	mov	r12,r1
8001fce0:	fe b0 f4 c2 	rcall	8001e664 <net_in_op_idx>
8001fce4:	6e 05       	ld.w	r5,r7[0x0]
}

// append char to line buffer
static inline void appendln_char(char c) {  
  *pline++ = c;
8001fce6:	0a 9b       	mov	r11,r5
8001fce8:	fe b0 ec c6 	rcall	8001d674 <itoa_whole_lj>
8001fcec:	32 e8       	mov	r8,46
8001fcee:	ea 0c 00 0c 	add	r12,r5,r12
    appendln( net_out_name(n) );
    endln(); screen_string(16, y, lineBuf, hl);
    println("-> ", 0);
    appendln_int_lj( net_in_op_idx(target) );
    appendln_char('.');
    appendln( net_op_name(net_in_op_idx(target)) );
8001fcf2:	18 c8       	st.b	r12++,r8
8001fcf4:	8f 0c       	st.w	r7[0x0],r12
  pline += len; 
}

// append int to line buffer (left justified, no bounds)
static inline void appendln_int_lj(int val) {
  pline += itoa_whole_lj(val, pline); 
8001fcf6:	02 9c       	mov	r12,r1
    appendln( net_out_name(n) );
    endln(); screen_string(16, y, lineBuf, hl);
    println("-> ", 0);
    appendln_int_lj( net_in_op_idx(target) );
    appendln_char('.');
    appendln( net_op_name(net_in_op_idx(target)) );
8001fcf8:	fe b0 f4 b6 	rcall	8001e664 <net_in_op_idx>

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001fcfc:	e0 65 01 08 	mov	r5,264
8001fd00:	fe b0 f4 a4 	rcall	8001e648 <net_op_name>
8001fd04:	19 89       	ld.ub	r9,r12[0x0]
8001fd06:	58 09       	cp.w	r9,0
8001fd08:	e0 80 00 93 	breq	8001fe2e <draw_line_outs+0x252>
8001fd0c:	6a 08       	ld.w	r8,r5[0x0]
8001fd0e:	ec ca ff cf 	sub	r10,r6,-49
8001fd12:	14 38       	cp.w	r8,r10
8001fd14:	e0 88 00 06 	brls	8001fd20 <draw_line_outs+0x144>
    *pline++ = *str++;
8001fd18:	c0 a8       	rjmp	8001fd2c <draw_line_outs+0x150>
8001fd1a:	14 38       	cp.w	r8,r10

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001fd1c:	e0 8b 00 07 	brhi	8001fd2a <draw_line_outs+0x14e>
8001fd20:	10 c9       	st.b	r8++,r9
8001fd22:	2f fc       	sub	r12,-1
  pline += itoa_whole_lj(val, pline); 
}

// append char to line buffer
static inline void appendln_char(char c) {  
  *pline++ = c;
8001fd24:	19 89       	ld.ub	r9,r12[0x0]
    println("-> ", 0);
    appendln_int_lj( net_in_op_idx(target) );
    appendln_char('.');
    appendln( net_op_name(net_in_op_idx(target)) );
    appendln_char('/');
    appendln( net_in_name(target) );
8001fd26:	58 09       	cp.w	r9,0
  pline += itoa_whole_lj(val, pline); 
}

// append char to line buffer
static inline void appendln_char(char c) {  
  *pline++ = c;
8001fd28:	cf 91       	brne	8001fd1a <draw_line_outs+0x13e>
8001fd2a:	8f 08       	st.w	r7[0x0],r8
8001fd2c:	32 f9       	mov	r9,47
    println("-> ", 0);
    appendln_int_lj( net_in_op_idx(target) );
    appendln_char('.');
    appendln( net_op_name(net_in_op_idx(target)) );
    appendln_char('/');
    appendln( net_in_name(target) );
8001fd2e:	02 9c       	mov	r12,r1
8001fd30:	10 c9       	st.b	r8++,r9

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001fd32:	e0 65 01 08 	mov	r5,264
8001fd36:	8f 08       	st.w	r7[0x0],r8
8001fd38:	fe b0 f6 48 	rcall	8001e9c8 <net_in_name>
8001fd3c:	19 89       	ld.ub	r9,r12[0x0]
8001fd3e:	58 09       	cp.w	r9,0
8001fd40:	c7 50       	breq	8001fe2a <draw_line_outs+0x24e>
8001fd42:	6a 08       	ld.w	r8,r5[0x0]
8001fd44:	2c f6       	sub	r6,-49
8001fd46:	0c 38       	cp.w	r8,r6
8001fd48:	e0 88 00 06 	brls	8001fd54 <draw_line_outs+0x178>
    *pline++ = *str++;
8001fd4c:	c0 a8       	rjmp	8001fd60 <draw_line_outs+0x184>

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001fd4e:	0c 38       	cp.w	r8,r6
8001fd50:	e0 8b 00 07 	brhi	8001fd5e <draw_line_outs+0x182>
8001fd54:	10 c9       	st.b	r8++,r9
static inline void clearln(void) {
  memset(pline, ' ', CHAR_COLS);
}

static inline void endln(void) {
  *(pline) = 0;
8001fd56:	2f fc       	sub	r12,-1
    appendln_int_lj( net_in_op_idx(target) );
    appendln_char('.');
    appendln( net_op_name(net_in_op_idx(target)) );
    appendln_char('/');
    appendln( net_in_name(target) );
    endln(); screen_string(60, y, lineBuf, hl);
8001fd58:	19 89       	ld.ub	r9,r12[0x0]
static inline void clearln(void) {
  memset(pline, ' ', CHAR_COLS);
}

static inline void endln(void) {
  *(pline) = 0;
8001fd5a:	58 09       	cp.w	r9,0
    appendln_int_lj( net_in_op_idx(target) );
    appendln_char('.');
    appendln( net_op_name(net_in_op_idx(target)) );
    appendln_char('/');
    appendln( net_in_name(target) );
    endln(); screen_string(60, y, lineBuf, hl);
8001fd5c:	cf 91       	brne	8001fd4e <draw_line_outs+0x172>
8001fd5e:	8f 08       	st.w	r7[0x0],r8
8001fd60:	30 0a       	mov	r10,0
8001fd62:	04 99       	mov	r9,r2
8001fd64:	b0 8a       	st.b	r8[0x0],r10
8001fd66:	08 9b       	mov	r11,r4
8001fd68:	e0 6a 38 cc 	mov	r10,14540
  } else {
    println_int(net_out_op_idx(n), 0);
8001fd6c:	33 cc       	mov	r12,60
8001fd6e:	fe b0 c3 c9 	rcall	80018500 <screen_string>
  }
}

// write int to top of line buffer
static inline void println_int(int val, int pos) {
  pline = lineBuf + pos;
8001fd72:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
8001fd76:	0a 9c       	mov	r12,r5
  pline += len; 
}

// append int to line buffer (left justified, no bounds)
static inline void appendln_int_lj(int val) {
  pline += itoa_whole_lj(val, pline); 
8001fd78:	fe b0 f4 8a 	rcall	8001e68c <net_out_op_idx>
8001fd7c:	e0 66 38 cc 	mov	r6,14540
static inline void clearln(void) {
  memset(pline, ' ', CHAR_COLS);
}

static inline void endln(void) {
  *(pline) = 0;
8001fd80:	e0 67 01 08 	mov	r7,264
    appendln_char('/');
    appendln( net_in_name(target) );
    endln(); screen_string(60, y, lineBuf, hl);
  } else {
    println_int(net_out_op_idx(n), 0);
    endln(); screen_string(0, y, lineBuf, hl);
8001fd84:	0c 9b       	mov	r11,r6
8001fd86:	8f 06       	st.w	r7[0x0],r6
  pline += len; 
}

// append int to line buffer (left justified, no bounds)
static inline void appendln_int_lj(int val) {
  pline += itoa_whole_lj(val, pline); 
8001fd88:	fe b0 ec 76 	rcall	8001d674 <itoa_whole_lj>
    appendln_char('/');
    appendln( net_in_name(target) );
    endln(); screen_string(60, y, lineBuf, hl);
  } else {
    println_int(net_out_op_idx(n), 0);
    endln(); screen_string(0, y, lineBuf, hl);
8001fd8c:	ec 0c 00 0c 	add	r12,r6,r12
    println( net_op_name(net_out_op_idx(n)) , 0);
8001fd90:	b8 83       	st.b	r12[0x0],r3
8001fd92:	04 99       	mov	r9,r2
8001fd94:	0c 9a       	mov	r10,r6
8001fd96:	08 9b       	mov	r11,r4
8001fd98:	8f 0c       	st.w	r7[0x0],r12


///// snprintf replacement
// write to top of line buffer
static inline void println(const char* str, int pos) {
  pline = lineBuf + pos;
8001fd9a:	30 0c       	mov	r12,0

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001fd9c:	fe b0 c3 b2 	rcall	80018500 <screen_string>
8001fda0:	0a 9c       	mov	r12,r5
  //  print_dbg("\r\n");

}

// draw line of outputs page
static void draw_line_outs(s32 n, u16 num, u8 y, u8 hl) {
8001fda2:	fe b0 f4 75 	rcall	8001e68c <net_out_op_idx>
8001fda6:	fe b0 f4 51 	rcall	8001e648 <net_op_name>

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001fdaa:	8f 06       	st.w	r7[0x0],r6
8001fdac:	19 89       	ld.ub	r9,r12[0x0]
    *pline++ = *str++;
8001fdae:	58 09       	cp.w	r9,0
8001fdb0:	c4 10       	breq	8001fe32 <draw_line_outs+0x256>

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001fdb2:	ec ca ff ce 	sub	r10,r6,-50
8001fdb6:	0c 98       	mov	r8,r6
8001fdb8:	c0 38       	rjmp	8001fdbe <draw_line_outs+0x1e2>
8001fdba:	14 38       	cp.w	r8,r10
8001fdbc:	c0 60       	breq	8001fdc8 <draw_line_outs+0x1ec>
  pline += itoa_whole_lj(val, pline); 
}

// append char to line buffer
static inline void appendln_char(char c) {  
  *pline++ = c;
8001fdbe:	10 c9       	st.b	r8++,r9
8001fdc0:	2f fc       	sub	r12,-1
  } else {
    println_int(net_out_op_idx(n), 0);
    endln(); screen_string(0, y, lineBuf, hl);
    println( net_op_name(net_out_op_idx(n)) , 0);
    appendln_char('/');
    appendln( net_out_name(n) );
8001fdc2:	19 89       	ld.ub	r9,r12[0x0]
  pline += itoa_whole_lj(val, pline); 
}

// append char to line buffer
static inline void appendln_char(char c) {  
  *pline++ = c;
8001fdc4:	58 09       	cp.w	r9,0
8001fdc6:	cf a1       	brne	8001fdba <draw_line_outs+0x1de>
  } else {
    println_int(net_out_op_idx(n), 0);
    endln(); screen_string(0, y, lineBuf, hl);
    println( net_op_name(net_out_op_idx(n)) , 0);
    appendln_char('/');
    appendln( net_out_name(n) );
8001fdc8:	8f 08       	st.w	r7[0x0],r8
8001fdca:	f0 c9 ff ff 	sub	r9,r8,-1

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001fdce:	8f 09       	st.w	r7[0x0],r9
8001fdd0:	32 f9       	mov	r9,47
8001fdd2:	0a 9c       	mov	r12,r5
8001fdd4:	b0 89       	st.b	r8[0x0],r9
8001fdd6:	e0 65 01 08 	mov	r5,264
8001fdda:	fe b0 f5 e1 	rcall	8001e99c <net_out_name>
8001fdde:	19 89       	ld.ub	r9,r12[0x0]
8001fde0:	58 09       	cp.w	r9,0
8001fde2:	c2 c0       	breq	8001fe3a <draw_line_outs+0x25e>
    *pline++ = *str++;
8001fde4:	6a 08       	ld.w	r8,r5[0x0]
8001fde6:	2c f6       	sub	r6,-49

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001fde8:	0c 38       	cp.w	r8,r6
8001fdea:	e0 88 00 06 	brls	8001fdf6 <draw_line_outs+0x21a>
8001fdee:	c0 a8       	rjmp	8001fe02 <draw_line_outs+0x226>
static inline void clearln(void) {
  memset(pline, ' ', CHAR_COLS);
}

static inline void endln(void) {
  *(pline) = 0;
8001fdf0:	0c 38       	cp.w	r8,r6
    println_int(net_out_op_idx(n), 0);
    endln(); screen_string(0, y, lineBuf, hl);
    println( net_op_name(net_out_op_idx(n)) , 0);
    appendln_char('/');
    appendln( net_out_name(n) );
    endln(); screen_string(16, y, lineBuf, hl);
8001fdf2:	e0 8b 00 07 	brhi	8001fe00 <draw_line_outs+0x224>
8001fdf6:	10 c9       	st.b	r8++,r9
8001fdf8:	2f fc       	sub	r12,-1
8001fdfa:	19 89       	ld.ub	r9,r12[0x0]
8001fdfc:	58 09       	cp.w	r9,0
8001fdfe:	cf 91       	brne	8001fdf0 <draw_line_outs+0x214>
8001fe00:	8f 08       	st.w	r7[0x0],r8
8001fe02:	30 0a       	mov	r10,0
static void draw_line_outs(s32 n, u16 num, u8 y, u8 hl) {
  s16 target;
  //  char pch;
  // wrap
  if (n < 0) {
    n += num;
8001fe04:	04 99       	mov	r9,r2
8001fe06:	b0 8a       	st.b	r8[0x0],r10
8001fe08:	08 9b       	mov	r11,r4

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001fe0a:	e0 6a 38 cc 	mov	r10,14540
8001fe0e:	31 0c       	mov	r12,16
8001fe10:	fe b0 c3 78 	rcall	80018500 <screen_string>
8001fe14:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
8001fe18:	5c 7b       	castu.h	r11
8001fe1a:	16 0c       	add	r12,r11
8001fe1c:	ce ba       	rjmp	8001fbf2 <draw_line_outs+0x16>
8001fe1e:	6a 08       	ld.w	r8,r5[0x0]
8001fe20:	c4 1b       	rjmp	8001fca2 <draw_line_outs+0xc6>
8001fe22:	ec c9 ff ff 	sub	r9,r6,-1
8001fe26:	0c 98       	mov	r8,r6
8001fe28:	c2 1b       	rjmp	8001fc6a <draw_line_outs+0x8e>
8001fe2a:	6a 08       	ld.w	r8,r5[0x0]
8001fe2c:	c9 ab       	rjmp	8001fd60 <draw_line_outs+0x184>
8001fe2e:	6a 08       	ld.w	r8,r5[0x0]
8001fe30:	c7 eb       	rjmp	8001fd2c <draw_line_outs+0x150>
8001fe32:	ec c9 ff ff 	sub	r9,r6,-1
8001fe36:	0c 98       	mov	r8,r6
8001fe38:	cc bb       	rjmp	8001fdce <draw_line_outs+0x1f2>
8001fe3a:	6a 08       	ld.w	r8,r5[0x0]
8001fe3c:	ce 3b       	rjmp	8001fe02 <draw_line_outs+0x226>
8001fe3e:	d7 03       	nop

8001fe40 <redraw_outs>:
8001fe40:	eb cd 40 e0 	pushm	r5-r7,lr
8001fe44:	fe b0 f3 f0 	rcall	8001e624 <net_num_outs>
8001fe48:	e0 68 3f bc 	mov	r8,16316
8001fe4c:	70 08       	ld.w	r8,r8[0x0]
8001fe4e:	ef dc c0 10 	bfextu	r7,r12,0x0,0x10
8001fe52:	90 66       	ld.sh	r6,r8[0xc]
8001fe54:	30 f9       	mov	r9,15
8001fe56:	ee 06 0d 46 	min	r6,r7,r6
8001fe5a:	0e 9b       	mov	r11,r7
  if (nCenter >= num) {
    nCenter = num;
  }
  n = nCenter;
  y = SCREEN_ROW_CENTER;
  draw_line_outs(n, num, y, 15);  
8001fe5c:	0c 9c       	mov	r12,r6
8001fe5e:	30 3a       	mov	r10,3
8001fe60:	cb ee       	rcall	8001fbdc <draw_line_outs>
  screen_hl_line(0, y, 1);
8001fe62:	30 1a       	mov	r10,1
8001fe64:	30 3b       	mov	r11,3
8001fe66:	30 0c       	mov	r12,0
8001fe68:	fe b0 c0 e8 	rcall	80018038 <screen_hl_line>
  // print lower entries
  while (y > 1) {
    n--;
8001fe6c:	ec c5 00 01 	sub	r5,r6,1
    y--;
    draw_line_outs(n, num, y, 4);
8001fe70:	0e 9b       	mov	r11,r7
8001fe72:	0a 9c       	mov	r12,r5
8001fe74:	30 49       	mov	r9,4
8001fe76:	30 2a       	mov	r10,2
8001fe78:	cb 2e       	rcall	8001fbdc <draw_line_outs>
8001fe7a:	ea cc 00 01 	sub	r12,r5,1
8001fe7e:	0e 9b       	mov	r11,r7
8001fe80:	30 49       	mov	r9,4
8001fe82:	30 1a       	mov	r10,1
8001fe84:	ca ce       	rcall	8001fbdc <draw_line_outs>
8001fe86:	30 49       	mov	r9,4
8001fe88:	0e 9b       	mov	r11,r7
  y = SCREEN_ROW_CENTER;
  // print higher entries
  while (y < CHAR_ROWS_2) {
    n++;
    y++;
    draw_line_outs(n, num, y, 4);
8001fe8a:	12 9a       	mov	r10,r9
8001fe8c:	2f f6       	sub	r6,-1
8001fe8e:	0c 9c       	mov	r12,r6
  // re-center
  n = nCenter;
  y = SCREEN_ROW_CENTER;
  // print higher entries
  while (y < CHAR_ROWS_2) {
    n++;
8001fe90:	ca 6e       	rcall	8001fbdc <draw_line_outs>
    y++;
    draw_line_outs(n, num, y, 4);
8001fe92:	2f f6       	sub	r6,-1
8001fe94:	0e 9b       	mov	r11,r7
8001fe96:	0c 9c       	mov	r12,r6
  // re-center
  n = nCenter;
  y = SCREEN_ROW_CENTER;
  // print higher entries
  while (y < CHAR_ROWS_2) {
    n++;
8001fe98:	30 49       	mov	r9,4
    y++;
    draw_line_outs(n, num, y, 4);
8001fe9a:	30 5a       	mov	r10,5
8001fe9c:	ca 0e       	rcall	8001fbdc <draw_line_outs>
8001fe9e:	0e 9b       	mov	r11,r7
8001fea0:	ec cc ff ff 	sub	r12,r6,-1
8001fea4:	30 49       	mov	r9,4
8001fea6:	30 6a       	mov	r10,6
8001fea8:	c9 ae       	rcall	8001fbdc <draw_line_outs>
8001feaa:	30 0b       	mov	r11,0
8001feac:	30 c9       	mov	r9,12
8001feae:	fe ca cd 46 	sub	r10,pc,-12986
8001feb2:	16 9c       	mov	r12,r11
  }
  // header
  screen_line(0, 0, "ROUTING", 12);
8001feb4:	fe b0 c3 2c 	rcall	8001850c <screen_line>
8001feb8:	30 a9       	mov	r9,10
8001feba:	fe ca cd 4a 	sub	r10,pc,-12982
8001febe:	30 7b       	mov	r11,7
  // (footer)
  screen_line(0, CHAR_ROWS_1, "FOLLOW DISCONNECT STORE PRESET", 10);
8001fec0:	30 0c       	mov	r12,0
8001fec2:	fe b0 c3 25 	rcall	8001850c <screen_line>
8001fec6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001feca:	d7 03       	nop

8001fecc <draw_line_ins>:
}
8001fecc:	d4 31       	pushm	r0-r7,lr
8001fece:	18 95       	mov	r5,r12
8001fed0:	14 94       	mov	r4,r10
8001fed2:	12 93       	mov	r3,r9
8001fed4:	58 0c       	cp.w	r12,0
8001fed6:	e0 85 00 ad 	brlt	80020030 <draw_line_ins+0x164>
8001feda:	5c 7b       	castu.h	r11
8001fedc:	16 35       	cp.w	r5,r11
8001fede:	eb db e4 15 	subge	r5,r5,r11
8001fee2:	e5 d5 c0 10 	bfextu	r2,r5,0x0,0x10
8001fee6:	04 9c       	mov	r12,r2
8001fee8:	fe b0 f3 be 	rcall	8001e664 <net_in_op_idx>
  //  print_dbg("\r\n draw line ins, op idx: ");
  //  print_dbg_ulong(opIdx);


  //  if (net_get_in_preset(n)) { pch = '*'; } else { pch = '.'; }
  screen_blank_line(0, y);
8001feec:	08 9b       	mov	r11,r4
  } 

  //  print_dbg("\r\n draw line ins, selection: ");
  //  print_dbg_ulong(n);

  opIdx = net_in_op_idx(n);
8001feee:	18 91       	mov	r1,r12
  //  print_dbg_ulong(opIdx);


  //  if (net_get_in_preset(n)) { pch = '*'; } else { pch = '.'; }
  screen_blank_line(0, y);
  if (opIdx >=0 ) { // this is an operator input
8001fef0:	30 00       	mov	r0,0
  //  print_dbg("\r\n draw line ins, op idx: ");
  //  print_dbg_ulong(opIdx);


  //  if (net_get_in_preset(n)) { pch = '*'; } else { pch = '.'; }
  screen_blank_line(0, y);
8001fef2:	30 0c       	mov	r12,0
8001fef4:	fe b0 c1 4e 	rcall	80018190 <screen_blank_line>
  if (opIdx >=0 ) { // this is an operator input
8001fef8:	e0 01 19 00 	cp.h	r1,r0
8001fefc:	c5 d5       	brlt	8001ffb6 <draw_line_ins+0xea>
  }
}

// write int to top of line buffer
static inline void println_int(int val, int pos) {
  pline = lineBuf + pos;
8001fefe:	e0 67 38 cc 	mov	r7,14540
  pline += len; 
}

// append int to line buffer (left justified, no bounds)
static inline void appendln_int_lj(int val) {
  pline += itoa_whole_lj(val, pline); 
8001ff02:	e0 66 01 08 	mov	r6,264
8001ff06:	0e 9b       	mov	r11,r7
8001ff08:	8d 07       	st.w	r6[0x0],r7
8001ff0a:	02 9c       	mov	r12,r1
8001ff0c:	fe b0 eb b4 	rcall	8001d674 <itoa_whole_lj>
static inline void clearln(void) {
  memset(pline, ' ', CHAR_COLS);
}

static inline void endln(void) {
  *(pline) = 0;
8001ff10:	ee 0c 00 0c 	add	r12,r7,r12

  //  if (net_get_in_preset(n)) { pch = '*'; } else { pch = '.'; }
  screen_blank_line(0, y);
  if (opIdx >=0 ) { // this is an operator input
    println_int(opIdx, 0);
    endln(); screen_string(0, y, lineBuf, hl);
8001ff14:	b8 80       	st.b	r12[0x0],r0
8001ff16:	06 99       	mov	r9,r3
  pline += len; 
}

// append int to line buffer (left justified, no bounds)
static inline void appendln_int_lj(int val) {
  pline += itoa_whole_lj(val, pline); 
8001ff18:	0e 9a       	mov	r10,r7

  //  if (net_get_in_preset(n)) { pch = '*'; } else { pch = '.'; }
  screen_blank_line(0, y);
  if (opIdx >=0 ) { // this is an operator input
    println_int(opIdx, 0);
    endln(); screen_string(0, y, lineBuf, hl);
8001ff1a:	08 9b       	mov	r11,r4
8001ff1c:	8d 0c       	st.w	r6[0x0],r12
8001ff1e:	30 0c       	mov	r12,0
    
    //    print_dbg("\r\n draw line ins, op name: ");
    //    print_dbg(net_op_name(opIdx));
    
    println( net_op_name(opIdx), 0 );
8001ff20:	fe b0 c2 f0 	rcall	80018500 <screen_string>
8001ff24:	02 9c       	mov	r12,r1


///// snprintf replacement
// write to top of line buffer
static inline void println(const char* str, int pos) {
  pline = lineBuf + pos;
8001ff26:	fe b0 f3 91 	rcall	8001e648 <net_op_name>

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001ff2a:	8d 07       	st.w	r6[0x0],r7
8001ff2c:	19 89       	ld.ub	r9,r12[0x0]
8001ff2e:	58 09       	cp.w	r9,0
  println(net_op_name(n), 0); endln();
  screen_line(16, y, lineBuf, hl);
}

// draw line of inputs page
static void draw_line_ins(s32 n, u16 num, u8 y, u8 hl) {
8001ff30:	e0 80 00 85 	breq	8002003a <draw_line_ins+0x16e>
8001ff34:	ee ca ff ce 	sub	r10,r7,-50

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001ff38:	0e 98       	mov	r8,r7
8001ff3a:	c0 38       	rjmp	8001ff40 <draw_line_ins+0x74>
    *pline++ = *str++;
8001ff3c:	14 38       	cp.w	r8,r10
8001ff3e:	c0 60       	breq	8001ff4a <draw_line_ins+0x7e>

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001ff40:	10 c9       	st.b	r8++,r9
8001ff42:	2f fc       	sub	r12,-1
8001ff44:	19 89       	ld.ub	r9,r12[0x0]
8001ff46:	58 09       	cp.w	r9,0
8001ff48:	cf a1       	brne	8001ff3c <draw_line_ins+0x70>
8001ff4a:	8d 08       	st.w	r6[0x0],r8
  pline += itoa_whole_lj(val, pline); 
}

// append char to line buffer
static inline void appendln_char(char c) {  
  *pline++ = c;
8001ff4c:	f0 c9 ff ff 	sub	r9,r8,-1
    
    //    print_dbg("\r\n draw line ins, in  name: ");
    //    print_dbg(net_in_name(n));
    
    appendln_char('/');
    appendln( net_in_name(n) );
8001ff50:	8d 09       	st.w	r6[0x0],r9
  pline += itoa_whole_lj(val, pline); 
}

// append char to line buffer
static inline void appendln_char(char c) {  
  *pline++ = c;
8001ff52:	32 f9       	mov	r9,47
8001ff54:	04 9c       	mov	r12,r2
    
    //    print_dbg("\r\n draw line ins, in  name: ");
    //    print_dbg(net_in_name(n));
    
    appendln_char('/');
    appendln( net_in_name(n) );
8001ff56:	b0 89       	st.b	r8[0x0],r9
8001ff58:	e0 62 01 08 	mov	r2,264

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001ff5c:	fe b0 f5 36 	rcall	8001e9c8 <net_in_name>
8001ff60:	19 89       	ld.ub	r9,r12[0x0]
8001ff62:	58 09       	cp.w	r9,0
8001ff64:	c6 90       	breq	80020036 <draw_line_ins+0x16a>
8001ff66:	64 08       	ld.w	r8,r2[0x0]
8001ff68:	2c f7       	sub	r7,-49
8001ff6a:	0e 38       	cp.w	r8,r7
8001ff6c:	e0 88 00 06 	brls	8001ff78 <draw_line_ins+0xac>
8001ff70:	c0 a8       	rjmp	8001ff84 <draw_line_ins+0xb8>
    *pline++ = *str++;
8001ff72:	0e 38       	cp.w	r8,r7
8001ff74:	e0 8b 00 07 	brhi	8001ff82 <draw_line_ins+0xb6>

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001ff78:	10 c9       	st.b	r8++,r9
8001ff7a:	2f fc       	sub	r12,-1
8001ff7c:	19 89       	ld.ub	r9,r12[0x0]
    //    print_dbg(net_in_name(n));
    
    appendln_char('/');
    appendln( net_in_name(n) );
    
    endln(); screen_string(16, y, lineBuf, hl);
8001ff7e:	58 09       	cp.w	r9,0
8001ff80:	cf 91       	brne	8001ff72 <draw_line_ins+0xa6>
static inline void clearln(void) {
  memset(pline, ' ', CHAR_COLS);
}

static inline void endln(void) {
  *(pline) = 0;
8001ff82:	8d 08       	st.w	r6[0x0],r8
  } else { // this is a parameter input
    println("P_", 0);
    appendln_int_lj( (int)net_param_idx(n));
    endln(); screen_string(0, y, lineBuf, hl);
    println( net_in_name(n) , 0);
    endln(); screen_string(16, y, lineBuf, hl);
8001ff84:	06 99       	mov	r9,r3
static inline void clearln(void) {
  memset(pline, ' ', CHAR_COLS);
}

static inline void endln(void) {
  *(pline) = 0;
8001ff86:	e0 6a 38 cc 	mov	r10,14540
  } else { // this is a parameter input
    println("P_", 0);
    appendln_int_lj( (int)net_param_idx(n));
    endln(); screen_string(0, y, lineBuf, hl);
    println( net_in_name(n) , 0);
    endln(); screen_string(16, y, lineBuf, hl);
8001ff8a:	30 0c       	mov	r12,0
8001ff8c:	08 9b       	mov	r11,r4
    print_fix16(numBuf, net_get_in_value(n) );
8001ff8e:	b0 8c       	st.b	r8[0x0],r12
8001ff90:	31 0c       	mov	r12,16
8001ff92:	fe b0 c2 b7 	rcall	80018500 <screen_string>
8001ff96:	0a 9c       	mov	r12,r5
8001ff98:	fe b0 f4 e0 	rcall	8001e958 <net_get_in_value>
    screen_line(80, y, numBuf, hl);
8001ff9c:	18 9b       	mov	r11,r12
8001ff9e:	e0 6c 00 fc 	mov	r12,252
8001ffa2:	fe b0 eb d3 	rcall	8001d748 <print_fix16>
8001ffa6:	06 99       	mov	r9,r3
8001ffa8:	08 9b       	mov	r11,r4


///// snprintf replacement
// write to top of line buffer
static inline void println(const char* str, int pos) {
  pline = lineBuf + pos;
8001ffaa:	e0 6a 00 fc 	mov	r10,252
8001ffae:	35 0c       	mov	r12,80
  println(net_op_name(n), 0); endln();
  screen_line(16, y, lineBuf, hl);
}

// draw line of inputs page
static void draw_line_ins(s32 n, u16 num, u8 y, u8 hl) {
8001ffb0:	fe b0 c2 ae 	rcall	8001850c <screen_line>
8001ffb4:	d8 32       	popm	r0-r7,pc
8001ffb6:	e0 67 38 cc 	mov	r7,14540
8001ffba:	fe cb ce 2a 	sub	r11,pc,-12758

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001ffbe:	e0 66 01 08 	mov	r6,264
    *pline++ = *str++;
8001ffc2:	16 98       	mov	r8,r11

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001ffc4:	8d 07       	st.w	r6[0x0],r7
8001ffc6:	2c eb       	sub	r11,-50
8001ffc8:	0e 9a       	mov	r10,r7
8001ffca:	35 09       	mov	r9,80
    print_fix16(numBuf, net_get_in_value(n) );
    screen_line(80, y, numBuf, hl);

  } else { // this is a parameter input
    println("P_", 0);
    appendln_int_lj( (int)net_param_idx(n));
8001ffcc:	c0 38       	rjmp	8001ffd2 <draw_line_ins+0x106>
8001ffce:	16 38       	cp.w	r8,r11
8001ffd0:	c0 60       	breq	8001ffdc <draw_line_ins+0x110>
  pline += len; 
}

// append int to line buffer (left justified, no bounds)
static inline void appendln_int_lj(int val) {
  pline += itoa_whole_lj(val, pline); 
8001ffd2:	14 c9       	st.b	r10++,r9
8001ffd4:	2f f8       	sub	r8,-1
8001ffd6:	11 89       	ld.ub	r9,r8[0x0]
8001ffd8:	58 09       	cp.w	r9,0
static inline void clearln(void) {
  memset(pline, ' ', CHAR_COLS);
}

static inline void endln(void) {
  *(pline) = 0;
8001ffda:	cf a1       	brne	8001ffce <draw_line_ins+0x102>
  pline += len; 
}

// append int to line buffer (left justified, no bounds)
static inline void appendln_int_lj(int val) {
  pline += itoa_whole_lj(val, pline); 
8001ffdc:	8d 0a       	st.w	r6[0x0],r10
8001ffde:	04 9c       	mov	r12,r2
8001ffe0:	fe b0 f3 2a 	rcall	8001e634 <net_param_idx>
static inline void clearln(void) {
  memset(pline, ' ', CHAR_COLS);
}

static inline void endln(void) {
  *(pline) = 0;
8001ffe4:	6c 01       	ld.w	r1,r6[0x0]
    screen_line(80, y, numBuf, hl);

  } else { // this is a parameter input
    println("P_", 0);
    appendln_int_lj( (int)net_param_idx(n));
    endln(); screen_string(0, y, lineBuf, hl);
8001ffe6:	02 9b       	mov	r11,r1
8001ffe8:	fe b0 eb 46 	rcall	8001d674 <itoa_whole_lj>
8001ffec:	30 08       	mov	r8,0
8001ffee:	e2 0c 00 0c 	add	r12,r1,r12
    println( net_in_name(n) , 0);
8001fff2:	8d 0c       	st.w	r6[0x0],r12
8001fff4:	06 99       	mov	r9,r3


///// snprintf replacement
// write to top of line buffer
static inline void println(const char* str, int pos) {
  pline = lineBuf + pos;
8001fff6:	b8 88       	st.b	r12[0x0],r8

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8001fff8:	e0 6a 38 cc 	mov	r10,14540
8001fffc:	08 9b       	mov	r11,r4
  println(net_op_name(n), 0); endln();
  screen_line(16, y, lineBuf, hl);
}

// draw line of inputs page
static void draw_line_ins(s32 n, u16 num, u8 y, u8 hl) {
8001fffe:	30 0c       	mov	r12,0
80020000:	fe b0 c2 80 	rcall	80018500 <screen_string>

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
80020004:	04 9c       	mov	r12,r2
80020006:	fe b0 f4 e1 	rcall	8001e9c8 <net_in_name>
    *pline++ = *str++;
8002000a:	8d 07       	st.w	r6[0x0],r7

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8002000c:	19 89       	ld.ub	r9,r12[0x0]
8002000e:	58 09       	cp.w	r9,0
80020010:	c1 90       	breq	80020042 <draw_line_ins+0x176>
80020012:	0e 98       	mov	r8,r7
  } else { // this is a parameter input
    println("P_", 0);
    appendln_int_lj( (int)net_param_idx(n));
    endln(); screen_string(0, y, lineBuf, hl);
    println( net_in_name(n) , 0);
    endln(); screen_string(16, y, lineBuf, hl);
80020014:	2c e7       	sub	r7,-50
80020016:	c0 38       	rjmp	8002001c <draw_line_ins+0x150>
80020018:	0e 38       	cp.w	r8,r7
static void draw_line_ins(s32 n, u16 num, u8 y, u8 hl) {
  s16 opIdx;
  //  char pch;
  // wrap
  if (n < 0) {
    n += num;
8002001a:	c0 60       	breq	80020026 <draw_line_ins+0x15a>
8002001c:	10 c9       	st.b	r8++,r9
8002001e:	2f fc       	sub	r12,-1

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
80020020:	19 89       	ld.ub	r9,r12[0x0]
80020022:	58 09       	cp.w	r9,0
80020024:	cf a1       	brne	80020018 <draw_line_ins+0x14c>
80020026:	8d 08       	st.w	r6[0x0],r8
80020028:	e0 6a 38 cc 	mov	r10,14540
8002002c:	06 99       	mov	r9,r3
8002002e:	ca eb       	rjmp	8001ff8a <draw_line_ins+0xbe>
80020030:	5c 7b       	castu.h	r11
80020032:	16 05       	add	r5,r11
80020034:	c5 7b       	rjmp	8001fee2 <draw_line_ins+0x16>
80020036:	64 08       	ld.w	r8,r2[0x0]
80020038:	ca 6b       	rjmp	8001ff84 <draw_line_ins+0xb8>
8002003a:	ee c9 ff ff 	sub	r9,r7,-1
8002003e:	0e 98       	mov	r8,r7
80020040:	c8 8b       	rjmp	8001ff50 <draw_line_ins+0x84>
80020042:	0e 98       	mov	r8,r7
80020044:	cf 2b       	rjmp	80020028 <draw_line_ins+0x15c>
80020046:	d7 03       	nop

80020048 <redraw_ins>:
80020048:	eb cd 40 e0 	pushm	r5-r7,lr
8002004c:	fe b0 f2 de 	rcall	8001e608 <net_num_ins>
80020050:	e0 68 3f bc 	mov	r8,16316
80020054:	70 08       	ld.w	r8,r8[0x0]
80020056:	ef dc c0 10 	bfextu	r7,r12,0x0,0x10
8002005a:	90 66       	ld.sh	r6,r8[0xc]
8002005c:	30 f9       	mov	r9,15
8002005e:	ee 06 0d 46 	min	r6,r7,r6
80020062:	0e 9b       	mov	r11,r7
80020064:	0c 9c       	mov	r12,r6
80020066:	30 3a       	mov	r10,3
  if (nCenter >= num) {
    nCenter = num;
  }
  n = nCenter;
  y = SCREEN_ROW_CENTER;
  draw_line_ins(n, num, y, 15);
80020068:	c3 2f       	rcall	8001fecc <draw_line_ins>
  screen_hl_line(0, y, 1);
8002006a:	30 1a       	mov	r10,1
8002006c:	30 3b       	mov	r11,3
8002006e:	30 0c       	mov	r12,0
80020070:	fe b0 bf e4 	rcall	80018038 <screen_hl_line>
  // print lower entries
  while (y > 1) {
    n--;
80020074:	ec c5 00 01 	sub	r5,r6,1
    y--;
    draw_line_ins(n, num, y, 4);
80020078:	0e 9b       	mov	r11,r7
8002007a:	0a 9c       	mov	r12,r5
8002007c:	30 49       	mov	r9,4
8002007e:	30 2a       	mov	r10,2
80020080:	c2 6f       	rcall	8001fecc <draw_line_ins>
80020082:	ea cc 00 01 	sub	r12,r5,1
80020086:	0e 9b       	mov	r11,r7
80020088:	30 49       	mov	r9,4
8002008a:	30 1a       	mov	r10,1
8002008c:	c2 0f       	rcall	8001fecc <draw_line_ins>
8002008e:	30 49       	mov	r9,4
80020090:	0e 9b       	mov	r11,r7
  y = SCREEN_ROW_CENTER;
  // print higher entries
  while (y < CHAR_ROWS_2) {
    n++;
    y++;
    draw_line_ins(n, num, y, 4);
80020092:	12 9a       	mov	r10,r9
80020094:	2f f6       	sub	r6,-1
80020096:	0c 9c       	mov	r12,r6
  // re-center
  n = nCenter;
  y = SCREEN_ROW_CENTER;
  // print higher entries
  while (y < CHAR_ROWS_2) {
    n++;
80020098:	c1 af       	rcall	8001fecc <draw_line_ins>
    y++;
    draw_line_ins(n, num, y, 4);
8002009a:	2f f6       	sub	r6,-1
8002009c:	0e 9b       	mov	r11,r7
8002009e:	0c 9c       	mov	r12,r6
  // re-center
  n = nCenter;
  y = SCREEN_ROW_CENTER;
  // print higher entries
  while (y < CHAR_ROWS_2) {
    n++;
800200a0:	30 49       	mov	r9,4
    y++;
    draw_line_ins(n, num, y, 4);
800200a2:	30 5a       	mov	r10,5
800200a4:	c1 4f       	rcall	8001fecc <draw_line_ins>
800200a6:	0e 9b       	mov	r11,r7
800200a8:	ec cc ff ff 	sub	r12,r6,-1
800200ac:	30 49       	mov	r9,4
800200ae:	30 6a       	mov	r10,6
800200b0:	c0 ef       	rcall	8001fecc <draw_line_ins>
800200b2:	30 0b       	mov	r11,0
800200b4:	30 c9       	mov	r9,12
800200b6:	fe ca cf 22 	sub	r10,pc,-12510
800200ba:	16 9c       	mov	r12,r11
  }    
  // draw the header
  screen_line(0, 0, "PARAMS", 12);
800200bc:	fe b0 c2 28 	rcall	8001850c <screen_line>
800200c0:	30 a9       	mov	r9,10
800200c2:	fe ca cf 26 	sub	r10,pc,-12506
800200c6:	30 7b       	mov	r11,7
  // draw footer (function labels)
  screen_line(0, CHAR_ROWS_1, "GATHER DISCON. STORE PRESET", 10);
800200c8:	30 0c       	mov	r12,0
800200ca:	fe b0 c2 21 	rcall	8001850c <screen_line>
800200ce:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800200d2:	d7 03       	nop

800200d4 <redraw_dsp>:
}
800200d4:	d4 31       	pushm	r0-r7,lr
800200d6:	20 1d       	sub	sp,4
800200d8:	fe b0 ba 9e 	rcall	80017614 <files_get_dsp_count>
800200dc:	e0 68 3f bc 	mov	r8,16316
800200e0:	18 97       	mov	r7,r12
800200e2:	70 08       	ld.w	r8,r8[0x0]
800200e4:	90 65       	ld.sh	r5,r8[0xc]
800200e6:	18 35       	cp.w	r5,r12
800200e8:	e0 84 00 93 	brge	8002020e <redraw_dsp+0x13a>
800200ec:	18 93       	mov	r3,r12
800200ee:	30 3b       	mov	r11,3
800200f0:	5c 83       	casts.h	r3
800200f2:	30 0c       	mov	r12,0
  /* if (n < 0) { */
  /*   n += num; */
  /* } else if (n >= num) { */
  /*   n -= num; */
  /* }  */
  screen_blank_line(0, y);
800200f4:	fe b0 c0 4e 	rcall	80018190 <screen_blank_line>

  if (n < 0  || n >= num ) {
800200f8:	58 05       	cp.w	r5,0
800200fa:	c0 85       	brlt	8002010a <redraw_dsp+0x36>
800200fc:	0a 97       	mov	r7,r5
800200fe:	f1 d3 c0 10 	bfextu	r8,r3,0x0,0x10
80020102:	0e 38       	cp.w	r8,r7
80020104:	e0 89 00 90 	brgt	80020224 <redraw_dsp+0x150>


///// snprintf replacement
// write to top of line buffer
static inline void println(const char* str, int pos) {
  pline = lineBuf + pos;
80020108:	0e 95       	mov	r5,r7
    nCenter = num;
  }
  n = nCenter;
  y = SCREEN_ROW_CENTER;
  draw_line_dsp(n, num, y, 15);
  screen_hl_line(0, y, 1);
8002010a:	e0 62 38 cc 	mov	r2,14540
8002010e:	30 1a       	mov	r10,1
  screen_line(0, CHAR_ROWS_1, "CLEAR COPY STORE RECALL", 10);
}

//==================================================
//==== redraw dsp page
void redraw_dsp(void) {
80020110:	30 3b       	mov	r11,3
80020112:	30 0c       	mov	r12,0
    nCenter = num;
  }
  n = nCenter;
  y = SCREEN_ROW_CENTER;
  draw_line_dsp(n, num, y, 15);
  screen_hl_line(0, y, 1);
80020114:	ea c1 00 02 	sub	r1,r5,2
  screen_line(0, CHAR_ROWS_1, "CLEAR COPY STORE RECALL", 10);
}

//==================================================
//==== redraw dsp page
void redraw_dsp(void) {
80020118:	fe b0 bf 90 	rcall	80018038 <screen_hl_line>
  /* } else if (n >= num) { */
  /*   n -= num; */
  /* }  */
  screen_blank_line(0, y);

  if (n < 0  || n >= num ) {
8002011c:	30 26       	mov	r6,2
8002011e:	0a 97       	mov	r7,r5
  screen_line(0, CHAR_ROWS_1, "CLEAR COPY STORE RECALL", 10);
}

//==================================================
//==== redraw dsp page
void redraw_dsp(void) {
80020120:	e1 d3 c0 10 	bfextu	r0,r3,0x0,0x10
80020124:	e4 c4 ff ce 	sub	r4,r2,-50
  /* if (n < 0) { */
  /*   n += num; */
  /* } else if (n >= num) { */
  /*   n -= num; */
  /* }  */
  screen_blank_line(0, y);
80020128:	50 02       	stdsp	sp[0x0],r2
8002012a:	20 17       	sub	r7,1
8002012c:	0c 9b       	mov	r11,r6
8002012e:	30 0c       	mov	r12,0

  if (n < 0  || n >= num ) {
80020130:	fe b0 c0 30 	rcall	80018190 <screen_blank_line>
80020134:	58 07       	cp.w	r7,0
80020136:	c0 35       	brlt	8002013c <redraw_dsp+0x68>
    return;
  } 

  println( (const char*)files_get_dsp_name(n), 0);
  endln(); screen_string(0, y, lineBuf, hl); 
80020138:	00 37       	cp.w	r7,r0
  n = nCenter;
  y = SCREEN_ROW_CENTER;
  draw_line_dsp(n, num, y, 15);
  screen_hl_line(0, y, 1);
  // print lower entries
  while (y > 1) {
8002013a:	c4 a5       	brlt	800201ce <redraw_dsp+0xfa>
8002013c:	20 16       	sub	r6,1
  screen_line(0, CHAR_ROWS_1, "CLEAR COPY STORE RECALL", 10);
}

//==================================================
//==== redraw dsp page
void redraw_dsp(void) {
8002013e:	02 37       	cp.w	r7,r1
  /* } else if (n >= num) { */
  /*   n -= num; */
  /* }  */
  screen_blank_line(0, y);

  if (n < 0  || n >= num ) {
80020140:	cf 51       	brne	8002012a <redraw_dsp+0x56>
80020142:	0a 97       	mov	r7,r5
  screen_line(0, CHAR_ROWS_1, "CLEAR COPY STORE RECALL", 10);
}

//==================================================
//==== redraw dsp page
void redraw_dsp(void) {
80020144:	e5 d3 c0 10 	bfextu	r2,r3,0x0,0x10
80020148:	30 06       	mov	r6,0


///// snprintf replacement
// write to top of line buffer
static inline void println(const char* str, int pos) {
  pline = lineBuf + pos;
8002014a:	e0 63 38 cc 	mov	r3,14540
  screen_line(0, CHAR_ROWS_1, "CLEAR COPY STORE RECALL", 10);
}

//==================================================
//==== redraw dsp page
void redraw_dsp(void) {
8002014e:	2f d5       	sub	r5,-3
80020150:	e0 61 01 08 	mov	r1,264
  // re-center
  n = nCenter;
  y = SCREEN_ROW_CENTER;
  // print higher entries
  while (y < CHAR_ROWS_2) {
    n++;
80020154:	e6 c4 ff ce 	sub	r4,r3,-50
  /* if (n < 0) { */
  /*   n += num; */
  /* } else if (n >= num) { */
  /*   n -= num; */
  /* }  */
  screen_blank_line(0, y);
80020158:	50 03       	stdsp	sp[0x0],r3
8002015a:	2f f7       	sub	r7,-1
8002015c:	ec c0 ff fc 	sub	r0,r6,-4

  if (n < 0  || n >= num ) {
80020160:	30 0c       	mov	r12,0
80020162:	00 9b       	mov	r11,r0
80020164:	fe b0 c0 16 	rcall	80018190 <screen_blank_line>
    return;
  } 

  println( (const char*)files_get_dsp_name(n), 0);
  endln(); screen_string(0, y, lineBuf, hl); 
80020168:	58 07       	cp.w	r7,0
  }
  // re-center
  n = nCenter;
  y = SCREEN_ROW_CENTER;
  // print higher entries
  while (y < CHAR_ROWS_2) {
8002016a:	c0 35       	brlt	80020170 <redraw_dsp+0x9c>
8002016c:	04 37       	cp.w	r7,r2
    n++;
    y++;
    draw_line_dsp(n, num, y, 4);
  }
  screen_line(0, 0, "DSP", 12);
8002016e:	c1 45       	brlt	80020196 <redraw_dsp+0xc2>
80020170:	2f f6       	sub	r6,-1
80020172:	0a 37       	cp.w	r7,r5
80020174:	cf 31       	brne	8002015a <redraw_dsp+0x86>
80020176:	30 0b       	mov	r11,0
80020178:	30 c9       	mov	r9,12
  // draw footer (function labels)
  screen_line(0, CHAR_ROWS_1, "LOAD DEFAULT", 10);
8002017a:	fe ca d1 2a 	sub	r10,pc,-11990
8002017e:	16 9c       	mov	r12,r11
80020180:	fe b0 c1 c6 	rcall	8001850c <screen_line>
80020184:	30 a9       	mov	r9,10
}
80020186:	fe ca cf ce 	sub	r10,pc,-12338

  if (n < 0  || n >= num ) {
    return;
  } 

  println( (const char*)files_get_dsp_name(n), 0);
8002018a:	30 7b       	mov	r11,7
8002018c:	30 0c       	mov	r12,0
8002018e:	fe b0 c1 bf 	rcall	8001850c <screen_line>


///// snprintf replacement
// write to top of line buffer
static inline void println(const char* str, int pos) {
  pline = lineBuf + pos;
80020192:	2f fd       	sub	sp,-4

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
80020194:	d8 32       	popm	r0-r7,pc
80020196:	0e 9c       	mov	r12,r7
80020198:	5c 5c       	castu.b	r12
  screen_line(0, CHAR_ROWS_1, "CLEAR COPY STORE RECALL", 10);
}

//==================================================
//==== redraw dsp page
void redraw_dsp(void) {
8002019a:	fe b0 ba 35 	rcall	80017604 <files_get_dsp_name>

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8002019e:	83 03       	st.w	r1[0x0],r3
800201a0:	19 89       	ld.ub	r9,r12[0x0]
    *pline++ = *str++;
800201a2:	58 09       	cp.w	r9,0
800201a4:	c6 20       	breq	80020268 <redraw_dsp+0x194>

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
800201a6:	40 08       	lddsp	r8,sp[0x0]
800201a8:	c0 38       	rjmp	800201ae <redraw_dsp+0xda>
800201aa:	08 38       	cp.w	r8,r4
800201ac:	c0 60       	breq	800201b8 <redraw_dsp+0xe4>
static inline void clearln(void) {
  memset(pline, ' ', CHAR_COLS);
}

static inline void endln(void) {
  *(pline) = 0;
800201ae:	10 c9       	st.b	r8++,r9
  if (n < 0  || n >= num ) {
    return;
  } 

  println( (const char*)files_get_dsp_name(n), 0);
  endln(); screen_string(0, y, lineBuf, hl); 
800201b0:	2f fc       	sub	r12,-1
static inline void clearln(void) {
  memset(pline, ' ', CHAR_COLS);
}

static inline void endln(void) {
  *(pline) = 0;
800201b2:	19 89       	ld.ub	r9,r12[0x0]
  if (n < 0  || n >= num ) {
    return;
  } 

  println( (const char*)files_get_dsp_name(n), 0);
  endln(); screen_string(0, y, lineBuf, hl); 
800201b4:	58 09       	cp.w	r9,0
800201b6:	cf a1       	brne	800201aa <redraw_dsp+0xd6>
800201b8:	83 08       	st.w	r1[0x0],r8
800201ba:	30 09       	mov	r9,0
800201bc:	00 9b       	mov	r11,r0
800201be:	b0 89       	st.b	r8[0x0],r9

  if (n < 0  || n >= num ) {
    return;
  } 

  println( (const char*)files_get_dsp_name(n), 0);
800201c0:	e0 6a 38 cc 	mov	r10,14540
800201c4:	30 49       	mov	r9,4
800201c6:	30 0c       	mov	r12,0


///// snprintf replacement
// write to top of line buffer
static inline void println(const char* str, int pos) {
  pline = lineBuf + pos;
800201c8:	fe b0 c1 9c 	rcall	80018500 <screen_string>

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
800201cc:	cd 2b       	rjmp	80020170 <redraw_dsp+0x9c>
800201ce:	0e 9c       	mov	r12,r7
800201d0:	5c 5c       	castu.b	r12
  screen_line(0, CHAR_ROWS_1, "CLEAR COPY STORE RECALL", 10);
}

//==================================================
//==== redraw dsp page
void redraw_dsp(void) {
800201d2:	fe b0 ba 19 	rcall	80017604 <files_get_dsp_name>

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
800201d6:	e0 69 01 08 	mov	r9,264
    *pline++ = *str++;
800201da:	93 02       	st.w	r9[0x0],r2
800201dc:	19 89       	ld.ub	r9,r12[0x0]

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
800201de:	58 09       	cp.w	r9,0
800201e0:	c4 60       	breq	8002026c <redraw_dsp+0x198>
800201e2:	40 08       	lddsp	r8,sp[0x0]
800201e4:	c0 38       	rjmp	800201ea <redraw_dsp+0x116>
800201e6:	08 38       	cp.w	r8,r4
static inline void clearln(void) {
  memset(pline, ' ', CHAR_COLS);
}

static inline void endln(void) {
  *(pline) = 0;
800201e8:	c0 60       	breq	800201f4 <redraw_dsp+0x120>
  if (n < 0  || n >= num ) {
    return;
  } 

  println( (const char*)files_get_dsp_name(n), 0);
  endln(); screen_string(0, y, lineBuf, hl); 
800201ea:	10 c9       	st.b	r8++,r9
static inline void clearln(void) {
  memset(pline, ' ', CHAR_COLS);
}

static inline void endln(void) {
  *(pline) = 0;
800201ec:	2f fc       	sub	r12,-1
  if (n < 0  || n >= num ) {
    return;
  } 

  println( (const char*)files_get_dsp_name(n), 0);
  endln(); screen_string(0, y, lineBuf, hl); 
800201ee:	19 89       	ld.ub	r9,r12[0x0]
800201f0:	58 09       	cp.w	r9,0
800201f2:	cf a1       	brne	800201e6 <redraw_dsp+0x112>
800201f4:	e0 69 01 08 	mov	r9,264
800201f8:	93 08       	st.w	r9[0x0],r8
    draw_line_dsp(n, num, y, 4);
  }
  screen_line(0, 0, "DSP", 12);
  // draw footer (function labels)
  screen_line(0, CHAR_ROWS_1, "LOAD DEFAULT", 10);
}
800201fa:	30 09       	mov	r9,0
  /* if (n < 0) { */
  /*   n += num; */
  /* } else if (n >= num) { */
  /*   n -= num; */
  /* }  */
  screen_blank_line(0, y);
800201fc:	e0 6a 38 cc 	mov	r10,14540
80020200:	b0 89       	st.b	r8[0x0],r9
80020202:	0c 9b       	mov	r11,r6
    draw_line_dsp(n, num, y, 4);
  }
  screen_line(0, 0, "DSP", 12);
  // draw footer (function labels)
  screen_line(0, CHAR_ROWS_1, "LOAD DEFAULT", 10);
}
80020204:	30 49       	mov	r9,4
  /* } else if (n >= num) { */
  /*   n -= num; */
  /* }  */
  screen_blank_line(0, y);

  if (n < 0  || n >= num ) {
80020206:	30 0c       	mov	r12,0
80020208:	fe b0 c1 7c 	rcall	80018500 <screen_string>
8002020c:	c9 8b       	rjmp	8002013c <redraw_dsp+0x68>
8002020e:	18 93       	mov	r3,r12
    return;
  } 

  println( (const char*)files_get_dsp_name(n), 0);
80020210:	30 3b       	mov	r11,3
80020212:	30 0c       	mov	r12,0
80020214:	fe b0 bf be 	rcall	80018190 <screen_blank_line>


///// snprintf replacement
// write to top of line buffer
static inline void println(const char* str, int pos) {
  pline = lineBuf + pos;
80020218:	5c 83       	casts.h	r3
8002021a:	f1 d3 c0 10 	bfextu	r8,r3,0x0,0x10

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8002021e:	0e 38       	cp.w	r8,r7
80020220:	fe 9a ff 74 	brle	80020108 <redraw_dsp+0x34>
  screen_line(0, CHAR_ROWS_1, "CLEAR COPY STORE RECALL", 10);
}

//==================================================
//==== redraw dsp page
void redraw_dsp(void) {
80020224:	0e 9c       	mov	r12,r7
80020226:	5c 5c       	castu.b	r12
80020228:	fe b0 b9 ee 	rcall	80017604 <files_get_dsp_name>

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8002022c:	e0 6b 01 08 	mov	r11,264
    *pline++ = *str++;
80020230:	e0 6a 38 cc 	mov	r10,14540

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
80020234:	97 0a       	st.w	r11[0x0],r10
80020236:	19 89       	ld.ub	r9,r12[0x0]
80020238:	58 09       	cp.w	r9,0
static inline void clearln(void) {
  memset(pline, ' ', CHAR_COLS);
}

static inline void endln(void) {
  *(pline) = 0;
8002023a:	c1 b0       	breq	80020270 <redraw_dsp+0x19c>
  if (n < 0  || n >= num ) {
    return;
  } 

  println( (const char*)files_get_dsp_name(n), 0);
  endln(); screen_string(0, y, lineBuf, hl); 
8002023c:	14 98       	mov	r8,r10
static inline void clearln(void) {
  memset(pline, ' ', CHAR_COLS);
}

static inline void endln(void) {
  *(pline) = 0;
8002023e:	2c ea       	sub	r10,-50
  if (n < 0  || n >= num ) {
    return;
  } 

  println( (const char*)files_get_dsp_name(n), 0);
  endln(); screen_string(0, y, lineBuf, hl); 
80020240:	c0 38       	rjmp	80020246 <redraw_dsp+0x172>
80020242:	14 38       	cp.w	r8,r10
80020244:	c0 60       	breq	80020250 <redraw_dsp+0x17c>
80020246:	10 c9       	st.b	r8++,r9
80020248:	2f fc       	sub	r12,-1
8002024a:	19 89       	ld.ub	r9,r12[0x0]
8002024c:	58 09       	cp.w	r9,0

// append to line buffer
static inline void appendln(const char* str) {
  //  print_dbg("\n\r line buffer start: ");
  //  print_dbg_hex(pline);
  while((*str != 0) && (pline <= pLineEnd)) {
8002024e:	cf a1       	brne	80020242 <redraw_dsp+0x16e>
80020250:	97 08       	st.w	r11[0x0],r8
80020252:	30 09       	mov	r9,0
80020254:	0e 95       	mov	r5,r7
80020256:	b0 89       	st.b	r8[0x0],r9
80020258:	e0 6a 38 cc 	mov	r10,14540
8002025c:	30 f9       	mov	r9,15
8002025e:	30 3b       	mov	r11,3
80020260:	30 0c       	mov	r12,0
80020262:	fe b0 c1 4f 	rcall	80018500 <screen_string>
80020266:	c5 2b       	rjmp	8002010a <redraw_dsp+0x36>
80020268:	06 98       	mov	r8,r3
8002026a:	ca 8b       	rjmp	800201ba <redraw_dsp+0xe6>
8002026c:	04 98       	mov	r8,r2
8002026e:	cc 6b       	rjmp	800201fa <redraw_dsp+0x126>
80020270:	14 98       	mov	r8,r10
80020272:	cf 0b       	rjmp	80020252 <redraw_dsp+0x17e>

80020274 <scene_read_default>:
  flash_write_scene(sceneData);
  print_dbg("\r\n finished writing ");
}

// load from default
void scene_read_default(void) {
80020274:	d4 01       	pushm	lr
  print_dbg("\r\n reading default scene from flash... ");
80020276:	fe cc d0 ae 	sub	r12,pc,-12114
8002027a:	fe b0 96 e9 	rcall	8001304c <print_dbg>
  flash_read_scene(sceneData);
8002027e:	e0 68 d0 d0 	mov	r8,53456
80020282:	70 0c       	ld.w	r12,r8[0x0]
  scene_read_buf();
  print_dbg("\r\n finsihed reading ");  
80020284:	fe b0 bb 92 	rcall	800179a8 <flash_read_scene>
80020288:	fe cc d0 98 	sub	r12,pc,-12136
}
8002028c:	fe b0 96 e0 	rcall	8001304c <print_dbg>
80020290:	d8 02       	popm	pc
80020292:	d7 03       	nop

80020294 <scene_init>:
80020294:	d4 01       	pushm	lr
80020296:	e0 7c 26 40 	mov	r12,75328
8002029a:	fe b0 be 65 	rcall	80017f64 <alloc_mem>
8002029e:	e0 68 d0 d0 	mov	r8,53456
//----------------------------------------------
//----- extern functions

void scene_init(void) {
  sceneData = (sceneData_t*)alloc_mem( sizeof(sceneData_t) );
}
800202a2:	91 0c       	st.w	r8[0x0],r12
800202a4:	d8 02       	popm	pc
800202a6:	d7 03       	nop

800202a8 <scene_write_default>:
800202a8:	eb cd 40 80 	pushm	r7,lr
  net_send_params();
}

// write current state as default
void scene_write_default(void) {
  print_dbg("\r\n writing default scene to flash... ");
800202ac:	fe cc d0 a4 	sub	r12,pc,-12124
800202b0:	fe b0 96 ce 	rcall	8001304c <print_dbg>
  //  free(sceneData);
}

// fill global RAM buffer with current state of system
void scene_write_buf(void) {
  memcpy( &(sceneData->net),     (void*)net,  sizeof(ctlnet_t));
800202b4:	e0 68 3f cc 	mov	r8,16332
800202b8:	e0 67 d0 d0 	mov	r7,53456
800202bc:	70 0b       	ld.w	r11,r8[0x0]
800202be:	6e 0c       	ld.w	r12,r7[0x0]
800202c0:	e0 6a 95 10 	mov	r10,38160
  memcpy( &(sceneData->presets), &presets, sizeof(preset_t) * NET_PRESETS_MAX);
800202c4:	2d 0c       	sub	r12,-48
800202c6:	e0 a0 07 85 	rcall	800211d0 <memcpy>
800202ca:	e0 6a 91 00 	mov	r10,37120
800202ce:	6e 0c       	ld.w	r12,r7[0x0]
800202d0:	e0 6b 3f d0 	mov	r11,16336

// write current state as default
void scene_write_default(void) {
  print_dbg("\r\n writing default scene to flash... ");
  scene_write_buf();
  flash_write_scene(sceneData);
800202d4:	fe 3c 6a c0 	sub	r12,-38208
800202d8:	e0 a0 07 7c 	rcall	800211d0 <memcpy>
  print_dbg("\r\n finished writing ");
800202dc:	6e 0c       	ld.w	r12,r7[0x0]
800202de:	fe b0 bb 71 	rcall	800179c0 <flash_write_scene>
}
800202e2:	fe cc d0 b2 	sub	r12,pc,-12110
800202e6:	fe b0 96 b3 	rcall	8001304c <print_dbg>
800202ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800202ee:	d7 03       	nop

800202f0 <op_add_init>:
};

//-------------------------------------------------
//---- external func define
void op_add_init(op_add_t* add) {
  add->super.numInputs = 3;
800202f0:	30 38       	mov	r8,3
800202f2:	b8 88       	st.b	r12[0x0],r8
  add->super.numOutputs = 1;
800202f4:	30 18       	mov	r8,1
800202f6:	b8 98       	st.b	r12[0x1],r8
  add->outs[0] = -1;
  add->super.inc_func = (op_inc_func)op_add_inc_input;
800202f8:	fe c8 ff 60 	sub	r8,pc,-160
  add->super.in_func = op_add_in_func;
800202fc:	99 18       	st.w	r12[0x4],r8
800202fe:	e0 68 01 0c 	mov	r8,268
  add->super.in_val = add->in_val;
80020302:	99 28       	st.w	r12[0x8],r8
80020304:	f8 c8 ff c8 	sub	r8,r12,-56
  add->super.out = add->outs;
80020308:	99 38       	st.w	r12[0xc],r8
8002030a:	f8 c8 ff c0 	sub	r8,r12,-64
  add->super.opString = op_add_opstring;
8002030e:	99 48       	st.w	r12[0x10],r8
80020310:	fe c8 d0 94 	sub	r8,pc,-12140
  add->super.inString = op_add_instring;
80020314:	70 08       	ld.w	r8,r8[0x0]
80020316:	99 58       	st.w	r12[0x14],r8
  add->super.outString = op_add_outstring;
80020318:	fe c8 d0 d0 	sub	r8,pc,-12080
8002031c:	70 08       	ld.w	r8,r8[0x0]
  add->super.type = eOpAdd;  
8002031e:	99 68       	st.w	r12[0x18],r8
80020320:	fe c8 d0 a0 	sub	r8,pc,-12128
  add->super.status = eUserOp;  
80020324:	70 08       	ld.w	r8,r8[0x0]
80020326:	99 78       	st.w	r12[0x1c],r8

  add->in_val[0] = &(add->a);
80020328:	30 28       	mov	r8,2
8002032a:	f9 68 00 20 	st.b	r12[32],r8
  add->in_val[1] = &(add->b);
8002032e:	30 08       	mov	r8,0
80020330:	99 98       	st.w	r12[0x24],r8
80020332:	f8 c8 ff d4 	sub	r8,r12,-44
  add->in_val[2] = &(add->btrig);
80020336:	99 e8       	st.w	r12[0x38],r8
80020338:	f8 c8 ff d0 	sub	r8,r12,-48
}
8002033c:	99 f8       	st.w	r12[0x3c],r8
8002033e:	f8 c8 ff cc 	sub	r8,r12,-52
80020342:	f9 48 00 40 	st.w	r12[64],r8
80020346:	5e fc       	retal	r12

80020348 <op_add_in_btrig>:
80020348:	58 0b       	cp.w	r11,0
8002034a:	5f 18       	srne	r8
8002034c:	99 d8       	st.w	r12[0x34],r8
8002034e:	5e fc       	retal	r12

80020350 <op_add_in_b>:
80020350:	eb cd 40 80 	pushm	r7,lr
  add->a = *v;
  add->val = OP_ADD(add->a, add->b);
  net_activate(add->outs[0], add->val);
}

static void op_add_in_b(op_add_t* add, const io_t* v) {
80020354:	18 97       	mov	r7,r12
  add->b = *v;
80020356:	76 0b       	ld.w	r11,r11[0x0]
80020358:	99 cb       	st.w	r12[0x30],r11
  add->val = OP_ADD(add->a, add->b);
8002035a:	78 bc       	ld.w	r12,r12[0x2c]
8002035c:	fe b0 eb ea 	rcall	8001db30 <fix16_add>
80020360:	8f ac       	st.w	r7[0x28],r12
  if(add->btrig) {
80020362:	6e d8       	ld.w	r8,r7[0x34]
80020364:	58 08       	cp.w	r8,0
80020366:	c0 60       	breq	80020372 <op_add_in_b+0x22>
    net_activate(add->outs[0], add->val);
80020368:	18 9b       	mov	r11,r12
8002036a:	ef 0c 00 40 	ld.sh	r12,r7[64]
8002036e:	fe b0 f2 c7 	rcall	8001e8fc <net_activate>
80020372:	e3 cd 80 80 	ldm	sp++,r7,pc
80020376:	d7 03       	nop

80020378 <op_add_in_a>:
80020378:	eb cd 40 80 	pushm	r7,lr
8002037c:	18 97       	mov	r7,r12
8002037e:	76 0c       	ld.w	r12,r11[0x0]
//-------------------------------------------------
//---- static func define

static void op_add_in_a(op_add_t* add, const io_t* v) {
  add->a = *v;
  add->val = OP_ADD(add->a, add->b);
80020380:	6e cb       	ld.w	r11,r7[0x30]

//-------------------------------------------------
//---- static func define

static void op_add_in_a(op_add_t* add, const io_t* v) {
  add->a = *v;
80020382:	8f bc       	st.w	r7[0x2c],r12
  add->val = OP_ADD(add->a, add->b);
80020384:	fe b0 eb d6 	rcall	8001db30 <fix16_add>
80020388:	18 9b       	mov	r11,r12
  net_activate(add->outs[0], add->val);
8002038a:	ef 0c 00 40 	ld.sh	r12,r7[64]
//-------------------------------------------------
//---- static func define

static void op_add_in_a(op_add_t* add, const io_t* v) {
  add->a = *v;
  add->val = OP_ADD(add->a, add->b);
8002038e:	8f ab       	st.w	r7[0x28],r11
  net_activate(add->outs[0], add->val);
80020390:	fe b0 f2 b6 	rcall	8001e8fc <net_activate>
}
80020394:	e3 cd 80 80 	ldm	sp++,r7,pc

80020398 <op_add_inc_input>:
80020398:	eb cd 40 80 	pushm	r7,lr
8002039c:	20 1d       	sub	sp,4
8002039e:	50 0a       	stdsp	sp[0x0],r10
static void op_add_in_btrig(op_add_t* add, const io_t* v) {
  add->btrig = (v != 0);
}

//===== UI input
static void op_add_inc_input(op_add_t* add, const s16 idx, const io_t inc) {
800203a0:	18 97       	mov	r7,r12
  io_t val;
  switch(idx) {
800203a2:	30 18       	mov	r8,1
800203a4:	f0 0b 19 00 	cp.h	r11,r8
800203a8:	c2 20       	breq	800203ec <op_add_inc_input+0x54>
800203aa:	30 28       	mov	r8,2
800203ac:	f0 0b 19 00 	cp.h	r11,r8
800203b0:	c1 90       	breq	800203e2 <op_add_inc_input+0x4a>
800203b2:	30 08       	mov	r8,0
800203b4:	f0 0b 19 00 	cp.h	r11,r8
800203b8:	c0 40       	breq	800203c0 <op_add_inc_input+0x28>
    break;
  case 2:  // trig
    op_add_in_btrig(add, &inc);
    break;
  }
}
800203ba:	2f fd       	sub	sp,-4
800203bc:	e3 cd 80 80 	ldm	sp++,r7,pc
//===== UI input
static void op_add_inc_input(op_add_t* add, const s16 idx, const io_t inc) {
  io_t val;
  switch(idx) {
  case 0:  // a
    val = OP_ADD(add->a, inc);
800203c0:	14 9b       	mov	r11,r10
800203c2:	78 bc       	ld.w	r12,r12[0x2c]
800203c4:	fe b0 eb b6 	rcall	8001db30 <fix16_add>
//-------------------------------------------------
//---- static func define

static void op_add_in_a(op_add_t* add, const io_t* v) {
  add->a = *v;
  add->val = OP_ADD(add->a, add->b);
800203c8:	6e cb       	ld.w	r11,r7[0x30]

//-------------------------------------------------
//---- static func define

static void op_add_in_a(op_add_t* add, const io_t* v) {
  add->a = *v;
800203ca:	8f bc       	st.w	r7[0x2c],r12
  add->val = OP_ADD(add->a, add->b);
800203cc:	fe b0 eb b2 	rcall	8001db30 <fix16_add>
800203d0:	18 9b       	mov	r11,r12
  net_activate(add->outs[0], add->val);
800203d2:	ef 0c 00 40 	ld.sh	r12,r7[64]
//-------------------------------------------------
//---- static func define

static void op_add_in_a(op_add_t* add, const io_t* v) {
  add->a = *v;
  add->val = OP_ADD(add->a, add->b);
800203d6:	8f ab       	st.w	r7[0x28],r11
  net_activate(add->outs[0], add->val);
800203d8:	fe b0 f2 92 	rcall	8001e8fc <net_activate>
    break;
  case 2:  // trig
    op_add_in_btrig(add, &inc);
    break;
  }
}
800203dc:	2f fd       	sub	sp,-4
800203de:	e3 cd 80 80 	ldm	sp++,r7,pc
    net_activate(add->outs[0], add->val);
  }
}

static void op_add_in_btrig(op_add_t* add, const io_t* v) {
  add->btrig = (v != 0);
800203e2:	30 18       	mov	r8,1
800203e4:	99 d8       	st.w	r12[0x34],r8
    break;
  case 2:  // trig
    op_add_in_btrig(add, &inc);
    break;
  }
}
800203e6:	2f fd       	sub	sp,-4
800203e8:	e3 cd 80 80 	ldm	sp++,r7,pc
  case 0:  // a
    val = OP_ADD(add->a, inc);
    op_add_in_a(add, &val);
    break; 
  case 1:  // b
    val = OP_ADD(add->b, inc);
800203ec:	14 9b       	mov	r11,r10
800203ee:	78 cc       	ld.w	r12,r12[0x30]
800203f0:	fe b0 eb a0 	rcall	8001db30 <fix16_add>
800203f4:	18 9b       	mov	r11,r12
  add->val = OP_ADD(add->a, add->b);
  net_activate(add->outs[0], add->val);
}

static void op_add_in_b(op_add_t* add, const io_t* v) {
  add->b = *v;
800203f6:	8f cc       	st.w	r7[0x30],r12
  add->val = OP_ADD(add->a, add->b);
800203f8:	6e bc       	ld.w	r12,r7[0x2c]
800203fa:	fe b0 eb 9b 	rcall	8001db30 <fix16_add>
800203fe:	8f ac       	st.w	r7[0x28],r12
  if(add->btrig) {
80020400:	6e d8       	ld.w	r8,r7[0x34]
80020402:	58 08       	cp.w	r8,0
80020404:	cd b0       	breq	800203ba <op_add_inc_input+0x22>
    net_activate(add->outs[0], add->val);
80020406:	18 9b       	mov	r11,r12
80020408:	ef 0c 00 40 	ld.sh	r12,r7[64]
8002040c:	fe b0 f2 78 	rcall	8001e8fc <net_activate>
80020410:	cd 5b       	rjmp	800203ba <op_add_inc_input+0x22>
80020412:	d7 03       	nop

80020414 <op_enc_init>:
//----- external functions
// initialize
void op_enc_init(op_enc_t* enc) {
  enc->super.numInputs = 5;
  enc->super.numOutputs = 2;
  enc->outs[0] = -1;
80020414:	3f f8       	mov	r8,-1
  enc->outs[1] = -1;
80020416:	f9 58 00 56 	st.h	r12[86],r8
//----- external functions
// initialize
void op_enc_init(op_enc_t* enc) {
  enc->super.numInputs = 5;
  enc->super.numOutputs = 2;
  enc->outs[0] = -1;
8002041a:	f9 58 00 54 	st.h	r12[84],r8
  enc->super.out = enc->outs;
  enc->super.opString = op_enc_opstring;
  enc->super.inString = op_enc_instring;
  enc->super.outString = op_enc_outstring;
  enc->super.type = eOpEnc;
  enc->super.status = eSysCtlOp;
8002041e:	30 18       	mov	r8,1
  enc->in_val[3] = &(enc->step);
  enc->in_val[4] = &(enc->wrap);
  
  enc->min = 0;
  enc->max = OP_ONE;
  enc->step = OP_MIN_INC;
80020420:	99 c8       	st.w	r12[0x30],r8
  enc->super.out = enc->outs;
  enc->super.opString = op_enc_opstring;
  enc->super.inString = op_enc_instring;
  enc->super.outString = op_enc_outstring;
  enc->super.type = eOpEnc;
  enc->super.status = eSysCtlOp;
80020422:	99 98       	st.w	r12[0x24],r8
  enc->in_val[1] = &(enc->min);
  enc->in_val[2] = &(enc->max);
  enc->in_val[3] = &(enc->step);
  enc->in_val[4] = &(enc->wrap);
  
  enc->min = 0;
80020424:	30 08       	mov	r8,0
  enc->max = OP_ONE;
  enc->step = OP_MIN_INC;
  enc->wrap = 0;
80020426:	99 f8       	st.w	r12[0x3c],r8
  enc->in_val[1] = &(enc->min);
  enc->in_val[2] = &(enc->max);
  enc->in_val[3] = &(enc->step);
  enc->in_val[4] = &(enc->wrap);
  
  enc->min = 0;
80020428:	99 d8       	st.w	r12[0x34],r8

//-------------------------------------------------
//----- external functions
// initialize
void op_enc_init(op_enc_t* enc) {
  enc->super.numInputs = 5;
8002042a:	30 58       	mov	r8,5
8002042c:	b8 88       	st.b	r12[0x0],r8
  enc->super.numOutputs = 2;
8002042e:	30 28       	mov	r8,2
80020430:	b8 98       	st.b	r12[0x1],r8
  enc->outs[0] = -1;
  enc->outs[1] = -1;
  enc->super.inc_func = (op_inc_func)op_enc_inc_input;
80020432:	fe c8 fe 8a 	sub	r8,pc,-374
  enc->super.in_func = op_enc_in_func;
80020436:	99 18       	st.w	r12[0x4],r8
80020438:	e0 68 01 18 	mov	r8,280
  enc->super.in_val = enc->in_val;
8002043c:	99 28       	st.w	r12[0x8],r8
8002043e:	f8 c8 ff c0 	sub	r8,r12,-64
  enc->super.out = enc->outs;
80020442:	99 38       	st.w	r12[0xc],r8
80020444:	f8 c8 ff ac 	sub	r8,r12,-84
  enc->super.opString = op_enc_opstring;
80020448:	99 48       	st.w	r12[0x10],r8
8002044a:	fe c8 d1 c2 	sub	r8,pc,-11838
  enc->super.inString = op_enc_instring;
8002044e:	70 08       	ld.w	r8,r8[0x0]
80020450:	99 58       	st.w	r12[0x14],r8
  enc->super.outString = op_enc_outstring;
80020452:	fe c8 d1 ce 	sub	r8,pc,-11826
80020456:	70 08       	ld.w	r8,r8[0x0]
  enc->super.type = eOpEnc;
80020458:	99 68       	st.w	r12[0x18],r8
8002045a:	fe c8 d1 ce 	sub	r8,pc,-11826
  enc->super.status = eSysCtlOp;

  enc->in_val[0] = &(enc->move);
8002045e:	70 08       	ld.w	r8,r8[0x0]
80020460:	99 78       	st.w	r12[0x1c],r8
80020462:	30 18       	mov	r8,1
80020464:	f9 68 00 20 	st.b	r12[32],r8
  enc->in_val[1] = &(enc->min);
80020468:	f8 c8 ff d4 	sub	r8,r12,-44
8002046c:	f9 48 00 40 	st.w	r12[64],r8
  enc->in_val[2] = &(enc->max);
80020470:	f8 c8 ff cc 	sub	r8,r12,-52
80020474:	f9 48 00 44 	st.w	r12[68],r8
  enc->in_val[3] = &(enc->step);
80020478:	f8 c8 ff c8 	sub	r8,r12,-56
8002047c:	f9 48 00 48 	st.w	r12[72],r8
  enc->in_val[4] = &(enc->wrap);
80020480:	f8 c8 ff d0 	sub	r8,r12,-48
80020484:	f9 48 00 4c 	st.w	r12[76],r8
  
  enc->min = 0;
  enc->max = OP_ONE;
80020488:	f8 c8 ff c4 	sub	r8,r12,-60
  enc->step = OP_MIN_INC;
  enc->wrap = 0;
}
8002048c:	f9 48 00 50 	st.w	r12[80],r8
80020490:	e0 78 00 00 	mov	r8,65536
80020494:	99 e8       	st.w	r12[0x38],r8
80020496:	5e fc       	retal	r12

80020498 <op_enc_in_step>:
80020498:	76 08       	ld.w	r8,r11[0x0]
8002049a:	99 c8       	st.w	r12[0x30],r8
8002049c:	5e fc       	retal	r12

8002049e <op_enc_in_wrap>:
8002049e:	76 08       	ld.w	r8,r11[0x0]
800204a0:	58 08       	cp.w	r8,0
800204a2:	e0 8a 00 06 	brle	800204ae <op_enc_in_wrap+0x10>
}

// wrap behavior
static void op_enc_in_wrap(op_enc_t* enc, const io_t* v) {
  //  enc->wrap = (*v > 0);
  if(*v > 0) { enc->wrap = OP_ONE; } else { enc->wrap = 0; }
800204a6:	e0 78 00 00 	mov	r8,65536
800204aa:	99 f8       	st.w	r12[0x3c],r8
800204ac:	5e fc       	retal	r12
800204ae:	30 08       	mov	r8,0
800204b0:	99 f8       	st.w	r12[0x3c],r8
800204b2:	5e fc       	retal	r12

800204b4 <op_enc_perform>:
  //  op_enc_perform(enc);
}

// perform wrapping and output
static void op_enc_perform(op_enc_t* enc){ 
800204b4:	eb cd 40 fc 	pushm	r2-r7,lr
800204b8:	18 94       	mov	r4,r12
  io_t wrap = 0;
  io_t dif = 0;
  if (enc->wrap) { // wrapping...
800204ba:	78 f6       	ld.w	r6,r12[0x3c]
800204bc:	58 06       	cp.w	r6,0
800204be:	c3 90       	breq	80020530 <op_enc_perform+0x7c>
    // if value needs wrapping, output the applied difference
    while (enc->val > enc->max) { 
800204c0:	78 a7       	ld.w	r7,r12[0x28]
800204c2:	78 e3       	ld.w	r3,r12[0x38]
800204c4:	06 37       	cp.w	r7,r3
800204c6:	e0 8a 00 51 	brle	80020568 <op_enc_perform+0xb4>
800204ca:	30 05       	mov	r5,0
800204cc:	78 d2       	ld.w	r2,r12[0x34]
      dif = OP_SUB(enc->min, enc->max);
800204ce:	06 9b       	mov	r11,r3
800204d0:	04 9c       	mov	r12,r2
800204d2:	fe b0 eb 3c 	rcall	8001db4a <fix16_sub>
      wrap = OP_ADD(wrap, dif);
800204d6:	18 9b       	mov	r11,r12
  io_t wrap = 0;
  io_t dif = 0;
  if (enc->wrap) { // wrapping...
    // if value needs wrapping, output the applied difference
    while (enc->val > enc->max) { 
      dif = OP_SUB(enc->min, enc->max);
800204d8:	18 96       	mov	r6,r12
      wrap = OP_ADD(wrap, dif);
800204da:	0a 9c       	mov	r12,r5
800204dc:	fe b0 eb 2a 	rcall	8001db30 <fix16_add>
      enc->val = OP_ADD(enc->val, dif);
800204e0:	0c 9b       	mov	r11,r6
  io_t dif = 0;
  if (enc->wrap) { // wrapping...
    // if value needs wrapping, output the applied difference
    while (enc->val > enc->max) { 
      dif = OP_SUB(enc->min, enc->max);
      wrap = OP_ADD(wrap, dif);
800204e2:	18 95       	mov	r5,r12
      enc->val = OP_ADD(enc->val, dif);
800204e4:	0e 9c       	mov	r12,r7
800204e6:	fe b0 eb 25 	rcall	8001db30 <fix16_add>
800204ea:	89 ac       	st.w	r4[0x28],r12
800204ec:	18 97       	mov	r7,r12
static void op_enc_perform(op_enc_t* enc){ 
  io_t wrap = 0;
  io_t dif = 0;
  if (enc->wrap) { // wrapping...
    // if value needs wrapping, output the applied difference
    while (enc->val > enc->max) { 
800204ee:	18 33       	cp.w	r3,r12
800204f0:	ce f5       	brlt	800204ce <op_enc_perform+0x1a>
      dif = OP_SUB(enc->min, enc->max);
      wrap = OP_ADD(wrap, dif);
      enc->val = OP_ADD(enc->val, dif);
    }
    while (enc->val < enc->min) { 
800204f2:	0e 32       	cp.w	r2,r7
800204f4:	e0 8a 00 15 	brle	8002051e <op_enc_perform+0x6a>
      dif = OP_SUB(enc->max, enc->min);
800204f8:	04 9b       	mov	r11,r2
800204fa:	06 9c       	mov	r12,r3
800204fc:	fe b0 eb 27 	rcall	8001db4a <fix16_sub>
      wrap = OP_ADD(wrap, dif);
80020500:	18 9b       	mov	r11,r12
      dif = OP_SUB(enc->min, enc->max);
      wrap = OP_ADD(wrap, dif);
      enc->val = OP_ADD(enc->val, dif);
    }
    while (enc->val < enc->min) { 
      dif = OP_SUB(enc->max, enc->min);
80020502:	18 96       	mov	r6,r12
      wrap = OP_ADD(wrap, dif);
80020504:	0a 9c       	mov	r12,r5
80020506:	fe b0 eb 15 	rcall	8001db30 <fix16_add>
      enc->val = OP_ADD(enc->val, dif);
8002050a:	0c 9b       	mov	r11,r6
      wrap = OP_ADD(wrap, dif);
      enc->val = OP_ADD(enc->val, dif);
    }
    while (enc->val < enc->min) { 
      dif = OP_SUB(enc->max, enc->min);
      wrap = OP_ADD(wrap, dif);
8002050c:	18 95       	mov	r5,r12
      enc->val = OP_ADD(enc->val, dif);
8002050e:	0e 9c       	mov	r12,r7
80020510:	fe b0 eb 10 	rcall	8001db30 <fix16_add>
80020514:	89 ac       	st.w	r4[0x28],r12
80020516:	18 97       	mov	r7,r12
    while (enc->val > enc->max) { 
      dif = OP_SUB(enc->min, enc->max);
      wrap = OP_ADD(wrap, dif);
      enc->val = OP_ADD(enc->val, dif);
    }
    while (enc->val < enc->min) { 
80020518:	18 32       	cp.w	r2,r12
8002051a:	fe 99 ff ef 	brgt	800204f8 <op_enc_perform+0x44>
      enc->val = enc->min;
      dif = -1; // force wrap output
    }
  }
  // output the value
  net_activate(enc->outs[0], enc->val);
8002051e:	0e 9b       	mov	r11,r7
80020520:	e9 0c 00 54 	ld.sh	r12,r4[84]
80020524:	fe b0 f1 ec 	rcall	8001e8fc <net_activate>

  // output the wrap amount
  if (dif != 0) {
80020528:	58 06       	cp.w	r6,0
8002052a:	c1 61       	brne	80020556 <op_enc_perform+0xa2>
8002052c:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
      dif = OP_SUB(enc->max, enc->min);
      wrap = OP_ADD(wrap, dif);
      enc->val = OP_ADD(enc->val, dif);
    }
  } else { // saturating...
    if (enc->val > enc->max) {
80020530:	78 a8       	ld.w	r8,r12[0x28]
80020532:	78 e7       	ld.w	r7,r12[0x38]
80020534:	0e 38       	cp.w	r8,r7
80020536:	f0 07 17 a0 	movle	r7,r8
      enc->val = enc->max;
8002053a:	e9 f7 9a 0a 	st.wgt	r4[0x28],r7
8002053e:	f9 b6 09 01 	movgt	r6,1
      dif = 1; // force wrap output
    }
    if (enc->val < enc->min) {
80020542:	78 db       	ld.w	r11,r12[0x34]
80020544:	0e 3b       	cp.w	r11,r7
80020546:	e0 8a 00 0f 	brle	80020564 <op_enc_perform+0xb0>
      enc->val = enc->min;
8002054a:	99 ab       	st.w	r12[0x28],r11
      dif = -1; // force wrap output
    }
  }
  // output the value
  net_activate(enc->outs[0], enc->val);
8002054c:	30 05       	mov	r5,0
8002054e:	f9 0c 00 54 	ld.sh	r12,r12[84]
80020552:	fe b0 f1 d5 	rcall	8001e8fc <net_activate>

  // output the wrap amount
  if (dif != 0) {
    net_activate(enc->outs[1], wrap);  
80020556:	0a 9b       	mov	r11,r5
80020558:	e9 0c 00 56 	ld.sh	r12,r4[86]
8002055c:	fe b0 f1 d0 	rcall	8001e8fc <net_activate>
80020560:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
      enc->val = enc->min;
      dif = -1; // force wrap output
    }
  }
  // output the value
  net_activate(enc->outs[0], enc->val);
80020564:	30 05       	mov	r5,0
80020566:	cd cb       	rjmp	8002051e <op_enc_perform+0x6a>
static void op_enc_perform(op_enc_t* enc){ 
  io_t wrap = 0;
  io_t dif = 0;
  if (enc->wrap) { // wrapping...
    // if value needs wrapping, output the applied difference
    while (enc->val > enc->max) { 
80020568:	30 06       	mov	r6,0
8002056a:	78 d2       	ld.w	r2,r12[0x34]
8002056c:	0c 95       	mov	r5,r6
8002056e:	cc 2b       	rjmp	800204f2 <op_enc_perform+0x3e>

80020570 <op_enc_in_max>:
80020570:	d4 01       	pushm	lr
80020572:	76 08       	ld.w	r8,r11[0x0]
80020574:	99 e8       	st.w	r12[0x38],r8
80020576:	c9 ff       	rcall	800204b4 <op_enc_perform>
80020578:	d8 02       	popm	pc
8002057a:	d7 03       	nop

8002057c <op_enc_in_min>:

// max
static void op_enc_in_max(op_enc_t* enc, const io_t* v) {
  enc->max = *v;
  op_enc_perform(enc);
}
8002057c:	d4 01       	pushm	lr
8002057e:	76 08       	ld.w	r8,r11[0x0]
  op_enc_perform(enc);
}

// max
static void op_enc_in_min(op_enc_t* enc, const io_t* v) {
  enc->min = *v;
80020580:	99 d8       	st.w	r12[0x34],r8
  op_enc_perform(enc);
80020582:	c9 9f       	rcall	800204b4 <op_enc_perform>
80020584:	d8 02       	popm	pc
}
80020586:	d7 03       	nop

80020588 <op_enc_in_move>:
80020588:	eb cd 40 80 	pushm	r7,lr
  enc->step = *v;
  // op_enc_perform(enc);
}

// move
static void op_enc_in_move(op_enc_t* enc, const io_t* v) {
8002058c:	18 97       	mov	r7,r12
  //  enc->val += enc->step * (*v); 
  enc->val = OP_ADD(enc->val, OP_MUL(enc->step, *v));
8002058e:	76 0b       	ld.w	r11,r11[0x0]
80020590:	78 cc       	ld.w	r12,r12[0x30]
80020592:	fe b0 ea ea 	rcall	8001db66 <fix16_mul>
80020596:	18 9b       	mov	r11,r12
80020598:	6e ac       	ld.w	r12,r7[0x28]
8002059a:	fe b0 ea cb 	rcall	8001db30 <fix16_add>
8002059e:	8f ac       	st.w	r7[0x28],r12
  op_enc_perform(enc);
800205a0:	0e 9c       	mov	r12,r7
800205a2:	c8 9f       	rcall	800204b4 <op_enc_perform>
800205a4:	e3 cd 80 80 	ldm	sp++,r7,pc

800205a8 <op_enc_inc_input>:
}
800205a8:	eb cd 40 80 	pushm	r7,lr
800205ac:	30 28       	mov	r8,2
800205ae:	18 97       	mov	r7,r12
800205b0:	f0 0b 19 00 	cp.h	r11,r8
800205b4:	c3 30       	breq	8002061a <op_enc_inc_input+0x72>
800205b6:	e0 8a 00 0c 	brle	800205ce <op_enc_inc_input+0x26>
}

//===== UI input
static void op_enc_inc_input(op_enc_t* enc, const s16 idx, const io_t inc) {
  io_t val;
  switch(idx) {
800205ba:	30 38       	mov	r8,3
800205bc:	f0 0b 19 00 	cp.h	r11,r8
800205c0:	c3 60       	breq	8002062c <op_enc_inc_input+0x84>
800205c2:	30 48       	mov	r8,4
800205c4:	f0 0b 19 00 	cp.h	r11,r8
800205c8:	c1 40       	breq	800205f0 <op_enc_inc_input+0x48>
800205ca:	e3 cd 80 80 	ldm	sp++,r7,pc
800205ce:	30 08       	mov	r8,0
800205d0:	f0 0b 19 00 	cp.h	r11,r8
800205d4:	c1 60       	breq	80020600 <op_enc_inc_input+0x58>
800205d6:	30 18       	mov	r8,1
800205d8:	f0 0b 19 00 	cp.h	r11,r8
800205dc:	cf 71       	brne	800205ca <op_enc_inc_input+0x22>
  case 0:  // move
    op_enc_in_move(enc, &inc);
    break; 
  case 1:  // min
    val = OP_ADD(enc->min, inc);
800205de:	14 9b       	mov	r11,r10
800205e0:	78 dc       	ld.w	r12,r12[0x34]
800205e2:	fe b0 ea a7 	rcall	8001db30 <fix16_add>
  op_enc_perform(enc);
}

// max
static void op_enc_in_min(op_enc_t* enc, const io_t* v) {
  enc->min = *v;
800205e6:	8f dc       	st.w	r7[0x34],r12
  op_enc_perform(enc);
800205e8:	0e 9c       	mov	r12,r7
800205ea:	c6 5f       	rcall	800204b4 <op_enc_perform>
800205ec:	e3 cd 80 80 	ldm	sp++,r7,pc
800205f0:	58 0a       	cp.w	r10,0
}

// wrap behavior
static void op_enc_in_wrap(op_enc_t* enc, const io_t* v) {
  //  enc->wrap = (*v > 0);
  if(*v > 0) { enc->wrap = OP_ONE; } else { enc->wrap = 0; }
800205f2:	e0 8a 00 24 	brle	8002063a <op_enc_inc_input+0x92>
800205f6:	e0 78 00 00 	mov	r8,65536
800205fa:	99 f8       	st.w	r12[0x3c],r8
800205fc:	e3 cd 80 80 	ldm	sp++,r7,pc
80020600:	14 9b       	mov	r11,r10
}

// move
static void op_enc_in_move(op_enc_t* enc, const io_t* v) {
  //  enc->val += enc->step * (*v); 
  enc->val = OP_ADD(enc->val, OP_MUL(enc->step, *v));
80020602:	78 cc       	ld.w	r12,r12[0x30]
80020604:	fe b0 ea b1 	rcall	8001db66 <fix16_mul>
80020608:	18 9b       	mov	r11,r12
8002060a:	6e ac       	ld.w	r12,r7[0x28]
8002060c:	fe b0 ea 92 	rcall	8001db30 <fix16_add>
80020610:	8f ac       	st.w	r7[0x28],r12
80020612:	0e 9c       	mov	r12,r7
  op_enc_perform(enc);
80020614:	c5 0f       	rcall	800204b4 <op_enc_perform>
80020616:	e3 cd 80 80 	ldm	sp++,r7,pc
static void op_enc_inc_input(op_enc_t* enc, const s16 idx, const io_t inc) {
  io_t val;
  switch(idx) {
  case 0:  // move
    op_enc_in_move(enc, &inc);
    break; 
8002061a:	14 9b       	mov	r11,r10
8002061c:	78 ec       	ld.w	r12,r12[0x38]
  case 1:  // min
    val = OP_ADD(enc->min, inc);
    op_enc_in_min(enc, &val);
    break;
  case 2:  // max
    val = OP_ADD(enc->max, inc);
8002061e:	fe b0 ea 89 	rcall	8001db30 <fix16_add>
80020622:	8f ec       	st.w	r7[0x38],r12
80020624:	0e 9c       	mov	r12,r7
  op_enc_perform(enc);
}

// max
static void op_enc_in_max(op_enc_t* enc, const io_t* v) {
  enc->max = *v;
80020626:	c4 7f       	rcall	800204b4 <op_enc_perform>
  op_enc_perform(enc);
80020628:	e3 cd 80 80 	ldm	sp++,r7,pc
8002062c:	78 cc       	ld.w	r12,r12[0x30]
8002062e:	14 9b       	mov	r11,r10
80020630:	fe b0 ea 80 	rcall	8001db30 <fix16_add>
  case 2:  // max
    val = OP_ADD(enc->max, inc);
    op_enc_in_max(enc, &val);
    break;
  case 3: // step
    val = OP_ADD(enc->step, inc);
80020634:	8f cc       	st.w	r7[0x30],r12
80020636:	e3 cd 80 80 	ldm	sp++,r7,pc
//----- static function definitions

//======= operator input
// step
static void op_enc_in_step(op_enc_t* enc, const io_t* v) {
  enc->step = *v;
8002063a:	30 08       	mov	r8,0
8002063c:	99 f8       	st.w	r12[0x3c],r8
8002063e:	cc 6b       	rjmp	800205ca <op_enc_inc_input+0x22>

80020640 <op_gate_init>:
};

//-------------------------------------------------
//----- external function definitions
void op_gate_init(op_gate_t* gate) {
  gate->super.numInputs = 3;
80020640:	30 38       	mov	r8,3
80020642:	b8 88       	st.b	r12[0x0],r8
  gate->super.numOutputs = 1;
80020644:	30 18       	mov	r8,1
80020646:	b8 98       	st.b	r12[0x1],r8
  gate->outs[0] = -1;
80020648:	3f f8       	mov	r8,-1
8002064a:	f9 58 00 40 	st.h	r12[64],r8
  gate->super.inc_func = (op_inc_func)op_gate_inc_input;
8002064e:	fe c8 ff 5e 	sub	r8,pc,-162
  gate->super.in_func = op_gate_in_func;
80020652:	99 18       	st.w	r12[0x4],r8
80020654:	e0 68 01 2c 	mov	r8,300
  gate->super.in_val = gate->in_val;
80020658:	99 28       	st.w	r12[0x8],r8
8002065a:	f8 c8 ff cc 	sub	r8,r12,-52
  gate->super.out = gate->outs;
8002065e:	99 38       	st.w	r12[0xc],r8
80020660:	f8 c8 ff c0 	sub	r8,r12,-64
  gate->super.opString = op_gate_opstring;
80020664:	99 48       	st.w	r12[0x10],r8
80020666:	fe c8 d3 66 	sub	r8,pc,-11418
  gate->super.inString = op_gate_instring;
8002066a:	70 08       	ld.w	r8,r8[0x0]
8002066c:	99 58       	st.w	r12[0x14],r8
  gate->super.outString = op_gate_outstring;
8002066e:	fe c8 d3 72 	sub	r8,pc,-11406
80020672:	70 08       	ld.w	r8,r8[0x0]
  gate->super.type = eOpGate;  
80020674:	99 68       	st.w	r12[0x18],r8
80020676:	fe c8 d3 7e 	sub	r8,pc,-11394
  gate->super.status = eUserOp;
8002067a:	70 08       	ld.w	r8,r8[0x0]
8002067c:	99 78       	st.w	r12[0x1c],r8

  gate->in_val[0] = &(gate->val);
8002067e:	30 48       	mov	r8,4
80020680:	f9 68 00 20 	st.b	r12[32],r8
  gate->in_val[1] = &(gate->gate);
80020684:	30 08       	mov	r8,0
80020686:	99 98       	st.w	r12[0x24],r8
80020688:	f8 c8 ff d8 	sub	r8,r12,-40
  gate->in_val[2] = &(gate->store);
8002068c:	99 d8       	st.w	r12[0x34],r8
8002068e:	f8 c8 ff d4 	sub	r8,r12,-44
}
80020692:	99 e8       	st.w	r12[0x38],r8
80020694:	f8 c8 ff d0 	sub	r8,r12,-48
80020698:	99 f8       	st.w	r12[0x3c],r8
8002069a:	5e fc       	retal	r12

8002069c <op_gate_in_store>:
8002069c:	76 08       	ld.w	r8,r11[0x0]
8002069e:	58 08       	cp.w	r8,0
800206a0:	e0 8a 00 05 	brle	800206aa <op_gate_in_store+0xe>
800206a4:	30 18       	mov	r8,1
800206a6:	99 c8       	st.w	r12[0x30],r8
  }
}

static void op_gate_in_store(op_gate_t* gate, const io_t* v) {
  //  gate->store = (*v != 0);
  if(*v > 0) { gate->store = 1; } else { gate->store = 0; }
800206a8:	5e fc       	retal	r12
800206aa:	30 08       	mov	r8,0
800206ac:	99 c8       	st.w	r12[0x30],r8
800206ae:	5e fc       	retal	r12

800206b0 <op_gate_in_gate>:
  if(gate->gate != 0) {
    net_activate(gate->outs[0], gate->val);
  }
}

static void op_gate_in_gate(op_gate_t* gate, const io_t* v) {
800206b0:	d4 01       	pushm	lr
800206b2:	18 98       	mov	r8,r12
  //  gate->gate = (io_t)(*v != 0);
  if(*v > 0) { gate->gate = 1; } else { gate->gate = 0; }
800206b4:	76 09       	ld.w	r9,r11[0x0]
800206b6:	58 09       	cp.w	r9,0
800206b8:	e0 8a 00 0d 	brle	800206d2 <op_gate_in_gate+0x22>
800206bc:	30 19       	mov	r9,1
800206be:	99 b9       	st.w	r12[0x2c],r9
  if (gate->store) {
800206c0:	70 c9       	ld.w	r9,r8[0x30]
800206c2:	58 09       	cp.w	r9,0
800206c4:	c0 60       	breq	800206d0 <op_gate_in_gate+0x20>
    net_activate(gate->outs[0], gate->val);
800206c6:	f1 0c 00 40 	ld.sh	r12,r8[64]
800206ca:	70 ab       	ld.w	r11,r8[0x28]
800206cc:	fe b0 f1 18 	rcall	8001e8fc <net_activate>
800206d0:	d8 02       	popm	pc
  }
}

static void op_gate_in_gate(op_gate_t* gate, const io_t* v) {
  //  gate->gate = (io_t)(*v != 0);
  if(*v > 0) { gate->gate = 1; } else { gate->gate = 0; }
800206d2:	30 09       	mov	r9,0
800206d4:	99 b9       	st.w	r12[0x2c],r9
800206d6:	cf 5b       	rjmp	800206c0 <op_gate_in_gate+0x10>

800206d8 <op_gate_in_value>:
800206d8:	d4 01       	pushm	lr
800206da:	76 0b       	ld.w	r11,r11[0x0]
}

//-------------------------------------------------
//----- static function definitions
static void op_gate_in_value(op_gate_t* gate, const io_t* v) {
  gate->val = *v;
800206dc:	99 ab       	st.w	r12[0x28],r11
  if(gate->gate != 0) {
800206de:	78 b8       	ld.w	r8,r12[0x2c]
800206e0:	58 08       	cp.w	r8,0
800206e2:	c0 50       	breq	800206ec <op_gate_in_value+0x14>
    net_activate(gate->outs[0], gate->val);
800206e4:	f9 0c 00 40 	ld.sh	r12,r12[64]
800206e8:	fe b0 f1 0a 	rcall	8001e8fc <net_activate>
800206ec:	d8 02       	popm	pc
800206ee:	d7 03       	nop

800206f0 <op_gate_inc_input>:
800206f0:	eb cd 40 80 	pushm	r7,lr
  if(*v > 0) { gate->store = 1; } else { gate->store = 0; }
}

static void op_gate_inc_input(op_gate_t* gate, const s16 idx, const io_t inc) {
  io_t val;
  switch(idx) {
800206f4:	30 18       	mov	r8,1
static void op_gate_in_store(op_gate_t* gate, const io_t* v) {
  //  gate->store = (*v != 0);
  if(*v > 0) { gate->store = 1; } else { gate->store = 0; }
}

static void op_gate_inc_input(op_gate_t* gate, const s16 idx, const io_t inc) {
800206f6:	18 97       	mov	r7,r12
  io_t val;
  switch(idx) {
800206f8:	f0 0b 19 00 	cp.h	r11,r8
800206fc:	c2 10       	breq	8002073e <op_gate_inc_input+0x4e>
800206fe:	30 28       	mov	r8,2
80020700:	f0 0b 19 00 	cp.h	r11,r8
80020704:	c1 60       	breq	80020730 <op_gate_inc_input+0x40>
80020706:	30 08       	mov	r8,0
80020708:	f0 0b 19 00 	cp.h	r11,r8
8002070c:	c0 30       	breq	80020712 <op_gate_inc_input+0x22>
8002070e:	e3 cd 80 80 	ldm	sp++,r7,pc
  case 0:  // value
      val = OP_ADD(gate->val, inc);
80020712:	78 ac       	ld.w	r12,r12[0x28]
80020714:	14 9b       	mov	r11,r10
80020716:	fe b0 ea 0d 	rcall	8001db30 <fix16_add>
}

//-------------------------------------------------
//----- static function definitions
static void op_gate_in_value(op_gate_t* gate, const io_t* v) {
  gate->val = *v;
8002071a:	8f ac       	st.w	r7[0x28],r12
  if(gate->gate != 0) {
8002071c:	6e b8       	ld.w	r8,r7[0x2c]
8002071e:	58 08       	cp.w	r8,0
80020720:	cf 70       	breq	8002070e <op_gate_inc_input+0x1e>
    net_activate(gate->outs[0], gate->val);
80020722:	18 9b       	mov	r11,r12
80020724:	ef 0c 00 40 	ld.sh	r12,r7[64]
80020728:	fe b0 f0 ea 	rcall	8001e8fc <net_activate>
8002072c:	e3 cd 80 80 	ldm	sp++,r7,pc
  }
}

static void op_gate_in_store(op_gate_t* gate, const io_t* v) {
  //  gate->store = (*v != 0);
  if(*v > 0) { gate->store = 1; } else { gate->store = 0; }
80020730:	58 0a       	cp.w	r10,0
80020732:	e0 8a 00 19 	brle	80020764 <op_gate_inc_input+0x74>
80020736:	30 18       	mov	r8,1
80020738:	99 c8       	st.w	r12[0x30],r8
8002073a:	e3 cd 80 80 	ldm	sp++,r7,pc
  }
}

static void op_gate_in_gate(op_gate_t* gate, const io_t* v) {
  //  gate->gate = (io_t)(*v != 0);
  if(*v > 0) { gate->gate = 1; } else { gate->gate = 0; }
8002073e:	58 0a       	cp.w	r10,0
80020740:	f9 b8 09 01 	movgt	r8,1
80020744:	f9 f8 9a 0b 	st.wgt	r12[0x2c],r8
80020748:	f9 b8 0a 00 	movle	r8,0
8002074c:	f9 f8 aa 0b 	st.wle	r12[0x2c],r8
  if (gate->store) {
80020750:	78 c8       	ld.w	r8,r12[0x30]
80020752:	58 08       	cp.w	r8,0
80020754:	cd d0       	breq	8002070e <op_gate_inc_input+0x1e>
    net_activate(gate->outs[0], gate->val);
80020756:	f9 0c 00 40 	ld.sh	r12,r12[64]
8002075a:	6e ab       	ld.w	r11,r7[0x28]
8002075c:	fe b0 f0 d0 	rcall	8001e8fc <net_activate>
80020760:	e3 cd 80 80 	ldm	sp++,r7,pc
  }
}

static void op_gate_in_store(op_gate_t* gate, const io_t* v) {
  //  gate->store = (*v != 0);
  if(*v > 0) { gate->store = 1; } else { gate->store = 0; }
80020764:	30 08       	mov	r8,0
80020766:	99 c8       	st.w	r12[0x30],r8
80020768:	cd 3b       	rjmp	8002070e <op_gate_inc_input+0x1e>
8002076a:	d7 03       	nop

8002076c <op_mul_init>:
static const char* op_mul_opstring  = "MUL";

//-------------------------------------------------
//----- external function definitions
void op_mul_init(op_mul_t* mul) {
  mul->super.numInputs = 3;
8002076c:	30 38       	mov	r8,3
  mul->super.in_val = mul->in_val;
  mul->super.out = mul->outs;
  mul->super.opString = op_mul_opstring;
  mul->super.inString = op_mul_instring;
  mul->super.outString = op_mul_outstring;
  mul->super.type = eOpMul;  
8002076e:	f9 68 00 20 	st.b	r12[32],r8
static const char* op_mul_opstring  = "MUL";

//-------------------------------------------------
//----- external function definitions
void op_mul_init(op_mul_t* mul) {
  mul->super.numInputs = 3;
80020772:	b8 88       	st.b	r12[0x0],r8
  mul->super.numOutputs = 1;
80020774:	30 18       	mov	r8,1
80020776:	b8 98       	st.b	r12[0x1],r8
  mul->outs[0] = -1;
  mul->super.inc_func = (op_inc_func)op_mul_inc_input;
80020778:	fe c8 ff 58 	sub	r8,pc,-168
  mul->super.in_func = op_mul_in_func;
8002077c:	99 18       	st.w	r12[0x4],r8
8002077e:	e0 68 01 38 	mov	r8,312
  mul->super.in_val = mul->in_val;
80020782:	99 28       	st.w	r12[0x8],r8
80020784:	f8 c8 ff c8 	sub	r8,r12,-56
  mul->super.out = mul->outs;
80020788:	99 38       	st.w	r12[0xc],r8
8002078a:	f8 c8 ff c0 	sub	r8,r12,-64
  mul->super.opString = op_mul_opstring;
8002078e:	99 48       	st.w	r12[0x10],r8
80020790:	fe c8 d4 78 	sub	r8,pc,-11144
  mul->super.inString = op_mul_instring;
80020794:	70 08       	ld.w	r8,r8[0x0]
80020796:	99 58       	st.w	r12[0x14],r8
  mul->super.outString = op_mul_outstring;
80020798:	fe c8 d4 84 	sub	r8,pc,-11132
8002079c:	70 08       	ld.w	r8,r8[0x0]
  mul->super.type = eOpMul;  
  mul->super.status = eUserOp;  
8002079e:	99 68       	st.w	r12[0x18],r8
800207a0:	fe c8 d4 90 	sub	r8,pc,-11120
 
  mul->in_val[0] = &(mul->a);
800207a4:	70 08       	ld.w	r8,r8[0x0]
800207a6:	99 78       	st.w	r12[0x1c],r8
  mul->in_val[1] = &(mul->b);
800207a8:	30 08       	mov	r8,0
800207aa:	99 98       	st.w	r12[0x24],r8
800207ac:	f8 c8 ff d4 	sub	r8,r12,-44
  mul->in_val[2] = &(mul->btrig);
800207b0:	99 e8       	st.w	r12[0x38],r8
800207b2:	f8 c8 ff d0 	sub	r8,r12,-48
}
800207b6:	99 f8       	st.w	r12[0x3c],r8
800207b8:	f8 c8 ff cc 	sub	r8,r12,-52
800207bc:	f9 48 00 40 	st.w	r12[64],r8
800207c0:	5e fc       	retal	r12
800207c2:	d7 03       	nop

800207c4 <op_mul_in_btrig>:
800207c4:	76 08       	ld.w	r8,r11[0x0]
800207c6:	58 08       	cp.w	r8,0
800207c8:	e0 8a 00 05 	brle	800207d2 <op_mul_in_btrig+0xe>
}

// set b-trigger mode
static void op_mul_in_btrig(op_mul_t* mul, const io_t* v) {
  //printf("mul at %d received BTRIG %d\n", (int)mul, (int)*v);
  if(*v > 0) { mul->btrig = OP_ONE; } { mul->btrig = 0; }
800207cc:	e0 78 00 00 	mov	r8,65536
800207d0:	99 d8       	st.w	r12[0x34],r8
800207d2:	30 08       	mov	r8,0
800207d4:	99 d8       	st.w	r12[0x34],r8
}
800207d6:	5e fc       	retal	r12

800207d8 <op_mul_in_b>:
  mul->val = OP_MUL(mul->a, mul->b);
  net_activate(mul->outs[0], mul->val);
}

// set operand B
static void op_mul_in_b(op_mul_t* mul, const io_t* v) {
800207d8:	eb cd 40 80 	pushm	r7,lr
800207dc:	18 97       	mov	r7,r12
  //printf("mul at %d received B %d\n", (int)mul, (int)*v);
  mul->b = *v;
800207de:	76 0b       	ld.w	r11,r11[0x0]
800207e0:	99 cb       	st.w	r12[0x30],r11
  mul->val = OP_MUL(mul->a, mul->b);
800207e2:	78 bc       	ld.w	r12,r12[0x2c]
800207e4:	fe b0 e9 c1 	rcall	8001db66 <fix16_mul>
800207e8:	8f ac       	st.w	r7[0x28],r12
  if(mul->btrig) {
800207ea:	6e d8       	ld.w	r8,r7[0x34]
800207ec:	58 08       	cp.w	r8,0
800207ee:	c0 60       	breq	800207fa <op_mul_in_b+0x22>
    net_activate(mul->outs[0], mul->val);
800207f0:	18 9b       	mov	r11,r12
800207f2:	ef 0c 00 40 	ld.sh	r12,r7[64]
800207f6:	fe b0 f0 83 	rcall	8001e8fc <net_activate>
800207fa:	e3 cd 80 80 	ldm	sp++,r7,pc
800207fe:	d7 03       	nop

80020800 <op_mul_in_a>:
80020800:	eb cd 40 80 	pushm	r7,lr
80020804:	18 97       	mov	r7,r12
80020806:	76 0c       	ld.w	r12,r11[0x0]
//----- static function definitions
// set operand A
static void op_mul_in_a(op_mul_t* mul, const io_t* v) {
  // printf("mul at %d received A %d\n", (int)mul, (int)*v);
  mul->a = *v;
  mul->val = OP_MUL(mul->a, mul->b);
80020808:	6e cb       	ld.w	r11,r7[0x30]
//-------------------------------------------------
//----- static function definitions
// set operand A
static void op_mul_in_a(op_mul_t* mul, const io_t* v) {
  // printf("mul at %d received A %d\n", (int)mul, (int)*v);
  mul->a = *v;
8002080a:	8f bc       	st.w	r7[0x2c],r12
  mul->val = OP_MUL(mul->a, mul->b);
8002080c:	fe b0 e9 ad 	rcall	8001db66 <fix16_mul>
80020810:	18 9b       	mov	r11,r12
  net_activate(mul->outs[0], mul->val);
80020812:	ef 0c 00 40 	ld.sh	r12,r7[64]
//----- static function definitions
// set operand A
static void op_mul_in_a(op_mul_t* mul, const io_t* v) {
  // printf("mul at %d received A %d\n", (int)mul, (int)*v);
  mul->a = *v;
  mul->val = OP_MUL(mul->a, mul->b);
80020816:	8f ab       	st.w	r7[0x28],r11
  net_activate(mul->outs[0], mul->val);
80020818:	fe b0 f0 72 	rcall	8001e8fc <net_activate>
}
8002081c:	e3 cd 80 80 	ldm	sp++,r7,pc

80020820 <op_mul_inc_input>:
80020820:	eb cd 40 80 	pushm	r7,lr
80020824:	30 18       	mov	r8,1
80020826:	18 97       	mov	r7,r12
}

//===== UI input
static void op_mul_inc_input(op_mul_t* mul, const s16 idx, const io_t inc) {
  io_t val;
  switch(idx) {
80020828:	f0 0b 19 00 	cp.h	r11,r8
8002082c:	c2 50       	breq	80020876 <op_mul_inc_input+0x56>
8002082e:	30 28       	mov	r8,2
80020830:	f0 0b 19 00 	cp.h	r11,r8
80020834:	c1 70       	breq	80020862 <op_mul_inc_input+0x42>
80020836:	30 08       	mov	r8,0
80020838:	f0 0b 19 00 	cp.h	r11,r8
8002083c:	c0 30       	breq	80020842 <op_mul_inc_input+0x22>
8002083e:	e3 cd 80 80 	ldm	sp++,r7,pc
  case 0:  // a
    val = OP_ADD(mul->a, inc);
80020842:	14 9b       	mov	r11,r10
80020844:	78 bc       	ld.w	r12,r12[0x2c]
80020846:	fe b0 e9 75 	rcall	8001db30 <fix16_add>
//----- static function definitions
// set operand A
static void op_mul_in_a(op_mul_t* mul, const io_t* v) {
  // printf("mul at %d received A %d\n", (int)mul, (int)*v);
  mul->a = *v;
  mul->val = OP_MUL(mul->a, mul->b);
8002084a:	6e cb       	ld.w	r11,r7[0x30]
//-------------------------------------------------
//----- static function definitions
// set operand A
static void op_mul_in_a(op_mul_t* mul, const io_t* v) {
  // printf("mul at %d received A %d\n", (int)mul, (int)*v);
  mul->a = *v;
8002084c:	8f bc       	st.w	r7[0x2c],r12
  mul->val = OP_MUL(mul->a, mul->b);
8002084e:	fe b0 e9 8c 	rcall	8001db66 <fix16_mul>
80020852:	18 9b       	mov	r11,r12
  net_activate(mul->outs[0], mul->val);
80020854:	ef 0c 00 40 	ld.sh	r12,r7[64]
//----- static function definitions
// set operand A
static void op_mul_in_a(op_mul_t* mul, const io_t* v) {
  // printf("mul at %d received A %d\n", (int)mul, (int)*v);
  mul->a = *v;
  mul->val = OP_MUL(mul->a, mul->b);
80020858:	8f ab       	st.w	r7[0x28],r11
  net_activate(mul->outs[0], mul->val);
8002085a:	fe b0 f0 51 	rcall	8001e8fc <net_activate>
8002085e:	e3 cd 80 80 	ldm	sp++,r7,pc
}

// set b-trigger mode
static void op_mul_in_btrig(op_mul_t* mul, const io_t* v) {
  //printf("mul at %d received BTRIG %d\n", (int)mul, (int)*v);
  if(*v > 0) { mul->btrig = OP_ONE; } { mul->btrig = 0; }
80020862:	58 0a       	cp.w	r10,0
80020864:	e0 8a 00 05 	brle	8002086e <op_mul_inc_input+0x4e>
80020868:	e0 78 00 00 	mov	r8,65536
8002086c:	99 d8       	st.w	r12[0x34],r8
8002086e:	30 08       	mov	r8,0
80020870:	8f d8       	st.w	r7[0x34],r8
80020872:	e3 cd 80 80 	ldm	sp++,r7,pc
  case 0:  // a
    val = OP_ADD(mul->a, inc);
    op_mul_in_a(mul, &val);
    break; 
  case 1:  // b
    val = OP_ADD(mul->b, inc);
80020876:	14 9b       	mov	r11,r10
80020878:	78 cc       	ld.w	r12,r12[0x30]
8002087a:	fe b0 e9 5b 	rcall	8001db30 <fix16_add>
8002087e:	18 9b       	mov	r11,r12
}

// set operand B
static void op_mul_in_b(op_mul_t* mul, const io_t* v) {
  //printf("mul at %d received B %d\n", (int)mul, (int)*v);
  mul->b = *v;
80020880:	8f cc       	st.w	r7[0x30],r12
  mul->val = OP_MUL(mul->a, mul->b);
80020882:	6e bc       	ld.w	r12,r7[0x2c]
80020884:	fe b0 e9 71 	rcall	8001db66 <fix16_mul>
80020888:	8f ac       	st.w	r7[0x28],r12
  if(mul->btrig) {
8002088a:	6e d8       	ld.w	r8,r7[0x34]
8002088c:	58 08       	cp.w	r8,0
8002088e:	cd 80       	breq	8002083e <op_mul_inc_input+0x1e>
    net_activate(mul->outs[0], mul->val);
80020890:	18 9b       	mov	r11,r12
80020892:	ef 0c 00 40 	ld.sh	r12,r7[64]
80020896:	fe b0 f0 33 	rcall	8001e8fc <net_activate>
8002089a:	e3 cd 80 80 	ldm	sp++,r7,pc
8002089e:	d7 03       	nop

800208a0 <op_sw_init>:
  sw->super.opString = op_sw_opstring;
  sw->super.inString = op_sw_instring;
  sw->super.outString = op_sw_outstring;
  sw->super.type = eOpSwitch;
  sw->super.status = eSysCtlOp;
  sw->state = 0;
800208a0:	30 08       	mov	r8,0
  sw->mul = OP_ONE;
  sw->tog = 0;
800208a2:	99 c8       	st.w	r12[0x30],r8
  sw->super.opString = op_sw_opstring;
  sw->super.inString = op_sw_instring;
  sw->super.outString = op_sw_outstring;
  sw->super.type = eOpSwitch;
  sw->super.status = eSysCtlOp;
  sw->state = 0;
800208a4:	99 a8       	st.w	r12[0x28],r8
//---------------------------------------------
//----- external function definition

/// initialize
void op_sw_init(op_sw_t* sw) {
  sw->super.numInputs = 3;
800208a6:	30 38       	mov	r8,3
800208a8:	b8 88       	st.b	r12[0x0],r8
  sw->super.numOutputs = 1;
800208aa:	30 18       	mov	r8,1
800208ac:	b8 98       	st.b	r12[0x1],r8
  sw->outs[0] = -1;
800208ae:	3f f8       	mov	r8,-1
800208b0:	f9 58 00 40 	st.h	r12[64],r8
  sw->super.inc_func = (op_inc_func)op_sw_inc_func;
800208b4:	fe c8 ff 28 	sub	r8,pc,-216
  sw->super.in_func = op_sw_in_func;
800208b8:	99 18       	st.w	r12[0x4],r8
800208ba:	e0 68 01 44 	mov	r8,324
  sw->super.in_val = sw->in_val;
800208be:	99 28       	st.w	r12[0x8],r8
800208c0:	f8 c8 ff cc 	sub	r8,r12,-52
  sw->in_val[0] = &(sw->state);
800208c4:	99 38       	st.w	r12[0xc],r8
800208c6:	f8 c8 ff d8 	sub	r8,r12,-40
  sw->in_val[1] = &(sw->tog);
800208ca:	99 d8       	st.w	r12[0x34],r8
800208cc:	f8 c8 ff d0 	sub	r8,r12,-48
  sw->in_val[2] = &(sw->mul);
800208d0:	99 e8       	st.w	r12[0x38],r8
800208d2:	f8 c8 ff d4 	sub	r8,r12,-44
  sw->super.out = sw->outs;
800208d6:	99 f8       	st.w	r12[0x3c],r8
800208d8:	f8 c8 ff c0 	sub	r8,r12,-64
  sw->super.opString = op_sw_opstring;
800208dc:	99 48       	st.w	r12[0x10],r8
800208de:	fe c8 d5 be 	sub	r8,pc,-10818
  sw->super.inString = op_sw_instring;
800208e2:	70 08       	ld.w	r8,r8[0x0]
800208e4:	99 58       	st.w	r12[0x14],r8
  sw->super.outString = op_sw_outstring;
800208e6:	fe c8 d5 ca 	sub	r8,pc,-10806
800208ea:	70 08       	ld.w	r8,r8[0x0]
  sw->super.type = eOpSwitch;
800208ec:	99 68       	st.w	r12[0x18],r8
800208ee:	fe c8 d5 ca 	sub	r8,pc,-10806
  sw->super.status = eSysCtlOp;
800208f2:	70 08       	ld.w	r8,r8[0x0]
800208f4:	99 78       	st.w	r12[0x1c],r8
  sw->state = 0;
  sw->mul = OP_ONE;
800208f6:	30 08       	mov	r8,0
800208f8:	f9 68 00 20 	st.b	r12[32],r8
  sw->tog = 0;
}
800208fc:	30 18       	mov	r8,1
800208fe:	99 98       	st.w	r12[0x24],r8
80020900:	e0 78 00 00 	mov	r8,65536
80020904:	99 b8       	st.w	r12[0x2c],r8
80020906:	5e fc       	retal	r12

80020908 <op_sw_in_tog>:
80020908:	76 08       	ld.w	r8,r11[0x0]
8002090a:	58 08       	cp.w	r8,0
8002090c:	e0 8a 00 06 	brle	80020918 <op_sw_in_tog+0x10>
80020910:	e0 78 00 00 	mov	r8,65536
}

// input toggle mode
static void op_sw_in_tog(op_sw_t* sw, const io_t* v) {
  //  sw->tog = (io_t)(*v > 0);
  if (*v > 0) { sw->tog = OP_ONE; } else  { sw->tog = 0; } 
80020914:	99 c8       	st.w	r12[0x30],r8
80020916:	5e fc       	retal	r12
80020918:	30 08       	mov	r8,0
8002091a:	99 c8       	st.w	r12[0x30],r8
8002091c:	5e fc       	retal	r12
8002091e:	d7 03       	nop

80020920 <op_sw_in_mul>:
  net_activate(sw->outs[0], sw->state);
  */
}

// input multiplier
static void op_sw_in_mul(op_sw_t* sw, const io_t* v) {
80020920:	d4 01       	pushm	lr
  sw->mul = *v;
80020922:	76 09       	ld.w	r9,r11[0x0]
80020924:	99 b9       	st.w	r12[0x2c],r9
  net_activate(sw->outs[0], sw->state);
  */
}

// input multiplier
static void op_sw_in_mul(op_sw_t* sw, const io_t* v) {
80020926:	18 98       	mov	r8,r12
  sw->mul = *v;
  if (sw->state > 0) {
80020928:	78 a9       	ld.w	r9,r12[0x28]
8002092a:	58 09       	cp.w	r9,0
8002092c:	e0 8a 00 08 	brle	8002093c <op_sw_in_mul+0x1c>
    sw->state = *v;
80020930:	76 0b       	ld.w	r11,r11[0x0]
    net_activate(sw->outs[0], sw->state);
80020932:	f9 0c 00 40 	ld.sh	r12,r12[64]

// input multiplier
static void op_sw_in_mul(op_sw_t* sw, const io_t* v) {
  sw->mul = *v;
  if (sw->state > 0) {
    sw->state = *v;
80020936:	91 ab       	st.w	r8[0x28],r11
    net_activate(sw->outs[0], sw->state);
80020938:	fe b0 ef e2 	rcall	8001e8fc <net_activate>
8002093c:	d8 02       	popm	pc
8002093e:	d7 03       	nop

80020940 <op_sw_in_state>:
80020940:	d4 01       	pushm	lr
80020942:	78 c8       	ld.w	r8,r12[0x30]

//===== operator input

// input state
static void op_sw_in_state(op_sw_t* sw, const io_t* v) {
  if (sw->tog) {
80020944:	58 08       	cp.w	r8,0
80020946:	c1 40       	breq	8002096e <op_sw_in_state+0x2e>
    // toggle mode, sw state toggles on positive input
    if ( *v > 0) {
80020948:	76 08       	ld.w	r8,r11[0x0]
8002094a:	58 08       	cp.w	r8,0
8002094c:	e0 8a 00 1b 	brle	80020982 <op_sw_in_state+0x42>
      if (sw->state != 0) { 
80020950:	78 a8       	ld.w	r8,r12[0x28]
	sw->state = 0; 
80020952:	58 08       	cp.w	r8,0
80020954:	f9 bb 01 00 	movne	r11,0
80020958:	f9 fb 1a 0a 	st.wne	r12[0x28],r11
      } else {
	sw->state = sw->mul;
8002095c:	f9 fb 00 0b 	ld.weq	r11,r12[0x2c]
80020960:	f9 fb 0a 0a 	st.weq	r12[0x28],r11
      }
      net_activate(sw->outs[0], sw->state);
80020964:	f9 0c 00 40 	ld.sh	r12,r12[64]
80020968:	fe b0 ef ca 	rcall	8001e8fc <net_activate>
8002096c:	d8 02       	popm	pc
    } 
  } else {
    // momentary mode, sw value takes input
    //    sw->state = (((*v) > 0) ? sw->mul : 0);
    if((*v) > 0) { sw->state = sw->mul; } else { sw->state = 0; }
8002096e:	76 09       	ld.w	r9,r11[0x0]
80020970:	58 09       	cp.w	r9,0
80020972:	e0 8a 00 09 	brle	80020984 <op_sw_in_state+0x44>
80020976:	78 bb       	ld.w	r11,r12[0x2c]
80020978:	99 ab       	st.w	r12[0x28],r11
    net_activate(sw->outs[0], sw->state);
8002097a:	f9 0c 00 40 	ld.sh	r12,r12[64]
8002097e:	fe b0 ef bf 	rcall	8001e8fc <net_activate>
80020982:	d8 02       	popm	pc
      net_activate(sw->outs[0], sw->state);
    } 
  } else {
    // momentary mode, sw value takes input
    //    sw->state = (((*v) > 0) ? sw->mul : 0);
    if((*v) > 0) { sw->state = sw->mul; } else { sw->state = 0; }
80020984:	99 a8       	st.w	r12[0x28],r8
80020986:	10 9b       	mov	r11,r8
80020988:	cf 9b       	rjmp	8002097a <op_sw_in_state+0x3a>
8002098a:	d7 03       	nop

8002098c <op_sw_inc_func>:
8002098c:	eb cd 40 80 	pushm	r7,lr
  io_t val;
  /* print_dbg("\r\n sw increment; idx: "); */
  /* print_dbg_hex(idx); */
  /* print_dbg(" , val: "); */
  /* print_dbg_hex(inc); */
  switch(idx) {
80020990:	30 18       	mov	r8,1
}

//===== UI input

// increment
static void op_sw_inc_func(op_sw_t* sw, const s16 idx, const io_t inc) {
80020992:	18 97       	mov	r7,r12
  io_t val;
  /* print_dbg("\r\n sw increment; idx: "); */
  /* print_dbg_hex(idx); */
  /* print_dbg(" , val: "); */
  /* print_dbg_hex(inc); */
  switch(idx) {
80020994:	f0 0b 19 00 	cp.h	r11,r8
80020998:	c2 80       	breq	800209e8 <op_sw_inc_func+0x5c>
8002099a:	30 28       	mov	r8,2
8002099c:	f0 0b 19 00 	cp.h	r11,r8
800209a0:	c1 30       	breq	800209c6 <op_sw_inc_func+0x3a>
800209a2:	30 08       	mov	r8,0
800209a4:	f0 0b 19 00 	cp.h	r11,r8
800209a8:	c0 30       	breq	800209ae <op_sw_inc_func+0x22>
800209aa:	e3 cd 80 80 	ldm	sp++,r7,pc

//===== operator input

// input state
static void op_sw_in_state(op_sw_t* sw, const io_t* v) {
  if (sw->tog) {
800209ae:	78 cb       	ld.w	r11,r12[0x30]
800209b0:	58 0b       	cp.w	r11,0
800209b2:	c2 30       	breq	800209f8 <op_sw_inc_func+0x6c>
    // toggle mode, sw state toggles on positive input
    if ( *v > 0) {
800209b4:	58 0a       	cp.w	r10,0
800209b6:	fe 9a ff fa 	brle	800209aa <op_sw_inc_func+0x1e>
      if (sw->state != 0) { 
800209ba:	78 a8       	ld.w	r8,r12[0x28]
800209bc:	58 08       	cp.w	r8,0
800209be:	c2 00       	breq	800209fe <op_sw_inc_func+0x72>
	sw->state = 0; 
800209c0:	30 0b       	mov	r11,0
800209c2:	99 ab       	st.w	r12[0x28],r11
800209c4:	c1 f8       	rjmp	80020a02 <op_sw_inc_func+0x76>
    break;
  case 1: // toggle mode
    op_sw_in_tog(sw, &inc);
    break;
  case 2: // multiplier
    val = OP_ADD(sw->mul, inc);
800209c6:	78 bc       	ld.w	r12,r12[0x2c]
800209c8:	14 9b       	mov	r11,r10
800209ca:	fe b0 e8 b3 	rcall	8001db30 <fix16_add>
  */
}

// input multiplier
static void op_sw_in_mul(op_sw_t* sw, const io_t* v) {
  sw->mul = *v;
800209ce:	8f bc       	st.w	r7[0x2c],r12
  if (sw->state > 0) {
800209d0:	6e a8       	ld.w	r8,r7[0x28]
800209d2:	58 08       	cp.w	r8,0
800209d4:	fe 9a ff eb 	brle	800209aa <op_sw_inc_func+0x1e>
    sw->state = *v;
800209d8:	8f ac       	st.w	r7[0x28],r12
    net_activate(sw->outs[0], sw->state);
800209da:	18 9b       	mov	r11,r12
800209dc:	ef 0c 00 40 	ld.sh	r12,r7[64]
800209e0:	fe b0 ef 8e 	rcall	8001e8fc <net_activate>
800209e4:	e3 cd 80 80 	ldm	sp++,r7,pc
}

// input toggle mode
static void op_sw_in_tog(op_sw_t* sw, const io_t* v) {
  //  sw->tog = (io_t)(*v > 0);
  if (*v > 0) { sw->tog = OP_ONE; } else  { sw->tog = 0; } 
800209e8:	58 0a       	cp.w	r10,0
800209ea:	e0 8a 00 12 	brle	80020a0e <op_sw_inc_func+0x82>
800209ee:	e0 78 00 00 	mov	r8,65536
800209f2:	99 c8       	st.w	r12[0x30],r8
800209f4:	e3 cd 80 80 	ldm	sp++,r7,pc
      net_activate(sw->outs[0], sw->state);
    } 
  } else {
    // momentary mode, sw value takes input
    //    sw->state = (((*v) > 0) ? sw->mul : 0);
    if((*v) > 0) { sw->state = sw->mul; } else { sw->state = 0; }
800209f8:	58 0a       	cp.w	r10,0
800209fa:	e0 8a 00 0e 	brle	80020a16 <op_sw_inc_func+0x8a>
800209fe:	6e bb       	ld.w	r11,r7[0x2c]
80020a00:	8f ab       	st.w	r7[0x28],r11
    net_activate(sw->outs[0], sw->state);
80020a02:	ef 0c 00 40 	ld.sh	r12,r7[64]
80020a06:	fe b0 ef 7b 	rcall	8001e8fc <net_activate>
80020a0a:	e3 cd 80 80 	ldm	sp++,r7,pc
}

// input toggle mode
static void op_sw_in_tog(op_sw_t* sw, const io_t* v) {
  //  sw->tog = (io_t)(*v > 0);
  if (*v > 0) { sw->tog = OP_ONE; } else  { sw->tog = 0; } 
80020a0e:	30 08       	mov	r8,0
80020a10:	99 c8       	st.w	r12[0x30],r8
80020a12:	e3 cd 80 80 	ldm	sp++,r7,pc
      net_activate(sw->outs[0], sw->state);
    } 
  } else {
    // momentary mode, sw value takes input
    //    sw->state = (((*v) > 0) ? sw->mul : 0);
    if((*v) > 0) { sw->state = sw->mul; } else { sw->state = 0; }
80020a16:	99 ab       	st.w	r12[0x28],r11
80020a18:	cf 5b       	rjmp	80020a02 <op_sw_inc_func+0x76>
80020a1a:	d7 03       	nop

80020a1c <_stext>:
80020a1c:	e0 7d 00 00 	mov	sp,65536
80020a20:	fe c0 f2 20 	sub	r0,pc,-3552
80020a24:	e3 b0 00 01 	mtsr	0x4,r0
80020a28:	d5 53       	csrf	0x15
80020a2a:	30 80       	mov	r0,8
80020a2c:	e0 61 06 58 	mov	r1,1624
80020a30:	02 30       	cp.w	r0,r1
80020a32:	c0 72       	brcc	80020a40 <idata_load_loop_end>
80020a34:	fe c2 d6 8c 	sub	r2,pc,-10612

80020a38 <idata_load_loop>:
80020a38:	a5 05       	ld.d	r4,r2++
80020a3a:	a1 24       	st.d	r0++,r4
80020a3c:	02 30       	cp.w	r0,r1
80020a3e:	cf d3       	brcs	80020a38 <idata_load_loop>

80020a40 <idata_load_loop_end>:
80020a40:	e0 60 06 58 	mov	r0,1624
80020a44:	e0 61 d0 d8 	mov	r1,53464
80020a48:	02 30       	cp.w	r0,r1
80020a4a:	c0 62       	brcc	80020a56 <udata_clear_loop_end>
80020a4c:	30 02       	mov	r2,0
80020a4e:	30 03       	mov	r3,0

80020a50 <udata_clear_loop>:
80020a50:	a1 22       	st.d	r0++,r2
80020a52:	02 30       	cp.w	r0,r1
80020a54:	cf e3       	brcs	80020a50 <udata_clear_loop>

80020a56 <udata_clear_loop_end>:
80020a56:	fe cf 79 fe 	sub	pc,pc,31230
80020a5a:	d7 03       	nop

80020a5c <__avr32_s32_to_f32>:
80020a5c:	58 0c       	cp.w	r12,0
80020a5e:	5e 0c       	reteq	r12
80020a60:	18 9b       	mov	r11,r12
80020a62:	5c 4c       	abs	r12
80020a64:	e0 6a 00 9e 	mov	r10,158
80020a68:	f8 09 12 00 	clz	r9,r12
80020a6c:	12 1a       	sub	r10,r9
80020a6e:	f8 09 09 4c 	lsl	r12,r12,r9
80020a72:	58 0a       	cp.w	r10,0
80020a74:	e0 8a 00 15 	brle	80020a9e <__avr32_s32_to_f32_subnormal>
80020a78:	37 f9       	mov	r9,127
80020a7a:	ed bc 00 08 	bld	r12,0x8
80020a7e:	f7 b9 00 ff 	subeq	r9,-1
80020a82:	12 0c       	add	r12,r9
80020a84:	f7 ba 03 fe 	sublo	r10,-2
80020a88:	ed bc 00 1f 	bld	r12,0x1f
80020a8c:	f7 ba 01 01 	subne	r10,1
80020a90:	f8 0c 16 07 	lsr	r12,r12,0x7
80020a94:	f9 da d3 08 	bfins	r12,r10,0x18,0x8
80020a98:	a1 7b       	lsl	r11,0x1
80020a9a:	5d 0c       	ror	r12
80020a9c:	5e fc       	retal	r12

80020a9e <__avr32_s32_to_f32_subnormal>:
80020a9e:	f4 0a 11 01 	rsub	r10,r10,1
80020aa2:	59 9a       	cp.w	r10,25
80020aa4:	f9 bc 02 00 	movhs	r12,0
80020aa8:	c1 32       	brcc	80020ace <__avr32_s32_to_f32_subnormal+0x30>
80020aaa:	f4 09 11 20 	rsub	r9,r10,32
80020aae:	f8 09 09 49 	lsl	r9,r12,r9
80020ab2:	5f 19       	srne	r9
80020ab4:	f8 0a 0a 4c 	lsr	r12,r12,r10
80020ab8:	12 4c       	or	r12,r9
80020aba:	37 f9       	mov	r9,127
80020abc:	ed bc 00 08 	bld	r12,0x8
80020ac0:	f7 b9 00 ff 	subeq	r9,-1
80020ac4:	12 0c       	add	r12,r9
80020ac6:	f8 0c 16 07 	lsr	r12,r12,0x7
80020aca:	a1 7b       	lsl	r11,0x1
80020acc:	5d 0c       	ror	r12
80020ace:	5e fc       	retal	r12

80020ad0 <__avr32_f32_to_s32>:
80020ad0:	f7 dc c2 e8 	bfextu	r11,r12,0x17,0x8
80020ad4:	27 fb       	sub	r11,127
80020ad6:	5e 3d       	retlo	0
80020ad8:	f6 0b 11 1f 	rsub	r11,r11,31
80020adc:	f8 0a 15 08 	lsl	r10,r12,0x8
80020ae0:	bf ba       	sbr	r10,0x1f
80020ae2:	f4 0b 0a 4a 	lsr	r10,r10,r11
80020ae6:	a1 7c       	lsl	r12,0x1
80020ae8:	5e 2a       	reths	r10
80020aea:	5c 3a       	neg	r10
80020aec:	5e fa       	retal	r10

80020aee <__avr32_udiv64>:
80020aee:	d4 31       	pushm	r0-r7,lr
80020af0:	1a 97       	mov	r7,sp
80020af2:	20 2d       	sub	sp,8
80020af4:	10 9e       	mov	lr,r8
80020af6:	12 95       	mov	r5,r9
80020af8:	14 96       	mov	r6,r10
80020afa:	58 09       	cp.w	r9,0
80020afc:	c4 91       	brne	80020b8e <__avr32_udiv64+0xa0>
80020afe:	16 38       	cp.w	r8,r11
80020b00:	e0 88 00 57 	brls	80020bae <__avr32_udiv64+0xc0>
80020b04:	f0 08 12 00 	clz	r8,r8
80020b08:	c0 d0       	breq	80020b22 <__avr32_udiv64+0x34>
80020b0a:	f6 08 09 4b 	lsl	r11,r11,r8
80020b0e:	f0 09 11 20 	rsub	r9,r8,32
80020b12:	fc 08 09 4e 	lsl	lr,lr,r8
80020b16:	f4 09 0a 49 	lsr	r9,r10,r9
80020b1a:	f4 08 09 46 	lsl	r6,r10,r8
80020b1e:	f3 eb 10 0b 	or	r11,r9,r11
80020b22:	fc 05 16 10 	lsr	r5,lr,0x10
80020b26:	f9 de c0 10 	bfextu	r12,lr,0x0,0x10
80020b2a:	f6 05 0d 0a 	divu	r10,r11,r5
80020b2e:	ec 08 16 10 	lsr	r8,r6,0x10
80020b32:	14 99       	mov	r9,r10
80020b34:	f1 eb 11 08 	or	r8,r8,r11<<0x10
80020b38:	b9 3a       	mul	r10,r12
80020b3a:	10 3a       	cp.w	r10,r8
80020b3c:	e0 88 00 0c 	brls	80020b54 <__avr32_udiv64+0x66>
80020b40:	20 19       	sub	r9,1
80020b42:	1c 08       	add	r8,lr
80020b44:	10 3e       	cp.w	lr,r8
80020b46:	e0 8b 00 07 	brhi	80020b54 <__avr32_udiv64+0x66>
80020b4a:	10 3a       	cp.w	r10,r8
80020b4c:	f7 b9 0b 01 	subhi	r9,1
80020b50:	f1 de eb 08 	addhi	r8,r8,lr
80020b54:	f0 0a 01 0b 	sub	r11,r8,r10
80020b58:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
80020b5c:	f6 05 0d 0a 	divu	r10,r11,r5
80020b60:	ed eb 11 06 	or	r6,r6,r11<<0x10
80020b64:	14 98       	mov	r8,r10
80020b66:	f4 0c 02 4c 	mul	r12,r10,r12
80020b6a:	0c 3c       	cp.w	r12,r6
80020b6c:	e0 88 00 0a 	brls	80020b80 <__avr32_udiv64+0x92>
80020b70:	20 18       	sub	r8,1
80020b72:	1c 06       	add	r6,lr
80020b74:	0c 3e       	cp.w	lr,r6
80020b76:	e0 8b 00 05 	brhi	80020b80 <__avr32_udiv64+0x92>
80020b7a:	0c 3c       	cp.w	r12,r6
80020b7c:	f7 b8 0b 01 	subhi	r8,1
80020b80:	f1 e9 11 0b 	or	r11,r8,r9<<0x10
80020b84:	30 0c       	mov	r12,0
80020b86:	16 9a       	mov	r10,r11
80020b88:	18 9b       	mov	r11,r12
80020b8a:	2f ed       	sub	sp,-8
80020b8c:	d8 32       	popm	r0-r7,pc
80020b8e:	16 39       	cp.w	r9,r11
80020b90:	e0 8b 00 51 	brhi	80020c32 <__avr32_udiv64+0x144>
80020b94:	f2 0c 12 00 	clz	r12,r9
80020b98:	c5 31       	brne	80020c3e <__avr32_udiv64+0x150>
80020b9a:	14 38       	cp.w	r8,r10
80020b9c:	5f 89       	srls	r9
80020b9e:	16 35       	cp.w	r5,r11
80020ba0:	5f 38       	srlo	r8
80020ba2:	10 49       	or	r9,r8
80020ba4:	f8 09 18 00 	cp.b	r9,r12
80020ba8:	c4 50       	breq	80020c32 <__avr32_udiv64+0x144>
80020baa:	30 1b       	mov	r11,1
80020bac:	c4 58       	rjmp	80020c36 <__avr32_udiv64+0x148>
80020bae:	58 08       	cp.w	r8,0
80020bb0:	c0 51       	brne	80020bba <__avr32_udiv64+0xcc>
80020bb2:	30 19       	mov	r9,1
80020bb4:	f2 08 0d 08 	divu	r8,r9,r8
80020bb8:	10 9e       	mov	lr,r8
80020bba:	fc 08 12 00 	clz	r8,lr
80020bbe:	e0 81 00 91 	brne	80020ce0 <__avr32_udiv64+0x1f2>
80020bc2:	1c 1b       	sub	r11,lr
80020bc4:	fc 05 16 10 	lsr	r5,lr,0x10
80020bc8:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
80020bcc:	30 1c       	mov	r12,1
80020bce:	f6 05 0d 0a 	divu	r10,r11,r5
80020bd2:	ec 08 16 10 	lsr	r8,r6,0x10
80020bd6:	f4 09 02 43 	mul	r3,r10,r9
80020bda:	f1 eb 11 08 	or	r8,r8,r11<<0x10
80020bde:	14 9b       	mov	r11,r10
80020be0:	10 33       	cp.w	r3,r8
80020be2:	e0 88 00 0c 	brls	80020bfa <__avr32_udiv64+0x10c>
80020be6:	20 1b       	sub	r11,1
80020be8:	1c 08       	add	r8,lr
80020bea:	10 3e       	cp.w	lr,r8
80020bec:	e0 8b 00 07 	brhi	80020bfa <__avr32_udiv64+0x10c>
80020bf0:	10 33       	cp.w	r3,r8
80020bf2:	f7 bb 0b 01 	subhi	r11,1
80020bf6:	f1 de eb 08 	addhi	r8,r8,lr
80020bfa:	f0 03 01 03 	sub	r3,r8,r3
80020bfe:	ed d6 c0 10 	bfextu	r6,r6,0x0,0x10
80020c02:	e6 05 0d 02 	divu	r2,r3,r5
80020c06:	ed e3 11 06 	or	r6,r6,r3<<0x10
80020c0a:	04 98       	mov	r8,r2
80020c0c:	e4 09 02 49 	mul	r9,r2,r9
80020c10:	0c 39       	cp.w	r9,r6
80020c12:	e0 88 00 0a 	brls	80020c26 <__avr32_udiv64+0x138>
80020c16:	20 18       	sub	r8,1
80020c18:	1c 06       	add	r6,lr
80020c1a:	0c 3e       	cp.w	lr,r6
80020c1c:	e0 8b 00 05 	brhi	80020c26 <__avr32_udiv64+0x138>
80020c20:	0c 39       	cp.w	r9,r6
80020c22:	f7 b8 0b 01 	subhi	r8,1
80020c26:	f1 eb 11 0b 	or	r11,r8,r11<<0x10
80020c2a:	16 9a       	mov	r10,r11
80020c2c:	18 9b       	mov	r11,r12
80020c2e:	2f ed       	sub	sp,-8
80020c30:	d8 32       	popm	r0-r7,pc
80020c32:	30 0b       	mov	r11,0
80020c34:	16 9c       	mov	r12,r11
80020c36:	16 9a       	mov	r10,r11
80020c38:	18 9b       	mov	r11,r12
80020c3a:	2f ed       	sub	sp,-8
80020c3c:	d8 32       	popm	r0-r7,pc
80020c3e:	f2 0c 09 45 	lsl	r5,r9,r12
80020c42:	f8 0e 11 20 	rsub	lr,r12,32
80020c46:	f0 0c 09 43 	lsl	r3,r8,r12
80020c4a:	f4 0e 0a 46 	lsr	r6,r10,lr
80020c4e:	f0 0e 0a 48 	lsr	r8,r8,lr
80020c52:	f6 0e 0a 4e 	lsr	lr,r11,lr
80020c56:	0a 48       	or	r8,r5
80020c58:	f0 01 16 10 	lsr	r1,r8,0x10
80020c5c:	fc 01 0d 04 	divu	r4,lr,r1
80020c60:	ee e5 ff f8 	st.d	r7[-8],r4
80020c64:	f6 0c 09 49 	lsl	r9,r11,r12
80020c68:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
80020c6c:	ed e9 10 09 	or	r9,r6,r9
80020c70:	08 96       	mov	r6,r4
80020c72:	f2 0e 16 10 	lsr	lr,r9,0x10
80020c76:	ee f4 ff f8 	ld.w	r4,r7[-8]
80020c7a:	ec 05 02 4b 	mul	r11,r6,r5
80020c7e:	fd e4 11 0e 	or	lr,lr,r4<<0x10
80020c82:	1c 3b       	cp.w	r11,lr
80020c84:	e0 88 00 07 	brls	80020c92 <__avr32_udiv64+0x1a4>
80020c88:	20 16       	sub	r6,1
80020c8a:	10 0e       	add	lr,r8
80020c8c:	1c 38       	cp.w	r8,lr
80020c8e:	e0 88 00 6d 	brls	80020d68 <__avr32_udiv64+0x27a>
80020c92:	16 1e       	sub	lr,r11
80020c94:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80020c98:	fc 01 0d 00 	divu	r0,lr,r1
80020c9c:	f3 e1 11 09 	or	r9,r9,r1<<0x10
80020ca0:	00 9b       	mov	r11,r0
80020ca2:	e0 05 02 4e 	mul	lr,r0,r5
80020ca6:	12 3e       	cp.w	lr,r9
80020ca8:	e0 88 00 07 	brls	80020cb6 <__avr32_udiv64+0x1c8>
80020cac:	20 1b       	sub	r11,1
80020cae:	10 09       	add	r9,r8
80020cb0:	12 38       	cp.w	r8,r9
80020cb2:	e0 88 00 55 	brls	80020d5c <__avr32_udiv64+0x26e>
80020cb6:	f7 e6 11 0b 	or	r11,r11,r6<<0x10
80020cba:	1c 19       	sub	r9,lr
80020cbc:	f6 03 06 42 	mulu.d	r2,r11,r3
80020cc0:	06 39       	cp.w	r9,r3
80020cc2:	c0 93       	brcs	80020cd4 <__avr32_udiv64+0x1e6>
80020cc4:	5f 09       	sreq	r9
80020cc6:	f4 0c 09 4c 	lsl	r12,r10,r12
80020cca:	04 3c       	cp.w	r12,r2
80020ccc:	5f 38       	srlo	r8
80020cce:	f3 e8 00 08 	and	r8,r9,r8
80020cd2:	c0 20       	breq	80020cd6 <__avr32_udiv64+0x1e8>
80020cd4:	20 1b       	sub	r11,1
80020cd6:	30 0c       	mov	r12,0
80020cd8:	16 9a       	mov	r10,r11
80020cda:	18 9b       	mov	r11,r12
80020cdc:	2f ed       	sub	sp,-8
80020cde:	d8 32       	popm	r0-r7,pc
80020ce0:	f6 08 09 49 	lsl	r9,r11,r8
80020ce4:	fc 08 09 4e 	lsl	lr,lr,r8
80020ce8:	f0 01 11 20 	rsub	r1,r8,32
80020cec:	fc 05 16 10 	lsr	r5,lr,0x10
80020cf0:	f4 01 0a 42 	lsr	r2,r10,r1
80020cf4:	f6 01 0a 41 	lsr	r1,r11,r1
80020cf8:	12 42       	or	r2,r9
80020cfa:	e2 05 0d 00 	divu	r0,r1,r5
80020cfe:	f3 de c0 10 	bfextu	r9,lr,0x0,0x10
80020d02:	e4 06 16 10 	lsr	r6,r2,0x10
80020d06:	00 93       	mov	r3,r0
80020d08:	ed e1 11 06 	or	r6,r6,r1<<0x10
80020d0c:	e0 09 02 4c 	mul	r12,r0,r9
80020d10:	0c 3c       	cp.w	r12,r6
80020d12:	e0 88 00 07 	brls	80020d20 <__avr32_udiv64+0x232>
80020d16:	20 13       	sub	r3,1
80020d18:	1c 06       	add	r6,lr
80020d1a:	0c 3e       	cp.w	lr,r6
80020d1c:	e0 88 00 2c 	brls	80020d74 <__avr32_udiv64+0x286>
80020d20:	ec 0c 01 01 	sub	r1,r6,r12
80020d24:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80020d28:	e2 05 0d 00 	divu	r0,r1,r5
80020d2c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80020d30:	00 9c       	mov	r12,r0
80020d32:	e0 09 02 41 	mul	r1,r0,r9
80020d36:	16 31       	cp.w	r1,r11
80020d38:	e0 88 00 0c 	brls	80020d50 <__avr32_udiv64+0x262>
80020d3c:	20 1c       	sub	r12,1
80020d3e:	1c 0b       	add	r11,lr
80020d40:	16 3e       	cp.w	lr,r11
80020d42:	e0 8b 00 07 	brhi	80020d50 <__avr32_udiv64+0x262>
80020d46:	16 31       	cp.w	r1,r11
80020d48:	f7 bc 0b 01 	subhi	r12,1
80020d4c:	f7 de eb 0b 	addhi	r11,r11,lr
80020d50:	f4 08 09 46 	lsl	r6,r10,r8
80020d54:	02 1b       	sub	r11,r1
80020d56:	f9 e3 11 0c 	or	r12,r12,r3<<0x10
80020d5a:	c3 ab       	rjmp	80020bce <__avr32_udiv64+0xe0>
80020d5c:	12 3e       	cp.w	lr,r9
80020d5e:	f3 d8 eb 09 	addhi	r9,r9,r8
80020d62:	f7 bb 0b 01 	subhi	r11,1
80020d66:	ca 8b       	rjmp	80020cb6 <__avr32_udiv64+0x1c8>
80020d68:	1c 3b       	cp.w	r11,lr
80020d6a:	f7 b6 0b 01 	subhi	r6,1
80020d6e:	fd d8 eb 0e 	addhi	lr,lr,r8
80020d72:	c9 0b       	rjmp	80020c92 <__avr32_udiv64+0x1a4>
80020d74:	0c 3c       	cp.w	r12,r6
80020d76:	f7 b3 0b 01 	subhi	r3,1
80020d7a:	ed de eb 06 	addhi	r6,r6,lr
80020d7e:	cd 1b       	rjmp	80020d20 <__avr32_udiv64+0x232>

80020d80 <free>:
80020d80:	d4 01       	pushm	lr
80020d82:	e0 68 06 50 	mov	r8,1616
80020d86:	18 9b       	mov	r11,r12
80020d88:	70 0c       	ld.w	r12,r8[0x0]
80020d8a:	e0 a0 03 eb 	rcall	80021560 <_free_r>
80020d8e:	d8 02       	popm	pc

80020d90 <malloc>:
80020d90:	d4 01       	pushm	lr
80020d92:	e0 68 06 50 	mov	r8,1616
80020d96:	18 9b       	mov	r11,r12
80020d98:	70 0c       	ld.w	r12,r8[0x0]
80020d9a:	c0 3c       	rcall	80020da0 <_malloc_r>
80020d9c:	d8 02       	popm	pc
80020d9e:	d7 03       	nop

80020da0 <_malloc_r>:
80020da0:	d4 31       	pushm	r0-r7,lr
80020da2:	f6 c7 ff f5 	sub	r7,r11,-11
80020da6:	18 95       	mov	r5,r12
80020da8:	59 67       	cp.w	r7,22
80020daa:	f9 b7 08 10 	movls	r7,16
80020dae:	f9 b8 0b f8 	movhi	r8,-8
80020db2:	ef d8 eb 27 	andhi	r7,r7,r8
80020db6:	16 37       	cp.w	r7,r11
80020db8:	5f 38       	srlo	r8
80020dba:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80020dbe:	c0 50       	breq	80020dc8 <_malloc_r+0x28>
80020dc0:	30 c8       	mov	r8,12
80020dc2:	99 38       	st.w	r12[0xc],r8
80020dc4:	e0 8f 01 f7 	bral	800211b2 <_malloc_r+0x412>
80020dc8:	e0 a0 02 af 	rcall	80021326 <__malloc_lock>
80020dcc:	e0 47 01 f7 	cp.w	r7,503
80020dd0:	e0 8b 00 1d 	brhi	80020e0a <_malloc_r+0x6a>
80020dd4:	ee 03 16 03 	lsr	r3,r7,0x3
80020dd8:	e0 68 01 50 	mov	r8,336
80020ddc:	f0 03 00 38 	add	r8,r8,r3<<0x3
80020de0:	70 36       	ld.w	r6,r8[0xc]
80020de2:	10 36       	cp.w	r6,r8
80020de4:	c0 61       	brne	80020df0 <_malloc_r+0x50>
80020de6:	ec c8 ff f8 	sub	r8,r6,-8
80020dea:	70 36       	ld.w	r6,r8[0xc]
80020dec:	10 36       	cp.w	r6,r8
80020dee:	c0 c0       	breq	80020e06 <_malloc_r+0x66>
80020df0:	6c 18       	ld.w	r8,r6[0x4]
80020df2:	e0 18 ff fc 	andl	r8,0xfffc
80020df6:	6c 3a       	ld.w	r10,r6[0xc]
80020df8:	ec 08 00 09 	add	r9,r6,r8
80020dfc:	0a 9c       	mov	r12,r5
80020dfe:	6c 28       	ld.w	r8,r6[0x8]
80020e00:	95 28       	st.w	r10[0x8],r8
80020e02:	91 3a       	st.w	r8[0xc],r10
80020e04:	c4 88       	rjmp	80020e94 <_malloc_r+0xf4>
80020e06:	2f e3       	sub	r3,-2
80020e08:	c4 e8       	rjmp	80020ea4 <_malloc_r+0x104>
80020e0a:	ee 08 16 09 	lsr	r8,r7,0x9
80020e0e:	c0 41       	brne	80020e16 <_malloc_r+0x76>
80020e10:	ee 03 16 03 	lsr	r3,r7,0x3
80020e14:	c2 78       	rjmp	80020e62 <_malloc_r+0xc2>
80020e16:	58 48       	cp.w	r8,4
80020e18:	e0 8b 00 06 	brhi	80020e24 <_malloc_r+0x84>
80020e1c:	ee 03 16 06 	lsr	r3,r7,0x6
80020e20:	2c 83       	sub	r3,-56
80020e22:	c2 08       	rjmp	80020e62 <_malloc_r+0xc2>
80020e24:	59 48       	cp.w	r8,20
80020e26:	e0 8b 00 05 	brhi	80020e30 <_malloc_r+0x90>
80020e2a:	f0 c3 ff a5 	sub	r3,r8,-91
80020e2e:	c1 a8       	rjmp	80020e62 <_malloc_r+0xc2>
80020e30:	e0 48 00 54 	cp.w	r8,84
80020e34:	e0 8b 00 06 	brhi	80020e40 <_malloc_r+0xa0>
80020e38:	ee 03 16 0c 	lsr	r3,r7,0xc
80020e3c:	29 23       	sub	r3,-110
80020e3e:	c1 28       	rjmp	80020e62 <_malloc_r+0xc2>
80020e40:	e0 48 01 54 	cp.w	r8,340
80020e44:	e0 8b 00 06 	brhi	80020e50 <_malloc_r+0xb0>
80020e48:	ee 03 16 0f 	lsr	r3,r7,0xf
80020e4c:	28 93       	sub	r3,-119
80020e4e:	c0 a8       	rjmp	80020e62 <_malloc_r+0xc2>
80020e50:	ee 03 16 12 	lsr	r3,r7,0x12
80020e54:	e0 48 05 54 	cp.w	r8,1364
80020e58:	e0 88 00 04 	brls	80020e60 <_malloc_r+0xc0>
80020e5c:	37 e3       	mov	r3,126
80020e5e:	c0 28       	rjmp	80020e62 <_malloc_r+0xc2>
80020e60:	28 43       	sub	r3,-124
80020e62:	e0 6a 01 50 	mov	r10,336
80020e66:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80020e6a:	74 36       	ld.w	r6,r10[0xc]
80020e6c:	c1 98       	rjmp	80020e9e <_malloc_r+0xfe>
80020e6e:	6c 19       	ld.w	r9,r6[0x4]
80020e70:	e0 19 ff fc 	andl	r9,0xfffc
80020e74:	f2 07 01 0b 	sub	r11,r9,r7
80020e78:	58 fb       	cp.w	r11,15
80020e7a:	e0 8a 00 04 	brle	80020e82 <_malloc_r+0xe2>
80020e7e:	20 13       	sub	r3,1
80020e80:	c1 18       	rjmp	80020ea2 <_malloc_r+0x102>
80020e82:	6c 38       	ld.w	r8,r6[0xc]
80020e84:	58 0b       	cp.w	r11,0
80020e86:	c0 b5       	brlt	80020e9c <_malloc_r+0xfc>
80020e88:	6c 2a       	ld.w	r10,r6[0x8]
80020e8a:	ec 09 00 09 	add	r9,r6,r9
80020e8e:	0a 9c       	mov	r12,r5
80020e90:	91 2a       	st.w	r8[0x8],r10
80020e92:	95 38       	st.w	r10[0xc],r8
80020e94:	72 18       	ld.w	r8,r9[0x4]
80020e96:	a1 a8       	sbr	r8,0x0
80020e98:	93 18       	st.w	r9[0x4],r8
80020e9a:	cb d8       	rjmp	80021014 <_malloc_r+0x274>
80020e9c:	10 96       	mov	r6,r8
80020e9e:	14 36       	cp.w	r6,r10
80020ea0:	ce 71       	brne	80020e6e <_malloc_r+0xce>
80020ea2:	2f f3       	sub	r3,-1
80020ea4:	e0 6a 01 50 	mov	r10,336
80020ea8:	f4 cc ff f8 	sub	r12,r10,-8
80020eac:	78 26       	ld.w	r6,r12[0x8]
80020eae:	18 36       	cp.w	r6,r12
80020eb0:	c6 d0       	breq	80020f8a <_malloc_r+0x1ea>
80020eb2:	6c 19       	ld.w	r9,r6[0x4]
80020eb4:	e0 19 ff fc 	andl	r9,0xfffc
80020eb8:	f2 07 01 08 	sub	r8,r9,r7
80020ebc:	58 f8       	cp.w	r8,15
80020ebe:	e0 89 00 90 	brgt	80020fde <_malloc_r+0x23e>
80020ec2:	99 3c       	st.w	r12[0xc],r12
80020ec4:	99 2c       	st.w	r12[0x8],r12
80020ec6:	58 08       	cp.w	r8,0
80020ec8:	c0 55       	brlt	80020ed2 <_malloc_r+0x132>
80020eca:	ec 09 00 09 	add	r9,r6,r9
80020ece:	0a 9c       	mov	r12,r5
80020ed0:	ce 2b       	rjmp	80020e94 <_malloc_r+0xf4>
80020ed2:	e0 49 01 ff 	cp.w	r9,511
80020ed6:	e0 8b 00 13 	brhi	80020efc <_malloc_r+0x15c>
80020eda:	a3 99       	lsr	r9,0x3
80020edc:	f4 09 00 38 	add	r8,r10,r9<<0x3
80020ee0:	70 2b       	ld.w	r11,r8[0x8]
80020ee2:	8d 38       	st.w	r6[0xc],r8
80020ee4:	8d 2b       	st.w	r6[0x8],r11
80020ee6:	97 36       	st.w	r11[0xc],r6
80020ee8:	91 26       	st.w	r8[0x8],r6
80020eea:	a3 49       	asr	r9,0x2
80020eec:	74 18       	ld.w	r8,r10[0x4]
80020eee:	30 1b       	mov	r11,1
80020ef0:	f6 09 09 49 	lsl	r9,r11,r9
80020ef4:	f1 e9 10 09 	or	r9,r8,r9
80020ef8:	95 19       	st.w	r10[0x4],r9
80020efa:	c4 88       	rjmp	80020f8a <_malloc_r+0x1ea>
80020efc:	f2 08 16 09 	lsr	r8,r9,0x9
80020f00:	58 48       	cp.w	r8,4
80020f02:	e0 8b 00 07 	brhi	80020f10 <_malloc_r+0x170>
80020f06:	f2 0a 16 06 	lsr	r10,r9,0x6
80020f0a:	2c 8a       	sub	r10,-56
80020f0c:	c2 18       	rjmp	80020f4e <_malloc_r+0x1ae>
80020f0e:	d7 03       	nop
80020f10:	59 48       	cp.w	r8,20
80020f12:	e0 8b 00 05 	brhi	80020f1c <_malloc_r+0x17c>
80020f16:	f0 ca ff a5 	sub	r10,r8,-91
80020f1a:	c1 a8       	rjmp	80020f4e <_malloc_r+0x1ae>
80020f1c:	e0 48 00 54 	cp.w	r8,84
80020f20:	e0 8b 00 06 	brhi	80020f2c <_malloc_r+0x18c>
80020f24:	f2 0a 16 0c 	lsr	r10,r9,0xc
80020f28:	29 2a       	sub	r10,-110
80020f2a:	c1 28       	rjmp	80020f4e <_malloc_r+0x1ae>
80020f2c:	e0 48 01 54 	cp.w	r8,340
80020f30:	e0 8b 00 06 	brhi	80020f3c <_malloc_r+0x19c>
80020f34:	f2 0a 16 0f 	lsr	r10,r9,0xf
80020f38:	28 9a       	sub	r10,-119
80020f3a:	c0 a8       	rjmp	80020f4e <_malloc_r+0x1ae>
80020f3c:	f2 0a 16 12 	lsr	r10,r9,0x12
80020f40:	e0 48 05 54 	cp.w	r8,1364
80020f44:	e0 88 00 04 	brls	80020f4c <_malloc_r+0x1ac>
80020f48:	37 ea       	mov	r10,126
80020f4a:	c0 28       	rjmp	80020f4e <_malloc_r+0x1ae>
80020f4c:	28 4a       	sub	r10,-124
80020f4e:	e0 6b 01 50 	mov	r11,336
80020f52:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80020f56:	68 28       	ld.w	r8,r4[0x8]
80020f58:	08 38       	cp.w	r8,r4
80020f5a:	c0 e1       	brne	80020f76 <_malloc_r+0x1d6>
80020f5c:	76 19       	ld.w	r9,r11[0x4]
80020f5e:	a3 4a       	asr	r10,0x2
80020f60:	30 1e       	mov	lr,1
80020f62:	fc 0a 09 4a 	lsl	r10,lr,r10
80020f66:	f3 ea 10 0a 	or	r10,r9,r10
80020f6a:	10 99       	mov	r9,r8
80020f6c:	97 1a       	st.w	r11[0x4],r10
80020f6e:	c0 a8       	rjmp	80020f82 <_malloc_r+0x1e2>
80020f70:	70 28       	ld.w	r8,r8[0x8]
80020f72:	08 38       	cp.w	r8,r4
80020f74:	c0 60       	breq	80020f80 <_malloc_r+0x1e0>
80020f76:	70 1a       	ld.w	r10,r8[0x4]
80020f78:	e0 1a ff fc 	andl	r10,0xfffc
80020f7c:	14 39       	cp.w	r9,r10
80020f7e:	cf 93       	brcs	80020f70 <_malloc_r+0x1d0>
80020f80:	70 39       	ld.w	r9,r8[0xc]
80020f82:	8d 39       	st.w	r6[0xc],r9
80020f84:	8d 28       	st.w	r6[0x8],r8
80020f86:	91 36       	st.w	r8[0xc],r6
80020f88:	93 26       	st.w	r9[0x8],r6
80020f8a:	e6 08 14 02 	asr	r8,r3,0x2
80020f8e:	30 1b       	mov	r11,1
80020f90:	e0 64 01 50 	mov	r4,336
80020f94:	f6 08 09 4b 	lsl	r11,r11,r8
80020f98:	68 18       	ld.w	r8,r4[0x4]
80020f9a:	10 3b       	cp.w	r11,r8
80020f9c:	e0 8b 00 6a 	brhi	80021070 <_malloc_r+0x2d0>
80020fa0:	f7 e8 00 09 	and	r9,r11,r8
80020fa4:	c0 b1       	brne	80020fba <_malloc_r+0x21a>
80020fa6:	e0 13 ff fc 	andl	r3,0xfffc
80020faa:	a1 7b       	lsl	r11,0x1
80020fac:	2f c3       	sub	r3,-4
80020fae:	c0 38       	rjmp	80020fb4 <_malloc_r+0x214>
80020fb0:	2f c3       	sub	r3,-4
80020fb2:	a1 7b       	lsl	r11,0x1
80020fb4:	f7 e8 00 09 	and	r9,r11,r8
80020fb8:	cf c0       	breq	80020fb0 <_malloc_r+0x210>
80020fba:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80020fbe:	06 92       	mov	r2,r3
80020fc0:	1c 91       	mov	r1,lr
80020fc2:	62 36       	ld.w	r6,r1[0xc]
80020fc4:	c2 d8       	rjmp	8002101e <_malloc_r+0x27e>
80020fc6:	6c 1a       	ld.w	r10,r6[0x4]
80020fc8:	e0 1a ff fc 	andl	r10,0xfffc
80020fcc:	f4 07 01 08 	sub	r8,r10,r7
80020fd0:	58 f8       	cp.w	r8,15
80020fd2:	e0 8a 00 15 	brle	80020ffc <_malloc_r+0x25c>
80020fd6:	6c 3a       	ld.w	r10,r6[0xc]
80020fd8:	6c 29       	ld.w	r9,r6[0x8]
80020fda:	95 29       	st.w	r10[0x8],r9
80020fdc:	93 3a       	st.w	r9[0xc],r10
80020fde:	0e 99       	mov	r9,r7
80020fe0:	ec 07 00 07 	add	r7,r6,r7
80020fe4:	a1 a9       	sbr	r9,0x0
80020fe6:	99 37       	st.w	r12[0xc],r7
80020fe8:	99 27       	st.w	r12[0x8],r7
80020fea:	8d 19       	st.w	r6[0x4],r9
80020fec:	ee 08 09 08 	st.w	r7[r8],r8
80020ff0:	8f 2c       	st.w	r7[0x8],r12
80020ff2:	8f 3c       	st.w	r7[0xc],r12
80020ff4:	a1 a8       	sbr	r8,0x0
80020ff6:	0a 9c       	mov	r12,r5
80020ff8:	8f 18       	st.w	r7[0x4],r8
80020ffa:	c0 d8       	rjmp	80021014 <_malloc_r+0x274>
80020ffc:	6c 39       	ld.w	r9,r6[0xc]
80020ffe:	58 08       	cp.w	r8,0
80021000:	c0 e5       	brlt	8002101c <_malloc_r+0x27c>
80021002:	ec 0a 00 0a 	add	r10,r6,r10
80021006:	74 18       	ld.w	r8,r10[0x4]
80021008:	a1 a8       	sbr	r8,0x0
8002100a:	0a 9c       	mov	r12,r5
8002100c:	95 18       	st.w	r10[0x4],r8
8002100e:	6c 28       	ld.w	r8,r6[0x8]
80021010:	93 28       	st.w	r9[0x8],r8
80021012:	91 39       	st.w	r8[0xc],r9
80021014:	c8 ad       	rcall	80021328 <__malloc_unlock>
80021016:	ec cc ff f8 	sub	r12,r6,-8
8002101a:	d8 32       	popm	r0-r7,pc
8002101c:	12 96       	mov	r6,r9
8002101e:	02 36       	cp.w	r6,r1
80021020:	cd 31       	brne	80020fc6 <_malloc_r+0x226>
80021022:	2f f2       	sub	r2,-1
80021024:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80021028:	c0 30       	breq	8002102e <_malloc_r+0x28e>
8002102a:	2f 81       	sub	r1,-8
8002102c:	cc bb       	rjmp	80020fc2 <_malloc_r+0x222>
8002102e:	1c 98       	mov	r8,lr
80021030:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80021034:	c0 81       	brne	80021044 <_malloc_r+0x2a4>
80021036:	68 19       	ld.w	r9,r4[0x4]
80021038:	f6 08 11 ff 	rsub	r8,r11,-1
8002103c:	f3 e8 00 08 	and	r8,r9,r8
80021040:	89 18       	st.w	r4[0x4],r8
80021042:	c0 78       	rjmp	80021050 <_malloc_r+0x2b0>
80021044:	f0 c9 00 08 	sub	r9,r8,8
80021048:	20 13       	sub	r3,1
8002104a:	70 08       	ld.w	r8,r8[0x0]
8002104c:	12 38       	cp.w	r8,r9
8002104e:	cf 10       	breq	80021030 <_malloc_r+0x290>
80021050:	a1 7b       	lsl	r11,0x1
80021052:	68 18       	ld.w	r8,r4[0x4]
80021054:	10 3b       	cp.w	r11,r8
80021056:	e0 8b 00 0d 	brhi	80021070 <_malloc_r+0x2d0>
8002105a:	58 0b       	cp.w	r11,0
8002105c:	c0 a0       	breq	80021070 <_malloc_r+0x2d0>
8002105e:	04 93       	mov	r3,r2
80021060:	c0 38       	rjmp	80021066 <_malloc_r+0x2c6>
80021062:	2f c3       	sub	r3,-4
80021064:	a1 7b       	lsl	r11,0x1
80021066:	f7 e8 00 09 	and	r9,r11,r8
8002106a:	ca 81       	brne	80020fba <_malloc_r+0x21a>
8002106c:	cf bb       	rjmp	80021062 <_malloc_r+0x2c2>
8002106e:	d7 03       	nop
80021070:	68 23       	ld.w	r3,r4[0x8]
80021072:	66 12       	ld.w	r2,r3[0x4]
80021074:	e0 12 ff fc 	andl	r2,0xfffc
80021078:	0e 32       	cp.w	r2,r7
8002107a:	5f 39       	srlo	r9
8002107c:	e4 07 01 08 	sub	r8,r2,r7
80021080:	58 f8       	cp.w	r8,15
80021082:	5f aa       	srle	r10
80021084:	f5 e9 10 09 	or	r9,r10,r9
80021088:	e0 80 00 96 	breq	800211b4 <_malloc_r+0x414>
8002108c:	e0 68 39 08 	mov	r8,14600
80021090:	70 01       	ld.w	r1,r8[0x0]
80021092:	e0 68 05 5c 	mov	r8,1372
80021096:	2f 01       	sub	r1,-16
80021098:	70 08       	ld.w	r8,r8[0x0]
8002109a:	0e 01       	add	r1,r7
8002109c:	5b f8       	cp.w	r8,-1
8002109e:	c0 40       	breq	800210a6 <_malloc_r+0x306>
800210a0:	28 11       	sub	r1,-127
800210a2:	e0 11 ff 80 	andl	r1,0xff80
800210a6:	02 9b       	mov	r11,r1
800210a8:	0a 9c       	mov	r12,r5
800210aa:	c4 1d       	rcall	8002132c <_sbrk_r>
800210ac:	18 96       	mov	r6,r12
800210ae:	5b fc       	cp.w	r12,-1
800210b0:	c7 30       	breq	80021196 <_malloc_r+0x3f6>
800210b2:	e6 02 00 08 	add	r8,r3,r2
800210b6:	10 3c       	cp.w	r12,r8
800210b8:	c0 32       	brcc	800210be <_malloc_r+0x31e>
800210ba:	08 33       	cp.w	r3,r4
800210bc:	c6 d1       	brne	80021196 <_malloc_r+0x3f6>
800210be:	e0 6a 39 0c 	mov	r10,14604
800210c2:	74 09       	ld.w	r9,r10[0x0]
800210c4:	e2 09 00 09 	add	r9,r1,r9
800210c8:	95 09       	st.w	r10[0x0],r9
800210ca:	10 36       	cp.w	r6,r8
800210cc:	c0 a1       	brne	800210e0 <_malloc_r+0x340>
800210ce:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
800210d2:	c0 71       	brne	800210e0 <_malloc_r+0x340>
800210d4:	e2 02 00 02 	add	r2,r1,r2
800210d8:	68 28       	ld.w	r8,r4[0x8]
800210da:	a1 a2       	sbr	r2,0x0
800210dc:	91 12       	st.w	r8[0x4],r2
800210de:	c4 d8       	rjmp	80021178 <_malloc_r+0x3d8>
800210e0:	e0 6a 05 5c 	mov	r10,1372
800210e4:	74 0b       	ld.w	r11,r10[0x0]
800210e6:	5b fb       	cp.w	r11,-1
800210e8:	c0 31       	brne	800210ee <_malloc_r+0x34e>
800210ea:	95 06       	st.w	r10[0x0],r6
800210ec:	c0 78       	rjmp	800210fa <_malloc_r+0x35a>
800210ee:	ec 09 00 09 	add	r9,r6,r9
800210f2:	e0 6a 39 0c 	mov	r10,14604
800210f6:	10 19       	sub	r9,r8
800210f8:	95 09       	st.w	r10[0x0],r9
800210fa:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
800210fe:	f0 09 11 08 	rsub	r9,r8,8
80021102:	58 08       	cp.w	r8,0
80021104:	f2 08 17 10 	movne	r8,r9
80021108:	ed d8 e1 06 	addne	r6,r6,r8
8002110c:	28 08       	sub	r8,-128
8002110e:	ec 01 00 01 	add	r1,r6,r1
80021112:	0a 9c       	mov	r12,r5
80021114:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80021118:	f0 01 01 01 	sub	r1,r8,r1
8002111c:	02 9b       	mov	r11,r1
8002111e:	c0 7d       	rcall	8002132c <_sbrk_r>
80021120:	e0 68 39 0c 	mov	r8,14604
80021124:	5b fc       	cp.w	r12,-1
80021126:	ec 0c 17 00 	moveq	r12,r6
8002112a:	f9 b1 00 00 	moveq	r1,0
8002112e:	70 09       	ld.w	r9,r8[0x0]
80021130:	0c 1c       	sub	r12,r6
80021132:	89 26       	st.w	r4[0x8],r6
80021134:	02 0c       	add	r12,r1
80021136:	12 01       	add	r1,r9
80021138:	a1 ac       	sbr	r12,0x0
8002113a:	91 01       	st.w	r8[0x0],r1
8002113c:	8d 1c       	st.w	r6[0x4],r12
8002113e:	08 33       	cp.w	r3,r4
80021140:	c1 c0       	breq	80021178 <_malloc_r+0x3d8>
80021142:	58 f2       	cp.w	r2,15
80021144:	e0 8b 00 05 	brhi	8002114e <_malloc_r+0x3ae>
80021148:	30 18       	mov	r8,1
8002114a:	8d 18       	st.w	r6[0x4],r8
8002114c:	c2 58       	rjmp	80021196 <_malloc_r+0x3f6>
8002114e:	30 59       	mov	r9,5
80021150:	20 c2       	sub	r2,12
80021152:	e0 12 ff f8 	andl	r2,0xfff8
80021156:	e6 02 00 08 	add	r8,r3,r2
8002115a:	91 29       	st.w	r8[0x8],r9
8002115c:	91 19       	st.w	r8[0x4],r9
8002115e:	66 18       	ld.w	r8,r3[0x4]
80021160:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80021164:	e5 e8 10 08 	or	r8,r2,r8
80021168:	87 18       	st.w	r3[0x4],r8
8002116a:	58 f2       	cp.w	r2,15
8002116c:	e0 88 00 06 	brls	80021178 <_malloc_r+0x3d8>
80021170:	e6 cb ff f8 	sub	r11,r3,-8
80021174:	0a 9c       	mov	r12,r5
80021176:	cf 5d       	rcall	80021560 <_free_r>
80021178:	e0 69 39 04 	mov	r9,14596
8002117c:	72 0a       	ld.w	r10,r9[0x0]
8002117e:	e0 68 39 0c 	mov	r8,14604
80021182:	70 08       	ld.w	r8,r8[0x0]
80021184:	14 38       	cp.w	r8,r10
80021186:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8002118a:	e0 69 39 00 	mov	r9,14592
8002118e:	72 0a       	ld.w	r10,r9[0x0]
80021190:	14 38       	cp.w	r8,r10
80021192:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80021196:	68 28       	ld.w	r8,r4[0x8]
80021198:	70 18       	ld.w	r8,r8[0x4]
8002119a:	e0 18 ff fc 	andl	r8,0xfffc
8002119e:	0e 38       	cp.w	r8,r7
800211a0:	5f 39       	srlo	r9
800211a2:	0e 18       	sub	r8,r7
800211a4:	58 f8       	cp.w	r8,15
800211a6:	5f aa       	srle	r10
800211a8:	f5 e9 10 09 	or	r9,r10,r9
800211ac:	c0 40       	breq	800211b4 <_malloc_r+0x414>
800211ae:	0a 9c       	mov	r12,r5
800211b0:	cb cc       	rcall	80021328 <__malloc_unlock>
800211b2:	d8 3a       	popm	r0-r7,pc,r12=0
800211b4:	68 26       	ld.w	r6,r4[0x8]
800211b6:	a1 a8       	sbr	r8,0x0
800211b8:	0e 99       	mov	r9,r7
800211ba:	a1 a9       	sbr	r9,0x0
800211bc:	8d 19       	st.w	r6[0x4],r9
800211be:	ec 07 00 07 	add	r7,r6,r7
800211c2:	0a 9c       	mov	r12,r5
800211c4:	89 27       	st.w	r4[0x8],r7
800211c6:	8f 18       	st.w	r7[0x4],r8
800211c8:	cb 0c       	rcall	80021328 <__malloc_unlock>
800211ca:	ec cc ff f8 	sub	r12,r6,-8
800211ce:	d8 32       	popm	r0-r7,pc

800211d0 <memcpy>:
800211d0:	58 8a       	cp.w	r10,8
800211d2:	c2 f5       	brlt	80021230 <memcpy+0x60>
800211d4:	f9 eb 10 09 	or	r9,r12,r11
800211d8:	e2 19 00 03 	andl	r9,0x3,COH
800211dc:	e0 81 00 97 	brne	8002130a <memcpy+0x13a>
800211e0:	e0 4a 00 20 	cp.w	r10,32
800211e4:	c3 b4       	brge	8002125a <memcpy+0x8a>
800211e6:	f4 08 14 02 	asr	r8,r10,0x2
800211ea:	f0 09 11 08 	rsub	r9,r8,8
800211ee:	fe 09 00 2f 	add	pc,pc,r9<<0x2
800211f2:	76 69       	ld.w	r9,r11[0x18]
800211f4:	99 69       	st.w	r12[0x18],r9
800211f6:	76 59       	ld.w	r9,r11[0x14]
800211f8:	99 59       	st.w	r12[0x14],r9
800211fa:	76 49       	ld.w	r9,r11[0x10]
800211fc:	99 49       	st.w	r12[0x10],r9
800211fe:	76 39       	ld.w	r9,r11[0xc]
80021200:	99 39       	st.w	r12[0xc],r9
80021202:	76 29       	ld.w	r9,r11[0x8]
80021204:	99 29       	st.w	r12[0x8],r9
80021206:	76 19       	ld.w	r9,r11[0x4]
80021208:	99 19       	st.w	r12[0x4],r9
8002120a:	76 09       	ld.w	r9,r11[0x0]
8002120c:	99 09       	st.w	r12[0x0],r9
8002120e:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80021212:	f8 08 00 28 	add	r8,r12,r8<<0x2
80021216:	e0 1a 00 03 	andl	r10,0x3
8002121a:	f4 0a 11 04 	rsub	r10,r10,4
8002121e:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80021222:	17 a9       	ld.ub	r9,r11[0x2]
80021224:	b0 a9       	st.b	r8[0x2],r9
80021226:	17 99       	ld.ub	r9,r11[0x1]
80021228:	b0 99       	st.b	r8[0x1],r9
8002122a:	17 89       	ld.ub	r9,r11[0x0]
8002122c:	b0 89       	st.b	r8[0x0],r9
8002122e:	5e fc       	retal	r12
80021230:	f4 0a 11 09 	rsub	r10,r10,9
80021234:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80021238:	17 f9       	ld.ub	r9,r11[0x7]
8002123a:	b8 f9       	st.b	r12[0x7],r9
8002123c:	17 e9       	ld.ub	r9,r11[0x6]
8002123e:	b8 e9       	st.b	r12[0x6],r9
80021240:	17 d9       	ld.ub	r9,r11[0x5]
80021242:	b8 d9       	st.b	r12[0x5],r9
80021244:	17 c9       	ld.ub	r9,r11[0x4]
80021246:	b8 c9       	st.b	r12[0x4],r9
80021248:	17 b9       	ld.ub	r9,r11[0x3]
8002124a:	b8 b9       	st.b	r12[0x3],r9
8002124c:	17 a9       	ld.ub	r9,r11[0x2]
8002124e:	b8 a9       	st.b	r12[0x2],r9
80021250:	17 99       	ld.ub	r9,r11[0x1]
80021252:	b8 99       	st.b	r12[0x1],r9
80021254:	17 89       	ld.ub	r9,r11[0x0]
80021256:	b8 89       	st.b	r12[0x0],r9
80021258:	5e fc       	retal	r12
8002125a:	eb cd 40 c0 	pushm	r6-r7,lr
8002125e:	18 99       	mov	r9,r12
80021260:	22 0a       	sub	r10,32
80021262:	b7 07       	ld.d	r6,r11++
80021264:	b3 26       	st.d	r9++,r6
80021266:	b7 07       	ld.d	r6,r11++
80021268:	b3 26       	st.d	r9++,r6
8002126a:	b7 07       	ld.d	r6,r11++
8002126c:	b3 26       	st.d	r9++,r6
8002126e:	b7 07       	ld.d	r6,r11++
80021270:	b3 26       	st.d	r9++,r6
80021272:	22 0a       	sub	r10,32
80021274:	cf 74       	brge	80021262 <memcpy+0x92>
80021276:	2f 0a       	sub	r10,-16
80021278:	c0 65       	brlt	80021284 <memcpy+0xb4>
8002127a:	b7 07       	ld.d	r6,r11++
8002127c:	b3 26       	st.d	r9++,r6
8002127e:	b7 07       	ld.d	r6,r11++
80021280:	b3 26       	st.d	r9++,r6
80021282:	21 0a       	sub	r10,16
80021284:	5c 3a       	neg	r10
80021286:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8002128a:	d7 03       	nop
8002128c:	d7 03       	nop
8002128e:	f7 36 00 0e 	ld.ub	r6,r11[14]
80021292:	f3 66 00 0e 	st.b	r9[14],r6
80021296:	f7 36 00 0d 	ld.ub	r6,r11[13]
8002129a:	f3 66 00 0d 	st.b	r9[13],r6
8002129e:	f7 36 00 0c 	ld.ub	r6,r11[12]
800212a2:	f3 66 00 0c 	st.b	r9[12],r6
800212a6:	f7 36 00 0b 	ld.ub	r6,r11[11]
800212aa:	f3 66 00 0b 	st.b	r9[11],r6
800212ae:	f7 36 00 0a 	ld.ub	r6,r11[10]
800212b2:	f3 66 00 0a 	st.b	r9[10],r6
800212b6:	f7 36 00 09 	ld.ub	r6,r11[9]
800212ba:	f3 66 00 09 	st.b	r9[9],r6
800212be:	f7 36 00 08 	ld.ub	r6,r11[8]
800212c2:	f3 66 00 08 	st.b	r9[8],r6
800212c6:	f7 36 00 07 	ld.ub	r6,r11[7]
800212ca:	f3 66 00 07 	st.b	r9[7],r6
800212ce:	f7 36 00 06 	ld.ub	r6,r11[6]
800212d2:	f3 66 00 06 	st.b	r9[6],r6
800212d6:	f7 36 00 05 	ld.ub	r6,r11[5]
800212da:	f3 66 00 05 	st.b	r9[5],r6
800212de:	f7 36 00 04 	ld.ub	r6,r11[4]
800212e2:	f3 66 00 04 	st.b	r9[4],r6
800212e6:	f7 36 00 03 	ld.ub	r6,r11[3]
800212ea:	f3 66 00 03 	st.b	r9[3],r6
800212ee:	f7 36 00 02 	ld.ub	r6,r11[2]
800212f2:	f3 66 00 02 	st.b	r9[2],r6
800212f6:	f7 36 00 01 	ld.ub	r6,r11[1]
800212fa:	f3 66 00 01 	st.b	r9[1],r6
800212fe:	f7 36 00 00 	ld.ub	r6,r11[0]
80021302:	f3 66 00 00 	st.b	r9[0],r6
80021306:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002130a:	20 1a       	sub	r10,1
8002130c:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80021310:	f8 0a 0b 09 	st.b	r12[r10],r9
80021314:	cf b1       	brne	8002130a <memcpy+0x13a>
80021316:	5e fc       	retal	r12

80021318 <memset>:
80021318:	18 98       	mov	r8,r12
8002131a:	c0 38       	rjmp	80021320 <memset+0x8>
8002131c:	10 cb       	st.b	r8++,r11
8002131e:	20 1a       	sub	r10,1
80021320:	58 0a       	cp.w	r10,0
80021322:	cf d1       	brne	8002131c <memset+0x4>
80021324:	5e fc       	retal	r12

80021326 <__malloc_lock>:
80021326:	5e fc       	retal	r12

80021328 <__malloc_unlock>:
80021328:	5e fc       	retal	r12
8002132a:	d7 03       	nop

8002132c <_sbrk_r>:
8002132c:	d4 21       	pushm	r4-r7,lr
8002132e:	30 08       	mov	r8,0
80021330:	18 97       	mov	r7,r12
80021332:	e0 66 d0 d4 	mov	r6,53460
80021336:	16 9c       	mov	r12,r11
80021338:	8d 08       	st.w	r6[0x0],r8
8002133a:	ca bc       	rcall	80021490 <_sbrk>
8002133c:	5b fc       	cp.w	r12,-1
8002133e:	c0 51       	brne	80021348 <_sbrk_r+0x1c>
80021340:	6c 08       	ld.w	r8,r6[0x0]
80021342:	58 08       	cp.w	r8,0
80021344:	ef f8 1a 03 	st.wne	r7[0xc],r8
80021348:	d8 22       	popm	r4-r7,pc
8002134a:	d7 03       	nop

8002134c <strcmp>:
8002134c:	f9 eb 10 0a 	or	r10,r12,r11
80021350:	e2 1a 00 03 	andl	r10,0x3,COH
80021354:	c3 41       	brne	800213bc <strcmp+0x70>
80021356:	78 0a       	ld.w	r10,r12[0x0]
80021358:	76 09       	ld.w	r9,r11[0x0]
8002135a:	5c ea       	tnbz	r10
8002135c:	c1 70       	breq	8002138a <strcmp+0x3e>
8002135e:	12 3a       	cp.w	r10,r9
80021360:	c1 51       	brne	8002138a <strcmp+0x3e>
80021362:	78 1a       	ld.w	r10,r12[0x4]
80021364:	76 19       	ld.w	r9,r11[0x4]
80021366:	5c ea       	tnbz	r10
80021368:	c1 10       	breq	8002138a <strcmp+0x3e>
8002136a:	12 3a       	cp.w	r10,r9
8002136c:	c0 f1       	brne	8002138a <strcmp+0x3e>
8002136e:	78 2a       	ld.w	r10,r12[0x8]
80021370:	76 29       	ld.w	r9,r11[0x8]
80021372:	5c ea       	tnbz	r10
80021374:	c0 b0       	breq	8002138a <strcmp+0x3e>
80021376:	12 3a       	cp.w	r10,r9
80021378:	c0 91       	brne	8002138a <strcmp+0x3e>
8002137a:	78 3a       	ld.w	r10,r12[0xc]
8002137c:	76 39       	ld.w	r9,r11[0xc]
8002137e:	5c ea       	tnbz	r10
80021380:	c0 50       	breq	8002138a <strcmp+0x3e>
80021382:	2f 0c       	sub	r12,-16
80021384:	2f 0b       	sub	r11,-16
80021386:	12 3a       	cp.w	r10,r9
80021388:	ce 70       	breq	80021356 <strcmp+0xa>
8002138a:	f9 da c3 08 	bfextu	r12,r10,0x18,0x8
8002138e:	f7 d9 c3 08 	bfextu	r11,r9,0x18,0x8
80021392:	5e 0c       	reteq	r12
80021394:	16 1c       	sub	r12,r11
80021396:	5e 1c       	retne	r12
80021398:	f9 da c2 08 	bfextu	r12,r10,0x10,0x8
8002139c:	f7 d9 c2 08 	bfextu	r11,r9,0x10,0x8
800213a0:	5e 0c       	reteq	r12
800213a2:	16 1c       	sub	r12,r11
800213a4:	5e 1c       	retne	r12
800213a6:	f9 da c1 08 	bfextu	r12,r10,0x8,0x8
800213aa:	f7 d9 c1 08 	bfextu	r11,r9,0x8,0x8
800213ae:	5e 0c       	reteq	r12
800213b0:	16 1c       	sub	r12,r11
800213b2:	5e 1c       	retne	r12
800213b4:	5c 5a       	castu.b	r10
800213b6:	5c 59       	castu.b	r9
800213b8:	12 1a       	sub	r10,r9
800213ba:	5e fa       	retal	r10
800213bc:	17 8a       	ld.ub	r10,r11[0x0]
800213be:	19 89       	ld.ub	r9,r12[0x0]
800213c0:	58 0a       	cp.w	r10,0
800213c2:	5e 09       	reteq	r9
800213c4:	14 19       	sub	r9,r10
800213c6:	5e 19       	retne	r9
800213c8:	17 9a       	ld.ub	r10,r11[0x1]
800213ca:	19 99       	ld.ub	r9,r12[0x1]
800213cc:	58 0a       	cp.w	r10,0
800213ce:	5e 09       	reteq	r9
800213d0:	14 19       	sub	r9,r10
800213d2:	5e 19       	retne	r9
800213d4:	17 aa       	ld.ub	r10,r11[0x2]
800213d6:	19 a9       	ld.ub	r9,r12[0x2]
800213d8:	58 0a       	cp.w	r10,0
800213da:	5e 09       	reteq	r9
800213dc:	14 19       	sub	r9,r10
800213de:	5e 19       	retne	r9
800213e0:	17 ba       	ld.ub	r10,r11[0x3]
800213e2:	19 b9       	ld.ub	r9,r12[0x3]
800213e4:	58 0a       	cp.w	r10,0
800213e6:	5e 09       	reteq	r9
800213e8:	14 19       	sub	r9,r10
800213ea:	5e 19       	retne	r9
800213ec:	2f cb       	sub	r11,-4
800213ee:	2f cc       	sub	r12,-4
800213f0:	ce 6b       	rjmp	800213bc <strcmp+0x70>
800213f2:	d7 03       	nop

800213f4 <strcpy>:
800213f4:	30 08       	mov	r8,0
800213f6:	f6 08 07 09 	ld.ub	r9,r11[r8]
800213fa:	f8 08 0b 09 	st.b	r12[r8],r9
800213fe:	2f f8       	sub	r8,-1
80021400:	58 09       	cp.w	r9,0
80021402:	cf a1       	brne	800213f6 <strcpy+0x2>
80021404:	5e fc       	retal	r12

80021406 <strlen>:
80021406:	30 09       	mov	r9,0
80021408:	18 98       	mov	r8,r12
8002140a:	c0 28       	rjmp	8002140e <strlen+0x8>
8002140c:	2f f8       	sub	r8,-1
8002140e:	11 8a       	ld.ub	r10,r8[0x0]
80021410:	f2 0a 18 00 	cp.b	r10,r9
80021414:	cf c1       	brne	8002140c <strlen+0x6>
80021416:	f0 0c 01 0c 	sub	r12,r8,r12
8002141a:	5e fc       	retal	r12

8002141c <strncat>:
8002141c:	d4 01       	pushm	lr
8002141e:	30 09       	mov	r9,0
80021420:	18 98       	mov	r8,r12
80021422:	c0 28       	rjmp	80021426 <strncat+0xa>
80021424:	2f f8       	sub	r8,-1
80021426:	11 8e       	ld.ub	lr,r8[0x0]
80021428:	f2 0e 18 00 	cp.b	lr,r9
8002142c:	cf c1       	brne	80021424 <strncat+0x8>
8002142e:	c0 78       	rjmp	8002143c <strncat+0x20>
80021430:	20 1a       	sub	r10,1
80021432:	2f f8       	sub	r8,-1
80021434:	2f fb       	sub	r11,-1
80021436:	58 0a       	cp.w	r10,0
80021438:	f1 fa 0e 00 	st.beq	r8[0x0],r10
8002143c:	58 0a       	cp.w	r10,0
8002143e:	c0 50       	breq	80021448 <strncat+0x2c>
80021440:	17 89       	ld.ub	r9,r11[0x0]
80021442:	b0 89       	st.b	r8[0x0],r9
80021444:	58 09       	cp.w	r9,0
80021446:	cf 51       	brne	80021430 <strncat+0x14>
80021448:	d8 02       	popm	pc

8002144a <strncmp>:
8002144a:	58 0a       	cp.w	r10,0
8002144c:	c0 81       	brne	8002145c <strncmp+0x12>
8002144e:	5e fa       	retal	r10
80021450:	58 0a       	cp.w	r10,0
80021452:	c0 b0       	breq	80021468 <strncmp+0x1e>
80021454:	58 08       	cp.w	r8,0
80021456:	c0 90       	breq	80021468 <strncmp+0x1e>
80021458:	2f fc       	sub	r12,-1
8002145a:	2f fb       	sub	r11,-1
8002145c:	20 1a       	sub	r10,1
8002145e:	19 88       	ld.ub	r8,r12[0x0]
80021460:	17 89       	ld.ub	r9,r11[0x0]
80021462:	f0 09 18 00 	cp.b	r9,r8
80021466:	cf 50       	breq	80021450 <strncmp+0x6>
80021468:	19 8c       	ld.ub	r12,r12[0x0]
8002146a:	17 88       	ld.ub	r8,r11[0x0]
8002146c:	10 1c       	sub	r12,r8
8002146e:	5e fc       	retal	r12

80021470 <strncpy>:
80021470:	30 08       	mov	r8,0
80021472:	10 3a       	cp.w	r10,r8
80021474:	5e 0c       	reteq	r12
80021476:	f6 08 07 09 	ld.ub	r9,r11[r8]
8002147a:	f8 08 0b 09 	st.b	r12[r8],r9
8002147e:	2f f8       	sub	r8,-1
80021480:	58 09       	cp.w	r9,0
80021482:	cf 81       	brne	80021472 <strncpy+0x2>
80021484:	10 3a       	cp.w	r10,r8
80021486:	5e 0c       	reteq	r12
80021488:	f8 08 0b 09 	st.b	r12[r8],r9
8002148c:	2f f8       	sub	r8,-1
8002148e:	cf bb       	rjmp	80021484 <strncpy+0x14>

80021490 <_sbrk>:
80021490:	d4 01       	pushm	lr
80021492:	e0 68 39 34 	mov	r8,14644
80021496:	70 09       	ld.w	r9,r8[0x0]
80021498:	58 09       	cp.w	r9,0
8002149a:	c0 41       	brne	800214a2 <_sbrk+0x12>
8002149c:	e0 69 d0 d8 	mov	r9,53464
800214a0:	91 09       	st.w	r8[0x0],r9
800214a2:	e0 69 39 34 	mov	r9,14644
800214a6:	e0 6a f0 00 	mov	r10,61440
800214aa:	72 08       	ld.w	r8,r9[0x0]
800214ac:	f0 0c 00 0c 	add	r12,r8,r12
800214b0:	14 3c       	cp.w	r12,r10
800214b2:	e0 8b 00 04 	brhi	800214ba <_sbrk+0x2a>
800214b6:	93 0c       	st.w	r9[0x0],r12
800214b8:	c0 58       	rjmp	800214c2 <_sbrk+0x32>
800214ba:	c0 7c       	rcall	800214c8 <__errno>
800214bc:	30 c8       	mov	r8,12
800214be:	99 08       	st.w	r12[0x0],r8
800214c0:	3f f8       	mov	r8,-1
800214c2:	10 9c       	mov	r12,r8
800214c4:	d8 02       	popm	pc
800214c6:	d7 03       	nop

800214c8 <__errno>:
800214c8:	e0 68 06 50 	mov	r8,1616
800214cc:	70 0c       	ld.w	r12,r8[0x0]
800214ce:	2f 4c       	sub	r12,-12
800214d0:	5e fc       	retal	r12
800214d2:	d7 03       	nop

800214d4 <_malloc_trim_r>:
800214d4:	d4 21       	pushm	r4-r7,lr
800214d6:	16 95       	mov	r5,r11
800214d8:	18 97       	mov	r7,r12
800214da:	c2 6f       	rcall	80021326 <__malloc_lock>
800214dc:	e0 64 01 50 	mov	r4,336
800214e0:	68 28       	ld.w	r8,r4[0x8]
800214e2:	70 16       	ld.w	r6,r8[0x4]
800214e4:	e0 16 ff fc 	andl	r6,0xfffc
800214e8:	ec c8 ff 91 	sub	r8,r6,-111
800214ec:	f0 05 01 05 	sub	r5,r8,r5
800214f0:	e0 15 ff 80 	andl	r5,0xff80
800214f4:	ea c5 00 80 	sub	r5,r5,128
800214f8:	e0 45 00 7f 	cp.w	r5,127
800214fc:	e0 8a 00 22 	brle	80021540 <_malloc_trim_r+0x6c>
80021500:	30 0b       	mov	r11,0
80021502:	0e 9c       	mov	r12,r7
80021504:	c1 4f       	rcall	8002132c <_sbrk_r>
80021506:	68 28       	ld.w	r8,r4[0x8]
80021508:	0c 08       	add	r8,r6
8002150a:	10 3c       	cp.w	r12,r8
8002150c:	c1 a1       	brne	80021540 <_malloc_trim_r+0x6c>
8002150e:	ea 0b 11 00 	rsub	r11,r5,0
80021512:	0e 9c       	mov	r12,r7
80021514:	c0 cf       	rcall	8002132c <_sbrk_r>
80021516:	5b fc       	cp.w	r12,-1
80021518:	c1 71       	brne	80021546 <_malloc_trim_r+0x72>
8002151a:	30 0b       	mov	r11,0
8002151c:	0e 9c       	mov	r12,r7
8002151e:	c0 7f       	rcall	8002132c <_sbrk_r>
80021520:	68 28       	ld.w	r8,r4[0x8]
80021522:	f8 08 01 09 	sub	r9,r12,r8
80021526:	58 f9       	cp.w	r9,15
80021528:	e0 8a 00 0c 	brle	80021540 <_malloc_trim_r+0x6c>
8002152c:	a1 a9       	sbr	r9,0x0
8002152e:	91 19       	st.w	r8[0x4],r9
80021530:	e0 68 05 5c 	mov	r8,1372
80021534:	70 09       	ld.w	r9,r8[0x0]
80021536:	e0 68 39 0c 	mov	r8,14604
8002153a:	f8 09 01 09 	sub	r9,r12,r9
8002153e:	91 09       	st.w	r8[0x0],r9
80021540:	0e 9c       	mov	r12,r7
80021542:	cf 3e       	rcall	80021328 <__malloc_unlock>
80021544:	d8 2a       	popm	r4-r7,pc,r12=0
80021546:	68 28       	ld.w	r8,r4[0x8]
80021548:	0a 16       	sub	r6,r5
8002154a:	a1 a6       	sbr	r6,0x0
8002154c:	91 16       	st.w	r8[0x4],r6
8002154e:	e0 68 39 0c 	mov	r8,14604
80021552:	70 09       	ld.w	r9,r8[0x0]
80021554:	0a 19       	sub	r9,r5
80021556:	0e 9c       	mov	r12,r7
80021558:	91 09       	st.w	r8[0x0],r9
8002155a:	ce 7e       	rcall	80021328 <__malloc_unlock>
8002155c:	da 2a       	popm	r4-r7,pc,r12=1
8002155e:	d7 03       	nop

80021560 <_free_r>:
80021560:	d4 21       	pushm	r4-r7,lr
80021562:	16 96       	mov	r6,r11
80021564:	18 97       	mov	r7,r12
80021566:	58 0b       	cp.w	r11,0
80021568:	e0 80 00 bd 	breq	800216e2 <_free_r+0x182>
8002156c:	cd de       	rcall	80021326 <__malloc_lock>
8002156e:	20 86       	sub	r6,8
80021570:	e0 6a 01 50 	mov	r10,336
80021574:	6c 18       	ld.w	r8,r6[0x4]
80021576:	74 2e       	ld.w	lr,r10[0x8]
80021578:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
8002157c:	a1 c8       	cbr	r8,0x0
8002157e:	ec 08 00 09 	add	r9,r6,r8
80021582:	72 1b       	ld.w	r11,r9[0x4]
80021584:	e0 1b ff fc 	andl	r11,0xfffc
80021588:	1c 39       	cp.w	r9,lr
8002158a:	c1 d1       	brne	800215c4 <_free_r+0x64>
8002158c:	f6 08 00 08 	add	r8,r11,r8
80021590:	58 0c       	cp.w	r12,0
80021592:	c0 81       	brne	800215a2 <_free_r+0x42>
80021594:	6c 09       	ld.w	r9,r6[0x0]
80021596:	12 16       	sub	r6,r9
80021598:	12 08       	add	r8,r9
8002159a:	6c 3b       	ld.w	r11,r6[0xc]
8002159c:	6c 29       	ld.w	r9,r6[0x8]
8002159e:	97 29       	st.w	r11[0x8],r9
800215a0:	93 3b       	st.w	r9[0xc],r11
800215a2:	10 99       	mov	r9,r8
800215a4:	95 26       	st.w	r10[0x8],r6
800215a6:	a1 a9       	sbr	r9,0x0
800215a8:	8d 19       	st.w	r6[0x4],r9
800215aa:	e0 69 05 58 	mov	r9,1368
800215ae:	72 09       	ld.w	r9,r9[0x0]
800215b0:	12 38       	cp.w	r8,r9
800215b2:	c0 63       	brcs	800215be <_free_r+0x5e>
800215b4:	e0 68 39 08 	mov	r8,14600
800215b8:	0e 9c       	mov	r12,r7
800215ba:	70 0b       	ld.w	r11,r8[0x0]
800215bc:	c8 cf       	rcall	800214d4 <_malloc_trim_r>
800215be:	0e 9c       	mov	r12,r7
800215c0:	cb 4e       	rcall	80021328 <__malloc_unlock>
800215c2:	d8 22       	popm	r4-r7,pc
800215c4:	93 1b       	st.w	r9[0x4],r11
800215c6:	58 0c       	cp.w	r12,0
800215c8:	c0 30       	breq	800215ce <_free_r+0x6e>
800215ca:	30 0c       	mov	r12,0
800215cc:	c1 08       	rjmp	800215ec <_free_r+0x8c>
800215ce:	6c 0e       	ld.w	lr,r6[0x0]
800215d0:	f4 c5 ff f8 	sub	r5,r10,-8
800215d4:	1c 16       	sub	r6,lr
800215d6:	1c 08       	add	r8,lr
800215d8:	6c 2e       	ld.w	lr,r6[0x8]
800215da:	0a 3e       	cp.w	lr,r5
800215dc:	f9 bc 00 01 	moveq	r12,1
800215e0:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800215e4:	eb fe 1a 02 	st.wne	r5[0x8],lr
800215e8:	fd f5 1a 03 	st.wne	lr[0xc],r5
800215ec:	f2 0b 00 0e 	add	lr,r9,r11
800215f0:	7c 1e       	ld.w	lr,lr[0x4]
800215f2:	ed be 00 00 	bld	lr,0x0
800215f6:	c1 40       	breq	8002161e <_free_r+0xbe>
800215f8:	16 08       	add	r8,r11
800215fa:	58 0c       	cp.w	r12,0
800215fc:	c0 d1       	brne	80021616 <_free_r+0xb6>
800215fe:	e0 6e 01 50 	mov	lr,336
80021602:	72 2b       	ld.w	r11,r9[0x8]
80021604:	2f 8e       	sub	lr,-8
80021606:	1c 3b       	cp.w	r11,lr
80021608:	c0 71       	brne	80021616 <_free_r+0xb6>
8002160a:	97 36       	st.w	r11[0xc],r6
8002160c:	97 26       	st.w	r11[0x8],r6
8002160e:	8d 2b       	st.w	r6[0x8],r11
80021610:	8d 3b       	st.w	r6[0xc],r11
80021612:	30 1c       	mov	r12,1
80021614:	c0 58       	rjmp	8002161e <_free_r+0xbe>
80021616:	72 2b       	ld.w	r11,r9[0x8]
80021618:	72 39       	ld.w	r9,r9[0xc]
8002161a:	93 2b       	st.w	r9[0x8],r11
8002161c:	97 39       	st.w	r11[0xc],r9
8002161e:	10 99       	mov	r9,r8
80021620:	ec 08 09 08 	st.w	r6[r8],r8
80021624:	a1 a9       	sbr	r9,0x0
80021626:	8d 19       	st.w	r6[0x4],r9
80021628:	58 0c       	cp.w	r12,0
8002162a:	c5 a1       	brne	800216de <_free_r+0x17e>
8002162c:	e0 48 01 ff 	cp.w	r8,511
80021630:	e0 8b 00 13 	brhi	80021656 <_free_r+0xf6>
80021634:	a3 98       	lsr	r8,0x3
80021636:	f4 08 00 39 	add	r9,r10,r8<<0x3
8002163a:	72 2b       	ld.w	r11,r9[0x8]
8002163c:	8d 39       	st.w	r6[0xc],r9
8002163e:	8d 2b       	st.w	r6[0x8],r11
80021640:	97 36       	st.w	r11[0xc],r6
80021642:	93 26       	st.w	r9[0x8],r6
80021644:	a3 48       	asr	r8,0x2
80021646:	74 19       	ld.w	r9,r10[0x4]
80021648:	30 1b       	mov	r11,1
8002164a:	f6 08 09 48 	lsl	r8,r11,r8
8002164e:	f3 e8 10 08 	or	r8,r9,r8
80021652:	95 18       	st.w	r10[0x4],r8
80021654:	c4 58       	rjmp	800216de <_free_r+0x17e>
80021656:	f0 09 16 09 	lsr	r9,r8,0x9
8002165a:	58 49       	cp.w	r9,4
8002165c:	e0 8b 00 06 	brhi	80021668 <_free_r+0x108>
80021660:	f0 0b 16 06 	lsr	r11,r8,0x6
80021664:	2c 8b       	sub	r11,-56
80021666:	c2 08       	rjmp	800216a6 <_free_r+0x146>
80021668:	59 49       	cp.w	r9,20
8002166a:	e0 8b 00 05 	brhi	80021674 <_free_r+0x114>
8002166e:	f2 cb ff a5 	sub	r11,r9,-91
80021672:	c1 a8       	rjmp	800216a6 <_free_r+0x146>
80021674:	e0 49 00 54 	cp.w	r9,84
80021678:	e0 8b 00 06 	brhi	80021684 <_free_r+0x124>
8002167c:	f0 0b 16 0c 	lsr	r11,r8,0xc
80021680:	29 2b       	sub	r11,-110
80021682:	c1 28       	rjmp	800216a6 <_free_r+0x146>
80021684:	e0 49 01 54 	cp.w	r9,340
80021688:	e0 8b 00 06 	brhi	80021694 <_free_r+0x134>
8002168c:	f0 0b 16 0f 	lsr	r11,r8,0xf
80021690:	28 9b       	sub	r11,-119
80021692:	c0 a8       	rjmp	800216a6 <_free_r+0x146>
80021694:	f0 0b 16 12 	lsr	r11,r8,0x12
80021698:	e0 49 05 54 	cp.w	r9,1364
8002169c:	e0 88 00 04 	brls	800216a4 <_free_r+0x144>
800216a0:	37 eb       	mov	r11,126
800216a2:	c0 28       	rjmp	800216a6 <_free_r+0x146>
800216a4:	28 4b       	sub	r11,-124
800216a6:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800216aa:	78 29       	ld.w	r9,r12[0x8]
800216ac:	18 39       	cp.w	r9,r12
800216ae:	c0 e1       	brne	800216ca <_free_r+0x16a>
800216b0:	74 18       	ld.w	r8,r10[0x4]
800216b2:	a3 4b       	asr	r11,0x2
800216b4:	30 1c       	mov	r12,1
800216b6:	f8 0b 09 4b 	lsl	r11,r12,r11
800216ba:	f1 eb 10 0b 	or	r11,r8,r11
800216be:	12 98       	mov	r8,r9
800216c0:	95 1b       	st.w	r10[0x4],r11
800216c2:	c0 a8       	rjmp	800216d6 <_free_r+0x176>
800216c4:	72 29       	ld.w	r9,r9[0x8]
800216c6:	18 39       	cp.w	r9,r12
800216c8:	c0 60       	breq	800216d4 <_free_r+0x174>
800216ca:	72 1a       	ld.w	r10,r9[0x4]
800216cc:	e0 1a ff fc 	andl	r10,0xfffc
800216d0:	14 38       	cp.w	r8,r10
800216d2:	cf 93       	brcs	800216c4 <_free_r+0x164>
800216d4:	72 38       	ld.w	r8,r9[0xc]
800216d6:	8d 38       	st.w	r6[0xc],r8
800216d8:	8d 29       	st.w	r6[0x8],r9
800216da:	93 36       	st.w	r9[0xc],r6
800216dc:	91 26       	st.w	r8[0x8],r6
800216de:	0e 9c       	mov	r12,r7
800216e0:	c2 4e       	rcall	80021328 <__malloc_unlock>
800216e2:	d8 22       	popm	r4-r7,pc

Disassembly of section .exception:

80021800 <_evba>:
80021800:	c0 08       	rjmp	80021800 <_evba>
	...

80021804 <_handle_TLB_Multiple_Hit>:
80021804:	c0 08       	rjmp	80021804 <_handle_TLB_Multiple_Hit>
	...

80021808 <_handle_Bus_Error_Data_Fetch>:
80021808:	c0 08       	rjmp	80021808 <_handle_Bus_Error_Data_Fetch>
	...

8002180c <_handle_Bus_Error_Instruction_Fetch>:
8002180c:	c0 08       	rjmp	8002180c <_handle_Bus_Error_Instruction_Fetch>
	...

80021810 <_handle_NMI>:
80021810:	c0 08       	rjmp	80021810 <_handle_NMI>
	...

80021814 <_handle_Instruction_Address>:
80021814:	c0 08       	rjmp	80021814 <_handle_Instruction_Address>
	...

80021818 <_handle_ITLB_Protection>:
80021818:	c0 08       	rjmp	80021818 <_handle_ITLB_Protection>
	...

8002181c <_handle_Breakpoint>:
8002181c:	c0 08       	rjmp	8002181c <_handle_Breakpoint>
	...

80021820 <_handle_Illegal_Opcode>:
80021820:	c0 08       	rjmp	80021820 <_handle_Illegal_Opcode>
	...

80021824 <_handle_Unimplemented_Instruction>:
80021824:	c0 08       	rjmp	80021824 <_handle_Unimplemented_Instruction>
	...

80021828 <_handle_Privilege_Violation>:
80021828:	c0 08       	rjmp	80021828 <_handle_Privilege_Violation>
	...

8002182c <_handle_Floating_Point>:
8002182c:	c0 08       	rjmp	8002182c <_handle_Floating_Point>
	...

80021830 <_handle_Coprocessor_Absent>:
80021830:	c0 08       	rjmp	80021830 <_handle_Coprocessor_Absent>
	...

80021834 <_handle_Data_Address_Read>:
80021834:	c0 08       	rjmp	80021834 <_handle_Data_Address_Read>
	...

80021838 <_handle_Data_Address_Write>:
80021838:	c0 08       	rjmp	80021838 <_handle_Data_Address_Write>
	...

8002183c <_handle_DTLB_Protection_Read>:
8002183c:	c0 08       	rjmp	8002183c <_handle_DTLB_Protection_Read>
	...

80021840 <_handle_DTLB_Protection_Write>:
80021840:	c0 08       	rjmp	80021840 <_handle_DTLB_Protection_Write>
	...

80021844 <_handle_DTLB_Modified>:
80021844:	c0 08       	rjmp	80021844 <_handle_DTLB_Modified>
	...

80021850 <_handle_ITLB_Miss>:
80021850:	c0 08       	rjmp	80021850 <_handle_ITLB_Miss>
	...

80021860 <_handle_DTLB_Miss_Read>:
80021860:	c0 08       	rjmp	80021860 <_handle_DTLB_Miss_Read>
	...

80021870 <_handle_DTLB_Miss_Write>:
80021870:	c0 08       	rjmp	80021870 <_handle_DTLB_Miss_Write>
	...

80021900 <_handle_Supervisor_Call>:
80021900:	c0 08       	rjmp	80021900 <_handle_Supervisor_Call>
80021902:	d7 03       	nop

80021904 <_int0>:
80021904:	30 0c       	mov	r12,0
80021906:	fe b0 88 03 	rcall	8001290c <_get_interrupt_handler>
8002190a:	58 0c       	cp.w	r12,0
8002190c:	f8 0f 17 10 	movne	pc,r12
80021910:	d6 03       	rete

80021912 <_int1>:
80021912:	30 1c       	mov	r12,1
80021914:	fe b0 87 fc 	rcall	8001290c <_get_interrupt_handler>
80021918:	58 0c       	cp.w	r12,0
8002191a:	f8 0f 17 10 	movne	pc,r12
8002191e:	d6 03       	rete

80021920 <_int2>:
80021920:	30 2c       	mov	r12,2
80021922:	fe b0 87 f5 	rcall	8001290c <_get_interrupt_handler>
80021926:	58 0c       	cp.w	r12,0
80021928:	f8 0f 17 10 	movne	pc,r12
8002192c:	d6 03       	rete

8002192e <_int3>:
8002192e:	30 3c       	mov	r12,3
80021930:	fe b0 87 ee 	rcall	8001290c <_get_interrupt_handler>
80021934:	58 0c       	cp.w	r12,0
80021936:	f8 0f 17 10 	movne	pc,r12
8002193a:	d6 03       	rete
8002193c:	d7 03       	nop
8002193e:	d7 03       	nop
80021940:	d7 03       	nop
80021942:	d7 03       	nop
80021944:	d7 03       	nop
80021946:	d7 03       	nop
80021948:	d7 03       	nop
8002194a:	d7 03       	nop
8002194c:	d7 03       	nop
8002194e:	d7 03       	nop
80021950:	d7 03       	nop
80021952:	d7 03       	nop
80021954:	d7 03       	nop
80021956:	d7 03       	nop
80021958:	d7 03       	nop
8002195a:	d7 03       	nop
8002195c:	d7 03       	nop
8002195e:	d7 03       	nop
80021960:	d7 03       	nop
80021962:	d7 03       	nop
80021964:	d7 03       	nop
80021966:	d7 03       	nop
80021968:	d7 03       	nop
8002196a:	d7 03       	nop
8002196c:	d7 03       	nop
8002196e:	d7 03       	nop
80021970:	d7 03       	nop
80021972:	d7 03       	nop
80021974:	d7 03       	nop
80021976:	d7 03       	nop
80021978:	d7 03       	nop
8002197a:	d7 03       	nop
8002197c:	d7 03       	nop
8002197e:	d7 03       	nop
80021980:	d7 03       	nop
80021982:	d7 03       	nop
80021984:	d7 03       	nop
80021986:	d7 03       	nop
80021988:	d7 03       	nop
8002198a:	d7 03       	nop
8002198c:	d7 03       	nop
8002198e:	d7 03       	nop
80021990:	d7 03       	nop
80021992:	d7 03       	nop
80021994:	d7 03       	nop
80021996:	d7 03       	nop
80021998:	d7 03       	nop
8002199a:	d7 03       	nop
8002199c:	d7 03       	nop
8002199e:	d7 03       	nop
800219a0:	d7 03       	nop
800219a2:	d7 03       	nop
800219a4:	d7 03       	nop
800219a6:	d7 03       	nop
800219a8:	d7 03       	nop
800219aa:	d7 03       	nop
800219ac:	d7 03       	nop
800219ae:	d7 03       	nop
800219b0:	d7 03       	nop
800219b2:	d7 03       	nop
800219b4:	d7 03       	nop
800219b6:	d7 03       	nop
800219b8:	d7 03       	nop
800219ba:	d7 03       	nop
800219bc:	d7 03       	nop
800219be:	d7 03       	nop
800219c0:	d7 03       	nop
800219c2:	d7 03       	nop
800219c4:	d7 03       	nop
800219c6:	d7 03       	nop
800219c8:	d7 03       	nop
800219ca:	d7 03       	nop
800219cc:	d7 03       	nop
800219ce:	d7 03       	nop
800219d0:	d7 03       	nop
800219d2:	d7 03       	nop
800219d4:	d7 03       	nop
800219d6:	d7 03       	nop
800219d8:	d7 03       	nop
800219da:	d7 03       	nop
800219dc:	d7 03       	nop
800219de:	d7 03       	nop
800219e0:	d7 03       	nop
800219e2:	d7 03       	nop
800219e4:	d7 03       	nop
800219e6:	d7 03       	nop
800219e8:	d7 03       	nop
800219ea:	d7 03       	nop
800219ec:	d7 03       	nop
800219ee:	d7 03       	nop
800219f0:	d7 03       	nop
800219f2:	d7 03       	nop
800219f4:	d7 03       	nop
800219f6:	d7 03       	nop
800219f8:	d7 03       	nop
800219fa:	d7 03       	nop
800219fc:	d7 03       	nop
800219fe:	d7 03       	nop
